

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Nov 01 19:10:16 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	_system_settings_text,global,class=CODE,delta=2
     5                           	psect	_TxStatus_text,global,class=CODE,delta=2
     6                           	psect	_Type_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16LF1503 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000E                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0095                     	;# 
    94  0096                     	;# 
    95  0097                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009B                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010E                     	;# 
   106  0111                     	;# 
   107  0112                     	;# 
   108  0113                     	;# 
   109  0114                     	;# 
   110  0115                     	;# 
   111  0116                     	;# 
   112  0117                     	;# 
   113  0118                     	;# 
   114  0119                     	;# 
   115  011D                     	;# 
   116  018C                     	;# 
   117  018E                     	;# 
   118  0191                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  0193                     	;# 
   122  0193                     	;# 
   123  0194                     	;# 
   124  0195                     	;# 
   125  0196                     	;# 
   126  020C                     	;# 
   127  0211                     	;# 
   128  0211                     	;# 
   129  0212                     	;# 
   130  0212                     	;# 
   131  0213                     	;# 
   132  0213                     	;# 
   133  0214                     	;# 
   134  0214                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0216                     	;# 
   139  0216                     	;# 
   140  0217                     	;# 
   141  0217                     	;# 
   142  0391                     	;# 
   143  0392                     	;# 
   144  0393                     	;# 
   145  0498                     	;# 
   146  0498                     	;# 
   147  0499                     	;# 
   148  049A                     	;# 
   149  049B                     	;# 
   150  049B                     	;# 
   151  049C                     	;# 
   152  049D                     	;# 
   153  049E                     	;# 
   154  049F                     	;# 
   155  0611                     	;# 
   156  0612                     	;# 
   157  0613                     	;# 
   158  0613                     	;# 
   159  0614                     	;# 
   160  0615                     	;# 
   161  0616                     	;# 
   162  0616                     	;# 
   163  0617                     	;# 
   164  0618                     	;# 
   165  0619                     	;# 
   166  0619                     	;# 
   167  061A                     	;# 
   168  061B                     	;# 
   169  061C                     	;# 
   170  061C                     	;# 
   171  0691                     	;# 
   172  0692                     	;# 
   173  0693                     	;# 
   174  0694                     	;# 
   175  0695                     	;# 
   176  0F0F                     	;# 
   177  0F10                     	;# 
   178  0F11                     	;# 
   179  0F12                     	;# 
   180  0F13                     	;# 
   181  0F14                     	;# 
   182  0F15                     	;# 
   183  0F16                     	;# 
   184  0F17                     	;# 
   185  0F18                     	;# 
   186  0F19                     	;# 
   187  0F1A                     	;# 
   188  0F1B                     	;# 
   189  0F1C                     	;# 
   190  0F1D                     	;# 
   191  0F1E                     	;# 
   192  0F1F                     	;# 
   193  0FE3                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  0006                     	;# 
   212  0007                     	;# 
   213  0008                     	;# 
   214  0009                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000E                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018E                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0194                     	;# 
   267  0195                     	;# 
   268  0196                     	;# 
   269  020C                     	;# 
   270  0211                     	;# 
   271  0211                     	;# 
   272  0212                     	;# 
   273  0212                     	;# 
   274  0213                     	;# 
   275  0213                     	;# 
   276  0214                     	;# 
   277  0214                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0216                     	;# 
   282  0216                     	;# 
   283  0217                     	;# 
   284  0217                     	;# 
   285  0391                     	;# 
   286  0392                     	;# 
   287  0393                     	;# 
   288  0498                     	;# 
   289  0498                     	;# 
   290  0499                     	;# 
   291  049A                     	;# 
   292  049B                     	;# 
   293  049B                     	;# 
   294  049C                     	;# 
   295  049D                     	;# 
   296  049E                     	;# 
   297  049F                     	;# 
   298  0611                     	;# 
   299  0612                     	;# 
   300  0613                     	;# 
   301  0613                     	;# 
   302  0614                     	;# 
   303  0615                     	;# 
   304  0616                     	;# 
   305  0616                     	;# 
   306  0617                     	;# 
   307  0618                     	;# 
   308  0619                     	;# 
   309  0619                     	;# 
   310  061A                     	;# 
   311  061B                     	;# 
   312  061C                     	;# 
   313  061C                     	;# 
   314  0691                     	;# 
   315  0692                     	;# 
   316  0693                     	;# 
   317  0694                     	;# 
   318  0695                     	;# 
   319  0F0F                     	;# 
   320  0F10                     	;# 
   321  0F11                     	;# 
   322  0F12                     	;# 
   323  0F13                     	;# 
   324  0F14                     	;# 
   325  0F15                     	;# 
   326  0F16                     	;# 
   327  0F17                     	;# 
   328  0F18                     	;# 
   329  0F19                     	;# 
   330  0F1A                     	;# 
   331  0F1B                     	;# 
   332  0F1C                     	;# 
   333  0F1D                     	;# 
   334  0F1E                     	;# 
   335  0F1F                     	;# 
   336  0FE3                     	;# 
   337  0FE4                     	;# 
   338  0FE5                     	;# 
   339  0FE6                     	;# 
   340  0FE7                     	;# 
   341  0FE8                     	;# 
   342  0FE9                     	;# 
   343  0FEA                     	;# 
   344  0FEB                     	;# 
   345  0FED                     	;# 
   346  0FEE                     	;# 
   347  0FEF                     	;# 
   348  0000                     	;# 
   349  0001                     	;# 
   350  0002                     	;# 
   351  0003                     	;# 
   352  0004                     	;# 
   353  0005                     	;# 
   354  0006                     	;# 
   355  0007                     	;# 
   356  0008                     	;# 
   357  0009                     	;# 
   358  000A                     	;# 
   359  000B                     	;# 
   360  000C                     	;# 
   361  000E                     	;# 
   362  0011                     	;# 
   363  0012                     	;# 
   364  0013                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  008C                     	;# 
   375  008E                     	;# 
   376  0091                     	;# 
   377  0092                     	;# 
   378  0093                     	;# 
   379  0095                     	;# 
   380  0096                     	;# 
   381  0097                     	;# 
   382  0099                     	;# 
   383  009A                     	;# 
   384  009B                     	;# 
   385  009B                     	;# 
   386  009C                     	;# 
   387  009D                     	;# 
   388  009E                     	;# 
   389  009F                     	;# 
   390  010C                     	;# 
   391  010E                     	;# 
   392  0111                     	;# 
   393  0112                     	;# 
   394  0113                     	;# 
   395  0114                     	;# 
   396  0115                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  0118                     	;# 
   400  0119                     	;# 
   401  011D                     	;# 
   402  018C                     	;# 
   403  018E                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  020C                     	;# 
   413  0211                     	;# 
   414  0211                     	;# 
   415  0212                     	;# 
   416  0212                     	;# 
   417  0213                     	;# 
   418  0213                     	;# 
   419  0214                     	;# 
   420  0214                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0216                     	;# 
   426  0217                     	;# 
   427  0217                     	;# 
   428  0391                     	;# 
   429  0392                     	;# 
   430  0393                     	;# 
   431  0498                     	;# 
   432  0498                     	;# 
   433  0499                     	;# 
   434  049A                     	;# 
   435  049B                     	;# 
   436  049B                     	;# 
   437  049C                     	;# 
   438  049D                     	;# 
   439  049E                     	;# 
   440  049F                     	;# 
   441  0611                     	;# 
   442  0612                     	;# 
   443  0613                     	;# 
   444  0613                     	;# 
   445  0614                     	;# 
   446  0615                     	;# 
   447  0616                     	;# 
   448  0616                     	;# 
   449  0617                     	;# 
   450  0618                     	;# 
   451  0619                     	;# 
   452  0619                     	;# 
   453  061A                     	;# 
   454  061B                     	;# 
   455  061C                     	;# 
   456  061C                     	;# 
   457  0691                     	;# 
   458  0692                     	;# 
   459  0693                     	;# 
   460  0694                     	;# 
   461  0695                     	;# 
   462  0F0F                     	;# 
   463  0F10                     	;# 
   464  0F11                     	;# 
   465  0F12                     	;# 
   466  0F13                     	;# 
   467  0F14                     	;# 
   468  0F15                     	;# 
   469  0F16                     	;# 
   470  0F17                     	;# 
   471  0F18                     	;# 
   472  0F19                     	;# 
   473  0F1A                     	;# 
   474  0F1B                     	;# 
   475  0F1C                     	;# 
   476  0F1D                     	;# 
   477  0F1E                     	;# 
   478  0F1F                     	;# 
   479  0FE3                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0008                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000E                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0013                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  008C                     	;# 
   518  008E                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0093                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  009F                     	;# 
   533  010C                     	;# 
   534  010E                     	;# 
   535  0111                     	;# 
   536  0112                     	;# 
   537  0113                     	;# 
   538  0114                     	;# 
   539  0115                     	;# 
   540  0116                     	;# 
   541  0117                     	;# 
   542  0118                     	;# 
   543  0119                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018E                     	;# 
   547  0191                     	;# 
   548  0191                     	;# 
   549  0192                     	;# 
   550  0193                     	;# 
   551  0193                     	;# 
   552  0194                     	;# 
   553  0195                     	;# 
   554  0196                     	;# 
   555  020C                     	;# 
   556  0211                     	;# 
   557  0211                     	;# 
   558  0212                     	;# 
   559  0212                     	;# 
   560  0213                     	;# 
   561  0213                     	;# 
   562  0214                     	;# 
   563  0214                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0216                     	;# 
   568  0216                     	;# 
   569  0217                     	;# 
   570  0217                     	;# 
   571  0391                     	;# 
   572  0392                     	;# 
   573  0393                     	;# 
   574  0498                     	;# 
   575  0498                     	;# 
   576  0499                     	;# 
   577  049A                     	;# 
   578  049B                     	;# 
   579  049B                     	;# 
   580  049C                     	;# 
   581  049D                     	;# 
   582  049E                     	;# 
   583  049F                     	;# 
   584  0611                     	;# 
   585  0612                     	;# 
   586  0613                     	;# 
   587  0613                     	;# 
   588  0614                     	;# 
   589  0615                     	;# 
   590  0616                     	;# 
   591  0616                     	;# 
   592  0617                     	;# 
   593  0618                     	;# 
   594  0619                     	;# 
   595  0619                     	;# 
   596  061A                     	;# 
   597  061B                     	;# 
   598  061C                     	;# 
   599  061C                     	;# 
   600  0691                     	;# 
   601  0692                     	;# 
   602  0693                     	;# 
   603  0694                     	;# 
   604  0695                     	;# 
   605  0F0F                     	;# 
   606  0F10                     	;# 
   607  0F11                     	;# 
   608  0F12                     	;# 
   609  0F13                     	;# 
   610  0F14                     	;# 
   611  0F15                     	;# 
   612  0F16                     	;# 
   613  0F17                     	;# 
   614  0F18                     	;# 
   615  0F19                     	;# 
   616  0F1A                     	;# 
   617  0F1B                     	;# 
   618  0F1C                     	;# 
   619  0F1D                     	;# 
   620  0F1E                     	;# 
   621  0F1F                     	;# 
   622  0FE3                     	;# 
   623  0FE4                     	;# 
   624  0FE5                     	;# 
   625  0FE6                     	;# 
   626  0FE7                     	;# 
   627  0FE8                     	;# 
   628  0FE9                     	;# 
   629  0FEA                     	;# 
   630  0FEB                     	;# 
   631  0FED                     	;# 
   632  0FEE                     	;# 
   633  0FEF                     	;# 
   634  0000                     	;# 
   635  0001                     	;# 
   636  0002                     	;# 
   637  0003                     	;# 
   638  0004                     	;# 
   639  0005                     	;# 
   640  0006                     	;# 
   641  0007                     	;# 
   642  0008                     	;# 
   643  0009                     	;# 
   644  000A                     	;# 
   645  000B                     	;# 
   646  000C                     	;# 
   647  000E                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0015                     	;# 
   652  0016                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001C                     	;# 
   660  008C                     	;# 
   661  008E                     	;# 
   662  0091                     	;# 
   663  0092                     	;# 
   664  0093                     	;# 
   665  0095                     	;# 
   666  0096                     	;# 
   667  0097                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  010C                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011D                     	;# 
   688  018C                     	;# 
   689  018E                     	;# 
   690  0191                     	;# 
   691  0191                     	;# 
   692  0192                     	;# 
   693  0193                     	;# 
   694  0193                     	;# 
   695  0194                     	;# 
   696  0195                     	;# 
   697  0196                     	;# 
   698  020C                     	;# 
   699  0211                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0212                     	;# 
   703  0213                     	;# 
   704  0213                     	;# 
   705  0214                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  0391                     	;# 
   715  0392                     	;# 
   716  0393                     	;# 
   717  0498                     	;# 
   718  0498                     	;# 
   719  0499                     	;# 
   720  049A                     	;# 
   721  049B                     	;# 
   722  049B                     	;# 
   723  049C                     	;# 
   724  049D                     	;# 
   725  049E                     	;# 
   726  049F                     	;# 
   727  0611                     	;# 
   728  0612                     	;# 
   729  0613                     	;# 
   730  0613                     	;# 
   731  0614                     	;# 
   732  0615                     	;# 
   733  0616                     	;# 
   734  0616                     	;# 
   735  0617                     	;# 
   736  0618                     	;# 
   737  0619                     	;# 
   738  0619                     	;# 
   739  061A                     	;# 
   740  061B                     	;# 
   741  061C                     	;# 
   742  061C                     	;# 
   743  0691                     	;# 
   744  0692                     	;# 
   745  0693                     	;# 
   746  0694                     	;# 
   747  0695                     	;# 
   748  0F0F                     	;# 
   749  0F10                     	;# 
   750  0F11                     	;# 
   751  0F12                     	;# 
   752  0F13                     	;# 
   753  0F14                     	;# 
   754  0F15                     	;# 
   755  0F16                     	;# 
   756  0F17                     	;# 
   757  0F18                     	;# 
   758  0F19                     	;# 
   759  0F1A                     	;# 
   760  0F1B                     	;# 
   761  0F1C                     	;# 
   762  0F1D                     	;# 
   763  0F1E                     	;# 
   764  0F1F                     	;# 
   765  0FE3                     	;# 
   766  0FE4                     	;# 
   767  0FE5                     	;# 
   768  0FE6                     	;# 
   769  0FE7                     	;# 
   770  0FE8                     	;# 
   771  0FE9                     	;# 
   772  0FEA                     	;# 
   773  0FEB                     	;# 
   774  0FED                     	;# 
   775  0FEE                     	;# 
   776  0FEF                     	;# 
   777  07EE                     _system_settings_absaddr	set	2030
   778  07D0                     _TxStatus_absaddr	set	2000
   779  07C0                     _Type_absaddr	set	1984
   780  07EE                     _system_settings_absaddr	set	2030
   781                           
   782                           	psect	_system_settings_text
   783  07EE                     __p_system_settings_text:	
   784  07EE                     _system_settings:	
   785  07EE  3443               	retlw	67
   786  07EF  3404               	retlw	4
   787  07F0  345F               	retlw	95
   788  07F1  3441               	retlw	65
   789  07F2  341F               	retlw	31
   790  07F3  34FB               	retlw	251
   791  07F4  345F               	retlw	95
   792  07F5  3441               	retlw	65
   793  07F6  3478               	retlw	120
   794  07F7  3456               	retlw	86
   795  07F8  3434               	retlw	52
   796  07F9  3412               	retlw	18
   797  07FA  345F               	retlw	95
   798  07FB  3442               	retlw	66
   799  07FC  3410               	retlw	16
   800  07FD  3400               	retlw	0
   801  07FE  345F               	retlw	95
   802  07FF                     __end_of_system_settings:	
   803  07D0                     _TxStatus_absaddr	set	2000
   804                           
   805                           	psect	_TxStatus_text
   806  07D0                     __p_TxStatus_text:	
   807  07D0                     _TxStatus:	
   808  07D0  34FF               	retlw	255
   809  07D1  34FF               	retlw	255
   810  07D2  34FF               	retlw	255
   811  07D3  34FF               	retlw	255
   812  07D4  34FF               	retlw	255
   813  07D5  34FF               	retlw	255
   814  07D6  34FF               	retlw	255
   815  07D7  34FF               	retlw	255
   816  07D8  34FF               	retlw	255
   817  07D9  34FF               	retlw	255
   818  07DA  34FF               	retlw	255
   819  07DB  34FF               	retlw	255
   820  07DC  34FF               	retlw	255
   821  07DD  34FF               	retlw	255
   822  07DE  34FF               	retlw	255
   823  07DF  34FF               	retlw	255
   824  07E0                     __end_of_TxStatus:	
   825  07C0                     _Type_absaddr	set	1984
   826                           
   827                           	psect	_Type_text
   828  07C0                     __p_Type_text:	
   829  07C0                     _Type:	
   830  07C0  34FF               	retlw	255
   831  07C1  34FF               	retlw	255
   832  07C2  34FF               	retlw	255
   833  07C3  34FF               	retlw	255
   834  07C4  34FF               	retlw	255
   835  07C5  34FF               	retlw	255
   836  07C6  34FF               	retlw	255
   837  07C7  34FF               	retlw	255
   838  07C8  34FF               	retlw	255
   839  07C9  34FF               	retlw	255
   840  07CA  34FF               	retlw	255
   841  07CB  34FF               	retlw	255
   842  07CC  34FF               	retlw	255
   843  07CD  34FF               	retlw	255
   844  07CE  34FF               	retlw	255
   845  07CF  34FF               	retlw	255
   846  07D0                     __end_of_Type:	
   847  0015                     _TMR0	set	21
   848  000C                     _PORTA	set	12
   849  000B                     _INTCONbits	set	11
   850  005D                     _TMR0IE	set	93
   851  005A                     _TMR0IF	set	90
   852  009D                     _ADCON0bits	set	157
   853  009E                     _ADCON1bits	set	158
   854  008E                     _TRISC	set	142
   855  008C                     _TRISA	set	140
   856  0095                     _OPTION_REGbits	set	149
   857  009A                     _OSCSTATbits	set	154
   858  0099                     _OSCCONbits	set	153
   859  0095                     _OPTION_REG	set	149
   860  0097                     _WDTCONbits	set	151
   861  0117                     _FVRCON	set	279
   862  010E                     _LATC	set	270
   863  010C                     _LATA	set	268
   864  010C                     _LATAbits	set	268
   865  010E                     _LATCbits	set	270
   866  018E                     _ANSELC	set	398
   867  018C                     _ANSELA	set	396
   868  0196                     _PMCON2	set	406
   869  0193                     _PMDATL	set	403
   870  0194                     _PMDATH	set	404
   871  0191                     _PMADRL	set	401
   872  0192                     _PMADRH	set	402
   873  0195                     _PMCON1bits	set	405
   874  020C                     _WPUA	set	524
   875                           
   876                           ; #config settings
   877  0007                     
   878                           	psect	cinit
   879  07E0                     start_initialization:	
   880  07E0                     __initialization:	
   881                           
   882                           ; Clear objects allocated to BANK0
   883  07E0  3020               	movlw	low __pbssBANK0
   884  07E1  0084               	movwf	4
   885  07E2  3000               	movlw	high __pbssBANK0
   886  07E3  0085               	movwf	5
   887  07E4  3024               	movlw	36
   888  07E5  27E8               	fcall	clear_ram0
   889  07E6                     end_of_initialization:	
   890                           ;End of C runtime variable initialization code
   891                           
   892  07E6                     __end_of__initialization:	
   893  07E6  0020               	movlb	0
   894  07E7  2CB6               	ljmp	_main	;jump to C main() function
   895                           
   896                           	psect	bssBANK0
   897  0020                     __pbssBANK0:	
   898  0020                     _startaddress:	
   899  0020                     	ds	4
   900  0024                     _noo_address_type:	
   901  0024                     	ds	1
   902  0025                     _OffDelayTicks_100ms:	
   903  0025                     	ds	1
   904  0026                     _SkipHandling:	
   905  0026                     	ds	1
   906  0027                     _DevMode:	
   907  0027                     	ds	1
   908  0028                     _DevType:	
   909  0028                     	ds	1
   910  0029                     _tick3_100ms:	
   911  0029                     	ds	1
   912  002A                     _LedPulseTick_100ms:	
   913  002A                     	ds	1
   914  002B                     _tx_status:	
   915  002B                     	ds	1
   916  002C                     _Keys:	
   917  002C                     	ds	20
   918  0040                     _noo_send_data:	
   919  0040                     	ds	4
   920                           
   921                           	psect	clrtext
   922  07E8                     clear_ram0:	
   923                           ;	Called with FSR0 containing the base address, and
   924                           ;	WREG with the size to clear
   925                           
   926  07E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   927  07E9                     clrloop0:	
   928  07E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   929  07EA  3101               	addfsr 0,1
   930  07EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   931  07EC  2FE9               	goto	clrloop0	;have we reached the end yet?
   932  07ED  3400               	retlw	0	;all done for this memory range, return
   933                           
   934                           	psect	cstackCOMMON
   935  0070                     __pcstackCOMMON:	
   936  0070                     ?_Init_IO:	
   937  0070                     ??_Init_IO:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_Init_CLK:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ??_Init_CLK:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_Init_ADC:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ??_Init_ADC:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_RF_Init:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ??_RF_Init:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_Init_TypeFromFlash:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_Init_TxStatusFromFlash:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_noolite_send:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_FlashEraseRow:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_FlashWrite:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_main:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_FlashUnlock:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ??_FlashUnlock:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     noolite_send@noo_send_command:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     FlashEraseRow@rowAddr:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     FlashWrite@addr:	
   989                           ; 2 bytes @ 0x0
   990                           
   991  0070                     Init_TypeFromFlash@type:	
   992                           ; 2 bytes @ 0x0
   993                           
   994  0070                     Init_TxStatusFromFlash@txStatus:	
   995                           ; 2 bytes @ 0x0
   996                           
   997                           
   998                           ; 2 bytes @ 0x0
   999  0070                     	ds	1
  1000  0071                     noolite_send@noo_send_format:	
  1001                           
  1002                           ; 1 bytes @ 0x1
  1003  0071                     	ds	1
  1004  0072                     ??_Init_TypeFromFlash:	
  1005  0072                     ??_Init_TxStatusFromFlash:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  0072                     ??_FlashEraseRow:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  0072                     noolite_send@data:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0072                     FlashWrite@flash_data:	
  1015                           ; 1 bytes @ 0x2
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x2
  1019  0072                     	ds	1
  1020  0073                     ??_noolite_send:	
  1021                           
  1022                           ; 1 bytes @ 0x3
  1023  0073                     	ds	1
  1024  0074                     ??_FlashWrite:	
  1025  0074                     ?_SaveTxStatusToFlash:	
  1026                           ; 1 bytes @ 0x4
  1027                           
  1028  0074                     SaveTxStatusToFlash@txStatusArray:	
  1029                           ; 1 bytes @ 0x4
  1030                           
  1031                           
  1032                           ; 2 bytes @ 0x4
  1033  0074                     	ds	2
  1034  0076                     SaveTxStatusToFlash@txStatusAdr:	
  1035                           
  1036                           ; 2 bytes @ 0x6
  1037  0076                     	ds	2
  1038  0078                     Init_TxStatusFromFlash@cellNum:	
  1039  0078                     SaveTxStatusToFlash@txStatusVal:	
  1040                           ; 1 bytes @ 0x8
  1041                           
  1042                           
  1043                           ; 1 bytes @ 0x8
  1044  0078                     	ds	1
  1045  0079                     ??_SaveTxStatusToFlash:	
  1046                           
  1047                           ; 1 bytes @ 0x9
  1048  0079                     	ds	2
  1049  007B                     ?_KeyOffHandler:	
  1050  007B                     ??_KeyLongHandler:	
  1051                           ; 1 bytes @ 0xB
  1052                           
  1053  007B                     KeyOffHandler@chn:	
  1054                           ; 1 bytes @ 0xB
  1055                           
  1056  007B                     KeyLongHandler@key:	
  1057                           ; 1 bytes @ 0xB
  1058                           
  1059                           
  1060                           ; 1 bytes @ 0xB
  1061  007B                     	ds	1
  1062  007C                     KeyOffHandler@cmd:	
  1063                           
  1064                           ; 1 bytes @ 0xC
  1065  007C                     	ds	1
  1066  007D                     KeyOffHandler@nooData:	
  1067                           
  1068                           ; 1 bytes @ 0xD
  1069  007D                     	ds	1
  1070                           
  1071                           	psect	cstackBANK0
  1072  0044                     __pcstackBANK0:	
  1073  0044                     SaveTxStatusToFlash@adrToWrite:	
  1074  0044                     noolite_send@noo_send_buffer:	
  1075                           ; 2 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 12 bytes @ 0x0
  1079  0044                     	ds	2
  1080  0046                     SaveTxStatusToFlash@cellNum:	
  1081                           
  1082                           ; 1 bytes @ 0x2
  1083  0046                     	ds	10
  1084  0050                     noolite_send@startpos:	
  1085                           
  1086                           ; 1 bytes @ 0xC
  1087  0050                     	ds	1
  1088  0051                     noolite_send@countbit:	
  1089                           
  1090                           ; 1 bytes @ 0xD
  1091  0051                     	ds	1
  1092  0052                     noolite_send@chn:	
  1093                           
  1094                           ; 1 bytes @ 0xE
  1095  0052                     	ds	1
  1096  0053                     noolite_send@countsend:	
  1097                           
  1098                           ; 1 bytes @ 0xF
  1099  0053                     	ds	1
  1100  0054                     noolite_send@temp_send:	
  1101                           
  1102                           ; 1 bytes @ 0x10
  1103  0054                     	ds	1
  1104  0055                     noolite_send@endpos:	
  1105                           
  1106                           ; 1 bytes @ 0x11
  1107  0055                     	ds	1
  1108  0056                     ??_KeyOffHandler:	
  1109  0056                     ?_KeyLongHandler:	
  1110                           ; 1 bytes @ 0x12
  1111                           
  1112  0056                     KeyLongHandler@chn:	
  1113                           ; 1 bytes @ 0x12
  1114                           
  1115                           
  1116                           ; 1 bytes @ 0x12
  1117  0056                     	ds	1
  1118  0057                     KeyOffHandler@key:	
  1119  0057                     KeyLongHandler@cmd:	
  1120                           ; 1 bytes @ 0x13
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0x13
  1124  0057                     	ds	1
  1125  0058                     KeyLongHandler@ticksToTrigger:	
  1126                           
  1127                           ; 1 bytes @ 0x14
  1128  0058                     	ds	1
  1129  0059                     KeyLongHandler@nooData:	
  1130                           
  1131                           ; 1 bytes @ 0x15
  1132  0059                     	ds	1
  1133  005A                     ??_main:	
  1134                           
  1135                           ; 1 bytes @ 0x16
  1136  005A                     	ds	2
  1137  005C                     main@chn:	
  1138                           
  1139                           ; 1 bytes @ 0x18
  1140  005C                     	ds	1
  1141  005D                     main@chn_250:	
  1142                           
  1143                           ; 1 bytes @ 0x19
  1144  005D                     	ds	1
  1145  005E                     main@chn_251:	
  1146                           
  1147                           ; 1 bytes @ 0x1A
  1148  005E                     	ds	1
  1149  005F                     main@chn_252:	
  1150                           
  1151                           ; 1 bytes @ 0x1B
  1152  005F                     	ds	1
  1153                           
  1154                           	psect	maintext
  1155  04B6                     __pmaintext:	
  1156 ;;
  1157 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1158 ;;
  1159 ;; *************** function _main *****************
  1160 ;; Defined at:
  1161 ;;		line 128 in file "main.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  chn             1   27[BANK0 ] unsigned char 
  1166 ;;  chn             1   26[BANK0 ] unsigned char 
  1167 ;;  chn             1   25[BANK0 ] unsigned char 
  1168 ;;  chn             1   24[BANK0 ] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : B1F/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1
  1178 ;;      Params:         0       0       0
  1179 ;;      Locals:         0       4       0
  1180 ;;      Temps:          0       2       0
  1181 ;;      Totals:         0       6       0
  1182 ;;Total ram usage:        6 bytes
  1183 ;; Hardware stack levels required when called:    3
  1184 ;; This function calls:
  1185 ;;		_FlashEraseRow
  1186 ;;		_FlashWrite
  1187 ;;		_Init_ADC
  1188 ;;		_Init_CLK
  1189 ;;		_Init_IO
  1190 ;;		_Init_TxStatusFromFlash
  1191 ;;		_Init_TypeFromFlash
  1192 ;;		_KeyLongHandler
  1193 ;;		_KeyOffHandler
  1194 ;;		_RF_Init
  1195 ;;		_SaveTxStatusToFlash
  1196 ;;		_noolite_send
  1197 ;; This function is called by:
  1198 ;;		Startup code after reset
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           
  1203                           ;psect for function _main
  1204  04B6                     _main:	
  1205                           
  1206                           ;main.c: 129: Init_IO();
  1207                           
  1208                           ;incstack = 0
  1209                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1210  04B6  20F4               	fcall	_Init_IO
  1211                           
  1212                           ;main.c: 130: Init_CLK();
  1213  04B7  20DA               	fcall	_Init_CLK
  1214                           
  1215                           ;main.c: 131: Init_ADC();
  1216  04B8  20CE               	fcall	_Init_ADC
  1217                           
  1218                           ;main.c: 132: RF_Init();
  1219  04B9  21F8               	fcall	_RF_Init
  1220                           
  1221                           ;main.c: 134: LATCbits.LATC5 = 1;
  1222  04BA  0022               	movlb	2	; select bank2
  1223  04BB  168E               	bsf	14,5	;volatile
  1224                           
  1225                           ;main.c: 135: DevType = Init_TypeFromFlash(&Type[0]);
  1226  04BC  30C0               	movlw	192
  1227  04BD  00F0               	movwf	Init_TypeFromFlash@type
  1228  04BE  3087               	movlw	135
  1229  04BF  00F1               	movwf	Init_TypeFromFlash@type+1
  1230  04C0  2117               	fcall	_Init_TypeFromFlash
  1231  04C1  0020               	movlb	0	; select bank0
  1232  04C2  00A8               	movwf	_DevType
  1233                           
  1234                           ;main.c: 136: tx_status = Init_TxStatusFromFlash(&TxStatus[0]);
  1235  04C3  30D0               	movlw	208
  1236  04C4  00F0               	movwf	Init_TxStatusFromFlash@txStatus
  1237  04C5  3087               	movlw	135
  1238  04C6  00F1               	movwf	Init_TxStatusFromFlash@txStatus+1
  1239  04C7  2283               	fcall	_Init_TxStatusFromFlash
  1240  04C8  00AB               	movwf	_tx_status
  1241                           
  1242                           ;main.c: 138: INTCONbits.PEIE = 1;
  1243  04C9  170B               	bsf	11,6	;volatile
  1244                           
  1245                           ;main.c: 139: INTCONbits.GIE = 1;
  1246  04CA  178B               	bsf	11,7	;volatile
  1247  04CB                     l1805:	
  1248                           
  1249                           ;main.c: 142: Keys[A].State = (uint8_t) (PORTA & A_Pressed);
  1250  04CB  0020               	movlb	0	; select bank0
  1251  04CC  080C               	movf	12,w	;volatile
  1252  04CD  00AC               	movwf	_Keys
  1253  04CE  3002               	movlw	2
  1254  04CF  05AC               	andwf	_Keys,f
  1255                           
  1256                           ;main.c: 143: Keys[B].State = (uint8_t) (PORTA & B_Pressed);
  1257  04D0  080C               	movf	12,w	;volatile
  1258  04D1  00B0               	movwf	_Keys+4
  1259  04D2  3001               	movlw	1
  1260  04D3  05B0               	andwf	_Keys+4,f
  1261                           
  1262                           ;main.c: 144: Keys[C].State = (uint8_t) (PORTA & C_Pressed);
  1263  04D4  080C               	movf	12,w	;volatile
  1264  04D5  00B4               	movwf	_Keys+8
  1265  04D6  3004               	movlw	4
  1266  04D7  05B4               	andwf	_Keys+8,f
  1267                           
  1268                           ;main.c: 145: Keys[D].State = (uint8_t) (PORTA & D_Pressed);
  1269  04D8  080C               	movf	12,w	;volatile
  1270  04D9  00B8               	movwf	_Keys+12
  1271  04DA  3010               	movlw	16
  1272  04DB  05B8               	andwf	_Keys+12,f
  1273                           
  1274                           ;main.c: 146: Keys[CD].State = (uint8_t) (PORTA & (C_Pressed | D_Pressed));
  1275  04DC  080C               	movf	12,w	;volatile
  1276  04DD  00BC               	movwf	_Keys+16
  1277  04DE  3014               	movlw	20
  1278  04DF  05BC               	andwf	_Keys+16,f
  1279                           
  1280                           ;main.c: 147: if (Keys[CD].State == (C_Pressed | D_Pressed)) {
  1281  04E0  063C               	xorwf	_Keys+16,w
  1282  04E1  1D03               	btfss	3,2
  1283  04E2  2D0B               	goto	l1861
  1284                           
  1285                           ;main.c: 148: SkipHandling = 5;
  1286  04E3  3005               	movlw	5
  1287  04E4  00A6               	movwf	_SkipHandling
  1288                           
  1289                           ;main.c: 149: if (Keys[CD].Tick100ms < 50) {
  1290  04E5  3032               	movlw	50
  1291  04E6  023E               	subwf	_Keys+18,w
  1292  04E7  1803               	skipnc
  1293  04E8  2CED               	goto	l1835
  1294                           
  1295                           ;main.c: 150: DevMode &= ~(UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1296  04E9  30F9               	movlw	249
  1297  04EA  05A7               	andwf	_DevMode,f
  1298                           
  1299                           ;main.c: 151: DevMode |= BIND_ACTIVE;
  1300  04EB  1427               	bsf	_DevMode,0
  1301                           
  1302                           ;main.c: 153: } else if ((Keys[CD].Tick100ms >= 50) && (Keys[CD].Tick100ms < 100)) {
  1303  04EC  2D05               	goto	l1833
  1304  04ED                     l1835:	
  1305  04ED  3032               	movlw	50
  1306  04EE  023E               	subwf	_Keys+18,w
  1307  04EF  3064               	movlw	100
  1308  04F0  1C03               	skipc
  1309  04F1  2CFF               	goto	L1
  1310  04F2  023E               	subwf	_Keys+18,w
  1311  04F3  1803               	skipnc
  1312  04F4  2CFE               	goto	l1849
  1313                           
  1314                           ;main.c: 154: if ((DevMode & UNBIND_ACTIVE) == 0) {
  1315  04F5  18A7               	btfsc	_DevMode,1
  1316  04F6  2CF9               	goto	l1843
  1317                           
  1318                           ;main.c: 155: LATCbits.LATC3 = OFF;
  1319  04F7  0022               	movlb	2	; select bank2
  1320  04F8  118E               	bcf	14,3	;volatile
  1321  04F9                     l1843:	
  1322                           
  1323                           ;main.c: 156: }
  1324                           ;main.c: 157: DevMode &= ~(BIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1325  04F9  30FA               	movlw	250
  1326  04FA  0020               	movlb	0	; select bank0
  1327  04FB  05A7               	andwf	_DevMode,f
  1328                           
  1329                           ;main.c: 158: DevMode |= UNBIND_ACTIVE;
  1330  04FC  14A7               	bsf	_DevMode,1
  1331  04FD  2D05               	goto	l1833
  1332  04FE                     l1849:	
  1333  04FE  3064               	movlw	100
  1334  04FF                     L1:	
  1335  04FF  023E               	subwf	_Keys+18,w
  1336  0500  1C03               	skipc
  1337  0501  2D07               	goto	l68
  1338                           
  1339                           ;main.c: 161: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE);
  1340  0502  30FC               	movlw	252
  1341  0503  05A7               	andwf	_DevMode,f
  1342                           
  1343                           ;main.c: 162: DevMode |= MODE_CHANGE_ACTIVE;
  1344  0504  1527               	bsf	_DevMode,2
  1345  0505                     l1833:	
  1346                           
  1347                           ;main.c: 152: tick3_100ms = 100;
  1348  0505  3064               	movlw	100
  1349  0506  00A9               	movwf	_tick3_100ms
  1350  0507                     l68:	
  1351                           
  1352                           ;main.c: 164: }
  1353                           ;main.c: 165: Keys[CD].Tick100ms++;
  1354  0507  0ABE               	incf	_Keys+18,f
  1355                           
  1356                           ;main.c: 167: Keys[C].StateTemp = 0;
  1357  0508  01B5               	clrf	_Keys+9
  1358                           
  1359                           ;main.c: 168: Keys[D].StateTemp = 0;
  1360  0509  01B9               	clrf	_Keys+13
  1361                           
  1362                           ;main.c: 169: } else {
  1363  050A  2D0C               	goto	l1863
  1364  050B                     l1861:	
  1365                           
  1366                           ;main.c: 170: Keys[CD].Tick100ms = 0;
  1367  050B  01BE               	clrf	_Keys+18
  1368  050C                     l1863:	
  1369                           
  1370                           ;main.c: 171: }
  1371                           ;main.c: 173: if (tick3_100ms != 0) {
  1372  050C  0829               	movf	_tick3_100ms,w
  1373  050D  1903               	btfsc	3,2
  1374  050E  2D3B               	goto	l1883
  1375                           
  1376                           ;main.c: 174: tick3_100ms--;
  1377  050F  03A9               	decf	_tick3_100ms,f
  1378                           
  1379                           ;main.c: 175: switch (DevMode & 0x07) {
  1380  0510  2D27               	goto	l1881
  1381  0511                     l76:	
  1382                           ;main.c: 176: case BIND_ACTIVE:
  1383                           
  1384                           
  1385                           ;main.c: 177: LATCbits.LATC3 = ON;
  1386  0511  0022               	movlb	2	; select bank2
  1387  0512  158E               	bsf	14,3	;volatile
  1388                           
  1389                           ;main.c: 178: break;
  1390  0513  2D3F               	goto	l83
  1391  0514                     l1867:	
  1392                           
  1393                           ;main.c: 180: if (LedPulseTick_100ms++ > 2) {
  1394  0514  082A               	movf	_LedPulseTick_100ms,w
  1395  0515  0AAA               	incf	_LedPulseTick_100ms,f
  1396  0516  00DA               	movwf	??_main
  1397  0517  3003               	movlw	3
  1398  0518  025A               	subwf	??_main,w
  1399  0519  1C03               	skipc
  1400  051A  2D3F               	goto	l83
  1401  051B                     l1869:	
  1402                           
  1403                           ;main.c: 181: LATCbits.LATC3 = ~LATCbits.LATC3;
  1404  051B  3008               	movlw	8
  1405  051C  0022               	movlb	2	; select bank2
  1406  051D  068E               	xorwf	14,f	;volatile
  1407                           
  1408                           ;main.c: 182: LedPulseTick_100ms = 0;
  1409  051E  0020               	movlb	0	; select bank0
  1410  051F  01AA               	clrf	_LedPulseTick_100ms
  1411  0520  2D3F               	goto	l83
  1412  0521                     l1873:	
  1413                           
  1414                           ;main.c: 186: if (LedPulseTick_100ms++ > 0) {
  1415  0521  0AAA               	incf	_LedPulseTick_100ms,f
  1416  0522  032A               	decf	_LedPulseTick_100ms,w
  1417  0523  1903               	btfsc	3,2
  1418  0524  2D3F               	goto	l83
  1419  0525  2D1B               	goto	l1869
  1420  0526                     l82:	
  1421                           ;main.c: 191: default:
  1422                           
  1423                           ;main.c: 187: LATCbits.LATC3 = ~LATCbits.LATC3;
  1424                           
  1425  0526  2D3D               	goto	l1885
  1426  0527                     l1881:	
  1427                           ;main.c: 193: break;
  1428                           
  1429                           ;main.c: 192: LATCbits.LATC3 = OFF;
  1430                           
  1431  0527  0827               	movf	_DevMode,w
  1432  0528  3907               	andlw	7
  1433  0529  00DA               	movwf	??_main
  1434  052A  01DB               	clrf	??_main+1
  1435                           
  1436                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1437                           ; Switch size 1, requested type "space"
  1438                           ; Number of cases is 1, Range of values is 0 to 0
  1439                           ; switch strategies available:
  1440                           ; Name         Instructions Cycles
  1441                           ; simple_byte            4     3 (average)
  1442                           ; direct_byte            8     6 (fixed)
  1443                           ; jumptable            260     6 (fixed)
  1444                           ;	Chosen strategy is simple_byte
  1445  052B  085B               	movf	??_main+1,w
  1446  052C  3A00               	xorlw	0	; case 0
  1447  052D  1903               	skipnz
  1448  052E  2D30               	goto	l2123
  1449  052F  2D26               	goto	l82
  1450  0530                     l2123:	
  1451                           
  1452                           ; Switch size 1, requested type "space"
  1453                           ; Number of cases is 3, Range of values is 1 to 4
  1454                           ; switch strategies available:
  1455                           ; Name         Instructions Cycles
  1456                           ; simple_byte           10     6 (average)
  1457                           ; direct_byte           17     9 (fixed)
  1458                           ; jumptable            263     9 (fixed)
  1459                           ;	Chosen strategy is simple_byte
  1460  0530  085A               	movf	??_main,w
  1461  0531  3A01               	xorlw	1	; case 1
  1462  0532  1903               	skipnz
  1463  0533  2D11               	goto	l76
  1464  0534  3A03               	xorlw	3	; case 2
  1465  0535  1903               	skipnz
  1466  0536  2D14               	goto	l1867
  1467  0537  3A06               	xorlw	6	; case 4
  1468  0538  1903               	skipnz
  1469  0539  2D21               	goto	l1873
  1470  053A  2D26               	goto	l82
  1471  053B                     l1883:	
  1472                           
  1473                           ;main.c: 196: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1474  053B  30F8               	movlw	248
  1475  053C  05A7               	andwf	_DevMode,f
  1476  053D                     l1885:	
  1477                           
  1478                           ;main.c: 197: LATCbits.LATC3 = OFF;
  1479  053D  0022               	movlb	2	; select bank2
  1480  053E  118E               	bcf	14,3	;volatile
  1481  053F                     l83:	
  1482                           
  1483                           ;main.c: 198: }
  1484                           ;main.c: 199: if (SkipHandling != 0) {
  1485  053F  0020               	movlb	0	; select bank0
  1486  0540  0826               	movf	_SkipHandling,w
  1487  0541  1903               	btfsc	3,2
  1488  0542  2D48               	goto	l84
  1489                           
  1490                           ;main.c: 200: if (Keys[CD].State == 0) {
  1491  0543  083C               	movf	_Keys+16,w
  1492  0544  1D03               	btfss	3,2
  1493  0545  2F83               	goto	l2047
  1494                           
  1495                           ;main.c: 201: SkipHandling--;
  1496  0546  03A6               	decf	_SkipHandling,f
  1497  0547  2F83               	goto	l2047
  1498  0548                     l84:	
  1499                           
  1500                           ;main.c: 204: if ((DevMode & BIND_ACTIVE) != 0) {
  1501  0548  1C27               	btfss	_DevMode,0
  1502  0549  2D80               	goto	l87
  1503                           
  1504                           ;main.c: 205: for (uint8_t chn = 0; chn < 4; chn++) {
  1505  054A  01DC               	clrf	main@chn
  1506  054B                     l1897:	
  1507                           
  1508                           ;main.c: 206: if (Keys[chn].State != Keys[chn].StateTemp) {
  1509  054B  085C               	movf	main@chn,w
  1510  054C  0709               	addwf	9,w
  1511  054D  0709               	addwf	9,w
  1512  054E  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1513  054F  0086               	movwf	6
  1514  0550  0187               	clrf	7
  1515  0551  085C               	movf	main@chn,w
  1516  0552  0709               	addwf	9,w
  1517  0553  0709               	addwf	9,w
  1518  0554  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1519  0555  0084               	movwf	4
  1520  0556  0185               	clrf	5
  1521  0557  0800               	movf	0,w
  1522  0558  0601               	xorwf	1,w
  1523  0559  1903               	skipnz
  1524  055A  2D7A               	goto	l1907
  1525                           
  1526                           ;main.c: 207: if (Keys[chn].State == 0) {
  1527  055B  085C               	movf	main@chn,w
  1528  055C  0709               	addwf	9,w
  1529  055D  0709               	addwf	9,w
  1530  055E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1531  055F  0086               	movwf	6
  1532  0560  0801               	movf	1,w
  1533  0561  1D03               	btfss	3,2
  1534  0562  2D6C               	goto	l1905
  1535                           
  1536                           ;main.c: 208: noolite_send(chn, CMD_Bind, 0, &noo_send_data[0]);
  1537  0563  300F               	movlw	15
  1538  0564  00F0               	movwf	noolite_send@noo_send_command
  1539  0565  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1540  0566  01F1               	clrf	noolite_send@noo_send_format
  1541  0567  00F2               	movwf	noolite_send@data
  1542  0568  085C               	movf	main@chn,w
  1543  0569  231C               	fcall	_noolite_send
  1544                           
  1545                           ;main.c: 209: DevMode &= ~BIND_ACTIVE;
  1546  056A  0020               	movlb	0	; select bank0
  1547  056B  1027               	bcf	_DevMode,0
  1548  056C                     l1905:	
  1549                           
  1550                           ;main.c: 210: }
  1551                           ;main.c: 211: Keys[chn].StateTemp = Keys[chn].State;
  1552  056C  085C               	movf	main@chn,w
  1553  056D  0709               	addwf	9,w
  1554  056E  0709               	addwf	9,w
  1555  056F  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1556  0570  0086               	movwf	6
  1557  0571  0187               	clrf	7
  1558  0572  085C               	movf	main@chn,w
  1559  0573  0709               	addwf	9,w
  1560  0574  0709               	addwf	9,w
  1561  0575  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1562  0576  0084               	movwf	4
  1563  0577  0185               	clrf	5
  1564  0578  0800               	movf	0,w
  1565  0579  0081               	movwf	1
  1566  057A                     l1907:	
  1567  057A  3004               	movlw	4
  1568  057B  0ADC               	incf	main@chn,f
  1569  057C  025C               	subwf	main@chn,w
  1570  057D  1803               	btfsc	3,0
  1571  057E  2F83               	goto	l2047
  1572  057F  2D4B               	goto	l1897
  1573  0580                     l87:	
  1574  0580  1CA7               	btfss	_DevMode,1
  1575  0581  2DBB               	goto	l93
  1576                           
  1577                           ;main.c: 215: for (uint8_t chn = 0; chn < 4; chn++) {
  1578  0582  01DD               	clrf	main@chn_250
  1579  0583                     l1913:	
  1580  0583  3004               	movlw	4
  1581  0584  025D               	subwf	main@chn_250,w
  1582  0585  1803               	btfsc	3,0
  1583  0586  2F83               	goto	l2047
  1584                           
  1585                           ;main.c: 216: if (Keys[chn].State != Keys[chn].StateTemp) {
  1586  0587  085D               	movf	main@chn_250,w
  1587  0588  0709               	addwf	9,w
  1588  0589  0709               	addwf	9,w
  1589  058A  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1590  058B  0086               	movwf	6
  1591  058C  0187               	clrf	7
  1592  058D  085D               	movf	main@chn_250,w
  1593  058E  0709               	addwf	9,w
  1594  058F  0709               	addwf	9,w
  1595  0590  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1596  0591  0084               	movwf	4
  1597  0592  0185               	clrf	5
  1598  0593  0800               	movf	0,w
  1599  0594  0601               	xorwf	1,w
  1600  0595  1903               	skipnz
  1601  0596  2DB9               	goto	l1929
  1602                           
  1603                           ;main.c: 217: if (Keys[chn].State == 0) {
  1604  0597  085D               	movf	main@chn_250,w
  1605  0598  0709               	addwf	9,w
  1606  0599  0709               	addwf	9,w
  1607  059A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1608  059B  0086               	movwf	6
  1609  059C  0801               	movf	1,w
  1610  059D  1D03               	btfss	3,2
  1611  059E  2DAA               	goto	l1927
  1612                           
  1613                           ;main.c: 218: noolite_send(chn, CMD_Unbind, 0, &noo_send_data[0]);
  1614  059F  3009               	movlw	9
  1615  05A0  00F0               	movwf	noolite_send@noo_send_command
  1616  05A1  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1617  05A2  01F1               	clrf	noolite_send@noo_send_format
  1618  05A3  00F2               	movwf	noolite_send@data
  1619  05A4  085D               	movf	main@chn_250,w
  1620  05A5  231C               	fcall	_noolite_send
  1621                           
  1622                           ;main.c: 219: DevMode &= ~UNBIND_ACTIVE;
  1623  05A6  0020               	movlb	0	; select bank0
  1624  05A7  10A7               	bcf	_DevMode,1
  1625                           
  1626                           ;main.c: 220: LATCbits.LATC3 = OFF;
  1627  05A8  0022               	movlb	2	; select bank2
  1628  05A9  118E               	bcf	14,3	;volatile
  1629  05AA                     l1927:	
  1630                           
  1631                           ;main.c: 221: }
  1632                           ;main.c: 222: Keys[chn].StateTemp = Keys[chn].State;
  1633  05AA  0020               	movlb	0	; select bank0
  1634  05AB  085D               	movf	main@chn_250,w
  1635  05AC  0709               	addwf	9,w
  1636  05AD  0709               	addwf	9,w
  1637  05AE  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1638  05AF  0086               	movwf	6
  1639  05B0  0187               	clrf	7
  1640  05B1  085D               	movf	main@chn_250,w
  1641  05B2  0709               	addwf	9,w
  1642  05B3  0709               	addwf	9,w
  1643  05B4  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1644  05B5  0084               	movwf	4
  1645  05B6  0185               	clrf	5
  1646  05B7  0800               	movf	0,w
  1647  05B8  0081               	movwf	1
  1648  05B9                     l1929:	
  1649  05B9  0ADD               	incf	main@chn_250,f
  1650  05BA  2D83               	goto	l1913
  1651  05BB                     l93:	
  1652  05BB  1D27               	btfss	_DevMode,2
  1653  05BC  2E1F               	goto	l1961
  1654                           
  1655                           ;main.c: 226: for (uint8_t chn = 0; chn < 4; chn++) {
  1656  05BD  01DE               	clrf	main@chn_251
  1657  05BE                     l1935:	
  1658  05BE  3004               	movlw	4
  1659  05BF  025E               	subwf	main@chn_251,w
  1660  05C0  1803               	btfsc	3,0
  1661  05C1  2F83               	goto	l2047
  1662                           
  1663                           ;main.c: 227: if (Keys[chn].State != Keys[chn].StateTemp) {
  1664  05C2  085E               	movf	main@chn_251,w
  1665  05C3  0709               	addwf	9,w
  1666  05C4  0709               	addwf	9,w
  1667  05C5  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1668  05C6  0086               	movwf	6
  1669  05C7  0187               	clrf	7
  1670  05C8  085E               	movf	main@chn_251,w
  1671  05C9  0709               	addwf	9,w
  1672  05CA  0709               	addwf	9,w
  1673  05CB  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1674  05CC  0084               	movwf	4
  1675  05CD  0185               	clrf	5
  1676  05CE  0800               	movf	0,w
  1677  05CF  0601               	xorwf	1,w
  1678  05D0  1903               	skipnz
  1679  05D1  2E1D               	goto	l1957
  1680                           
  1681                           ;main.c: 228: if (Keys[chn].State == 0) {
  1682  05D2  085E               	movf	main@chn_251,w
  1683  05D3  0709               	addwf	9,w
  1684  05D4  0709               	addwf	9,w
  1685  05D5  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1686  05D6  0086               	movwf	6
  1687  05D7  0801               	movf	1,w
  1688  05D8  1D03               	btfss	3,2
  1689  05D9  2E0E               	goto	l1955
  1690  05DA  0064               	clrwdt	;# 
  1691                           
  1692                           ;main.c: 230: LATCbits.LATC3 = ON;
  1693  05DB  0022               	movlb	2	; select bank2
  1694  05DC  158E               	bsf	14,3	;volatile
  1695                           
  1696                           ;main.c: 231: FlashEraseRow(TYPE_ADR);
  1697  05DD  30C0               	movlw	192
  1698  05DE  00F0               	movwf	FlashEraseRow@rowAddr
  1699  05DF  3007               	movlw	7
  1700  05E0  00F1               	movwf	FlashEraseRow@rowAddr+1
  1701  05E1  20E7               	fcall	_FlashEraseRow
  1702  05E2  0064               	clrwdt	;# 
  1703                           
  1704                           ;main.c: 233: FlashWrite(TYPE_ADR, chn);
  1705  05E3  30C0               	movlw	192
  1706  05E4  00F0               	movwf	FlashWrite@addr
  1707  05E5  3007               	movlw	7
  1708  05E6  00F1               	movwf	FlashWrite@addr+1
  1709  05E7  0020               	movlb	0	; select bank0
  1710  05E8  085E               	movf	main@chn_251,w
  1711  05E9  00F2               	movwf	FlashWrite@flash_data
  1712  05EA  01F3               	clrf	FlashWrite@flash_data+1
  1713  05EB  2104               	fcall	_FlashWrite
  1714  05EC  0064               	clrwdt	;# 
  1715                           
  1716                           ;main.c: 235: FlashWrite(TYPE_ADR + 1, 0x5A);
  1717  05ED  30C1               	movlw	193
  1718  05EE  00F0               	movwf	FlashWrite@addr
  1719  05EF  3007               	movlw	7
  1720  05F0  00F1               	movwf	FlashWrite@addr+1
  1721  05F1  305A               	movlw	90
  1722  05F2  00F2               	movwf	FlashWrite@flash_data
  1723  05F3  01F3               	clrf	FlashWrite@flash_data+1
  1724  05F4  2104               	fcall	_FlashWrite
  1725  05F5  0064               	clrwdt	;# 
  1726                           
  1727                           ;main.c: 238: _delay((unsigned long)((500)*(8000000/4000.0)));
  1728  05F6  3006               	movlw	6
  1729  05F7  0020               	movlb	0	; select bank0
  1730  05F8  00DB               	movwf	??_main+1
  1731  05F9  3013               	movlw	19
  1732  05FA  00DA               	movwf	??_main
  1733  05FB  30AD               	movlw	173
  1734  05FC                     u1507:	
  1735  05FC  0B89               	decfsz	9,f
  1736  05FD  2DFC               	goto	u1507
  1737  05FE  0BDA               	decfsz	??_main,f
  1738  05FF  2DFC               	goto	u1507
  1739  0600  0BDB               	decfsz	??_main+1,f
  1740  0601  2DFC               	goto	u1507
  1741  0602  3200               	nop2
  1742  0603  0064               	clrwdt	;# 
  1743                           
  1744                           ;main.c: 240: DevType = Init_TypeFromFlash(&Type[0]);
  1745  0604  30C0               	movlw	192
  1746  0605  00F0               	movwf	Init_TypeFromFlash@type
  1747  0606  3087               	movlw	135
  1748  0607  00F1               	movwf	Init_TypeFromFlash@type+1
  1749  0608  2117               	fcall	_Init_TypeFromFlash
  1750  0609  0020               	movlb	0	; select bank0
  1751  060A  00A8               	movwf	_DevType
  1752                           
  1753                           ;main.c: 241: DevMode &= ~MODE_CHANGE_ACTIVE;
  1754  060B  1127               	bcf	_DevMode,2
  1755                           
  1756                           ;main.c: 242: LATCbits.LATC3 = OFF;
  1757  060C  0022               	movlb	2	; select bank2
  1758  060D  118E               	bcf	14,3	;volatile
  1759  060E                     l1955:	
  1760                           
  1761                           ;main.c: 243: }
  1762                           ;main.c: 244: Keys[chn].StateTemp = Keys[chn].State;
  1763  060E  0020               	movlb	0	; select bank0
  1764  060F  085E               	movf	main@chn_251,w
  1765  0610  0709               	addwf	9,w
  1766  0611  0709               	addwf	9,w
  1767  0612  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1768  0613  0086               	movwf	6
  1769  0614  0187               	clrf	7
  1770  0615  085E               	movf	main@chn_251,w
  1771  0616  0709               	addwf	9,w
  1772  0617  0709               	addwf	9,w
  1773  0618  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1774  0619  0084               	movwf	4
  1775  061A  0185               	clrf	5
  1776  061B  0800               	movf	0,w
  1777  061C  0081               	movwf	1
  1778  061D                     l1957:	
  1779  061D  0ADE               	incf	main@chn_251,f
  1780  061E  2DBE               	goto	l1935
  1781  061F                     l1961:	
  1782                           
  1783                           ;main.c: 248: for (uint8_t chn = 0; chn < 4; chn++) {
  1784  061F  01DF               	clrf	main@chn_252
  1785  0620                     l1963:	
  1786  0620  3004               	movlw	4
  1787  0621  025F               	subwf	main@chn_252,w
  1788  0622  1803               	btfsc	3,0
  1789  0623  2F83               	goto	l2047
  1790                           
  1791                           ;main.c: 249: if (Keys[chn].State != Keys[chn].StateTemp) {
  1792  0624  085F               	movf	main@chn_252,w
  1793  0625  0709               	addwf	9,w
  1794  0626  0709               	addwf	9,w
  1795  0627  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1796  0628  0086               	movwf	6
  1797  0629  0187               	clrf	7
  1798  062A  085F               	movf	main@chn_252,w
  1799  062B  0709               	addwf	9,w
  1800  062C  0709               	addwf	9,w
  1801  062D  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1802  062E  0084               	movwf	4
  1803  062F  0185               	clrf	5
  1804  0630  0800               	movf	0,w
  1805  0631  0601               	xorwf	1,w
  1806  0632  1D03               	btfss	3,2
  1807  0633  2ED0               	goto	l2009
  1808  0634  2F72               	goto	l2041
  1809  0635                     l1971:	
  1810                           
  1811                           ;main.c: 252: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1812  0635  085F               	movf	main@chn_252,w
  1813  0636  00FB               	movwf	KeyOffHandler@chn
  1814  0637  3004               	movlw	4
  1815  0638  00FC               	movwf	KeyOffHandler@cmd
  1816  0639  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1817  063A  00FD               	movwf	KeyOffHandler@nooData
  1818  063B  085F               	movf	main@chn_252,w
  1819  063C  0709               	addwf	9,w
  1820  063D  0709               	addwf	9,w
  1821  063E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1822  063F  2161               	fcall	_KeyOffHandler
  1823                           
  1824                           ;main.c: 253: break;
  1825  0640  2EDE               	goto	l2011
  1826  0641                     l1973:	
  1827  0641  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1828                           
  1829                           ;main.c: 258: KeyOffHandler(&Keys[chn], 0, CMD_OFF, &noo_send_data[0]);
  1830  0642  01FB               	clrf	KeyOffHandler@chn
  1831  0643  01FC               	clrf	KeyOffHandler@cmd
  1832  0644  00FD               	movwf	KeyOffHandler@nooData
  1833  0645  085F               	movf	main@chn_252,w
  1834  0646  0709               	addwf	9,w
  1835  0647  0709               	addwf	9,w
  1836  0648  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1837  0649  2161               	fcall	_KeyOffHandler
  1838                           
  1839                           ;main.c: 259: break;
  1840  064A  2EDE               	goto	l2011
  1841  064B                     l1975:	
  1842  064B  3002               	movlw	2
  1843                           
  1844                           ;main.c: 261: KeyOffHandler(&Keys[chn], 0, CMD_ON, &noo_send_data[0]);
  1845  064C  01FB               	clrf	KeyOffHandler@chn
  1846  064D  00FC               	movwf	KeyOffHandler@cmd
  1847  064E  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1848  064F  00FD               	movwf	KeyOffHandler@nooData
  1849  0650  085F               	movf	main@chn_252,w
  1850  0651  0709               	addwf	9,w
  1851  0652  0709               	addwf	9,w
  1852  0653  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1853  0654  2161               	fcall	_KeyOffHandler
  1854                           
  1855                           ;main.c: 262: break;
  1856  0655  2EDE               	goto	l2011
  1857  0656                     l1977:	
  1858  0656  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1859                           
  1860                           ;main.c: 264: KeyOffHandler(&Keys[chn], 1, CMD_OFF, &noo_send_data[0]);
  1861  0657  01FB               	clrf	KeyOffHandler@chn
  1862  0658  0AFB               	incf	KeyOffHandler@chn,f
  1863  0659  01FC               	clrf	KeyOffHandler@cmd
  1864  065A  00FD               	movwf	KeyOffHandler@nooData
  1865  065B  085F               	movf	main@chn_252,w
  1866  065C  0709               	addwf	9,w
  1867  065D  0709               	addwf	9,w
  1868  065E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1869  065F  2161               	fcall	_KeyOffHandler
  1870                           
  1871                           ;main.c: 265: break;
  1872  0660  2EDE               	goto	l2011
  1873  0661                     l1979:	
  1874  0661  3002               	movlw	2
  1875                           
  1876                           ;main.c: 267: KeyOffHandler(&Keys[chn], 1, CMD_ON, &noo_send_data[0]);
  1877  0662  01FB               	clrf	KeyOffHandler@chn
  1878  0663  0AFB               	incf	KeyOffHandler@chn,f
  1879  0664  00FC               	movwf	KeyOffHandler@cmd
  1880  0665  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1881  0666  00FD               	movwf	KeyOffHandler@nooData
  1882  0667  085F               	movf	main@chn_252,w
  1883  0668  0709               	addwf	9,w
  1884  0669  0709               	addwf	9,w
  1885  066A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1886  066B  2161               	fcall	_KeyOffHandler
  1887                           
  1888                           ;main.c: 268: break;
  1889  066C  2EDE               	goto	l2011
  1890  066D                     l1983:	
  1891  066D  085F               	movf	main@chn_252,w
  1892                           
  1893                           ; Switch size 1, requested type "space"
  1894                           ; Number of cases is 4, Range of values is 0 to 3
  1895                           ; switch strategies available:
  1896                           ; Name         Instructions Cycles
  1897                           ; simple_byte           13     7 (average)
  1898                           ; direct_byte           14     6 (fixed)
  1899                           ; jumptable            260     6 (fixed)
  1900                           ;	Chosen strategy is simple_byte
  1901  066E  3A00               	xorlw	0	; case 0
  1902  066F  1903               	skipnz
  1903  0670  2E41               	goto	l1973
  1904  0671  3A01               	xorlw	1	; case 1
  1905  0672  1903               	skipnz
  1906  0673  2E4B               	goto	l1975
  1907  0674  3A03               	xorlw	3	; case 2
  1908  0675  1903               	skipnz
  1909  0676  2E56               	goto	l1977
  1910  0677  3A01               	xorlw	1	; case 3
  1911  0678  1903               	skipnz
  1912  0679  2E61               	goto	l1979
  1913  067A  2EDE               	goto	l2011
  1914                           
  1915                           ;main.c: 270: break;
  1916  067B  2EDE               	goto	l2011
  1917  067C                     l1985:	
  1918                           
  1919                           ;main.c: 273: if (chn > 1) {
  1920  067C  3002               	movlw	2
  1921  067D  025F               	subwf	main@chn_252,w
  1922                           
  1923                           ;main.c: 274: if (Keys[chn].State == 0) {
  1924  067E  085F               	movf	main@chn_252,w
  1925  067F  1C03               	skipc
  1926  0680  2E9E               	goto	L2
  1927  0681  0709               	addwf	9,w
  1928  0682  0709               	addwf	9,w
  1929  0683  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1930  0684  0086               	movwf	6
  1931  0685  0187               	clrf	7
  1932  0686  0801               	movf	1,w
  1933  0687  1D03               	btfss	3,2
  1934  0688  2EDE               	goto	l2011
  1935                           
  1936                           ;main.c: 275: if (Keys[chn].Tick100ms < 10) {
  1937  0689  085F               	movf	main@chn_252,w
  1938  068A  0709               	addwf	9,w
  1939  068B  0709               	addwf	9,w
  1940  068C  3E2E               	addlw	(low ((_Keys| 0+2)))& (0+255)
  1941  068D  0086               	movwf	6
  1942  068E  300A               	movlw	10
  1943  068F  0201               	subwf	1,w
  1944  0690  1803               	skipnc
  1945  0691  2EDE               	goto	l2011
  1946                           
  1947                           ;main.c: 276: if (chn > 1) {
  1948  0692  3002               	movlw	2
  1949  0693  025F               	subwf	main@chn_252,w
  1950  0694  1C03               	skipc
  1951  0695  2EDE               	goto	l2011
  1952                           
  1953                           ;main.c: 277: noolite_send(chn, CMD_Load_Preset, 0, &noo_send_data[0]);
  1954  0696  3007               	movlw	7
  1955  0697  00F0               	movwf	noolite_send@noo_send_command
  1956  0698  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1957  0699  01F1               	clrf	noolite_send@noo_send_format
  1958  069A  00F2               	movwf	noolite_send@data
  1959  069B  085F               	movf	main@chn_252,w
  1960  069C  231C               	fcall	_noolite_send
  1961  069D  2EDE               	goto	l2011
  1962  069E                     L2:	
  1963                           ;main.c: 282: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1964                           
  1965  069E  00FB               	movwf	KeyOffHandler@chn
  1966  069F  3004               	movlw	4
  1967  06A0  00FC               	movwf	KeyOffHandler@cmd
  1968  06A1  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1969  06A2  00FD               	movwf	KeyOffHandler@nooData
  1970  06A3  085F               	movf	main@chn_252,w
  1971  06A4  0709               	addwf	9,w
  1972  06A5  0709               	addwf	9,w
  1973  06A6  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1974  06A7  2161               	fcall	_KeyOffHandler
  1975  06A8  2EDE               	goto	l2011
  1976  06A9                     l1997:	
  1977                           
  1978                           ;main.c: 286: if (chn > 1) {
  1979  06A9  3002               	movlw	2
  1980  06AA  025F               	subwf	main@chn_252,w
  1981                           
  1982                           ;main.c: 287: if (Keys[chn].State) {
  1983  06AB  085F               	movf	main@chn_252,w
  1984  06AC  1C03               	skipc
  1985  06AD  2EC5               	goto	L3
  1986  06AE  0709               	addwf	9,w
  1987  06AF  0709               	addwf	9,w
  1988  06B0  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1989  06B1  0086               	movwf	6
  1990  06B2  0187               	clrf	7
  1991  06B3  0801               	movf	1,w
  1992  06B4  1903               	btfsc	3,2
  1993  06B5  2EBE               	goto	l2003
  1994                           
  1995                           ;main.c: 288: noolite_send(chn, CMD_ON, 0, &noo_send_data[0]);
  1996  06B6  3002               	movlw	2
  1997  06B7  00F0               	movwf	noolite_send@noo_send_command
  1998  06B8  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1999  06B9  01F1               	clrf	noolite_send@noo_send_format
  2000  06BA  00F2               	movwf	noolite_send@data
  2001  06BB  085F               	movf	main@chn_252,w
  2002  06BC  231C               	fcall	_noolite_send
  2003                           
  2004                           ;main.c: 289: } else {
  2005  06BD  2EDE               	goto	l2011
  2006  06BE                     l2003:	
  2007  06BE  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2008                           
  2009                           ;main.c: 290: noolite_send(chn, CMD_OFF, 0, &noo_send_data[0]);
  2010  06BF  01F0               	clrf	noolite_send@noo_send_command
  2011  06C0  01F1               	clrf	noolite_send@noo_send_format
  2012  06C1  00F2               	movwf	noolite_send@data
  2013  06C2  085F               	movf	main@chn_252,w
  2014  06C3  231C               	fcall	_noolite_send
  2015  06C4  2EDE               	goto	l2011
  2016  06C5                     L3:	
  2017                           ;main.c: 293: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  2018                           
  2019  06C5  00FB               	movwf	KeyOffHandler@chn
  2020  06C6  3004               	movlw	4
  2021  06C7  00FC               	movwf	KeyOffHandler@cmd
  2022  06C8  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2023  06C9  00FD               	movwf	KeyOffHandler@nooData
  2024  06CA  085F               	movf	main@chn_252,w
  2025  06CB  0709               	addwf	9,w
  2026  06CC  0709               	addwf	9,w
  2027  06CD  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2028  06CE  2161               	fcall	_KeyOffHandler
  2029  06CF  2EDE               	goto	l2011
  2030  06D0                     l2009:	
  2031  06D0  0828               	movf	_DevType,w
  2032                           
  2033                           ; Switch size 1, requested type "space"
  2034                           ; Number of cases is 4, Range of values is 0 to 3
  2035                           ; switch strategies available:
  2036                           ; Name         Instructions Cycles
  2037                           ; simple_byte           13     7 (average)
  2038                           ; direct_byte           14     6 (fixed)
  2039                           ; jumptable            260     6 (fixed)
  2040                           ;	Chosen strategy is simple_byte
  2041  06D1  3A00               	xorlw	0	; case 0
  2042  06D2  1903               	skipnz
  2043  06D3  2E35               	goto	l1971
  2044  06D4  3A01               	xorlw	1	; case 1
  2045  06D5  1903               	skipnz
  2046  06D6  2E6D               	goto	l1983
  2047  06D7  3A03               	xorlw	3	; case 2
  2048  06D8  1903               	skipnz
  2049  06D9  2E7C               	goto	l1985
  2050  06DA  3A01               	xorlw	1	; case 3
  2051  06DB  1903               	skipnz
  2052  06DC  2EA9               	goto	l1997
  2053  06DD  2EDE               	goto	l2011
  2054  06DE                     l2011:	
  2055                           
  2056                           ;main.c: 297: OffDelayTicks_100ms = 3;
  2057  06DE  3003               	movlw	3
  2058  06DF  0020               	movlb	0	; select bank0
  2059  06E0  00A5               	movwf	_OffDelayTicks_100ms
  2060                           
  2061                           ;main.c: 298: Keys[chn].StateTemp = Keys[chn].State;
  2062  06E1  085F               	movf	main@chn_252,w
  2063  06E2  0709               	addwf	9,w
  2064  06E3  0709               	addwf	9,w
  2065  06E4  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  2066  06E5  0086               	movwf	6
  2067  06E6  0187               	clrf	7
  2068  06E7  085F               	movf	main@chn_252,w
  2069  06E8  0709               	addwf	9,w
  2070  06E9  0709               	addwf	9,w
  2071  06EA  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2072  06EB  0084               	movwf	4
  2073  06EC  0185               	clrf	5
  2074  06ED  0800               	movf	0,w
  2075  06EE  0081               	movwf	1
  2076  06EF  2F72               	goto	l2041
  2077  06F0                     l2015:	
  2078                           
  2079                           ;main.c: 303: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2080  06F0  085F               	movf	main@chn_252,w
  2081  06F1  00D6               	movwf	KeyLongHandler@chn
  2082  06F2  3005               	movlw	5
  2083  06F3  00D7               	movwf	KeyLongHandler@cmd
  2084  06F4  3009               	movlw	9
  2085  06F5  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2086  06F6  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2087  06F7  00D9               	movwf	KeyLongHandler@nooData
  2088  06F8  085F               	movf	main@chn_252,w
  2089  06F9  0709               	addwf	9,w
  2090  06FA  0709               	addwf	9,w
  2091  06FB  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2092  06FC  2135               	fcall	_KeyLongHandler
  2093                           
  2094                           ;main.c: 304: break;
  2095  06FD  2F80               	goto	l2043
  2096  06FE                     l2017:	
  2097  06FE  3009               	movlw	9
  2098                           
  2099                           ;main.c: 309: KeyLongHandler(&Keys[chn], 0, CMD_Bright_Down, 9, &noo_send_data[0]);
  2100  06FF  01D6               	clrf	KeyLongHandler@chn
  2101  0700  01D7               	clrf	KeyLongHandler@cmd
  2102  0701  0AD7               	incf	KeyLongHandler@cmd,f
  2103  0702  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2104  0703  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2105  0704  00D9               	movwf	KeyLongHandler@nooData
  2106  0705  085F               	movf	main@chn_252,w
  2107  0706  0709               	addwf	9,w
  2108  0707  0709               	addwf	9,w
  2109  0708  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2110  0709  2135               	fcall	_KeyLongHandler
  2111                           
  2112                           ;main.c: 310: break;
  2113  070A  2F80               	goto	l2043
  2114  070B                     l2019:	
  2115  070B  3003               	movlw	3
  2116                           
  2117                           ;main.c: 312: KeyLongHandler(&Keys[chn], 0, CMD_Bright_Up, 9, &noo_send_data[0]);
  2118  070C  01D6               	clrf	KeyLongHandler@chn
  2119  070D  00D7               	movwf	KeyLongHandler@cmd
  2120  070E  3009               	movlw	9
  2121  070F  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2122  0710  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2123  0711  00D9               	movwf	KeyLongHandler@nooData
  2124  0712  085F               	movf	main@chn_252,w
  2125  0713  0709               	addwf	9,w
  2126  0714  0709               	addwf	9,w
  2127  0715  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2128  0716  2135               	fcall	_KeyLongHandler
  2129                           
  2130                           ;main.c: 313: break;
  2131  0717  2F80               	goto	l2043
  2132  0718                     l2021:	
  2133  0718  3009               	movlw	9
  2134                           
  2135                           ;main.c: 315: KeyLongHandler(&Keys[chn], 1, CMD_Bright_Down, 9, &noo_send_data[0]);
  2136  0719  01D6               	clrf	KeyLongHandler@chn
  2137  071A  0AD6               	incf	KeyLongHandler@chn,f
  2138  071B  01D7               	clrf	KeyLongHandler@cmd
  2139  071C  0AD7               	incf	KeyLongHandler@cmd,f
  2140  071D  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2141  071E  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2142  071F  00D9               	movwf	KeyLongHandler@nooData
  2143  0720  085F               	movf	main@chn_252,w
  2144  0721  0709               	addwf	9,w
  2145  0722  0709               	addwf	9,w
  2146  0723  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2147  0724  2135               	fcall	_KeyLongHandler
  2148                           
  2149                           ;main.c: 316: break;
  2150  0725  2F80               	goto	l2043
  2151  0726                     l2023:	
  2152  0726  3003               	movlw	3
  2153                           
  2154                           ;main.c: 318: KeyLongHandler(&Keys[chn], 1, CMD_Bright_Up, 9, &noo_send_data[0]);
  2155  0727  01D6               	clrf	KeyLongHandler@chn
  2156  0728  0AD6               	incf	KeyLongHandler@chn,f
  2157  0729  00D7               	movwf	KeyLongHandler@cmd
  2158  072A  3009               	movlw	9
  2159  072B  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2160  072C  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2161  072D  00D9               	movwf	KeyLongHandler@nooData
  2162  072E  085F               	movf	main@chn_252,w
  2163  072F  0709               	addwf	9,w
  2164  0730  0709               	addwf	9,w
  2165  0731  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2166  0732  2135               	fcall	_KeyLongHandler
  2167                           
  2168                           ;main.c: 319: break;
  2169  0733  2F80               	goto	l2043
  2170  0734                     l2027:	
  2171  0734  085F               	movf	main@chn_252,w
  2172                           
  2173                           ; Switch size 1, requested type "space"
  2174                           ; Number of cases is 4, Range of values is 0 to 3
  2175                           ; switch strategies available:
  2176                           ; Name         Instructions Cycles
  2177                           ; simple_byte           13     7 (average)
  2178                           ; direct_byte           14     6 (fixed)
  2179                           ; jumptable            260     6 (fixed)
  2180                           ;	Chosen strategy is simple_byte
  2181  0735  3A00               	xorlw	0	; case 0
  2182  0736  1903               	skipnz
  2183  0737  2EFE               	goto	l2017
  2184  0738  3A01               	xorlw	1	; case 1
  2185  0739  1903               	skipnz
  2186  073A  2F0B               	goto	l2019
  2187  073B  3A03               	xorlw	3	; case 2
  2188  073C  1903               	skipnz
  2189  073D  2F18               	goto	l2021
  2190  073E  3A01               	xorlw	1	; case 3
  2191  073F  1903               	skipnz
  2192  0740  2F26               	goto	l2023
  2193  0741  2F80               	goto	l2043
  2194  0742                     l2029:	
  2195                           
  2196                           ;main.c: 324: if (chn < 2) {
  2197  0742  3002               	movlw	2
  2198  0743  025F               	subwf	main@chn_252,w
  2199                           
  2200                           ;main.c: 325: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2201  0744  085F               	movf	main@chn_252,w
  2202  0745  00D6               	movwf	KeyLongHandler@chn
  2203  0746  1803               	skipnc
  2204  0747  2F54               	goto	L4
  2205  0748  3005               	movlw	5
  2206  0749  00D7               	movwf	KeyLongHandler@cmd
  2207  074A  3009               	movlw	9
  2208  074B  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2209  074C  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2210  074D  00D9               	movwf	KeyLongHandler@nooData
  2211  074E  085F               	movf	main@chn_252,w
  2212  074F  0709               	addwf	9,w
  2213  0750  0709               	addwf	9,w
  2214  0751  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2215  0752  2135               	fcall	_KeyLongHandler
  2216                           
  2217                           ;main.c: 326: } else {
  2218  0753  2F80               	goto	l2043
  2219  0754                     L4:	
  2220                           ;main.c: 327: KeyLongHandler(&Keys[chn], chn, CMD_Save_Preset, 49, &noo_send_data[0]);
  2221                           
  2222  0754  3008               	movlw	8
  2223  0755  00D7               	movwf	KeyLongHandler@cmd
  2224  0756  3031               	movlw	49
  2225  0757  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2226  0758  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2227  0759  00D9               	movwf	KeyLongHandler@nooData
  2228  075A  085F               	movf	main@chn_252,w
  2229  075B  0709               	addwf	9,w
  2230  075C  0709               	addwf	9,w
  2231  075D  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2232  075E  2135               	fcall	_KeyLongHandler
  2233  075F  2F80               	goto	l2043
  2234  0760                     l2035:	
  2235                           
  2236                           ;main.c: 331: if (chn < 2) {
  2237  0760  3002               	movlw	2
  2238  0761  025F               	subwf	main@chn_252,w
  2239  0762  1803               	skipnc
  2240  0763  2F80               	goto	l2043
  2241                           
  2242                           ;main.c: 332: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2243  0764  085F               	movf	main@chn_252,w
  2244  0765  00D6               	movwf	KeyLongHandler@chn
  2245  0766  3005               	movlw	5
  2246  0767  00D7               	movwf	KeyLongHandler@cmd
  2247  0768  3009               	movlw	9
  2248  0769  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2249  076A  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2250  076B  00D9               	movwf	KeyLongHandler@nooData
  2251  076C  085F               	movf	main@chn_252,w
  2252  076D  0709               	addwf	9,w
  2253  076E  0709               	addwf	9,w
  2254  076F  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2255  0770  2135               	fcall	_KeyLongHandler
  2256  0771  2F80               	goto	l2043
  2257  0772                     l2041:	
  2258  0772  0828               	movf	_DevType,w
  2259                           
  2260                           ; Switch size 1, requested type "space"
  2261                           ; Number of cases is 4, Range of values is 0 to 3
  2262                           ; switch strategies available:
  2263                           ; Name         Instructions Cycles
  2264                           ; simple_byte           13     7 (average)
  2265                           ; direct_byte           14     6 (fixed)
  2266                           ; jumptable            260     6 (fixed)
  2267                           ;	Chosen strategy is simple_byte
  2268  0773  3A00               	xorlw	0	; case 0
  2269  0774  1903               	skipnz
  2270  0775  2EF0               	goto	l2015
  2271  0776  3A01               	xorlw	1	; case 1
  2272  0777  1903               	skipnz
  2273  0778  2F34               	goto	l2027
  2274  0779  3A03               	xorlw	3	; case 2
  2275  077A  1903               	skipnz
  2276  077B  2F42               	goto	l2029
  2277  077C  3A01               	xorlw	1	; case 3
  2278  077D  1903               	skipnz
  2279  077E  2F60               	goto	l2035
  2280  077F  2F80               	goto	l2043
  2281  0780                     l2043:	
  2282  0780  0020               	movlb	0	; select bank0
  2283  0781  0ADF               	incf	main@chn_252,f
  2284  0782  2E20               	goto	l1963
  2285  0783                     l2047:	
  2286                           
  2287                           ;main.c: 336: }
  2288                           ;main.c: 337: }
  2289                           ;main.c: 338: }
  2290                           ;main.c: 339: if (OffDelayTicks_100ms != 0) {
  2291  0783  0825               	movf	_OffDelayTicks_100ms,w
  2292  0784  1903               	btfsc	3,2
  2293  0785  2F88               	goto	l144
  2294                           
  2295                           ;main.c: 340: OffDelayTicks_100ms--;
  2296  0786  03A5               	decf	_OffDelayTicks_100ms,f
  2297                           
  2298                           ;main.c: 341: } else {
  2299  0787  2F89               	goto	l2051
  2300  0788                     l144:	
  2301                           
  2302                           ;main.c: 342: DevMode |= GO_OFF;
  2303  0788  15A7               	bsf	_DevMode,3
  2304  0789                     l2051:	
  2305                           
  2306                           ;main.c: 343: }
  2307                           ;main.c: 345: if (((DevMode & 0x07) == 0) && ((PORTA & All_Pressed) == 0) && ((DevMode &
      +                           GO_OFF) != 0)) {
  2308  0789  0827               	movf	_DevMode,w
  2309  078A  3907               	andlw	7
  2310  078B  1D03               	btfss	3,2
  2311  078C  2FA8               	goto	l2063
  2312  078D  080C               	movf	12,w	;volatile
  2313  078E  3917               	andlw	23
  2314  078F  1903               	btfsc	3,2
  2315  0790  1DA7               	btfss	_DevMode,3
  2316  0791  2FA8               	goto	l2063
  2317                           
  2318                           ;main.c: 346: SaveTxStatusToFlash(&TxStatus[0], TX_STATUS_ADR, tx_status);
  2319  0792  30D0               	movlw	208
  2320  0793  00F4               	movwf	SaveTxStatusToFlash@txStatusArray
  2321  0794  3087               	movlw	135
  2322  0795  00F5               	movwf	SaveTxStatusToFlash@txStatusArray+1
  2323  0796  30D0               	movlw	208
  2324  0797  00F6               	movwf	SaveTxStatusToFlash@txStatusAdr
  2325  0798  3007               	movlw	7
  2326  0799  00F7               	movwf	SaveTxStatusToFlash@txStatusAdr+1
  2327  079A  082B               	movf	_tx_status,w
  2328  079B  00F8               	movwf	SaveTxStatusToFlash@txStatusVal
  2329  079C  21A1               	fcall	_SaveTxStatusToFlash
  2330                           
  2331                           ;main.c: 347: LATCbits.LATC5 = 0;
  2332  079D  0022               	movlb	2	; select bank2
  2333  079E  128E               	bcf	14,5	;volatile
  2334                           
  2335                           ;main.c: 348: _delay((unsigned long)((15)*(8000000/4000.0)));
  2336  079F  3027               	movlw	39
  2337  07A0  0020               	movlb	0	; select bank0
  2338  07A1  00DA               	movwf	??_main
  2339  07A2  30F5               	movlw	245
  2340  07A3                     u1517:	
  2341  07A3  0B89               	decfsz	9,f
  2342  07A4  2FA3               	goto	u1517
  2343  07A5  0BDA               	decfsz	??_main,f
  2344  07A6  2FA3               	goto	u1517
  2345                           
  2346                           ;main.c: 349: } else {
  2347  07A7  2CCB               	goto	l1805
  2348  07A8                     l2063:	
  2349                           
  2350                           ;main.c: 350: WDTCONbits.WDTPS = 0b00110;
  2351  07A8  0021               	movlb	1	; select bank1
  2352  07A9  0817               	movf	23,w	;volatile
  2353  07AA  39C1               	andlw	-63
  2354  07AB  380C               	iorlw	12
  2355  07AC  0097               	movwf	23	;volatile
  2356                           
  2357                           ;main.c: 351: __nop();
  2358  07AD  0000               	nop
  2359  07AE  0063               	sleep	;# 
  2360                           
  2361                           ;main.c: 353: __nop();
  2362  07AF  0000               	nop
  2363                           
  2364                           ;main.c: 354: WDTCONbits.WDTPS = 0b00101;
  2365  07B0  0021               	movlb	1	; select bank1
  2366  07B1  0817               	movf	23,w	;volatile
  2367  07B2  39C1               	andlw	-63
  2368  07B3  380A               	iorlw	10
  2369  07B4  0097               	movwf	23	;volatile
  2370                           
  2371                           ;main.c: 355: __nop();
  2372  07B5  0000               	nop
  2373  07B6  0063               	sleep	;# 
  2374                           
  2375                           ;main.c: 357: __nop();
  2376  07B7  0000               	nop
  2377                           
  2378                           ;main.c: 358: WDTCONbits.WDTPS = 0b01011;
  2379  07B8  0021               	movlb	1	; select bank1
  2380  07B9  0817               	movf	23,w	;volatile
  2381  07BA  39C1               	andlw	-63
  2382  07BB  3816               	iorlw	22
  2383  07BC  0097               	movwf	23	;volatile
  2384                           
  2385                           ;main.c: 359: __nop();
  2386  07BD  0000               	nop
  2387  07BE  0064               	clrwdt	;# 
  2388  07BF  2CCB               	goto	l1805
  2389  07C0                     __end_of_main:	
  2390                           
  2391                           	psect	text1
  2392  01A1                     __ptext1:	
  2393 ;; *************** function _SaveTxStatusToFlash *****************
  2394 ;; Defined at:
  2395 ;;		line 56 in file "user_functions.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  txStatusArra    2    4[COMMON] PTR const unsigned int 
  2398 ;;		 -> TxStatus(16), 
  2399 ;;  txStatusAdr     2    6[COMMON] unsigned int 
  2400 ;;  txStatusVal     1    8[COMMON] unsigned char 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  adrToWrite      2    0[BANK0 ] unsigned int 
  2403 ;;  cellNum         1    2[BANK0 ] unsigned char 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 1F/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMMON   BANK0   BANK1
  2413 ;;      Params:         5       0       0
  2414 ;;      Locals:         0       3       0
  2415 ;;      Temps:          4       0       0
  2416 ;;      Totals:         9       3       0
  2417 ;;Total ram usage:       12 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    2
  2420 ;; This function calls:
  2421 ;;		_FlashEraseRow
  2422 ;;		_FlashWrite
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           
  2429                           ;psect for function _SaveTxStatusToFlash
  2430  01A1                     _SaveTxStatusToFlash:	
  2431                           
  2432                           ;user_functions.c: 57: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  2433                           
  2434                           ;incstack = 0
  2435                           ; Regs used in _SaveTxStatusToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2436  01A1  01C6               	clrf	SaveTxStatusToFlash@cellNum
  2437  01A2                     l1769:	
  2438                           
  2439                           ;user_functions.c: 58: uint16_t adrToWrite = (txStatusAdr + (cellNum * 2));
  2440  01A2  0846               	movf	SaveTxStatusToFlash@cellNum,w
  2441  01A3  00C4               	movwf	SaveTxStatusToFlash@adrToWrite
  2442  01A4  01C5               	clrf	SaveTxStatusToFlash@adrToWrite+1
  2443  01A5  35C4               	lslf	SaveTxStatusToFlash@adrToWrite,f
  2444  01A6  0DC5               	rlf	SaveTxStatusToFlash@adrToWrite+1,f
  2445  01A7  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2446  01A8  07C4               	addwf	SaveTxStatusToFlash@adrToWrite,f
  2447  01A9  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2448  01AA  3DC5               	addwfc	SaveTxStatusToFlash@adrToWrite+1,f
  2449                           
  2450                           ;user_functions.c: 59: if (txStatusArray[cellNum] == 0xFFFF) {
  2451  01AB  0846               	movf	SaveTxStatusToFlash@cellNum,w
  2452  01AC  00F9               	movwf	??_SaveTxStatusToFlash
  2453  01AD  01FA               	clrf	??_SaveTxStatusToFlash+1
  2454  01AE  35F9               	lslf	??_SaveTxStatusToFlash,f
  2455  01AF  0DFA               	rlf	??_SaveTxStatusToFlash+1,f
  2456  01B0  0874               	movf	SaveTxStatusToFlash@txStatusArray,w
  2457  01B1  0779               	addwf	??_SaveTxStatusToFlash,w
  2458  01B2  0084               	movwf	4
  2459  01B3  0875               	movf	SaveTxStatusToFlash@txStatusArray+1,w
  2460  01B4  3D7A               	addwfc	??_SaveTxStatusToFlash+1,w
  2461  01B5  0085               	movwf	5
  2462  01B6  0012               	moviw fsr0++
  2463  01B7  3AFF               	xorlw	255
  2464  01B8  00FB               	movwf	??_SaveTxStatusToFlash+2
  2465  01B9  0012               	moviw fsr0++
  2466  01BA  3AFF               	xorlw	255
  2467  01BB  04FB               	iorwf	??_SaveTxStatusToFlash+2,f
  2468  01BC  1D03               	btfss	3,2
  2469  01BD  29D5               	goto	l1783
  2470                           
  2471                           ;user_functions.c: 60: FlashWrite(adrToWrite, txStatusVal & 0x02);
  2472  01BE  0845               	movf	SaveTxStatusToFlash@adrToWrite+1,w
  2473  01BF  00F1               	movwf	FlashWrite@addr+1
  2474  01C0  0844               	movf	SaveTxStatusToFlash@adrToWrite,w
  2475  01C1  00F0               	movwf	FlashWrite@addr
  2476  01C2  0878               	movf	SaveTxStatusToFlash@txStatusVal,w
  2477  01C3  3902               	andlw	2
  2478  01C4  00F2               	movwf	FlashWrite@flash_data
  2479  01C5  01F3               	clrf	FlashWrite@flash_data+1
  2480  01C6  2104               	fcall	_FlashWrite
  2481                           
  2482                           ;user_functions.c: 61: FlashWrite((adrToWrite + 1), 0x5A);
  2483  01C7  0020               	movlb	0	; select bank0
  2484  01C8  0844               	movf	SaveTxStatusToFlash@adrToWrite,w
  2485  01C9  3E01               	addlw	1
  2486  01CA  00F0               	movwf	FlashWrite@addr
  2487  01CB  3000               	movlw	0
  2488  01CC  3D45               	addwfc	SaveTxStatusToFlash@adrToWrite+1,w
  2489  01CD  00F1               	movwf	FlashWrite@addr+1
  2490  01CE  305A               	movlw	90
  2491  01CF  00F2               	movwf	FlashWrite@flash_data
  2492  01D0  01F3               	clrf	FlashWrite@flash_data+1
  2493  01D1  2104               	fcall	_FlashWrite
  2494                           
  2495                           ;user_functions.c: 62: __nop();
  2496  01D2  0000               	nop
  2497  01D3  0064               	clrwdt	;# 
  2498                           
  2499                           ;user_functions.c: 64: break;
  2500  01D4  0008               	return
  2501  01D5                     l1783:	
  2502                           
  2503                           ;user_functions.c: 66: if (cellNum == 7) {
  2504  01D5  3007               	movlw	7
  2505  01D6  0646               	xorwf	SaveTxStatusToFlash@cellNum,w
  2506  01D7  1D03               	btfss	3,2
  2507  01D8  29F1               	goto	l1787
  2508                           
  2509                           ;user_functions.c: 67: FlashEraseRow(txStatusAdr);
  2510  01D9  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2511  01DA  00F1               	movwf	FlashEraseRow@rowAddr+1
  2512  01DB  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2513  01DC  00F0               	movwf	FlashEraseRow@rowAddr
  2514  01DD  20E7               	fcall	_FlashEraseRow
  2515                           
  2516                           ;user_functions.c: 68: FlashWrite(txStatusAdr, txStatusVal & 0x02);
  2517  01DE  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2518  01DF  00F1               	movwf	FlashWrite@addr+1
  2519  01E0  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2520  01E1  00F0               	movwf	FlashWrite@addr
  2521  01E2  0878               	movf	SaveTxStatusToFlash@txStatusVal,w
  2522  01E3  3902               	andlw	2
  2523  01E4  00F2               	movwf	FlashWrite@flash_data
  2524  01E5  01F3               	clrf	FlashWrite@flash_data+1
  2525  01E6  2104               	fcall	_FlashWrite
  2526                           
  2527                           ;user_functions.c: 69: FlashWrite(txStatusAdr + 1, 0x5A);
  2528  01E7  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2529  01E8  3E01               	addlw	1
  2530  01E9  00F0               	movwf	FlashWrite@addr
  2531  01EA  3000               	movlw	0
  2532  01EB  3D77               	addwfc	SaveTxStatusToFlash@txStatusAdr+1,w
  2533  01EC  00F1               	movwf	FlashWrite@addr+1
  2534  01ED  305A               	movlw	90
  2535  01EE  00F2               	movwf	FlashWrite@flash_data
  2536  01EF  01F3               	clrf	FlashWrite@flash_data+1
  2537  01F0  2104               	fcall	_FlashWrite
  2538  01F1                     l1787:	
  2539  01F1  0020               	movlb	0	; select bank0
  2540  01F2  3008               	movlw	8
  2541  01F3  0AC6               	incf	SaveTxStatusToFlash@cellNum,f
  2542  01F4  0246               	subwf	SaveTxStatusToFlash@cellNum,w
  2543  01F5  1803               	btfsc	3,0
  2544  01F6  0008               	return
  2545  01F7  29A2               	goto	l1769
  2546  01F8                     __end_of_SaveTxStatusToFlash:	
  2547                           
  2548                           	psect	text2
  2549  0104                     __ptext2:	
  2550 ;; *************** function _FlashWrite *****************
  2551 ;; Defined at:
  2552 ;;		line 43 in file "FLASH.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  addr            2    0[COMMON] unsigned int 
  2555 ;;  flash_data      2    2[COMMON] unsigned int 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2, status,0, pclath, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 1F/3
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMMON   BANK0   BANK1
  2567 ;;      Params:         4       0       0
  2568 ;;      Locals:         0       0       0
  2569 ;;      Temps:          0       0       0
  2570 ;;      Totals:         4       0       0
  2571 ;;Total ram usage:        4 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    1
  2574 ;; This function calls:
  2575 ;;		_FlashUnlock
  2576 ;; This function is called by:
  2577 ;;		_main
  2578 ;;		_SaveTxStatusToFlash
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _FlashWrite
  2584  0104                     _FlashWrite:	
  2585                           
  2586                           ;FLASH.c: 44: PMCON1bits.CFGS = 0;
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _FlashWrite: [wreg+status,2+status,0+pclath+cstack]
  2590  0104  0023               	movlb	3	; select bank3
  2591  0105  1315               	bcf	21,6	;volatile
  2592                           
  2593                           ;FLASH.c: 45: PMADRH = (unsigned char) (addr >> 8);
  2594  0106  0871               	movf	FlashWrite@addr+1,w
  2595  0107  0092               	movwf	18	;volatile
  2596                           
  2597                           ;FLASH.c: 46: PMADRL = (unsigned char) (addr);
  2598  0108  0870               	movf	FlashWrite@addr,w
  2599  0109  0091               	movwf	17	;volatile
  2600                           
  2601                           ;FLASH.c: 47: PMCON1bits.FREE = 0;
  2602  010A  1215               	bcf	21,4	;volatile
  2603                           
  2604                           ;FLASH.c: 48: PMCON1bits.LWLO = 1;
  2605  010B  1695               	bsf	21,5	;volatile
  2606                           
  2607                           ;FLASH.c: 49: PMCON1bits.WREN = 1;
  2608  010C  1515               	bsf	21,2	;volatile
  2609                           
  2610                           ;FLASH.c: 50: PMDATH = (unsigned char) (flash_data >> 8);
  2611  010D  0873               	movf	FlashWrite@flash_data+1,w
  2612  010E  0094               	movwf	20	;volatile
  2613                           
  2614                           ;FLASH.c: 51: PMDATL = (unsigned char) flash_data;
  2615  010F  0872               	movf	FlashWrite@flash_data,w
  2616  0110  0093               	movwf	19	;volatile
  2617                           
  2618                           ;FLASH.c: 52: PMCON1bits.LWLO = 0;
  2619  0111  1295               	bcf	21,5	;volatile
  2620                           
  2621                           ;FLASH.c: 53: INTCONbits.GIE = 0;
  2622  0112  138B               	bcf	11,7	;volatile
  2623                           
  2624                           ;FLASH.c: 54: FlashUnlock();
  2625  0113  20C8               	fcall	_FlashUnlock
  2626                           
  2627                           ;FLASH.c: 55: INTCONbits.GIE = 1;
  2628  0114  178B               	bsf	11,7	;volatile
  2629                           
  2630                           ;FLASH.c: 56: PMCON1bits.WREN = 0;
  2631  0115  1115               	bcf	21,2	;volatile
  2632  0116  0008               	return
  2633  0117                     __end_of_FlashWrite:	
  2634                           
  2635                           	psect	text3
  2636  00E7                     __ptext3:	
  2637 ;; *************** function _FlashEraseRow *****************
  2638 ;; Defined at:
  2639 ;;		line 31 in file "FLASH.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  rowAddr         2    0[COMMON] unsigned int 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;		None
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0, pclath, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 1D/2
  2650 ;;		On exit  : 1F/3
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMMON   BANK0   BANK1
  2653 ;;      Params:         2       0       0
  2654 ;;      Locals:         0       0       0
  2655 ;;      Temps:          0       0       0
  2656 ;;      Totals:         2       0       0
  2657 ;;Total ram usage:        2 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    1
  2660 ;; This function calls:
  2661 ;;		_FlashUnlock
  2662 ;; This function is called by:
  2663 ;;		_main
  2664 ;;		_SaveTxStatusToFlash
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           
  2669                           ;psect for function _FlashEraseRow
  2670  00E7                     _FlashEraseRow:	
  2671                           
  2672                           ;FLASH.c: 32: PMCON1bits.CFGS = 0;
  2673                           
  2674                           ;incstack = 0
  2675                           ; Regs used in _FlashEraseRow: [wreg+status,2+status,0+pclath+cstack]
  2676  00E7  0023               	movlb	3	; select bank3
  2677  00E8  1315               	bcf	21,6	;volatile
  2678                           
  2679                           ;FLASH.c: 33: PMADRH = (uint8_t) (rowAddr >> 8);
  2680  00E9  0871               	movf	FlashEraseRow@rowAddr+1,w
  2681  00EA  0092               	movwf	18	;volatile
  2682                           
  2683                           ;FLASH.c: 34: PMADRL = (uint8_t) (rowAddr);
  2684  00EB  0870               	movf	FlashEraseRow@rowAddr,w
  2685  00EC  0091               	movwf	17	;volatile
  2686                           
  2687                           ;FLASH.c: 35: PMCON1bits.FREE = 1;
  2688  00ED  1615               	bsf	21,4	;volatile
  2689                           
  2690                           ;FLASH.c: 36: PMCON1bits.WREN = 1;
  2691  00EE  1515               	bsf	21,2	;volatile
  2692                           
  2693                           ;FLASH.c: 37: INTCONbits.GIE = 0;
  2694  00EF  138B               	bcf	11,7	;volatile
  2695                           
  2696                           ;FLASH.c: 38: FlashUnlock();
  2697  00F0  20C8               	fcall	_FlashUnlock
  2698                           
  2699                           ;FLASH.c: 39: INTCONbits.GIE = 1;
  2700  00F1  178B               	bsf	11,7	;volatile
  2701                           
  2702                           ;FLASH.c: 40: PMCON1bits.WREN = 0;
  2703  00F2  1115               	bcf	21,2	;volatile
  2704  00F3  0008               	return
  2705  00F4                     __end_of_FlashEraseRow:	
  2706                           
  2707                           	psect	text4
  2708  00C8                     __ptext4:	
  2709 ;; *************** function _FlashUnlock *****************
  2710 ;; Defined at:
  2711 ;;		line 25 in file "FLASH.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;		None
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg
  2720 ;; Tracked objects:
  2721 ;;		On entry : 1F/3
  2722 ;;		On exit  : 1F/3
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMMON   BANK0   BANK1
  2725 ;;      Params:         0       0       0
  2726 ;;      Locals:         0       0       0
  2727 ;;      Temps:          0       0       0
  2728 ;;      Totals:         0       0       0
  2729 ;;Total ram usage:        0 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_FlashEraseRow
  2735 ;;		_FlashWrite
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           
  2740                           ;psect for function _FlashUnlock
  2741  00C8                     _FlashUnlock:	
  2742                           
  2743                           ;FLASH.c: 26: PMCON2 = 0x55;
  2744                           
  2745                           ;incstack = 0
  2746                           ; Regs used in _FlashUnlock: [wreg]
  2747  00C8  3055               	movlw	85
  2748  00C9  0096               	movwf	22	;volsfr
  2749                           
  2750                           ;FLASH.c: 27: PMCON2 = 0xAA;
  2751  00CA  30AA               	movlw	170
  2752  00CB  0096               	movwf	22	;volsfr
  2753                           
  2754                           ;FLASH.c: 28: PMCON1bits.WR = 1;
  2755  00CC  1495               	bsf	21,1	;volatile
  2756  00CD  0008               	return
  2757  00CE                     __end_of_FlashUnlock:	
  2758                           
  2759                           	psect	text5
  2760  01F8                     __ptext5:	
  2761 ;; *************** function _RF_Init *****************
  2762 ;; Defined at:
  2763 ;;		line 25 in file "noolite.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2772 ;; Tracked objects:
  2773 ;;		On entry : B1F/1
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1
  2777 ;;      Params:         0       0       0
  2778 ;;      Locals:         0       0       0
  2779 ;;      Temps:          7       0       0
  2780 ;;      Totals:         7       0       0
  2781 ;;Total ram usage:        7 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_main
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           
  2791                           ;psect for function _RF_Init
  2792  01F8                     _RF_Init:	
  2793                           
  2794                           ;noolite.c: 27: startaddress = 0;
  2795                           
  2796                           ;incstack = 0
  2797                           ; Regs used in _RF_Init: [wreg-fsr0h+status,2+status,0+pclath]
  2798  01F8  0020               	movlb	0	; select bank0
  2799  01F9  30F3               	movlw	243
  2800  01FA  01A0               	clrf	_startaddress
  2801  01FB  01A1               	clrf	_startaddress+1
  2802  01FC  01A2               	clrf	_startaddress+2
  2803  01FD  01A3               	clrf	_startaddress+3
  2804                           
  2805                           ;noolite.c: 28: startaddress |= ((unsigned int) system_settings[5]) << 8;
  2806  01FE  0084               	movwf	4
  2807  01FF  3087               	movlw	135
  2808  0200  0085               	movwf	5
  2809  0201  0800               	movf	0,w	;code access
  2810  0202  00F0               	movwf	??_RF_Init
  2811  0203  01F1               	clrf	??_RF_Init+1
  2812  0204  00F1               	movwf	??_RF_Init+1
  2813  0205  01F0               	clrf	??_RF_Init
  2814  0206  0870               	movf	??_RF_Init,w
  2815  0207  00F3               	movwf	??_RF_Init+3
  2816  0208  0871               	movf	??_RF_Init+1,w
  2817  0209  00F4               	movwf	??_RF_Init+4
  2818  020A  01F5               	clrf	??_RF_Init+5
  2819  020B  01F6               	clrf	??_RF_Init+6
  2820  020C  0873               	movf	??_RF_Init+3,w
  2821  020D  04A0               	iorwf	_startaddress,f
  2822  020E  0874               	movf	??_RF_Init+4,w
  2823  020F  04A1               	iorwf	_startaddress+1,f
  2824  0210  0875               	movf	??_RF_Init+5,w
  2825  0211  04A2               	iorwf	_startaddress+2,f
  2826  0212  0876               	movf	??_RF_Init+6,w
  2827  0213  04A3               	iorwf	_startaddress+3,f
  2828                           
  2829                           ;noolite.c: 29: startaddress |= system_settings[4];
  2830  0214  30F2               	movlw	242
  2831  0215  0084               	movwf	4
  2832  0216  0800               	movf	0,w	;code access
  2833  0217  00F0               	movwf	??_RF_Init
  2834  0218  01F1               	clrf	??_RF_Init+1
  2835  0219  01F2               	clrf	??_RF_Init+2
  2836  021A  01F3               	clrf	??_RF_Init+3
  2837  021B  04A0               	iorwf	_startaddress,f
  2838  021C  0871               	movf	??_RF_Init+1,w
  2839  021D  04A1               	iorwf	_startaddress+1,f
  2840  021E  0872               	movf	??_RF_Init+2,w
  2841  021F  04A2               	iorwf	_startaddress+2,f
  2842  0220  0873               	movf	??_RF_Init+3,w
  2843  0221  04A3               	iorwf	_startaddress+3,f
  2844                           
  2845                           ;noolite.c: 30: if ((startaddress != 0) && (startaddress != 0xFFFF)) {
  2846  0222  0823               	movf	_startaddress+3,w
  2847  0223  0422               	iorwf	_startaddress+2,w
  2848  0224  0421               	iorwf	_startaddress+1,w
  2849  0225  0420               	iorwf	_startaddress,w
  2850  0226  1903               	skipnz
  2851  0227  2A31               	goto	l179
  2852  0228  0F20               	incfsz	_startaddress,w
  2853  0229  2A2F               	goto	l1661
  2854  022A  0A21               	incf	_startaddress+1,w
  2855  022B  0422               	iorwf	_startaddress+2,w
  2856  022C  0423               	iorwf	_startaddress+3,w
  2857  022D  1903               	btfsc	3,2
  2858  022E  2A31               	goto	l179
  2859  022F                     l1661:	
  2860                           
  2861                           ;noolite.c: 31: noo_address_type = 0;
  2862  022F  01A4               	clrf	_noo_address_type
  2863                           
  2864                           ;noolite.c: 32: } else {
  2865  0230  2A81               	goto	l180
  2866  0231                     l179:	
  2867  0231  30F9               	movlw	249
  2868                           
  2869                           ;noolite.c: 33: startaddress = 0;
  2870  0232  01A0               	clrf	_startaddress
  2871  0233  01A1               	clrf	_startaddress+1
  2872  0234  01A2               	clrf	_startaddress+2
  2873  0235  01A3               	clrf	_startaddress+3
  2874                           
  2875                           ;noolite.c: 34: startaddress |= ((unsigned long) system_settings[11]) << 24;
  2876  0236  0084               	movwf	4
  2877  0237  3087               	movlw	135
  2878  0238  0085               	movwf	5
  2879  0239  0800               	movf	0,w	;code access
  2880  023A  00F3               	movwf	??_RF_Init+3
  2881  023B  01F2               	clrf	??_RF_Init+2
  2882  023C  01F1               	clrf	??_RF_Init+1
  2883  023D  01F0               	clrf	??_RF_Init
  2884  023E  0870               	movf	??_RF_Init,w
  2885  023F  04A0               	iorwf	_startaddress,f
  2886  0240  0871               	movf	??_RF_Init+1,w
  2887  0241  04A1               	iorwf	_startaddress+1,f
  2888  0242  0872               	movf	??_RF_Init+2,w
  2889  0243  04A2               	iorwf	_startaddress+2,f
  2890  0244  0873               	movf	??_RF_Init+3,w
  2891  0245  04A3               	iorwf	_startaddress+3,f
  2892                           
  2893                           ;noolite.c: 35: startaddress |= ((unsigned long) system_settings[10]) << 16;
  2894  0246  30F8               	movlw	248
  2895  0247  0084               	movwf	4
  2896  0248  0800               	movf	0,w	;code access
  2897  0249  00F0               	movwf	??_RF_Init
  2898  024A  01F1               	clrf	??_RF_Init+1
  2899  024B  01F2               	clrf	??_RF_Init+2
  2900  024C  01F3               	clrf	??_RF_Init+3
  2901  024D  0871               	movf	??_RF_Init+1,w
  2902  024E  00F3               	movwf	??_RF_Init+3
  2903  024F  0870               	movf	??_RF_Init,w
  2904  0250  00F2               	movwf	??_RF_Init+2
  2905  0251  01F1               	clrf	??_RF_Init+1
  2906  0252  01F0               	clrf	??_RF_Init
  2907  0253  0870               	movf	??_RF_Init,w
  2908  0254  04A0               	iorwf	_startaddress,f
  2909  0255  0871               	movf	??_RF_Init+1,w
  2910  0256  04A1               	iorwf	_startaddress+1,f
  2911  0257  0872               	movf	??_RF_Init+2,w
  2912  0258  04A2               	iorwf	_startaddress+2,f
  2913  0259  0873               	movf	??_RF_Init+3,w
  2914  025A  04A3               	iorwf	_startaddress+3,f
  2915                           
  2916                           ;noolite.c: 36: startaddress |= ((unsigned long) system_settings[9]) << 8;
  2917  025B  30F7               	movlw	247
  2918  025C  0084               	movwf	4
  2919  025D  0800               	movf	0,w	;code access
  2920  025E  00F0               	movwf	??_RF_Init
  2921  025F  01F1               	clrf	??_RF_Init+1
  2922  0260  01F2               	clrf	??_RF_Init+2
  2923  0261  01F3               	clrf	??_RF_Init+3
  2924  0262  0872               	movf	??_RF_Init+2,w
  2925  0263  00F3               	movwf	??_RF_Init+3
  2926  0264  0871               	movf	??_RF_Init+1,w
  2927  0265  00F2               	movwf	??_RF_Init+2
  2928  0266  0870               	movf	??_RF_Init,w
  2929  0267  00F1               	movwf	??_RF_Init+1
  2930  0268  01F0               	clrf	??_RF_Init
  2931  0269  0870               	movf	??_RF_Init,w
  2932  026A  04A0               	iorwf	_startaddress,f
  2933  026B  0871               	movf	??_RF_Init+1,w
  2934  026C  04A1               	iorwf	_startaddress+1,f
  2935  026D  0872               	movf	??_RF_Init+2,w
  2936  026E  04A2               	iorwf	_startaddress+2,f
  2937  026F  0873               	movf	??_RF_Init+3,w
  2938  0270  04A3               	iorwf	_startaddress+3,f
  2939                           
  2940                           ;noolite.c: 37: startaddress |= system_settings[8];
  2941  0271  30F6               	movlw	246
  2942  0272  0084               	movwf	4
  2943  0273  0800               	movf	0,w	;code access
  2944  0274  00F0               	movwf	??_RF_Init
  2945  0275  01F1               	clrf	??_RF_Init+1
  2946  0276  01F2               	clrf	??_RF_Init+2
  2947  0277  01F3               	clrf	??_RF_Init+3
  2948  0278  04A0               	iorwf	_startaddress,f
  2949  0279  0871               	movf	??_RF_Init+1,w
  2950  027A  04A1               	iorwf	_startaddress+1,f
  2951  027B  0872               	movf	??_RF_Init+2,w
  2952  027C  04A2               	iorwf	_startaddress+2,f
  2953  027D  0873               	movf	??_RF_Init+3,w
  2954  027E  04A3               	iorwf	_startaddress+3,f
  2955                           
  2956                           ;noolite.c: 38: noo_address_type = 1;
  2957  027F  01A4               	clrf	_noo_address_type
  2958  0280  0AA4               	incf	_noo_address_type,f
  2959  0281                     l180:	
  2960  0281  0064               	clrwdt	;# 
  2961  0282  0008               	return
  2962  0283                     __end_of_RF_Init:	
  2963                           
  2964                           	psect	text6
  2965  0161                     __ptext6:	
  2966 ;; *************** function _KeyOffHandler *****************
  2967 ;; Defined at:
  2968 ;;		line 75 in file "user_functions.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  key             1    wreg     PTR struct .
  2971 ;;		 -> Keys(20), 
  2972 ;;  chn             1   11[COMMON] unsigned char 
  2973 ;;  cmd             1   12[COMMON] unsigned char 
  2974 ;;  nooData         1   13[COMMON] PTR unsigned char 
  2975 ;;		 -> noo_send_data(4), 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  key             1   19[BANK0 ] PTR struct .
  2978 ;;		 -> Keys(20), 
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 1F/0
  2985 ;;		On exit  : 1D/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMMON   BANK0   BANK1
  2988 ;;      Params:         3       0       0
  2989 ;;      Locals:         0       1       0
  2990 ;;      Temps:          0       1       0
  2991 ;;      Totals:         3       2       0
  2992 ;;Total ram usage:        5 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    1
  2995 ;; This function calls:
  2996 ;;		_noolite_send
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _KeyOffHandler
  3004  0161                     _KeyOffHandler:	
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _KeyOffHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3008                           ;KeyOffHandler@key stored from wreg
  3009  0161  00D7               	movwf	KeyOffHandler@key
  3010                           
  3011                           ;user_functions.c: 76: if (key->State == 0) {
  3012  0162  0086               	movwf	6
  3013  0163  0187               	clrf	7
  3014  0164  0801               	movf	1,w
  3015  0165  1D03               	btfss	3,2
  3016  0166  0008               	return
  3017                           
  3018                           ;user_functions.c: 77: if (key->Tick100ms < 10) {
  3019  0167  0857               	movf	KeyOffHandler@key,w
  3020  0168  3E02               	addlw	2
  3021  0169  0086               	movwf	6
  3022  016A  300A               	movlw	10
  3023  016B  0201               	subwf	1,w
  3024  016C  1803               	skipnc
  3025  016D  2975               	goto	l1739
  3026                           
  3027                           ;user_functions.c: 78: noolite_send(chn, cmd, 0, &nooData[0]);
  3028  016E  087C               	movf	KeyOffHandler@cmd,w
  3029  016F  00F0               	movwf	noolite_send@noo_send_command
  3030  0170  01F1               	clrf	noolite_send@noo_send_format
  3031  0171  087D               	movf	KeyOffHandler@nooData,w
  3032  0172  00F2               	movwf	noolite_send@data
  3033  0173  087B               	movf	KeyOffHandler@chn,w
  3034  0174  2B1C               	ljmp	_noolite_send
  3035  0175                     l1739:	
  3036                           ;user_functions.c: 79: } else {
  3037                           
  3038                           
  3039                           ;user_functions.c: 80: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  3040  0175  300A               	movlw	10
  3041  0176  00F0               	movwf	noolite_send@noo_send_command
  3042  0177  01F1               	clrf	noolite_send@noo_send_format
  3043  0178  087D               	movf	KeyOffHandler@nooData,w
  3044  0179  00F2               	movwf	noolite_send@data
  3045  017A  087B               	movf	KeyOffHandler@chn,w
  3046  017B  231C               	fcall	_noolite_send
  3047                           
  3048                           ;user_functions.c: 81: _delay((unsigned long)((15)*(8000000/4000.0)));
  3049  017C  3027               	movlw	39
  3050  017D  0020               	movlb	0	; select bank0
  3051  017E  00D6               	movwf	??_KeyOffHandler
  3052  017F  30F5               	movlw	245
  3053  0180                     u1527:	
  3054  0180  0B89               	decfsz	9,f
  3055  0181  2980               	goto	u1527
  3056  0182  0BD6               	decfsz	??_KeyOffHandler,f
  3057  0183  2980               	goto	u1527
  3058                           
  3059                           ;user_functions.c: 82: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  3060  0184  300A               	movlw	10
  3061  0185  00F0               	movwf	noolite_send@noo_send_command
  3062  0186  01F1               	clrf	noolite_send@noo_send_format
  3063  0187  087D               	movf	KeyOffHandler@nooData,w
  3064  0188  00F2               	movwf	noolite_send@data
  3065  0189  087B               	movf	KeyOffHandler@chn,w
  3066  018A  231C               	fcall	_noolite_send
  3067                           
  3068                           ;user_functions.c: 83: _delay((unsigned long)((15)*(8000000/4000.0)));
  3069  018B  3027               	movlw	39
  3070  018C  0020               	movlb	0	; select bank0
  3071  018D  00D6               	movwf	??_KeyOffHandler
  3072  018E  30F5               	movlw	245
  3073  018F                     u1537:	
  3074  018F  0B89               	decfsz	9,f
  3075  0190  298F               	goto	u1537
  3076  0191  0BD6               	decfsz	??_KeyOffHandler,f
  3077  0192  298F               	goto	u1537
  3078                           
  3079                           ;user_functions.c: 84: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  3080  0193  300A               	movlw	10
  3081  0194  00F0               	movwf	noolite_send@noo_send_command
  3082  0195  01F1               	clrf	noolite_send@noo_send_format
  3083  0196  087D               	movf	KeyOffHandler@nooData,w
  3084  0197  00F2               	movwf	noolite_send@data
  3085  0198  087B               	movf	KeyOffHandler@chn,w
  3086  0199  231C               	fcall	_noolite_send
  3087                           
  3088                           ;user_functions.c: 85: key->FirstCmdSent = 0;
  3089  019A  0020               	movlb	0	; select bank0
  3090  019B  0857               	movf	KeyOffHandler@key,w
  3091  019C  3E03               	addlw	3
  3092  019D  0086               	movwf	6
  3093  019E  0187               	clrf	7
  3094  019F  0181               	clrf	1
  3095  01A0  0008               	return
  3096  01A1                     __end_of_KeyOffHandler:	
  3097                           
  3098                           	psect	text7
  3099  0135                     __ptext7:	
  3100 ;; *************** function _KeyLongHandler *****************
  3101 ;; Defined at:
  3102 ;;		line 90 in file "user_functions.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  key             1    wreg     PTR struct .
  3105 ;;		 -> Keys(20), 
  3106 ;;  chn             1   18[BANK0 ] unsigned char 
  3107 ;;  cmd             1   19[BANK0 ] unsigned char 
  3108 ;;  ticksToTrigg    1   20[BANK0 ] unsigned char 
  3109 ;;  nooData         1   21[BANK0 ] PTR unsigned char 
  3110 ;;		 -> noo_send_data(4), 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  key             1   11[COMMON] PTR struct .
  3113 ;;		 -> Keys(20), 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      void 
  3116 ;; Registers used:
  3117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 1F/0
  3120 ;;		On exit  : 1D/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMMON   BANK0   BANK1
  3123 ;;      Params:         0       4       0
  3124 ;;      Locals:         1       0       0
  3125 ;;      Temps:          0       0       0
  3126 ;;      Totals:         1       4       0
  3127 ;;Total ram usage:        5 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    1
  3130 ;; This function calls:
  3131 ;;		_noolite_send
  3132 ;; This function is called by:
  3133 ;;		_main
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           
  3138                           ;psect for function _KeyLongHandler
  3139  0135                     _KeyLongHandler:	
  3140                           
  3141                           ;incstack = 0
  3142                           ; Regs used in _KeyLongHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3143                           ;KeyLongHandler@key stored from wreg
  3144  0135  00FB               	movwf	KeyLongHandler@key
  3145                           
  3146                           ;user_functions.c: 91: if (key->State != 0) {
  3147  0136  0086               	movwf	6
  3148  0137  0187               	clrf	7
  3149  0138  0801               	movf	1,w
  3150  0139  1903               	btfsc	3,2
  3151  013A  295B               	goto	l1761
  3152                           
  3153                           ;user_functions.c: 92: if (key->Tick100ms > ticksToTrigger) {
  3154  013B  087B               	movf	KeyLongHandler@key,w
  3155  013C  3E02               	addlw	2
  3156  013D  0086               	movwf	6
  3157  013E  0801               	movf	1,w
  3158  013F  0258               	subwf	KeyLongHandler@ticksToTrigger,w
  3159                           
  3160                           ;user_functions.c: 93: if (key->FirstCmdSent == 0) {
  3161  0140  087B               	movf	KeyLongHandler@key,w
  3162  0141  1803               	skipnc
  3163  0142  2956               	goto	L5
  3164  0143  3E03               	addlw	3
  3165  0144  0086               	movwf	6
  3166  0145  0801               	movf	1,w
  3167  0146  1D03               	btfss	3,2
  3168  0147  2955               	goto	l1759
  3169                           
  3170                           ;user_functions.c: 94: noolite_send(chn, cmd, 0, &nooData[0]);
  3171  0148  0857               	movf	KeyLongHandler@cmd,w
  3172  0149  00F0               	movwf	noolite_send@noo_send_command
  3173  014A  01F1               	clrf	noolite_send@noo_send_format
  3174  014B  0859               	movf	KeyLongHandler@nooData,w
  3175  014C  00F2               	movwf	noolite_send@data
  3176  014D  0856               	movf	KeyLongHandler@chn,w
  3177  014E  231C               	fcall	_noolite_send
  3178                           
  3179                           ;user_functions.c: 95: key->FirstCmdSent = 1;
  3180  014F  087B               	movf	KeyLongHandler@key,w
  3181  0150  3E03               	addlw	3
  3182  0151  0086               	movwf	6
  3183  0152  0187               	clrf	7
  3184  0153  0181               	clrf	1
  3185  0154  0A81               	incf	1,f
  3186  0155                     l1759:	
  3187                           
  3188                           ;user_functions.c: 96: }
  3189                           ;user_functions.c: 97: }
  3190                           ;user_functions.c: 98: key->Tick100ms++;
  3191  0155  087B               	movf	KeyLongHandler@key,w
  3192  0156                     L5:	
  3193  0156  3E02               	addlw	2
  3194  0157  0086               	movwf	6
  3195  0158  0187               	clrf	7
  3196  0159  0A81               	incf	1,f
  3197                           
  3198                           ;user_functions.c: 99: } else {
  3199  015A  0008               	return
  3200  015B                     l1761:	
  3201                           
  3202                           ;user_functions.c: 100: key->Tick100ms = 0;
  3203  015B  087B               	movf	KeyLongHandler@key,w
  3204  015C  3E02               	addlw	2
  3205  015D  0086               	movwf	6
  3206  015E  0187               	clrf	7
  3207  015F  0181               	clrf	1
  3208  0160  0008               	return
  3209  0161                     __end_of_KeyLongHandler:	
  3210                           
  3211                           	psect	text8
  3212  031C                     __ptext8:	
  3213 ;; *************** function _noolite_send *****************
  3214 ;; Defined at:
  3215 ;;		line 174 in file "noolite.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  chn             1    wreg     unsigned char 
  3218 ;;  noo_send_com    1    0[COMMON] unsigned char 
  3219 ;;  noo_send_for    1    1[COMMON] unsigned char 
  3220 ;;  data            1    2[COMMON] PTR unsigned char 
  3221 ;;		 -> noo_send_data(4), 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  chn             1   14[BANK0 ] unsigned char 
  3224 ;;  noo_send_buf   12    0[BANK0 ] unsigned char [12]
  3225 ;;  endpos          1   17[BANK0 ] unsigned char 
  3226 ;;  temp_send       1   16[BANK0 ] unsigned char 
  3227 ;;  countsend       1   15[BANK0 ] unsigned char 
  3228 ;;  countbit        1   13[BANK0 ] unsigned char 
  3229 ;;  startpos        1   12[BANK0 ] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 1F/2
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMMON   BANK0   BANK1
  3239 ;;      Params:         3       0       0
  3240 ;;      Locals:         0      18       0
  3241 ;;      Temps:          8       0       0
  3242 ;;      Totals:        11      18       0
  3243 ;;Total ram usage:       29 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_main
  3249 ;;		_KeyOffHandler
  3250 ;;		_KeyLongHandler
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           
  3255                           ;psect for function _noolite_send
  3256  031C                     _noolite_send:	
  3257                           
  3258                           ;incstack = 0
  3259                           ; Regs used in _noolite_send: [wreg+fsr1l+fsr1h+status,2+status,0]
  3260                           ;noolite_send@chn stored from wreg
  3261  031C  0020               	movlb	0	; select bank0
  3262  031D  00D2               	movwf	noolite_send@chn
  3263  031E  0064               	clrwdt	;# 
  3264                           
  3265                           ;noolite.c: 185: tx_status ^= (1<<1);
  3266  031F  3002               	movlw	2
  3267  0320  0020               	movlb	0	; select bank0
  3268  0321  06AB               	xorwf	_tx_status,f
  3269                           
  3270                           ;noolite.c: 188: if (noo_send_command < 16) {
  3271  0322  3010               	movlw	16
  3272  0323  0270               	subwf	noolite_send@noo_send_command,w
  3273  0324  1803               	skipnc
  3274  0325  2B32               	goto	l1443
  3275                           
  3276                           ;noolite.c: 189: startpos = 10;
  3277  0326  300A               	movlw	10
  3278  0327  00D0               	movwf	noolite_send@startpos
  3279                           
  3280                           ;noolite.c: 190: noo_send_buffer[1] = (uint8_t) ((noo_send_command << 4) | (1 << 2));
  3281  0328  0E70               	swapf	noolite_send@noo_send_command,w
  3282  0329  39F0               	andlw	240
  3283  032A  3804               	iorlw	4
  3284  032B  00C5               	movwf	noolite_send@noo_send_buffer+1
  3285                           
  3286                           ;noolite.c: 191: if (((tx_status & (1<<1)) != 0)) {
  3287  032C  1CAB               	btfss	_tx_status,1
  3288  032D  2B30               	goto	l185
  3289                           
  3290                           ;noolite.c: 192: noo_send_buffer[1] |= (1<<3);
  3291  032E  15C5               	bsf	noolite_send@noo_send_buffer+1,3
  3292                           
  3293                           ;noolite.c: 193: } else {
  3294  032F  2B3E               	goto	l187
  3295  0330                     l185:	
  3296                           
  3297                           ;noolite.c: 194: noo_send_buffer[1] &= (~(1<<3));
  3298  0330  11C5               	bcf	noolite_send@noo_send_buffer+1,3
  3299  0331  2B3E               	goto	l187
  3300  0332                     l1443:	
  3301                           
  3302                           ;noolite.c: 197: startpos = 6;
  3303  0332  3006               	movlw	6
  3304  0333  00D0               	movwf	noolite_send@startpos
  3305                           
  3306                           ;noolite.c: 198: noo_send_buffer[0] = (1 << 6);
  3307  0334  3040               	movlw	64
  3308  0335  00C4               	movwf	noolite_send@noo_send_buffer
  3309                           
  3310                           ;noolite.c: 199: if (((tx_status & (1<<1)) != 0)) {
  3311  0336  1CAB               	btfss	_tx_status,1
  3312  0337  2B3A               	goto	l188
  3313                           
  3314                           ;noolite.c: 200: noo_send_buffer[0] |= (1<<7);
  3315  0338  17C4               	bsf	noolite_send@noo_send_buffer,7
  3316                           
  3317                           ;noolite.c: 201: } else {
  3318  0339  2B3B               	goto	l1449
  3319  033A                     l188:	
  3320                           
  3321                           ;noolite.c: 202: noo_send_buffer[0] &= (~(1<<7));
  3322  033A  13C4               	bcf	noolite_send@noo_send_buffer,7
  3323  033B                     l1449:	
  3324                           
  3325                           ;noolite.c: 203: };
  3326                           ;noolite.c: 204: noo_send_buffer[1] = noo_send_command;
  3327  033B  0870               	movf	noolite_send@noo_send_command,w
  3328  033C  00C5               	movwf	noolite_send@noo_send_buffer+1
  3329                           
  3330                           ;noolite.c: 205: noo_send_format = (uint8_t) (noo_send_format | 4);
  3331  033D  1571               	bsf	noolite_send@noo_send_format,2
  3332  033E                     l187:	
  3333                           
  3334                           ;noolite.c: 206: }
  3335                           ;noolite.c: 207: endpos = 2;
  3336  033E  3002               	movlw	2
  3337  033F  00D5               	movwf	noolite_send@endpos
  3338                           
  3339                           ;noolite.c: 208: temp_send = (uint8_t) (noo_send_format & 3);
  3340  0340  0871               	movf	noolite_send@noo_send_format,w
  3341  0341  00D4               	movwf	noolite_send@temp_send
  3342  0342  3003               	movlw	3
  3343  0343  05D4               	andwf	noolite_send@temp_send,f
  3344                           
  3345                           ;noolite.c: 209: if (temp_send == 1) {
  3346  0344  0B54               	decfsz	noolite_send@temp_send,w
  3347  0345  2B4D               	goto	l1461
  3348                           
  3349                           ;noolite.c: 211: noo_send_buffer[2] = data[0];
  3350  0346  0872               	movf	noolite_send@data,w
  3351  0347  0086               	movwf	6
  3352  0348  0187               	clrf	7
  3353  0349  0801               	movf	1,w
  3354  034A  00C6               	movwf	noolite_send@noo_send_buffer+2
  3355                           
  3356                           ;noolite.c: 212: endpos++;
  3357  034B  0AD5               	incf	noolite_send@endpos,f
  3358                           
  3359                           ;noolite.c: 213: } else if (temp_send == 3) {
  3360  034C  2B64               	goto	l1467
  3361  034D                     l1461:	
  3362  034D  3003               	movlw	3
  3363  034E  0654               	xorwf	noolite_send@temp_send,w
  3364  034F  1D03               	btfss	3,2
  3365  0350  2B64               	goto	l1467
  3366                           
  3367                           ;noolite.c: 218: noo_send_buffer[2] = data[0];
  3368  0351  0872               	movf	noolite_send@data,w
  3369  0352  0086               	movwf	6
  3370  0353  0187               	clrf	7
  3371  0354  0801               	movf	1,w
  3372  0355  00C6               	movwf	noolite_send@noo_send_buffer+2
  3373                           
  3374                           ;noolite.c: 219: noo_send_buffer[3] = data[1];
  3375  0356  0872               	movf	noolite_send@data,w
  3376  0357  0086               	movwf	6
  3377  0358  3F41               	moviw [1]fsr1
  3378  0359  00C7               	movwf	noolite_send@noo_send_buffer+3
  3379                           
  3380                           ;noolite.c: 220: noo_send_buffer[4] = data[2];
  3381  035A  0872               	movf	noolite_send@data,w
  3382  035B  0086               	movwf	6
  3383  035C  3F42               	moviw [2]fsr1
  3384  035D  00C8               	movwf	noolite_send@noo_send_buffer+4
  3385                           
  3386                           ;noolite.c: 221: noo_send_buffer[5] = data[3];
  3387  035E  0872               	movf	noolite_send@data,w
  3388  035F  0086               	movwf	6
  3389  0360  3F43               	moviw [3]fsr1
  3390  0361  00C9               	movwf	noolite_send@noo_send_buffer+5
  3391                           
  3392                           ;noolite.c: 222: endpos += 4;
  3393  0362  3004               	movlw	4
  3394  0363  07D5               	addwf	noolite_send@endpos,f
  3395  0364                     l1467:	
  3396                           
  3397                           ;noolite.c: 223: }
  3398                           ;noolite.c: 224: if (noo_address_type != 0) {
  3399  0364  0824               	movf	_noo_address_type,w
  3400  0365  1903               	btfsc	3,2
  3401  0366  2BCE               	goto	l1483
  3402                           
  3403                           ;noolite.c: 225: noo_send_format = (uint8_t) (noo_send_format | 0x10);
  3404  0367  1671               	bsf	noolite_send@noo_send_format,4
  3405                           
  3406                           ;noolite.c: 226: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3407  0368  0855               	movf	noolite_send@endpos,w
  3408  0369  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3409  036A  0086               	movwf	6
  3410  036B  0187               	clrf	7
  3411  036C  0852               	movf	noolite_send@chn,w
  3412  036D  0720               	addwf	_startaddress,w
  3413  036E  0081               	movwf	1
  3414                           
  3415                           ;noolite.c: 227: endpos++;
  3416  036F  0AD5               	incf	noolite_send@endpos,f
  3417                           
  3418                           ;noolite.c: 228: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3419  0370  0855               	movf	noolite_send@endpos,w
  3420  0371  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3421  0372  0086               	movwf	6
  3422  0373  0820               	movf	_startaddress,w
  3423  0374  00F3               	movwf	??_noolite_send
  3424  0375  0821               	movf	_startaddress+1,w
  3425  0376  00F4               	movwf	??_noolite_send+1
  3426  0377  0822               	movf	_startaddress+2,w
  3427  0378  00F5               	movwf	??_noolite_send+2
  3428  0379  0823               	movf	_startaddress+3,w
  3429  037A  00F6               	movwf	??_noolite_send+3
  3430  037B  0852               	movf	noolite_send@chn,w
  3431  037C  00F7               	movwf	??_noolite_send+4
  3432  037D  01F8               	clrf	??_noolite_send+5
  3433  037E  01F9               	clrf	??_noolite_send+6
  3434  037F  01FA               	clrf	??_noolite_send+7
  3435  0380  07F3               	addwf	??_noolite_send,f
  3436  0381  0878               	movf	??_noolite_send+5,w
  3437  0382  3DF4               	addwfc	??_noolite_send+1,f
  3438  0383  0879               	movf	??_noolite_send+6,w
  3439  0384  3DF5               	addwfc	??_noolite_send+2,f
  3440  0385  087A               	movf	??_noolite_send+7,w
  3441  0386  3DF6               	addwfc	??_noolite_send+3,f
  3442  0387  0874               	movf	??_noolite_send+1,w
  3443  0388  00F3               	movwf	??_noolite_send
  3444  0389  0875               	movf	??_noolite_send+2,w
  3445  038A  00F4               	movwf	??_noolite_send+1
  3446  038B  0876               	movf	??_noolite_send+3,w
  3447  038C  00F5               	movwf	??_noolite_send+2
  3448  038D  01F6               	clrf	??_noolite_send+3
  3449  038E  0873               	movf	??_noolite_send,w
  3450  038F  0081               	movwf	1
  3451                           
  3452                           ;noolite.c: 229: endpos++;
  3453  0390  0AD5               	incf	noolite_send@endpos,f
  3454                           
  3455                           ;noolite.c: 230: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 16);
  3456  0391  0855               	movf	noolite_send@endpos,w
  3457  0392  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3458  0393  0086               	movwf	6
  3459  0394  0820               	movf	_startaddress,w
  3460  0395  00F3               	movwf	??_noolite_send
  3461  0396  0821               	movf	_startaddress+1,w
  3462  0397  00F4               	movwf	??_noolite_send+1
  3463  0398  0822               	movf	_startaddress+2,w
  3464  0399  00F5               	movwf	??_noolite_send+2
  3465  039A  0823               	movf	_startaddress+3,w
  3466  039B  00F6               	movwf	??_noolite_send+3
  3467  039C  0852               	movf	noolite_send@chn,w
  3468  039D  00F7               	movwf	??_noolite_send+4
  3469  039E  01F8               	clrf	??_noolite_send+5
  3470  039F  01F9               	clrf	??_noolite_send+6
  3471  03A0  01FA               	clrf	??_noolite_send+7
  3472  03A1  07F3               	addwf	??_noolite_send,f
  3473  03A2  0878               	movf	??_noolite_send+5,w
  3474  03A3  3DF4               	addwfc	??_noolite_send+1,f
  3475  03A4  0879               	movf	??_noolite_send+6,w
  3476  03A5  3DF5               	addwfc	??_noolite_send+2,f
  3477  03A6  087A               	movf	??_noolite_send+7,w
  3478  03A7  3DF6               	addwfc	??_noolite_send+3,f
  3479  03A8  0875               	movf	??_noolite_send+2,w
  3480  03A9  00F3               	movwf	??_noolite_send
  3481  03AA  0876               	movf	??_noolite_send+3,w
  3482  03AB  00F4               	movwf	??_noolite_send+1
  3483  03AC  01F5               	clrf	??_noolite_send+2
  3484  03AD  01F6               	clrf	??_noolite_send+3
  3485  03AE  0873               	movf	??_noolite_send,w
  3486  03AF  0081               	movwf	1
  3487                           
  3488                           ;noolite.c: 231: endpos++;
  3489  03B0  0AD5               	incf	noolite_send@endpos,f
  3490                           
  3491                           ;noolite.c: 232: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 24);
  3492  03B1  0855               	movf	noolite_send@endpos,w
  3493  03B2  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3494  03B3  0086               	movwf	6
  3495  03B4  0820               	movf	_startaddress,w
  3496  03B5  00F3               	movwf	??_noolite_send
  3497  03B6  0821               	movf	_startaddress+1,w
  3498  03B7  00F4               	movwf	??_noolite_send+1
  3499  03B8  0822               	movf	_startaddress+2,w
  3500  03B9  00F5               	movwf	??_noolite_send+2
  3501  03BA  0823               	movf	_startaddress+3,w
  3502  03BB  00F6               	movwf	??_noolite_send+3
  3503  03BC  0852               	movf	noolite_send@chn,w
  3504  03BD  00F7               	movwf	??_noolite_send+4
  3505  03BE  01F8               	clrf	??_noolite_send+5
  3506  03BF  01F9               	clrf	??_noolite_send+6
  3507  03C0  01FA               	clrf	??_noolite_send+7
  3508  03C1  07F3               	addwf	??_noolite_send,f
  3509  03C2  0878               	movf	??_noolite_send+5,w
  3510  03C3  3DF4               	addwfc	??_noolite_send+1,f
  3511  03C4  0879               	movf	??_noolite_send+6,w
  3512  03C5  3DF5               	addwfc	??_noolite_send+2,f
  3513  03C6  087A               	movf	??_noolite_send+7,w
  3514  03C7  3DF6               	addwfc	??_noolite_send+3,f
  3515  03C8  0876               	movf	??_noolite_send+3,w
  3516  03C9  00F3               	movwf	??_noolite_send
  3517  03CA  01F4               	clrf	??_noolite_send+1
  3518  03CB  01F5               	clrf	??_noolite_send+2
  3519  03CC  01F6               	clrf	??_noolite_send+3
  3520  03CD  2BF5               	goto	L6
  3521  03CE                     l1483:	
  3522                           ;noolite.c: 234: } else {
  3523                           
  3524                           ;noolite.c: 233: endpos++;
  3525                           
  3526                           
  3527                           ;noolite.c: 235: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3528  03CE  0855               	movf	noolite_send@endpos,w
  3529  03CF  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3530  03D0  0086               	movwf	6
  3531  03D1  0187               	clrf	7
  3532  03D2  0852               	movf	noolite_send@chn,w
  3533  03D3  0720               	addwf	_startaddress,w
  3534  03D4  0081               	movwf	1
  3535                           
  3536                           ;noolite.c: 236: endpos++;
  3537  03D5  0AD5               	incf	noolite_send@endpos,f
  3538                           
  3539                           ;noolite.c: 237: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3540  03D6  0855               	movf	noolite_send@endpos,w
  3541  03D7  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3542  03D8  0086               	movwf	6
  3543  03D9  0820               	movf	_startaddress,w
  3544  03DA  00F3               	movwf	??_noolite_send
  3545  03DB  0821               	movf	_startaddress+1,w
  3546  03DC  00F4               	movwf	??_noolite_send+1
  3547  03DD  0822               	movf	_startaddress+2,w
  3548  03DE  00F5               	movwf	??_noolite_send+2
  3549  03DF  0823               	movf	_startaddress+3,w
  3550  03E0  00F6               	movwf	??_noolite_send+3
  3551  03E1  0852               	movf	noolite_send@chn,w
  3552  03E2  00F7               	movwf	??_noolite_send+4
  3553  03E3  01F8               	clrf	??_noolite_send+5
  3554  03E4  01F9               	clrf	??_noolite_send+6
  3555  03E5  01FA               	clrf	??_noolite_send+7
  3556  03E6  07F3               	addwf	??_noolite_send,f
  3557  03E7  0878               	movf	??_noolite_send+5,w
  3558  03E8  3DF4               	addwfc	??_noolite_send+1,f
  3559  03E9  0879               	movf	??_noolite_send+6,w
  3560  03EA  3DF5               	addwfc	??_noolite_send+2,f
  3561  03EB  087A               	movf	??_noolite_send+7,w
  3562  03EC  3DF6               	addwfc	??_noolite_send+3,f
  3563  03ED  0874               	movf	??_noolite_send+1,w
  3564  03EE  00F3               	movwf	??_noolite_send
  3565  03EF  0875               	movf	??_noolite_send+2,w
  3566  03F0  00F4               	movwf	??_noolite_send+1
  3567  03F1  0876               	movf	??_noolite_send+3,w
  3568  03F2  00F5               	movwf	??_noolite_send+2
  3569  03F3  01F6               	clrf	??_noolite_send+3
  3570  03F4  0873               	movf	??_noolite_send,w
  3571  03F5                     L6:	
  3572  03F5  0081               	movwf	1
  3573                           
  3574                           ;noolite.c: 238: endpos++;
  3575  03F6  0AD5               	incf	noolite_send@endpos,f
  3576                           
  3577                           ;noolite.c: 239: }
  3578                           ;noolite.c: 240: noo_send_buffer[endpos] = noo_send_format;
  3579  03F7  0855               	movf	noolite_send@endpos,w
  3580  03F8  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3581  03F9  0086               	movwf	6
  3582  03FA  0187               	clrf	7
  3583  03FB  0871               	movf	noolite_send@noo_send_format,w
  3584  03FC  0081               	movwf	1
  3585                           
  3586                           ;noolite.c: 241: endpos++;
  3587  03FD  0AD5               	incf	noolite_send@endpos,f
  3588                           
  3589                           ;noolite.c: 242: temp_send = 0;
  3590  03FE  01D4               	clrf	noolite_send@temp_send
  3591                           
  3592                           ;noolite.c: 243: countbit = (unsigned char) (endpos * 8);
  3593  03FF  0855               	movf	noolite_send@endpos,w
  3594  0400  0709               	addwf	9,w
  3595  0401  0709               	addwf	9,w
  3596  0402  0709               	addwf	9,w
  3597  0403  00D1               	movwf	noolite_send@countbit
  3598                           
  3599                           ;noolite.c: 244: countsend = (uint8_t) (startpos + 1);
  3600  0404  0850               	movf	noolite_send@startpos,w
  3601  0405  3E01               	addlw	1
  3602  0406  00D3               	movwf	noolite_send@countsend
  3603  0407                     l1521:	
  3604                           ;noolite.c: 245: while (countsend < countbit) {
  3605                           
  3606  0407  0020               	movlb	0	; select bank0
  3607  0408  0851               	movf	noolite_send@countbit,w
  3608  0409  0253               	subwf	noolite_send@countsend,w
  3609  040A  1803               	btfsc	3,0
  3610  040B  2C31               	goto	l1523
  3611                           
  3612                           ;noolite.c: 246: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3613  040C  0853               	movf	noolite_send@countsend,w
  3614  040D  00F3               	movwf	??_noolite_send
  3615  040E  36F3               	lsrf	??_noolite_send,f
  3616  040F  36F3               	lsrf	??_noolite_send,f
  3617  0410  36F3               	lsrf	??_noolite_send,f
  3618  0411  0873               	movf	??_noolite_send,w
  3619  0412  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3620  0413  0086               	movwf	6
  3621  0414  3001               	movlw	1
  3622  0415  0187               	clrf	7
  3623  0416  00F4               	movwf	??_noolite_send+1
  3624  0417  0853               	movf	noolite_send@countsend,w
  3625  0418  3907               	andlw	7
  3626  0419  0A89               	incf	9,f
  3627  041A  2C1C               	goto	u784
  3628  041B                     u785:	
  3629  041B  35F4               	lslf	??_noolite_send+1,f
  3630  041C                     u784:	
  3631  041C  0B89               	decfsz	9,f
  3632  041D  2C1B               	goto	u785
  3633  041E  0874               	movf	??_noolite_send+1,w
  3634  041F  0501               	andwf	1,w
  3635  0420  1903               	btfsc	3,2
  3636  0421  2C24               	goto	l1503
  3637                           
  3638                           ;noolite.c: 247: temp_send = (uint8_t) (temp_send^0x01);
  3639  0422  3001               	movlw	1
  3640  0423  06D4               	xorwf	noolite_send@temp_send,f
  3641  0424                     l1503:	
  3642                           
  3643                           ;noolite.c: 248: }
  3644                           ;noolite.c: 249: tx_status &= (~(1<<4));
  3645  0424  122B               	bcf	_tx_status,4
  3646                           
  3647                           ;noolite.c: 250: if (((temp_send & (1<<0)) != 0)) {
  3648  0425  1C54               	btfss	noolite_send@temp_send,0
  3649  0426  2C2A               	goto	l1511
  3650                           
  3651                           ;noolite.c: 251: temp_send = (uint8_t) (temp_send^0x18);
  3652  0427  3018               	movlw	24
  3653  0428  06D4               	xorwf	noolite_send@temp_send,f
  3654                           
  3655                           ;noolite.c: 252: tx_status |= (1<<4);
  3656  0429  162B               	bsf	_tx_status,4
  3657  042A                     l1511:	
  3658                           
  3659                           ;noolite.c: 253: }
  3660                           ;noolite.c: 254: temp_send = (uint8_t) (temp_send >> 1);
  3661  042A  36D4               	lsrf	noolite_send@temp_send,f
  3662                           
  3663                           ;noolite.c: 255: temp_send &= (~(1<<7));
  3664  042B  13D4               	bcf	noolite_send@temp_send,7
  3665                           
  3666                           ;noolite.c: 256: if (((tx_status & (1<<4)) != 0)) {
  3667  042C  1A2B               	btfsc	_tx_status,4
  3668                           
  3669                           ;noolite.c: 257: temp_send |= (1<<7);
  3670  042D  17D4               	bsf	noolite_send@temp_send,7
  3671                           
  3672                           ;noolite.c: 258: }
  3673                           ;noolite.c: 259: countsend++;
  3674  042E  0AD3               	incf	noolite_send@countsend,f
  3675  042F  0064               	clrwdt	;# 
  3676  0430  2C07               	goto	l1521
  3677  0431                     l1523:	
  3678                           
  3679                           ;noolite.c: 261: }
  3680                           ;noolite.c: 262: noo_send_buffer[endpos] = temp_send;
  3681  0431  0855               	movf	noolite_send@endpos,w
  3682  0432  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3683  0433  0086               	movwf	6
  3684  0434  0187               	clrf	7
  3685  0435  0854               	movf	noolite_send@temp_send,w
  3686  0436  0081               	movwf	1
  3687  0437  30C0               	movlw	192
  3688                           
  3689                           ;noolite.c: 263: endpos++;
  3690  0438  0AD5               	incf	noolite_send@endpos,f
  3691                           
  3692                           ;noolite.c: 264: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3693  0439  0021               	movlb	1	; select bank1
  3694  043A  0595               	andwf	21,f	;volatile
  3695  043B  3003               	movlw	3
  3696  043C  0495               	iorwf	21,f	;volatile
  3697                           
  3698                           ;noolite.c: 265: temp_send = 3;
  3699  043D  0020               	movlb	0	; select bank0
  3700  043E  00D4               	movwf	noolite_send@temp_send
  3701  043F  3026               	movlw	38
  3702                           
  3703                           ;noolite.c: 266: tx_status &= (~(1<<2));
  3704  0440  112B               	bcf	_tx_status,2
  3705                           
  3706                           ;noolite.c: 267: tx_status &= (~(1<<3));
  3707  0441  11AB               	bcf	_tx_status,3
  3708                           
  3709                           ;noolite.c: 268: tx_status |= (1<<0);
  3710  0442  142B               	bsf	_tx_status,0
  3711                           
  3712                           ;noolite.c: 269: tx_status |= (1<<5);
  3713  0443  16AB               	bsf	_tx_status,5
  3714                           
  3715                           ;noolite.c: 270: countsend = 0;
  3716  0444  01D3               	clrf	noolite_send@countsend
  3717                           
  3718                           ;noolite.c: 271: countbit = 38;
  3719  0445  00D1               	movwf	noolite_send@countbit
  3720  0446  0064               	clrwdt	;# 
  3721                           
  3722                           ;noolite.c: 273: LATCbits.LATC3 = 1;
  3723  0447  0022               	movlb	2	; select bank2
  3724  0448  158E               	bsf	14,3	;volatile
  3725                           
  3726                           ;noolite.c: 274: _delay((unsigned long)((15)*(8000000/4000.0)));
  3727  0449  3027               	movlw	39
  3728  044A  00F3               	movwf	??_noolite_send
  3729  044B  30F5               	movlw	245
  3730  044C                     u1547:	
  3731  044C  0B89               	decfsz	9,f
  3732  044D  2C4C               	goto	u1547
  3733  044E  0BF3               	decfsz	??_noolite_send,f
  3734  044F  2C4C               	goto	u1547
  3735  0450  0000               	nop
  3736                           
  3737                           ;noolite.c: 275: LATCbits.LATC3 = 0;
  3738  0451  0022               	movlb	2	; select bank2
  3739  0452  118E               	bcf	14,3	;volatile
  3740                           
  3741                           ;noolite.c: 276: TMR0 = 196;
  3742  0453  30C4               	movlw	196
  3743  0454  0020               	movlb	0	; select bank0
  3744  0455  0095               	movwf	21	;volatile
  3745                           
  3746                           ;noolite.c: 277: TMR0IF = 0;
  3747  0456  110B               	bcf	11,2	;volatile
  3748                           
  3749                           ;noolite.c: 278: TMR0IE = 0;
  3750  0457  128B               	bcf	11,5	;volatile
  3751  0458                     l201:	
  3752                           ;noolite.c: 279: while (((tx_status & (1<<3)) == 0)) {
  3753                           
  3754  0458  19AB               	btfsc	_tx_status,3
  3755  0459  2CB2               	goto	l212
  3756                           
  3757                           ;noolite.c: 280: if (TMR0IF) {
  3758  045A  1D0B               	btfss	11,2	;volatile
  3759  045B  2C58               	goto	l201
  3760                           
  3761                           ;noolite.c: 281: __nop();
  3762  045C  0000               	nop
  3763                           
  3764                           ;noolite.c: 282: if (countsend < countbit) {
  3765  045D  0020               	movlb	0	; select bank0
  3766  045E  0851               	movf	noolite_send@countbit,w
  3767  045F  0253               	subwf	noolite_send@countsend,w
  3768  0460  1803               	skipnc
  3769  0461  2C79               	goto	l204
  3770                           
  3771                           ;noolite.c: 283: if (((tx_status & (1<<2)) == 0)) {
  3772  0462  192B               	btfsc	_tx_status,2
  3773  0463  2C70               	goto	l1571
  3774                           
  3775                           ;noolite.c: 284: if (((tx_status & (1<<0)) == 0)) {
  3776  0464  182B               	btfsc	_tx_status,0
  3777  0465  2C69               	goto	l206
  3778                           
  3779                           ;noolite.c: 285: LATAbits.LATA5 = 1;
  3780  0466  0022               	movlb	2	; select bank2
  3781  0467  168C               	bsf	12,5	;volatile
  3782                           
  3783                           ;noolite.c: 286: } else {
  3784  0468  2C6B               	goto	l1567
  3785  0469                     l206:	
  3786                           
  3787                           ;noolite.c: 287: LATAbits.LATA5 = 0;
  3788  0469  0022               	movlb	2	; select bank2
  3789  046A  128C               	bcf	12,5	;volatile
  3790  046B                     l1567:	
  3791                           
  3792                           ;noolite.c: 288: }
  3793                           ;noolite.c: 289: TMR0 = 196;
  3794  046B  30C4               	movlw	196
  3795  046C  0020               	movlb	0	; select bank0
  3796  046D  0095               	movwf	21	;volatile
  3797                           
  3798                           ;noolite.c: 290: tx_status |= (1<<2);
  3799  046E  152B               	bsf	_tx_status,2
  3800                           
  3801                           ;noolite.c: 291: } else {
  3802  046F  2C95               	goto	l209
  3803  0470                     l1571:	
  3804                           
  3805                           ;noolite.c: 292: LATA ^= (1<<5);
  3806  0470  3020               	movlw	32
  3807  0471  0022               	movlb	2	; select bank2
  3808  0472  068C               	xorwf	12,f	;volatile
  3809                           
  3810                           ;noolite.c: 293: TMR0 = 196;
  3811  0473  30C4               	movlw	196
  3812  0474  0020               	movlb	0	; select bank0
  3813  0475  0095               	movwf	21	;volatile
  3814                           
  3815                           ;noolite.c: 294: tx_status &= (~(1<<2));
  3816  0476  112B               	bcf	_tx_status,2
  3817                           
  3818                           ;noolite.c: 295: countsend++;
  3819  0477  0AD3               	incf	noolite_send@countsend,f
  3820  0478  2C95               	goto	l209
  3821  0479                     l204:	
  3822                           
  3823                           ;noolite.c: 298: LATAbits.LATA5 = 0;
  3824  0479  0022               	movlb	2	; select bank2
  3825  047A  128C               	bcf	12,5	;volatile
  3826                           
  3827                           ;noolite.c: 299: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3828  047B  30C0               	movlw	192
  3829  047C  0021               	movlb	1	; select bank1
  3830  047D  0595               	andwf	21,f	;volatile
  3831  047E  3003               	movlw	3
  3832  047F  0495               	iorwf	21,f	;volatile
  3833                           
  3834                           ;noolite.c: 300: TMR0 = 67;
  3835  0480  3043               	movlw	67
  3836  0481  0020               	movlb	0	; select bank0
  3837  0482  0095               	movwf	21	;volatile
  3838  0483  0064               	clrwdt	;# 
  3839                           
  3840                           ;noolite.c: 302: tx_status &= (~(1<<5));
  3841  0484  0020               	movlb	0	; select bank0
  3842  0485  12AB               	bcf	_tx_status,5
  3843                           
  3844                           ;noolite.c: 303: countsend = startpos;
  3845  0486  0850               	movf	noolite_send@startpos,w
  3846  0487  00D3               	movwf	noolite_send@countsend
  3847                           
  3848                           ;noolite.c: 304: countbit = (uint8_t) (endpos * 8);
  3849  0488  0855               	movf	noolite_send@endpos,w
  3850  0489  0709               	addwf	9,w
  3851  048A  0709               	addwf	9,w
  3852  048B  0709               	addwf	9,w
  3853  048C  00D1               	movwf	noolite_send@countbit
  3854                           
  3855                           ;noolite.c: 305: if (temp_send != 0) {
  3856  048D  0854               	movf	noolite_send@temp_send,w
  3857  048E  1903               	btfsc	3,2
  3858  048F  2C92               	goto	l1587
  3859                           
  3860                           ;noolite.c: 306: temp_send--;
  3861  0490  03D4               	decf	noolite_send@temp_send,f
  3862                           
  3863                           ;noolite.c: 307: } else {
  3864  0491  2C95               	goto	l209
  3865  0492                     l1587:	
  3866                           
  3867                           ;noolite.c: 308: TMR0 = 0;
  3868  0492  0195               	clrf	21	;volatile
  3869                           
  3870                           ;noolite.c: 309: tx_status |= (1<<3);
  3871  0493  15AB               	bsf	_tx_status,3
  3872                           
  3873                           ;noolite.c: 310: break;
  3874  0494  2CB2               	goto	l212
  3875  0495                     l209:	
  3876                           
  3877                           ;noolite.c: 311: }
  3878                           ;noolite.c: 312: }
  3879                           ;noolite.c: 313: if (((tx_status & (1<<5)) == 0)) {
  3880  0495  1AAB               	btfsc	_tx_status,5
  3881  0496  2CB0               	goto	l213
  3882                           
  3883                           ;noolite.c: 314: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3884  0497  0853               	movf	noolite_send@countsend,w
  3885  0498  00F3               	movwf	??_noolite_send
  3886  0499  36F3               	lsrf	??_noolite_send,f
  3887  049A  36F3               	lsrf	??_noolite_send,f
  3888  049B  36F3               	lsrf	??_noolite_send,f
  3889  049C  0873               	movf	??_noolite_send,w
  3890  049D  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3891  049E  0086               	movwf	6
  3892  049F  3001               	movlw	1
  3893  04A0  0187               	clrf	7
  3894  04A1  00F4               	movwf	??_noolite_send+1
  3895  04A2  0853               	movf	noolite_send@countsend,w
  3896  04A3  3907               	andlw	7
  3897  04A4  0A89               	incf	9,f
  3898  04A5  2CA7               	goto	u894
  3899  04A6                     u895:	
  3900  04A6  35F4               	lslf	??_noolite_send+1,f
  3901  04A7                     u894:	
  3902  04A7  0B89               	decfsz	9,f
  3903  04A8  2CA6               	goto	u895
  3904  04A9  0874               	movf	??_noolite_send+1,w
  3905  04AA  0501               	andwf	1,w
  3906  04AB  1903               	btfsc	3,2
  3907  04AC  2CAF               	goto	l214
  3908                           
  3909                           ;noolite.c: 315: tx_status |= (1<<0);
  3910  04AD  142B               	bsf	_tx_status,0
  3911                           
  3912                           ;noolite.c: 316: } else {
  3913  04AE  2CB0               	goto	l213
  3914  04AF                     l214:	
  3915                           
  3916                           ;noolite.c: 317: tx_status &= (~(1<<0));
  3917  04AF  102B               	bcf	_tx_status,0
  3918  04B0                     l213:	
  3919                           
  3920                           ;noolite.c: 318: }
  3921                           ;noolite.c: 319: }
  3922                           ;noolite.c: 320: TMR0IF = 0;
  3923  04B0  110B               	bcf	11,2	;volatile
  3924  04B1  2C58               	goto	l201
  3925  04B2                     l212:	
  3926                           
  3927                           ;noolite.c: 321: }
  3928                           ;noolite.c: 322: }
  3929                           ;noolite.c: 323: TMR0IF = 0;
  3930  04B2  110B               	bcf	11,2	;volatile
  3931                           
  3932                           ;noolite.c: 324: LATAbits.LATA5 = 0;
  3933  04B3  0022               	movlb	2	; select bank2
  3934  04B4  128C               	bcf	12,5	;volatile
  3935  04B5  0008               	return
  3936  04B6                     __end_of_noolite_send:	
  3937                           
  3938                           	psect	text9
  3939  0117                     __ptext9:	
  3940 ;; *************** function _Init_TypeFromFlash *****************
  3941 ;; Defined at:
  3942 ;;		line 23 in file "user_functions.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  type            2    0[COMMON] PTR const unsigned int 
  3945 ;;		 -> Type(16), 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/2
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1
  3957 ;;      Params:         2       0       0
  3958 ;;      Locals:         0       0       0
  3959 ;;      Temps:          2       0       0
  3960 ;;      Totals:         4       0       0
  3961 ;;Total ram usage:        4 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_main
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           
  3971                           ;psect for function _Init_TypeFromFlash
  3972  0117                     _Init_TypeFromFlash:	
  3973                           
  3974                           ;user_functions.c: 24: if (((type[0] >> 8) == 0x5A) && ((type[0] & 0xFF) < 4)) {
  3975                           
  3976                           ;incstack = 0
  3977                           ; Regs used in _Init_TypeFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3978  0117  0870               	movf	Init_TypeFromFlash@type,w
  3979  0118  0084               	movwf	4
  3980  0119  0871               	movf	Init_TypeFromFlash@type+1,w
  3981  011A  0085               	movwf	5
  3982  011B  3F00               	moviw [0]fsr0
  3983  011C  00F2               	movwf	??_Init_TypeFromFlash
  3984  011D  3F01               	moviw [1]fsr0
  3985  011E  00F3               	movwf	??_Init_TypeFromFlash+1
  3986  011F  00F2               	movwf	??_Init_TypeFromFlash
  3987  0120  305A               	movlw	90
  3988  0121  01F3               	clrf	??_Init_TypeFromFlash+1
  3989  0122  0672               	xorwf	??_Init_TypeFromFlash,w
  3990  0123  1D03               	btfss	3,2
  3991  0124  3400               	retlw	0
  3992  0125  0870               	movf	Init_TypeFromFlash@type,w
  3993  0126  0084               	movwf	4
  3994  0127  0871               	movf	Init_TypeFromFlash@type+1,w
  3995  0128  0085               	movwf	5
  3996  0129  0800               	movf	0,w	;code access
  3997  012A  00F2               	movwf	??_Init_TypeFromFlash
  3998  012B  3004               	movlw	4
  3999  012C  0272               	subwf	??_Init_TypeFromFlash,w
  4000  012D  1803               	skipnc
  4001  012E  3400               	retlw	0
  4002                           
  4003                           ;user_functions.c: 25: return (type[0] & 0xFF);
  4004  012F  0870               	movf	Init_TypeFromFlash@type,w
  4005  0130  0084               	movwf	4
  4006  0131  0871               	movf	Init_TypeFromFlash@type+1,w
  4007  0132  0085               	movwf	5
  4008  0133  0800               	movf	0,w	;code access
  4009  0134  0008               	return
  4010  0135                     __end_of_Init_TypeFromFlash:	
  4011                           ;user_functions.c: 27: return 0;
  4012                           
  4013                           
  4014                           	psect	text10
  4015  0283                     __ptext10:	
  4016 ;; *************** function _Init_TxStatusFromFlash *****************
  4017 ;; Defined at:
  4018 ;;		line 31 in file "user_functions.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  txStatus        2    0[COMMON] PTR const unsigned int 
  4021 ;;		 -> TxStatus(16), 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  cellNum         1    8[COMMON] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      unsigned char 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4028 ;; Tracked objects:
  4029 ;;		On entry : 1F/0
  4030 ;;		On exit  : 1F/0
  4031 ;;		Unchanged: 1F/0
  4032 ;; Data sizes:     COMMON   BANK0   BANK1
  4033 ;;      Params:         2       0       0
  4034 ;;      Locals:         1       0       0
  4035 ;;      Temps:          6       0       0
  4036 ;;      Totals:         9       0       0
  4037 ;;Total ram usage:        9 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           
  4047                           ;psect for function _Init_TxStatusFromFlash
  4048  0283                     _Init_TxStatusFromFlash:	
  4049                           
  4050                           ;user_functions.c: 32: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _Init_TxStatusFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  4054  0283  01F8               	clrf	Init_TxStatusFromFlash@cellNum
  4055  0284                     l1687:	
  4056                           
  4057                           ;user_functions.c: 33: if (txStatus[cellNum] == 0xFFFF) {
  4058  0284  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4059  0285  00F2               	movwf	??_Init_TxStatusFromFlash
  4060  0286  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4061  0287  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4062  0288  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4063  0289  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4064  028A  0772               	addwf	??_Init_TxStatusFromFlash,w
  4065  028B  0084               	movwf	4
  4066  028C  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4067  028D  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4068  028E  0085               	movwf	5
  4069  028F  0012               	moviw fsr0++
  4070  0290  3AFF               	xorlw	255
  4071  0291  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4072  0292  0012               	moviw fsr0++
  4073  0293  3AFF               	xorlw	255
  4074  0294  04F4               	iorwf	??_Init_TxStatusFromFlash+2,f
  4075  0295  1D03               	btfss	3,2
  4076  0296  2ADF               	goto	l1709
  4077                           
  4078                           ;user_functions.c: 34: if (cellNum > 0) {
  4079  0297  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4080  0298  1903               	btfsc	3,2
  4081  0299  3400               	retlw	0
  4082                           
  4083                           ;user_functions.c: 35: if (((txStatus[cellNum - 1] >> 8) == 0x5A) && ((txStatus[cellNum 
      +                          - 1] & 0xFF) < 3)) {
  4084  029A  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4085  029B  00F2               	movwf	??_Init_TxStatusFromFlash
  4086  029C  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4087  029D  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4088  029E  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4089  029F  0872               	movf	??_Init_TxStatusFromFlash,w
  4090  02A0  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4091  02A1  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4092  02A2  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4093  02A3  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4094  02A4  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4095  02A5  30FE               	movlw	254
  4096  02A6  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4097  02A7  0084               	movwf	4
  4098  02A8  30FF               	movlw	255
  4099  02A9  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4100  02AA  0085               	movwf	5
  4101  02AB  3F00               	moviw [0]fsr0
  4102  02AC  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4103  02AD  3F01               	moviw [1]fsr0
  4104  02AE  00F7               	movwf	??_Init_TxStatusFromFlash+5
  4105  02AF  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4106  02B0  305A               	movlw	90
  4107  02B1  01F7               	clrf	??_Init_TxStatusFromFlash+5
  4108  02B2  0676               	xorwf	??_Init_TxStatusFromFlash+4,w
  4109  02B3  1D03               	btfss	3,2
  4110  02B4  3400               	retlw	0
  4111  02B5  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4112  02B6  00F2               	movwf	??_Init_TxStatusFromFlash
  4113  02B7  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4114  02B8  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4115  02B9  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4116  02BA  0872               	movf	??_Init_TxStatusFromFlash,w
  4117  02BB  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4118  02BC  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4119  02BD  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4120  02BE  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4121  02BF  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4122  02C0  30FE               	movlw	254
  4123  02C1  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4124  02C2  0084               	movwf	4
  4125  02C3  30FF               	movlw	255
  4126  02C4  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4127  02C5  0085               	movwf	5
  4128  02C6  0800               	movf	0,w	;code access
  4129  02C7  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4130  02C8  3003               	movlw	3
  4131  02C9  0276               	subwf	??_Init_TxStatusFromFlash+4,w
  4132  02CA  1803               	skipnc
  4133  02CB  3400               	retlw	0
  4134                           
  4135                           ;user_functions.c: 36: return txStatus[cellNum - 1];
  4136  02CC  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4137  02CD  00F2               	movwf	??_Init_TxStatusFromFlash
  4138  02CE  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4139  02CF  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4140  02D0  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4141  02D1  0872               	movf	??_Init_TxStatusFromFlash,w
  4142  02D2  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4143  02D3  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4144  02D4  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4145  02D5  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4146  02D6  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4147  02D7  30FE               	movlw	254
  4148  02D8  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4149  02D9  0084               	movwf	4
  4150  02DA  30FF               	movlw	255
  4151  02DB  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4152  02DC  0085               	movwf	5
  4153  02DD  0800               	movf	0,w	;code access
  4154  02DE  0008               	return
  4155  02DF                     l1709:	
  4156                           ;user_functions.c: 38: return 0;
  4157                           
  4158                           
  4159                           ;user_functions.c: 44: if (cellNum == 7) {
  4160  02DF  3007               	movlw	7
  4161  02E0  0678               	xorwf	Init_TxStatusFromFlash@cellNum,w
  4162  02E1  1D03               	btfss	3,2
  4163  02E2  2B16               	goto	l1725
  4164                           
  4165                           ;user_functions.c: 45: if (((txStatus[cellNum] >> 8) == 0x5A) && ((txStatus[cellNum] & 0
      +                          xFF) < 3)) {
  4166  02E3  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4167  02E4  00F2               	movwf	??_Init_TxStatusFromFlash
  4168  02E5  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4169  02E6  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4170  02E7  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4171  02E8  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4172  02E9  0772               	addwf	??_Init_TxStatusFromFlash,w
  4173  02EA  0084               	movwf	4
  4174  02EB  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4175  02EC  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4176  02ED  0085               	movwf	5
  4177  02EE  3F00               	moviw [0]fsr0
  4178  02EF  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4179  02F0  3F01               	moviw [1]fsr0
  4180  02F1  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4181  02F2  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4182  02F3  305A               	movlw	90
  4183  02F4  01F5               	clrf	??_Init_TxStatusFromFlash+3
  4184  02F5  0674               	xorwf	??_Init_TxStatusFromFlash+2,w
  4185  02F6  1D03               	btfss	3,2
  4186  02F7  3400               	retlw	0
  4187  02F8  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4188  02F9  00F2               	movwf	??_Init_TxStatusFromFlash
  4189  02FA  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4190  02FB  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4191  02FC  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4192  02FD  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4193  02FE  0772               	addwf	??_Init_TxStatusFromFlash,w
  4194  02FF  0084               	movwf	4
  4195  0300  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4196  0301  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4197  0302  0085               	movwf	5
  4198  0303  0800               	movf	0,w	;code access
  4199  0304  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4200  0305  3003               	movlw	3
  4201  0306  0274               	subwf	??_Init_TxStatusFromFlash+2,w
  4202  0307  1803               	skipnc
  4203  0308  3400               	retlw	0
  4204                           
  4205                           ;user_functions.c: 46: return txStatus[cellNum];
  4206  0309  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4207  030A  00F2               	movwf	??_Init_TxStatusFromFlash
  4208  030B  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4209  030C  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4210  030D  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4211  030E  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4212  030F  0772               	addwf	??_Init_TxStatusFromFlash,w
  4213  0310  0084               	movwf	4
  4214  0311  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4215  0312  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4216  0313  0085               	movwf	5
  4217  0314  0800               	movf	0,w	;code access
  4218  0315  0008               	return
  4219  0316                     l1725:	
  4220  0316  3008               	movlw	8
  4221  0317  0AF8               	incf	Init_TxStatusFromFlash@cellNum,f
  4222  0318  0278               	subwf	Init_TxStatusFromFlash@cellNum,w
  4223  0319  1803               	btfsc	3,0
  4224  031A  3400               	retlw	0
  4225  031B  2A84               	goto	l1687
  4226  031C                     __end_of_Init_TxStatusFromFlash:	
  4227                           
  4228                           	psect	text11
  4229  00F4                     __ptext11:	
  4230 ;; *************** function _Init_IO *****************
  4231 ;; Defined at:
  4232 ;;		line 46 in file "periph_config.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;		None
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;		None
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, status,2
  4241 ;; Tracked objects:
  4242 ;;		On entry : B1F/0
  4243 ;;		On exit  : B1F/2
  4244 ;;		Unchanged: B00/0
  4245 ;; Data sizes:     COMMON   BANK0   BANK1
  4246 ;;      Params:         0       0       0
  4247 ;;      Locals:         0       0       0
  4248 ;;      Temps:          0       0       0
  4249 ;;      Totals:         0       0       0
  4250 ;;Total ram usage:        0 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_main
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function _Init_IO
  4261  00F4                     _Init_IO:	
  4262                           
  4263                           ;periph_config.c: 47: OPTION_REGbits.nWPUEN = 0;
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _Init_IO: [wreg+status,2]
  4267  00F4  0021               	movlb	1	; select bank1
  4268  00F5  1395               	bcf	21,7	;volatile
  4269                           
  4270                           ;periph_config.c: 48: TRISA = 0x1F;
  4271  00F6  301F               	movlw	31
  4272  00F7  008C               	movwf	12	;volatile
  4273                           
  4274                           ;periph_config.c: 49: ANSELA = 0;
  4275  00F8  0023               	movlb	3	; select bank3
  4276  00F9  018C               	clrf	12	;volatile
  4277                           
  4278                           ;periph_config.c: 50: WPUA = 0x08;
  4279  00FA  3008               	movlw	8
  4280  00FB  0024               	movlb	4	; select bank4
  4281  00FC  008C               	movwf	12	;volatile
  4282                           
  4283                           ;periph_config.c: 52: TRISC = 0x00;
  4284  00FD  0021               	movlb	1	; select bank1
  4285  00FE  018E               	clrf	14	;volatile
  4286                           
  4287                           ;periph_config.c: 53: ANSELC = 0;
  4288  00FF  0023               	movlb	3	; select bank3
  4289  0100  018E               	clrf	14	;volatile
  4290                           
  4291                           ;periph_config.c: 54: LATC = 0x00;
  4292  0101  0022               	movlb	2	; select bank2
  4293  0102  018E               	clrf	14	;volatile
  4294  0103  0008               	return
  4295  0104                     __end_of_Init_IO:	
  4296                           
  4297                           	psect	text12
  4298  00DA                     __ptext12:	
  4299 ;; *************** function _Init_CLK *****************
  4300 ;; Defined at:
  4301 ;;		line 15 in file "periph_config.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : B1F/2
  4312 ;;		On exit  : B1F/1
  4313 ;;		Unchanged: B00/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1
  4315 ;;      Params:         0       0       0
  4316 ;;      Locals:         0       0       0
  4317 ;;      Temps:          0       0       0
  4318 ;;      Totals:         0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_main
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function _Init_CLK
  4330  00DA                     _Init_CLK:	
  4331                           
  4332                           ;periph_config.c: 18: OSCCONbits.IRCF = 0b1110;
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _Init_CLK: [wreg+status,2+status,0]
  4336  00DA  0021               	movlb	1	; select bank1
  4337  00DB  0819               	movf	25,w	;volatile
  4338  00DC  3987               	andlw	-121
  4339  00DD  3870               	iorlw	112
  4340  00DE  0099               	movwf	25	;volatile
  4341                           
  4342                           ;periph_config.c: 34: WDTCONbits.WDTPS = 0b01011;
  4343  00DF  0817               	movf	23,w	;volatile
  4344  00E0  39C1               	andlw	-63
  4345  00E1  3816               	iorlw	22
  4346  00E2  0097               	movwf	23	;volatile
  4347                           
  4348                           ;periph_config.c: 41: WDTCONbits.SWDTEN = 1;
  4349  00E3  1417               	bsf	23,0	;volatile
  4350  00E4                     l271:	
  4351                           ;periph_config.c: 42: while (!OSCSTATbits.HFIOFR) {
  4352                           
  4353  00E4  1A1A               	btfsc	26,4	;volatile
  4354  00E5  0008               	return
  4355  00E6  28E4               	goto	l271
  4356  00E7                     __end_of_Init_CLK:	
  4357                           
  4358                           	psect	text13
  4359  00CE                     __ptext13:	
  4360 ;; *************** function _Init_ADC *****************
  4361 ;; Defined at:
  4362 ;;		line 57 in file "periph_config.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;		None
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;		None
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0
  4371 ;; Tracked objects:
  4372 ;;		On entry : B1F/1
  4373 ;;		On exit  : B1F/1
  4374 ;;		Unchanged: B00/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1
  4376 ;;      Params:         0       0       0
  4377 ;;      Locals:         0       0       0
  4378 ;;      Temps:          0       0       0
  4379 ;;      Totals:         0       0       0
  4380 ;;Total ram usage:        0 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; This function calls:
  4383 ;;		Nothing
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _Init_ADC
  4391  00CE                     _Init_ADC:	
  4392                           
  4393                           ;periph_config.c: 58: FVRCON = 0;
  4394                           
  4395                           ;incstack = 0
  4396                           ; Regs used in _Init_ADC: [wreg+status,2+status,0]
  4397  00CE  0022               	movlb	2	; select bank2
  4398  00CF  0197               	clrf	23	;volatile
  4399                           
  4400                           ;periph_config.c: 60: ADCON1bits.ADFM = 1;
  4401  00D0  0021               	movlb	1	; select bank1
  4402  00D1  179E               	bsf	30,7	;volatile
  4403                           
  4404                           ;periph_config.c: 61: ADCON1bits.ADCS = 0b001;
  4405  00D2  081E               	movf	30,w	;volatile
  4406  00D3  398F               	andlw	-113
  4407  00D4  3810               	iorlw	16
  4408  00D5  009E               	movwf	30	;volatile
  4409                           
  4410                           ;periph_config.c: 64: ADCON1bits.ADPREF = 0b00;
  4411  00D6  30FC               	movlw	-4
  4412  00D7  059E               	andwf	30,f	;volatile
  4413                           
  4414                           ;periph_config.c: 66: ADCON0bits.ADON = 0;
  4415  00D8  101D               	bcf	29,0	;volatile
  4416  00D9  0008               	return
  4417  00DA                     __end_of_Init_ADC:	
  4418  007E                     btemp	set	126	;btemp
  4419  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      64
    BANK1            32      0       0

Pointer List with Targets:

    KeyLongHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyLongHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    KeyOffHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyOffHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    SaveTxStatusToFlash@txStatusArray	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TxStatusFromFlash@txStatus	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TypeFromFlash@type	PTR const unsigned int  size(2) Largest target is 16
		 -> Type(CODE[16]), 

    noolite_send@data	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_KeyOffHandler
    _SaveTxStatusToFlash->_FlashWrite
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK0

    _main->_KeyLongHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   18923
                                             22 BANK0      6     6      0
                      _FlashEraseRow
                         _FlashWrite
                           _Init_ADC
                           _Init_CLK
                            _Init_IO
             _Init_TxStatusFromFlash
                 _Init_TypeFromFlash
                     _KeyLongHandler
                      _KeyOffHandler
                            _RF_Init
                _SaveTxStatusToFlash
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _SaveTxStatusToFlash                                 12     7      5    1536
                                              4 COMMON     9     4      5
                                              0 BANK0      3     3      0
                      _FlashEraseRow
                         _FlashWrite
 ---------------------------------------------------------------------------------
 (2) _FlashWrite                                           4     0      4     858
                                              0 COMMON     4     0      4
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (2) _FlashEraseRow                                        2     0      2     173
                                              0 COMMON     2     0      2
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (3) _FlashUnlock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Init                                              7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _KeyOffHandler                                        5     2      3    5130
                                             11 COMMON     3     0      3
                                             18 BANK0      2     2      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _KeyLongHandler                                       5     1      4    5820
                                             11 COMMON     1     1      0
                                             18 BANK0      4     0      4
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _noolite_send                                        29    26      3    3312
                                              0 COMMON    11     8      3
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _Init_TypeFromFlash                                   4     2      2     194
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_TxStatusFromFlash                               9     7      2     462
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_CLK                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashEraseRow
     _FlashUnlock
   _FlashWrite
     _FlashUnlock
   _Init_ADC
   _Init_CLK
   _Init_IO
   _Init_TxStatusFromFlash
   _Init_TypeFromFlash
   _KeyLongHandler
     _noolite_send
   _KeyOffHandler
     _noolite_send
   _RF_Init
   _SaveTxStatusToFlash
     _FlashEraseRow
       _FlashUnlock
     _FlashWrite
       _FlashUnlock
   _noolite_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Nov 01 19:10:16 2018

                      __CFG_CP$ON 0000                                l82 0526                                l83 053F  
                              l84 0548                                l76 0511                                l68 0507  
                              l93 05BB                                l87 0580                               l201 0458  
                             l212 04B2                               l204 0479                               l213 04B0  
                             l214 04AF                               l206 0469                               l144 0788  
                             l209 0495                               l180 0281                               l271 00E4  
                             l185 0330                               l187 033E                               l179 0231  
                             l188 033A                               u784 041C                               u785 041B  
                             u894 04A7                               u895 04A6                      __CFG_IDLOC0$ 0000  
                    __CFG_IDLOC1$ 0007                      __CFG_IDLOC2$ 0000                      __CFG_IDLOC3$ 0007  
                    __CFG_BORV$LO 0000                               wreg 0009                       main@chn_250 005D  
                     main@chn_251 005E                       main@chn_252 005F          ??_Init_TxStatusFromFlash 0072  
                    __CFG_LVP$OFF 0000                   ?_KeyLongHandler 0056                              l2003 06BE  
                            l2011 06DE                              l2021 0718                              l2023 0726  
                            l2015 06F0                              l2017 06FE                              l2009 06D0  
                            l2041 0772                              l2051 0789                              l2035 0760  
                            l2027 0734                              l2019 070B                              l2043 0780  
                            l2123 0530                              l2029 0742                              l1511 042A  
                            l1503 0424                              l2063 07A8                              l2047 0783  
                            l1521 0407                              l1523 0431                              l1443 0332  
                            l1461 034D                              l1449 033B                              l1571 0470  
                            l1483 03CE                              l1467 0364                              l1725 0316  
                            l1709 02DF                              l1661 022F                              l1805 04CB  
                            l1567 046B                              l1761 015B                              l1913 0583  
                            l1905 056C                              l1833 0505                              l1587 0492  
                            l1739 0175                              l1907 057A                              l1843 04F9  
                            l1835 04ED                              l1861 050B                              l1687 0284  
                            l1759 0155                              l1783 01D5                              l1935 05BE  
                            l1927 05AA                              l1863 050C                              l1769 01A2  
                            l1961 061F                              l1929 05B9                              l1873 0521  
                            l1881 0527                              l1849 04FE                              l1787 01F1  
                            l1971 0635                              l1963 0620                              l1955 060E  
                            l1867 0514                              l1883 053B                              l1973 0641  
                            l1957 061D                              l1885 053D                              l1869 051B  
                            l1983 066D                              l1975 064B                              l1985 067C  
                            l1977 0656                              l1897 054B                              l1979 0661  
                            l1997 06A9                              _LATA 010C                              _LATC 010E  
                            u1507 05FC                              u1517 07A3                              u1527 0180  
                            u1537 018F                              u1547 044C                              _TMR0 0015  
                            _WPUA 020C                              _Keys 002C                      _startaddress 0020  
                    __CFG_WRT$OFF 0000                              _Type 07C0                              _main 04B6  
                 __end_of_RF_Init 0283                              fsr0h 0005                              fsr1h 0007  
                            indf0 0000                              fsr0l 0004                              indf1 0001  
                            fsr1l 0006                              btemp 007E     SaveTxStatusToFlash@adrToWrite 0044  
    noolite_send@noo_send_command 0070                              start 0001               __end_of_FlashUnlock 00CE  
                   __CFG_MCLRE$ON 0000                   __end_of_Init_IO 0104                     __CFG_LPBOR$ON 0000  
                           ?_main 0070                        _FlashWrite 0104                             _PORTA 000C  
                           _TRISA 008C                             _TRISC 008E                     __CFG_PWRTE$ON 0000  
                 ??_KeyOffHandler 0056           __p_system_settings_text 07EE                      _Type_absaddr 07C0  
                           status 0003                             wtemp0 007E                   __initialization 07E0  
                    __end_of_Type 07D0                      __end_of_main 07C0                  __end_of_Init_ADC 00DA  
                __end_of_Init_CLK 00E7                            ??_main 005A                  _TxStatus_absaddr 07D0  
  Init_TxStatusFromFlash@txStatus 0070                  __end_of_TxStatus 07E0   __size_of_Init_TxStatusFromFlash 0099  
                       ??_RF_Init 0070                            _ANSELA 018C                            _ANSELC 018E  
      __end_of_Init_TypeFromFlash 0135                            _FVRCON 0117                       _FlashUnlock 00C8  
                          _PMADRH 0192                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON2 0196                            _TMR0IE 005D  
                          _TMR0IF 005A                      __p_Type_text 07C0                         ??_Init_IO 0070  
                  __CFG_STVREN$ON 0000                   _system_settings 07EE              noolite_send@countbit 0051  
           __end_of_FlashEraseRow 00F4                       ?_FlashWrite 0070                   noolite_send@chn 0052  
            noolite_send@startpos 0050           __end_of__initialization 07E6     Init_TxStatusFromFlash@cellNum 0078  
                  __pcstackCOMMON 0070            _Init_TxStatusFromFlash 0283       __end_of_SaveTxStatusToFlash 01F8  
                ??_KeyLongHandler 007B                    _OPTION_REGbits 0095             KeyLongHandler@nooData 0059  
                      __pbssBANK0 0020                         ?_Init_ADC 0070                         ?_Init_CLK 0070  
         __end_of_system_settings 07FF               __size_of_FlashWrite 0013                        __pmaintext 04B6  
                         _RF_Init 01F8              FlashEraseRow@rowAddr 0070                        ??_Init_ADC 0070  
                      ??_Init_CLK 0070                           _DevMode 0027                           _DevType 0028  
                         _Init_IO 00F4                     ?_noolite_send 0070            Init_TypeFromFlash@type 0070  
                         __ptext1 01A1                           __ptext2 0104                           __ptext3 00E7  
                         __ptext4 00C8                           __ptext5 01F8                           __ptext6 0161  
                         __ptext7 0135                           __ptext8 031C                           __ptext9 0117  
           noolite_send@countsend 0053                           main@chn 005C             __end_of_KeyOffHandler 01A1  
                         clrloop0 07E9              end_of_initialization 07E6                      ?_FlashUnlock 0070  
                noolite_send@data 0072             noolite_send@temp_send 0054                    FlashWrite@addr 0070  
              _Init_TypeFromFlash 0117                    ??_noolite_send 0073               ?_Init_TypeFromFlash 0070  
                    ??_FlashWrite 0074        SaveTxStatusToFlash@cellNum 0046                  __CFG_FOSC$INTOSC 0000  
            ??_Init_TypeFromFlash 0072           ?_Init_TxStatusFromFlash 0070                __end_of_FlashWrite 0117  
  SaveTxStatusToFlash@txStatusAdr 0076    SaveTxStatusToFlash@txStatusVal 0078               start_initialization 07E0  
  __end_of_Init_TxStatusFromFlash 031C                 __size_of_Init_ADC 000C                 __size_of_Init_CLK 000D  
          __size_of_FlashEraseRow 000D                  __p_TxStatus_text 07D0      __size_of_SaveTxStatusToFlash 0057  
                       ___latbits 0000                     __pcstackBANK0 0044                          ?_RF_Init 0070  
            __end_of_noolite_send 04B6              __size_of_FlashUnlock 0006                          ?_Init_IO 0070  
            KeyOffHandler@nooData 007D                     _noo_send_data 0040                     _FlashEraseRow 00E7  
                __CFG_WDTE$SWDTEN 0000           __size_of_KeyLongHandler 002C                          _LATAbits 010C  
                        _LATCbits 010E                         clear_ram0 07E8                  KeyOffHandler@cmd 007C  
                KeyOffHandler@chn 007B                  KeyOffHandler@key 0057       noolite_send@noo_send_buffer 0044  
     noolite_send@noo_send_format 0071  SaveTxStatusToFlash@txStatusArray 0074                        _ADCON0bits 009D  
                      _ADCON1bits 009E                    ?_FlashEraseRow 0070                         _tx_status 002B  
                __size_of_RF_Init 008B                          _Init_ADC 00CE                          _Init_CLK 00DA  
                    _SkipHandling 0026                  _noo_address_type 0024                  __size_of_Init_IO 0010  
              noolite_send@endpos 0055                          _TxStatus 07D0            __size_of_KeyOffHandler 0040  
           __size_of_noolite_send 019A                          __ptext10 0283                          __ptext11 00F4  
                        __ptext12 00DA                          __ptext13 00CE               _OffDelayTicks_100ms 0025  
                     _tick3_100ms 0029                     __size_of_main 030A       __size_of_Init_TypeFromFlash 001E  
             _SaveTxStatusToFlash 01A1                   ??_FlashEraseRow 0072                      _noolite_send 031C  
                     _OSCSTATbits 009A              ?_SaveTxStatusToFlash 0074                        _INTCONbits 000B  
               __CFG_BOREN$NSLEEP 0000                     _KeyOffHandler 0161                    _KeyLongHandler 0135  
    KeyLongHandler@ticksToTrigger 0058                        _PMCON1bits 0195              FlashWrite@flash_data 0072  
               __CFG_CLKOUTEN$OFF 0000                _LedPulseTick_100ms 002A                        _OSCCONbits 0099  
           ??_SaveTxStatusToFlash 0079                 KeyLongHandler@cmd 0057                 KeyLongHandler@chn 0056  
                      _OPTION_REG 0095                 KeyLongHandler@key 007B                        _WDTCONbits 0097  
          __end_of_KeyLongHandler 0161                    ?_KeyOffHandler 007B                     ??_FlashUnlock 0070  
         _system_settings_absaddr 07EE  
