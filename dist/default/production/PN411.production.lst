

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Sep 08 08:57:58 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	_system_settings_text,global,class=CODE,delta=2
     5                           	psect	_TxStatus_text,global,class=CODE,delta=2
     6                           	psect	_Type_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16LF1503 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000E                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0097                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  010C                     	;# 
   104  010E                     	;# 
   105  0111                     	;# 
   106  0112                     	;# 
   107  0113                     	;# 
   108  0114                     	;# 
   109  0115                     	;# 
   110  0116                     	;# 
   111  0117                     	;# 
   112  0118                     	;# 
   113  0119                     	;# 
   114  011D                     	;# 
   115  018C                     	;# 
   116  018E                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  020C                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0391                     	;# 
   142  0392                     	;# 
   143  0393                     	;# 
   144  0498                     	;# 
   145  0498                     	;# 
   146  0499                     	;# 
   147  049A                     	;# 
   148  049B                     	;# 
   149  049B                     	;# 
   150  049C                     	;# 
   151  049D                     	;# 
   152  049E                     	;# 
   153  049F                     	;# 
   154  0611                     	;# 
   155  0612                     	;# 
   156  0613                     	;# 
   157  0613                     	;# 
   158  0614                     	;# 
   159  0615                     	;# 
   160  0616                     	;# 
   161  0616                     	;# 
   162  0617                     	;# 
   163  0618                     	;# 
   164  0619                     	;# 
   165  0619                     	;# 
   166  061A                     	;# 
   167  061B                     	;# 
   168  061C                     	;# 
   169  061C                     	;# 
   170  0691                     	;# 
   171  0692                     	;# 
   172  0693                     	;# 
   173  0694                     	;# 
   174  0695                     	;# 
   175  0F0F                     	;# 
   176  0F10                     	;# 
   177  0F11                     	;# 
   178  0F12                     	;# 
   179  0F13                     	;# 
   180  0F14                     	;# 
   181  0F15                     	;# 
   182  0F16                     	;# 
   183  0F17                     	;# 
   184  0F18                     	;# 
   185  0F19                     	;# 
   186  0F1A                     	;# 
   187  0F1B                     	;# 
   188  0F1C                     	;# 
   189  0F1D                     	;# 
   190  0F1E                     	;# 
   191  0F1F                     	;# 
   192  0FE3                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000E                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  008C                     	;# 
   231  008E                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010E                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011D                     	;# 
   258  018C                     	;# 
   259  018E                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  020C                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0214                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0216                     	;# 
   281  0216                     	;# 
   282  0217                     	;# 
   283  0217                     	;# 
   284  0391                     	;# 
   285  0392                     	;# 
   286  0393                     	;# 
   287  0498                     	;# 
   288  0498                     	;# 
   289  0499                     	;# 
   290  049A                     	;# 
   291  049B                     	;# 
   292  049B                     	;# 
   293  049C                     	;# 
   294  049D                     	;# 
   295  049E                     	;# 
   296  049F                     	;# 
   297  0611                     	;# 
   298  0612                     	;# 
   299  0613                     	;# 
   300  0613                     	;# 
   301  0614                     	;# 
   302  0615                     	;# 
   303  0616                     	;# 
   304  0616                     	;# 
   305  0617                     	;# 
   306  0618                     	;# 
   307  0619                     	;# 
   308  0619                     	;# 
   309  061A                     	;# 
   310  061B                     	;# 
   311  061C                     	;# 
   312  061C                     	;# 
   313  0691                     	;# 
   314  0692                     	;# 
   315  0693                     	;# 
   316  0694                     	;# 
   317  0695                     	;# 
   318  0F0F                     	;# 
   319  0F10                     	;# 
   320  0F11                     	;# 
   321  0F12                     	;# 
   322  0F13                     	;# 
   323  0F14                     	;# 
   324  0F15                     	;# 
   325  0F16                     	;# 
   326  0F17                     	;# 
   327  0F18                     	;# 
   328  0F19                     	;# 
   329  0F1A                     	;# 
   330  0F1B                     	;# 
   331  0F1C                     	;# 
   332  0F1D                     	;# 
   333  0F1E                     	;# 
   334  0F1F                     	;# 
   335  0FE3                     	;# 
   336  0FE4                     	;# 
   337  0FE5                     	;# 
   338  0FE6                     	;# 
   339  0FE7                     	;# 
   340  0FE8                     	;# 
   341  0FE9                     	;# 
   342  0FEA                     	;# 
   343  0FEB                     	;# 
   344  0FED                     	;# 
   345  0FEE                     	;# 
   346  0FEF                     	;# 
   347  0000                     	;# 
   348  0001                     	;# 
   349  0002                     	;# 
   350  0003                     	;# 
   351  0004                     	;# 
   352  0005                     	;# 
   353  0006                     	;# 
   354  0007                     	;# 
   355  0008                     	;# 
   356  0009                     	;# 
   357  000A                     	;# 
   358  000B                     	;# 
   359  000C                     	;# 
   360  000E                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008E                     	;# 
   375  0091                     	;# 
   376  0092                     	;# 
   377  0093                     	;# 
   378  0095                     	;# 
   379  0096                     	;# 
   380  0097                     	;# 
   381  0099                     	;# 
   382  009A                     	;# 
   383  009B                     	;# 
   384  009B                     	;# 
   385  009C                     	;# 
   386  009D                     	;# 
   387  009E                     	;# 
   388  009F                     	;# 
   389  010C                     	;# 
   390  010E                     	;# 
   391  0111                     	;# 
   392  0112                     	;# 
   393  0113                     	;# 
   394  0114                     	;# 
   395  0115                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  0118                     	;# 
   399  0119                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018E                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  020C                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  0391                     	;# 
   428  0392                     	;# 
   429  0393                     	;# 
   430  0498                     	;# 
   431  0498                     	;# 
   432  0499                     	;# 
   433  049A                     	;# 
   434  049B                     	;# 
   435  049B                     	;# 
   436  049C                     	;# 
   437  049D                     	;# 
   438  049E                     	;# 
   439  049F                     	;# 
   440  0611                     	;# 
   441  0612                     	;# 
   442  0613                     	;# 
   443  0613                     	;# 
   444  0614                     	;# 
   445  0615                     	;# 
   446  0616                     	;# 
   447  0616                     	;# 
   448  0617                     	;# 
   449  0618                     	;# 
   450  0619                     	;# 
   451  0619                     	;# 
   452  061A                     	;# 
   453  061B                     	;# 
   454  061C                     	;# 
   455  061C                     	;# 
   456  0691                     	;# 
   457  0692                     	;# 
   458  0693                     	;# 
   459  0694                     	;# 
   460  0695                     	;# 
   461  0F0F                     	;# 
   462  0F10                     	;# 
   463  0F11                     	;# 
   464  0F12                     	;# 
   465  0F13                     	;# 
   466  0F14                     	;# 
   467  0F15                     	;# 
   468  0F16                     	;# 
   469  0F17                     	;# 
   470  0F18                     	;# 
   471  0F19                     	;# 
   472  0F1A                     	;# 
   473  0F1B                     	;# 
   474  0F1C                     	;# 
   475  0F1D                     	;# 
   476  0F1E                     	;# 
   477  0F1F                     	;# 
   478  0FE3                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  07EE                     _system_settings_absaddr	set	2030
   491  07D0                     _TxStatus_absaddr	set	2000
   492  07C0                     _Type_absaddr	set	1984
   493  07EE                     _system_settings_absaddr	set	2030
   494                           
   495                           	psect	_system_settings_text
   496  07EE                     __p_system_settings_text:	
   497  07EE                     _system_settings:	
   498  07EE  3443               	retlw	67
   499  07EF  3404               	retlw	4
   500  07F0  345F               	retlw	95
   501  07F1  3441               	retlw	65
   502  07F2  341F               	retlw	31
   503  07F3  34FB               	retlw	251
   504  07F4  345F               	retlw	95
   505  07F5  3441               	retlw	65
   506  07F6  3478               	retlw	120
   507  07F7  3456               	retlw	86
   508  07F8  3434               	retlw	52
   509  07F9  3412               	retlw	18
   510  07FA  345F               	retlw	95
   511  07FB  3442               	retlw	66
   512  07FC  3410               	retlw	16
   513  07FD  3400               	retlw	0
   514  07FE  345F               	retlw	95
   515  07FF                     __end_of_system_settings:	
   516  07D0                     _TxStatus_absaddr	set	2000
   517                           
   518                           	psect	_TxStatus_text
   519  07D0                     __p_TxStatus_text:	
   520  07D0                     _TxStatus:	
   521  07D0  34FF               	retlw	255
   522  07D1  34FF               	retlw	255
   523  07D2  34FF               	retlw	255
   524  07D3  34FF               	retlw	255
   525  07D4  34FF               	retlw	255
   526  07D5  34FF               	retlw	255
   527  07D6  34FF               	retlw	255
   528  07D7  34FF               	retlw	255
   529  07D8  34FF               	retlw	255
   530  07D9  34FF               	retlw	255
   531  07DA  34FF               	retlw	255
   532  07DB  34FF               	retlw	255
   533  07DC  34FF               	retlw	255
   534  07DD  34FF               	retlw	255
   535  07DE  34FF               	retlw	255
   536  07DF  34FF               	retlw	255
   537  07E0                     __end_of_TxStatus:	
   538  07C0                     _Type_absaddr	set	1984
   539                           
   540                           	psect	_Type_text
   541  07C0                     __p_Type_text:	
   542  07C0                     _Type:	
   543  07C0  34FF               	retlw	255
   544  07C1  34FF               	retlw	255
   545  07C2  34FF               	retlw	255
   546  07C3  34FF               	retlw	255
   547  07C4  34FF               	retlw	255
   548  07C5  34FF               	retlw	255
   549  07C6  34FF               	retlw	255
   550  07C7  34FF               	retlw	255
   551  07C8  34FF               	retlw	255
   552  07C9  34FF               	retlw	255
   553  07CA  34FF               	retlw	255
   554  07CB  34FF               	retlw	255
   555  07CC  34FF               	retlw	255
   556  07CD  34FF               	retlw	255
   557  07CE  34FF               	retlw	255
   558  07CF  34FF               	retlw	255
   559  07D0                     __end_of_Type:	
   560  0015                     _TMR0	set	21
   561  000C                     _PORTA	set	12
   562  000B                     _INTCONbits	set	11
   563  005D                     _TMR0IE	set	93
   564  005A                     _TMR0IF	set	90
   565  0095                     _OPTION_REG	set	149
   566  009D                     _ADCON0bits	set	157
   567  009E                     _ADCON1bits	set	158
   568  008E                     _TRISC	set	142
   569  008C                     _TRISA	set	140
   570  0095                     _OPTION_REGbits	set	149
   571  009A                     _OSCSTATbits	set	154
   572  0097                     _WDTCONbits	set	151
   573  0099                     _OSCCONbits	set	153
   574  010C                     _LATA	set	268
   575  010C                     _LATAbits	set	268
   576  010E                     _LATCbits	set	270
   577  0117                     _FVRCON	set	279
   578  010E                     _LATC	set	270
   579  0196                     _PMCON2	set	406
   580  0193                     _PMDATL	set	403
   581  0194                     _PMDATH	set	404
   582  0191                     _PMADRL	set	401
   583  0192                     _PMADRH	set	402
   584  0195                     _PMCON1bits	set	405
   585  018E                     _ANSELC	set	398
   586  018C                     _ANSELA	set	396
   587  020C                     _WPUA	set	524
   588                           
   589                           ; #config settings
   590  0007                     
   591                           	psect	cinit
   592  07E0                     start_initialization:	
   593  07E0                     __initialization:	
   594                           
   595                           ; Clear objects allocated to BANK0
   596  07E0  3020               	movlw	low __pbssBANK0
   597  07E1  0084               	movwf	4
   598  07E2  3000               	movlw	high __pbssBANK0
   599  07E3  0085               	movwf	5
   600  07E4  3024               	movlw	36
   601  07E5  27E8               	fcall	clear_ram0
   602  07E6                     end_of_initialization:	
   603                           ;End of C runtime variable initialization code
   604                           
   605  07E6                     __end_of__initialization:	
   606  07E6  0020               	movlb	0
   607  07E7  2C84               	ljmp	_main	;jump to C main() function
   608                           
   609                           	psect	bssBANK0
   610  0020                     __pbssBANK0:	
   611  0020                     _startaddress:	
   612  0020                     	ds	4
   613  0024                     _noo_address_type:	
   614  0024                     	ds	1
   615  0025                     _SkipHandling:	
   616  0025                     	ds	1
   617  0026                     _DevMode:	
   618  0026                     	ds	1
   619  0027                     _DevType:	
   620  0027                     	ds	1
   621  0028                     _tick3_100ms:	
   622  0028                     	ds	1
   623  0029                     _LedPulseTick_100ms:	
   624  0029                     	ds	1
   625  002A                     _BattLowSent:	
   626  002A                     	ds	1
   627  002B                     _tx_status:	
   628  002B                     	ds	1
   629  002C                     _Keys:	
   630  002C                     	ds	20
   631  0040                     _noo_send_data:	
   632  0040                     	ds	4
   633                           
   634                           	psect	clrtext
   635  07E8                     clear_ram0:	
   636                           ;	Called with FSR0 containing the base address, and
   637                           ;	WREG with the size to clear
   638                           
   639  07E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   640  07E9                     clrloop0:	
   641  07E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   642  07EA  3101               	addfsr 0,1
   643  07EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   644  07EC  2FE9               	goto	clrloop0	;have we reached the end yet?
   645  07ED  3400               	retlw	0	;all done for this memory range, return
   646                           
   647                           	psect	cstackCOMMON
   648  0070                     __pcstackCOMMON:	
   649  0070                     ?_noolite_send:	
   650  0070                     ?_RF_Init:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ??_RF_Init:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_FlashEraseRow:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_FlashWrite:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_Init_CLK:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ??_Init_CLK:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_Init_IO:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ??_Init_IO:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_Init_ADC:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ??_Init_ADC:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_Init_TypeFromFlash:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ??_Init_TypeFromFlash:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_Init_TxStatusFromFlash:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ??_Init_TxStatusFromFlash:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_main:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_FlashUnlock:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ??_FlashUnlock:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     noolite_send@noo_send_command:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     FlashEraseRow@rowAddr:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     FlashWrite@addr:	
   708                           ; 2 bytes @ 0x0
   709                           
   710                           
   711                           ; 2 bytes @ 0x0
   712  0070                     	ds	1
   713  0071                     noolite_send@noo_send_format:	
   714                           
   715                           ; 1 bytes @ 0x1
   716  0071                     	ds	1
   717  0072                     ??_FlashEraseRow:	
   718  0072                     noolite_send@data:	
   719                           ; 1 bytes @ 0x2
   720                           
   721  0072                     FlashWrite@flash_data:	
   722                           ; 1 bytes @ 0x2
   723                           
   724                           
   725                           ; 2 bytes @ 0x2
   726  0072                     	ds	1
   727  0073                     ??_noolite_send:	
   728                           
   729                           ; 1 bytes @ 0x3
   730  0073                     	ds	1
   731  0074                     ??_FlashWrite:	
   732  0074                     Init_TxStatusFromFlash@cellNum:	
   733                           ; 1 bytes @ 0x4
   734                           
   735                           
   736                           ; 1 bytes @ 0x4
   737  0074                     	ds	7
   738  007B                     ?_KeyOffHandler:	
   739  007B                     ?_KeyLongHandler:	
   740                           ; 1 bytes @ 0xB
   741                           
   742  007B                     KeyOffHandler@chn:	
   743                           ; 1 bytes @ 0xB
   744                           
   745  007B                     KeyLongHandler@chn:	
   746                           ; 1 bytes @ 0xB
   747                           
   748                           
   749                           ; 1 bytes @ 0xB
   750  007B                     	ds	1
   751  007C                     KeyOffHandler@cmd:	
   752  007C                     KeyLongHandler@cmd:	
   753                           ; 1 bytes @ 0xC
   754                           
   755                           
   756                           ; 1 bytes @ 0xC
   757  007C                     	ds	1
   758  007D                     ??_KeyOffHandler:	
   759  007D                     KeyLongHandler@ticksToTrigger:	
   760                           ; 1 bytes @ 0xD
   761                           
   762                           
   763                           ; 1 bytes @ 0xD
   764  007D                     	ds	1
   765  007E                     ??_KeyLongHandler:	
   766                           
   767                           	psect	cstackBANK0
   768  0044                     __pcstackBANK0:	
   769                           ; 1 bytes @ 0xE
   770                           
   771  0044                     noolite_send@noo_send_buffer:	
   772                           
   773                           ; 12 bytes @ 0x0
   774  0044                     	ds	12
   775  0050                     noolite_send@startpos:	
   776                           
   777                           ; 1 bytes @ 0xC
   778  0050                     	ds	1
   779  0051                     noolite_send@countbit:	
   780                           
   781                           ; 1 bytes @ 0xD
   782  0051                     	ds	1
   783  0052                     noolite_send@chn:	
   784                           
   785                           ; 1 bytes @ 0xE
   786  0052                     	ds	1
   787  0053                     noolite_send@countsend:	
   788                           
   789                           ; 1 bytes @ 0xF
   790  0053                     	ds	1
   791  0054                     noolite_send@temp_send:	
   792                           
   793                           ; 1 bytes @ 0x10
   794  0054                     	ds	1
   795  0055                     noolite_send@endpos:	
   796                           
   797                           ; 1 bytes @ 0x11
   798  0055                     	ds	1
   799  0056                     KeyOffHandler@key:	
   800  0056                     KeyLongHandler@key:	
   801                           ; 1 bytes @ 0x12
   802                           
   803                           
   804                           ; 1 bytes @ 0x12
   805  0056                     	ds	1
   806  0057                     ??_main:	
   807                           
   808                           ; 1 bytes @ 0x13
   809  0057                     	ds	4
   810  005B                     main@adrToWrite:	
   811                           
   812                           ; 2 bytes @ 0x17
   813  005B                     	ds	3
   814  005E                     main@cellNum:	
   815                           
   816                           ; 1 bytes @ 0x1A
   817  005E                     	ds	1
   818  005F                     main@chn:	
   819                           
   820                           ; 1 bytes @ 0x1B
   821  005F                     	ds	1
   822  0060                     main@chn_436:	
   823                           
   824                           ; 1 bytes @ 0x1C
   825  0060                     	ds	1
   826  0061                     main@chn_437:	
   827                           
   828                           ; 1 bytes @ 0x1D
   829  0061                     	ds	1
   830  0062                     main@chn_438:	
   831                           
   832                           ; 1 bytes @ 0x1E
   833  0062                     	ds	1
   834                           
   835                           	psect	maintext
   836  0484                     __pmaintext:	
   837 ;;
   838 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   839 ;;
   840 ;; *************** function _main *****************
   841 ;; Defined at:
   842 ;;		line 308 in file "main.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  adrToWrite      2   23[BANK0 ] unsigned int 
   847 ;;  chn             1   30[BANK0 ] unsigned char 
   848 ;;  chn             1   29[BANK0 ] unsigned char 
   849 ;;  chn             1   28[BANK0 ] unsigned char 
   850 ;;  chn             1   27[BANK0 ] unsigned char 
   851 ;;  cellNum         1   26[BANK0 ] unsigned char 
   852 ;;  chn             1    0        unsigned char 
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   857 ;; Tracked objects:
   858 ;;		On entry : B1F/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMMON   BANK0   BANK1
   862 ;;      Params:         0       0       0
   863 ;;      Locals:         0       8       0
   864 ;;      Temps:          0       4       0
   865 ;;      Totals:         0      12       0
   866 ;;Total ram usage:       12 bytes
   867 ;; Hardware stack levels required when called:    2
   868 ;; This function calls:
   869 ;;		_FlashEraseRow
   870 ;;		_FlashWrite
   871 ;;		_Init_ADC
   872 ;;		_Init_CLK
   873 ;;		_Init_IO
   874 ;;		_Init_TxStatusFromFlash
   875 ;;		_Init_TypeFromFlash
   876 ;;		_KeyLongHandler
   877 ;;		_KeyOffHandler
   878 ;;		_RF_Init
   879 ;;		_noolite_send
   880 ;; This function is called by:
   881 ;;		Startup code after reset
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function _main
   887  0484                     _main:	
   888                           
   889                           ;main.c: 309: Init_IO();
   890                           
   891                           ;incstack = 0
   892                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   893  0484  2115               	fcall	_Init_IO
   894                           
   895                           ;main.c: 310: Init_CLK();
   896  0485  2108               	fcall	_Init_CLK
   897                           
   898                           ;main.c: 312: Init_ADC();
   899  0486  20EF               	fcall	_Init_ADC
   900                           
   901                           ;main.c: 313: RF_Init();
   902  0487  225F               	fcall	_RF_Init
   903                           
   904                           ;main.c: 315: LATCbits.LATC5 = 1;
   905  0488  0022               	movlb	2	; select bank2
   906  0489  168E               	bsf	14,5	;volatile
   907                           
   908                           ;main.c: 316: DevType = Init_TypeFromFlash();
   909  048A  2138               	fcall	_Init_TypeFromFlash
   910  048B  0020               	movlb	0	; select bank0
   911  048C  00A7               	movwf	_DevType
   912                           
   913                           ;main.c: 317: tx_status = Init_TxStatusFromFlash();
   914  048D  21D8               	fcall	_Init_TxStatusFromFlash
   915  048E  00AB               	movwf	_tx_status
   916                           
   917                           ;main.c: 320: INTCONbits.PEIE = 1;
   918  048F  170B               	bsf	11,6	;volatile
   919                           
   920                           ;main.c: 321: INTCONbits.GIE = 1;
   921  0490  178B               	bsf	11,7	;volatile
   922  0491                     l1813:	
   923                           
   924                           ;main.c: 324: Keys[0].State = (uint8_t) (PORTA & A_Pressed);
   925  0491  0020               	movlb	0	; select bank0
   926  0492  080C               	movf	12,w	;volatile
   927  0493  00AC               	movwf	_Keys
   928  0494  3002               	movlw	2
   929  0495  05AC               	andwf	_Keys,f
   930                           
   931                           ;main.c: 325: Keys[1].State = (uint8_t) (PORTA & B_Pressed);
   932  0496  080C               	movf	12,w	;volatile
   933  0497  00B0               	movwf	_Keys+4
   934  0498  3001               	movlw	1
   935  0499  05B0               	andwf	_Keys+4,f
   936                           
   937                           ;main.c: 326: Keys[2].State = (uint8_t) (PORTA & C_Pressed);
   938  049A  080C               	movf	12,w	;volatile
   939  049B  00B4               	movwf	_Keys+8
   940  049C  3004               	movlw	4
   941  049D  05B4               	andwf	_Keys+8,f
   942                           
   943                           ;main.c: 327: Keys[3].State = (uint8_t) (PORTA & D_Pressed);
   944  049E  080C               	movf	12,w	;volatile
   945  049F  00B8               	movwf	_Keys+12
   946  04A0  3010               	movlw	16
   947  04A1  05B8               	andwf	_Keys+12,f
   948                           
   949                           ;main.c: 328: Keys[4].State = (uint8_t) (PORTA & (C_Pressed | D_Pressed));
   950  04A2  080C               	movf	12,w	;volatile
   951  04A3  00BC               	movwf	_Keys+16
   952  04A4  3014               	movlw	20
   953  04A5  05BC               	andwf	_Keys+16,f
   954                           
   955                           ;main.c: 329: if (Keys[4].State == (C_Pressed | D_Pressed)) {
   956  04A6  063C               	xorwf	_Keys+16,w
   957  04A7  1D03               	btfss	3,2
   958  04A8  2CE0               	goto	l1877
   959                           
   960                           ;main.c: 330: SkipHandling = 10;
   961  04A9  300A               	movlw	10
   962  04AA  00A5               	movwf	_SkipHandling
   963                           
   964                           ;main.c: 331: if (Keys[4].Tick100ms < 15) {
   965  04AB  300F               	movlw	15
   966  04AC  023E               	subwf	_Keys+18,w
   967  04AD  1803               	skipnc
   968  04AE  2CB3               	goto	l1843
   969                           
   970                           ;main.c: 332: DevMode &= ~(UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
   971  04AF  30F9               	movlw	249
   972  04B0  05A6               	andwf	_DevMode,f
   973                           
   974                           ;main.c: 333: DevMode |= BIND_ACTIVE;
   975  04B1  1426               	bsf	_DevMode,0
   976                           
   977                           ;main.c: 335: } else if ((Keys[4].Tick100ms >= 35) && (Keys[4].Tick100ms < 49)) {
   978  04B2  2CDA               	goto	l1841
   979  04B3                     l1843:	
   980  04B3  3023               	movlw	35
   981  04B4  023E               	subwf	_Keys+18,w
   982  04B5  1C03               	skipc
   983  04B6  2CBD               	goto	l1849
   984  04B7  3031               	movlw	49
   985  04B8  023E               	subwf	_Keys+18,w
   986  04B9  1803               	skipnc
   987  04BA  2CBD               	goto	l1849
   988                           
   989                           ;main.c: 336: DevMode &= ~BIND_ACTIVE;
   990  04BB  1026               	bcf	_DevMode,0
   991                           
   992                           ;main.c: 337: } else if ((Keys[4].Tick100ms >= 50) && (Keys[4].Tick100ms < 85)) {
   993  04BC  2CDC               	goto	l149
   994  04BD                     l1849:	
   995  04BD  3032               	movlw	50
   996  04BE  023E               	subwf	_Keys+18,w
   997  04BF  3055               	movlw	85
   998  04C0  1C03               	skipc
   999  04C1  2CCA               	goto	L1
  1000  04C2  023E               	subwf	_Keys+18,w
  1001  04C3  1803               	skipnc
  1002  04C4  2CC9               	goto	l1859
  1003                           
  1004                           ;main.c: 338: DevMode &= ~(BIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1005  04C5  30FA               	movlw	250
  1006  04C6  05A6               	andwf	_DevMode,f
  1007                           
  1008                           ;main.c: 339: DevMode |= UNBIND_ACTIVE;
  1009  04C7  14A6               	bsf	_DevMode,1
  1010  04C8  2CDA               	goto	l1841
  1011  04C9                     l1859:	
  1012  04C9  3055               	movlw	85
  1013  04CA                     L1:	
  1014  04CA  023E               	subwf	_Keys+18,w
  1015  04CB  1C03               	skipc
  1016  04CC  2CD3               	goto	l1865
  1017  04CD  3063               	movlw	99
  1018  04CE  023E               	subwf	_Keys+18,w
  1019  04CF  1803               	skipnc
  1020  04D0  2CD3               	goto	l1865
  1021                           
  1022                           ;main.c: 342: DevMode &= ~UNBIND_ACTIVE;
  1023  04D1  10A6               	bcf	_DevMode,1
  1024                           
  1025                           ;main.c: 343: } else if (Keys[4].Tick100ms >= 100) {
  1026  04D2  2CDC               	goto	l149
  1027  04D3                     l1865:	
  1028  04D3  3064               	movlw	100
  1029  04D4  023E               	subwf	_Keys+18,w
  1030  04D5  1C03               	skipc
  1031  04D6  2CDC               	goto	l149
  1032                           
  1033                           ;main.c: 344: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE);
  1034  04D7  30FC               	movlw	252
  1035  04D8  05A6               	andwf	_DevMode,f
  1036                           
  1037                           ;main.c: 345: DevMode |= MODE_CHANGE_ACTIVE;
  1038  04D9  1526               	bsf	_DevMode,2
  1039  04DA                     l1841:	
  1040                           
  1041                           ;main.c: 334: tick3_100ms = 100;
  1042  04DA  3064               	movlw	100
  1043  04DB  00A8               	movwf	_tick3_100ms
  1044  04DC                     l149:	
  1045                           
  1046                           ;main.c: 347: }
  1047                           ;main.c: 348: Keys[4].Tick100ms++;
  1048  04DC  0ABE               	incf	_Keys+18,f
  1049                           
  1050                           ;main.c: 350: Keys[2].StateTemp = 0;
  1051  04DD  01B5               	clrf	_Keys+9
  1052                           
  1053                           ;main.c: 351: Keys[3].StateTemp = 0;
  1054  04DE  01B9               	clrf	_Keys+13
  1055                           
  1056                           ;main.c: 352: } else {
  1057  04DF  2CE1               	goto	l1879
  1058  04E0                     l1877:	
  1059                           
  1060                           ;main.c: 353: Keys[4].Tick100ms = 0;
  1061  04E0  01BE               	clrf	_Keys+18
  1062  04E1                     l1879:	
  1063                           
  1064                           ;main.c: 354: }
  1065                           ;main.c: 356: if (tick3_100ms != 0) {
  1066  04E1  0828               	movf	_tick3_100ms,w
  1067  04E2  1903               	btfsc	3,2
  1068  04E3  2D10               	goto	l1899
  1069                           
  1070                           ;main.c: 357: tick3_100ms--;
  1071  04E4  03A8               	decf	_tick3_100ms,f
  1072                           
  1073                           ;main.c: 358: switch (DevMode & 0x07) {
  1074  04E5  2CFC               	goto	l1897
  1075  04E6                     l160:	
  1076                           ;main.c: 359: case BIND_ACTIVE:
  1077                           
  1078                           
  1079                           ;main.c: 360: LATCbits.LATC3 = ON;
  1080  04E6  0022               	movlb	2	; select bank2
  1081  04E7  158E               	bsf	14,3	;volatile
  1082                           
  1083                           ;main.c: 361: break;
  1084  04E8  2D14               	goto	l167
  1085  04E9                     l1883:	
  1086                           
  1087                           ;main.c: 363: if (LedPulseTick_100ms++ > 2) {
  1088  04E9  0829               	movf	_LedPulseTick_100ms,w
  1089  04EA  0AA9               	incf	_LedPulseTick_100ms,f
  1090  04EB  00D7               	movwf	??_main
  1091  04EC  3003               	movlw	3
  1092  04ED  0257               	subwf	??_main,w
  1093  04EE  1C03               	skipc
  1094  04EF  2D14               	goto	l167
  1095  04F0                     l1885:	
  1096                           
  1097                           ;main.c: 364: LATCbits.LATC3 = ~LATCbits.LATC3;
  1098  04F0  3008               	movlw	8
  1099  04F1  0022               	movlb	2	; select bank2
  1100  04F2  068E               	xorwf	14,f	;volatile
  1101                           
  1102                           ;main.c: 365: LedPulseTick_100ms = 0;
  1103  04F3  0020               	movlb	0	; select bank0
  1104  04F4  01A9               	clrf	_LedPulseTick_100ms
  1105  04F5  2D14               	goto	l167
  1106  04F6                     l1889:	
  1107                           
  1108                           ;main.c: 369: if (LedPulseTick_100ms++ > 0) {
  1109  04F6  0AA9               	incf	_LedPulseTick_100ms,f
  1110  04F7  0329               	decf	_LedPulseTick_100ms,w
  1111  04F8  1903               	btfsc	3,2
  1112  04F9  2D14               	goto	l167
  1113  04FA  2CF0               	goto	l1885
  1114  04FB                     l166:	
  1115                           ;main.c: 374: default:
  1116                           
  1117                           ;main.c: 370: LATCbits.LATC3 = ~LATCbits.LATC3;
  1118                           
  1119  04FB  2D12               	goto	l1901
  1120  04FC                     l1897:	
  1121                           ;main.c: 376: break;
  1122                           
  1123                           ;main.c: 375: LATCbits.LATC3 = OFF;
  1124                           
  1125  04FC  0826               	movf	_DevMode,w
  1126  04FD  3907               	andlw	7
  1127  04FE  00D7               	movwf	??_main
  1128  04FF  01D8               	clrf	??_main+1
  1129                           
  1130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1131                           ; Switch size 1, requested type "space"
  1132                           ; Number of cases is 1, Range of values is 0 to 0
  1133                           ; switch strategies available:
  1134                           ; Name         Instructions Cycles
  1135                           ; simple_byte            4     3 (average)
  1136                           ; direct_byte            8     6 (fixed)
  1137                           ; jumptable            260     6 (fixed)
  1138                           ;	Chosen strategy is simple_byte
  1139  0500  0858               	movf	??_main+1,w
  1140  0501  3A00               	xorlw	0	; case 0
  1141  0502  1903               	skipnz
  1142  0503  2D05               	goto	l2185
  1143  0504  2CFB               	goto	l166
  1144  0505                     l2185:	
  1145                           
  1146                           ; Switch size 1, requested type "space"
  1147                           ; Number of cases is 3, Range of values is 1 to 4
  1148                           ; switch strategies available:
  1149                           ; Name         Instructions Cycles
  1150                           ; simple_byte           10     6 (average)
  1151                           ; direct_byte           17     9 (fixed)
  1152                           ; jumptable            263     9 (fixed)
  1153                           ;	Chosen strategy is simple_byte
  1154  0505  0857               	movf	??_main,w
  1155  0506  3A01               	xorlw	1	; case 1
  1156  0507  1903               	skipnz
  1157  0508  2CE6               	goto	l160
  1158  0509  3A03               	xorlw	3	; case 2
  1159  050A  1903               	skipnz
  1160  050B  2CE9               	goto	l1883
  1161  050C  3A06               	xorlw	6	; case 4
  1162  050D  1903               	skipnz
  1163  050E  2CF6               	goto	l1889
  1164  050F  2CFB               	goto	l166
  1165  0510                     l1899:	
  1166                           
  1167                           ;main.c: 379: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1168  0510  30F8               	movlw	248
  1169  0511  05A6               	andwf	_DevMode,f
  1170  0512                     l1901:	
  1171                           
  1172                           ;main.c: 380: LATCbits.LATC3 = OFF;
  1173  0512  0022               	movlb	2	; select bank2
  1174  0513  118E               	bcf	14,3	;volatile
  1175  0514                     l167:	
  1176                           
  1177                           ;main.c: 381: }
  1178                           ;main.c: 383: if (SkipHandling != 0) {
  1179  0514  0020               	movlb	0	; select bank0
  1180  0515  0825               	movf	_SkipHandling,w
  1181  0516  1903               	btfsc	3,2
  1182  0517  2D1D               	goto	l168
  1183                           
  1184                           ;main.c: 384: if (Keys[4].State == 0) {
  1185  0518  083C               	movf	_Keys+16,w
  1186  0519  1D03               	btfss	3,2
  1187  051A  2F3B               	goto	l2091
  1188                           
  1189                           ;main.c: 385: SkipHandling--;
  1190  051B  03A5               	decf	_SkipHandling,f
  1191  051C  2F3B               	goto	l2091
  1192  051D                     l168:	
  1193                           
  1194                           ;main.c: 388: if ((DevMode & BIND_ACTIVE) != 0) {
  1195  051D  1C26               	btfss	_DevMode,0
  1196  051E  2D55               	goto	l171
  1197                           
  1198                           ;main.c: 389: for (uint8_t chn = 0; chn < 4; chn++) {
  1199  051F  01DF               	clrf	main@chn
  1200  0520                     l1913:	
  1201                           
  1202                           ;main.c: 390: if (Keys[chn].State != Keys[chn].StateTemp) {
  1203  0520  085F               	movf	main@chn,w
  1204  0521  0709               	addwf	9,w
  1205  0522  0709               	addwf	9,w
  1206  0523  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1207  0524  0086               	movwf	6
  1208  0525  0187               	clrf	7
  1209  0526  085F               	movf	main@chn,w
  1210  0527  0709               	addwf	9,w
  1211  0528  0709               	addwf	9,w
  1212  0529  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1213  052A  0084               	movwf	4
  1214  052B  0185               	clrf	5
  1215  052C  0800               	movf	0,w
  1216  052D  0601               	xorwf	1,w
  1217  052E  1903               	skipnz
  1218  052F  2D4F               	goto	l1923
  1219                           
  1220                           ;main.c: 391: if (Keys[chn].State == 0) {
  1221  0530  085F               	movf	main@chn,w
  1222  0531  0709               	addwf	9,w
  1223  0532  0709               	addwf	9,w
  1224  0533  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1225  0534  0086               	movwf	6
  1226  0535  0801               	movf	1,w
  1227  0536  1D03               	btfss	3,2
  1228  0537  2D41               	goto	l1921
  1229                           
  1230                           ;main.c: 392: noolite_send(chn, 15, 0, &noo_send_data[0]);
  1231  0538  300F               	movlw	15
  1232  0539  00F0               	movwf	noolite_send@noo_send_command
  1233  053A  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1234  053B  01F1               	clrf	noolite_send@noo_send_format
  1235  053C  00F2               	movwf	noolite_send@data
  1236  053D  085F               	movf	main@chn,w
  1237  053E  22EA               	fcall	_noolite_send
  1238                           
  1239                           ;main.c: 393: DevMode &= ~BIND_ACTIVE;
  1240  053F  0020               	movlb	0	; select bank0
  1241  0540  1026               	bcf	_DevMode,0
  1242  0541                     l1921:	
  1243                           
  1244                           ;main.c: 394: }
  1245                           ;main.c: 395: Keys[chn].StateTemp = Keys[chn].State;
  1246  0541  085F               	movf	main@chn,w
  1247  0542  0709               	addwf	9,w
  1248  0543  0709               	addwf	9,w
  1249  0544  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1250  0545  0086               	movwf	6
  1251  0546  0187               	clrf	7
  1252  0547  085F               	movf	main@chn,w
  1253  0548  0709               	addwf	9,w
  1254  0549  0709               	addwf	9,w
  1255  054A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1256  054B  0084               	movwf	4
  1257  054C  0185               	clrf	5
  1258  054D  0800               	movf	0,w
  1259  054E  0081               	movwf	1
  1260  054F                     l1923:	
  1261  054F  3004               	movlw	4
  1262  0550  0ADF               	incf	main@chn,f
  1263  0551  025F               	subwf	main@chn,w
  1264  0552  1803               	btfsc	3,0
  1265  0553  2F3B               	goto	l2091
  1266  0554  2D20               	goto	l1913
  1267  0555                     l171:	
  1268  0555  1CA6               	btfss	_DevMode,1
  1269  0556  2D90               	goto	l177
  1270                           
  1271                           ;main.c: 399: for (uint8_t chn = 0; chn < 4; chn++) {
  1272  0557  01E0               	clrf	main@chn_436
  1273  0558                     l1929:	
  1274  0558  3004               	movlw	4
  1275  0559  0260               	subwf	main@chn_436,w
  1276  055A  1803               	btfsc	3,0
  1277  055B  2F3B               	goto	l2091
  1278                           
  1279                           ;main.c: 400: if (Keys[chn].State != Keys[chn].StateTemp) {
  1280  055C  0860               	movf	main@chn_436,w
  1281  055D  0709               	addwf	9,w
  1282  055E  0709               	addwf	9,w
  1283  055F  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1284  0560  0086               	movwf	6
  1285  0561  0187               	clrf	7
  1286  0562  0860               	movf	main@chn_436,w
  1287  0563  0709               	addwf	9,w
  1288  0564  0709               	addwf	9,w
  1289  0565  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1290  0566  0084               	movwf	4
  1291  0567  0185               	clrf	5
  1292  0568  0800               	movf	0,w
  1293  0569  0601               	xorwf	1,w
  1294  056A  1903               	skipnz
  1295  056B  2D8E               	goto	l1945
  1296                           
  1297                           ;main.c: 401: if (Keys[chn].State == 0) {
  1298  056C  0860               	movf	main@chn_436,w
  1299  056D  0709               	addwf	9,w
  1300  056E  0709               	addwf	9,w
  1301  056F  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1302  0570  0086               	movwf	6
  1303  0571  0801               	movf	1,w
  1304  0572  1D03               	btfss	3,2
  1305  0573  2D7F               	goto	l1943
  1306                           
  1307                           ;main.c: 402: noolite_send(chn, 9, 0, &noo_send_data[0]);
  1308  0574  3009               	movlw	9
  1309  0575  00F0               	movwf	noolite_send@noo_send_command
  1310  0576  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1311  0577  01F1               	clrf	noolite_send@noo_send_format
  1312  0578  00F2               	movwf	noolite_send@data
  1313  0579  0860               	movf	main@chn_436,w
  1314  057A  22EA               	fcall	_noolite_send
  1315                           
  1316                           ;main.c: 403: DevMode &= ~UNBIND_ACTIVE;
  1317  057B  0020               	movlb	0	; select bank0
  1318  057C  10A6               	bcf	_DevMode,1
  1319                           
  1320                           ;main.c: 404: LATCbits.LATC3 = OFF;
  1321  057D  0022               	movlb	2	; select bank2
  1322  057E  118E               	bcf	14,3	;volatile
  1323  057F                     l1943:	
  1324                           
  1325                           ;main.c: 405: }
  1326                           ;main.c: 406: Keys[chn].StateTemp = Keys[chn].State;
  1327  057F  0020               	movlb	0	; select bank0
  1328  0580  0860               	movf	main@chn_436,w
  1329  0581  0709               	addwf	9,w
  1330  0582  0709               	addwf	9,w
  1331  0583  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1332  0584  0086               	movwf	6
  1333  0585  0187               	clrf	7
  1334  0586  0860               	movf	main@chn_436,w
  1335  0587  0709               	addwf	9,w
  1336  0588  0709               	addwf	9,w
  1337  0589  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1338  058A  0084               	movwf	4
  1339  058B  0185               	clrf	5
  1340  058C  0800               	movf	0,w
  1341  058D  0081               	movwf	1
  1342  058E                     l1945:	
  1343  058E  0AE0               	incf	main@chn_436,f
  1344  058F  2D58               	goto	l1929
  1345  0590                     l177:	
  1346  0590  1D26               	btfss	_DevMode,2
  1347  0591  2E25               	goto	l1997
  1348                           
  1349                           ;main.c: 410: for (uint8_t chn = 0; chn < 4; chn++) {
  1350  0592  01E1               	clrf	main@chn_437
  1351  0593                     l1951:	
  1352  0593  3004               	movlw	4
  1353  0594  0261               	subwf	main@chn_437,w
  1354  0595  1803               	btfsc	3,0
  1355  0596  2F3B               	goto	l2091
  1356                           
  1357                           ;main.c: 411: if (Keys[chn].State != Keys[chn].StateTemp) {
  1358  0597  0861               	movf	main@chn_437,w
  1359  0598  0709               	addwf	9,w
  1360  0599  0709               	addwf	9,w
  1361  059A  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1362  059B  0086               	movwf	6
  1363  059C  0187               	clrf	7
  1364  059D  0861               	movf	main@chn_437,w
  1365  059E  0709               	addwf	9,w
  1366  059F  0709               	addwf	9,w
  1367  05A0  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1368  05A1  0084               	movwf	4
  1369  05A2  0185               	clrf	5
  1370  05A3  0800               	movf	0,w
  1371  05A4  0601               	xorwf	1,w
  1372  05A5  1903               	skipnz
  1373  05A6  2E23               	goto	l1993
  1374                           
  1375                           ;main.c: 412: if (Keys[chn].State == 0) {
  1376  05A7  0861               	movf	main@chn_437,w
  1377  05A8  0709               	addwf	9,w
  1378  05A9  0709               	addwf	9,w
  1379  05AA  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1380  05AB  0086               	movwf	6
  1381  05AC  0801               	movf	1,w
  1382  05AD  1D03               	btfss	3,2
  1383  05AE  2E14               	goto	l1991
  1384                           
  1385                           ;main.c: 413: noo_send_data[0] = Type[0] >> 8;
  1386  05AF  30C1               	movlw	193
  1387  05B0  0084               	movwf	4
  1388  05B1  3087               	movlw	135
  1389  05B2  0085               	movwf	5
  1390  05B3  0800               	movf	0,w	;code access
  1391  05B4  00C0               	movwf	_noo_send_data
  1392                           
  1393                           ;main.c: 414: noo_send_data[1] = Type[0];
  1394  05B5  30C0               	movlw	192
  1395  05B6  0084               	movwf	4
  1396  05B7  0800               	movf	0,w	;code access
  1397  05B8  00C1               	movwf	_noo_send_data+1
  1398                           
  1399                           ;main.c: 415: noo_send_data[2] = DevType;
  1400  05B9  0827               	movf	_DevType,w
  1401  05BA  00C2               	movwf	_noo_send_data+2
  1402                           
  1403                           ;main.c: 416: noolite_send(chn, 22, 7, &noo_send_data[0]);
  1404  05BB  3016               	movlw	22
  1405  05BC  00F0               	movwf	noolite_send@noo_send_command
  1406  05BD  3007               	movlw	7
  1407  05BE  00F1               	movwf	noolite_send@noo_send_format
  1408  05BF  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1409  05C0  00F2               	movwf	noolite_send@data
  1410  05C1  0861               	movf	main@chn_437,w
  1411  05C2  22EA               	fcall	_noolite_send
  1412                           
  1413                           ;main.c: 417: _delay((unsigned long)((500)*(8000000/4000.0)));
  1414  05C3  3006               	movlw	6
  1415  05C4  0020               	movlb	0	; select bank0
  1416  05C5  00D8               	movwf	??_main+1
  1417  05C6  3013               	movlw	19
  1418  05C7  00D7               	movwf	??_main
  1419  05C8  30AD               	movlw	173
  1420  05C9                     u1627:	
  1421  05C9  0B89               	decfsz	9,f
  1422  05CA  2DC9               	goto	u1627
  1423  05CB  0BD7               	decfsz	??_main,f
  1424  05CC  2DC9               	goto	u1627
  1425  05CD  0BD8               	decfsz	??_main+1,f
  1426  05CE  2DC9               	goto	u1627
  1427  05CF  3200               	nop2
  1428  05D0  0064               	clrwdt	;# 
  1429                           
  1430                           ;main.c: 419: LATCbits.LATC3 = ON;
  1431  05D1  0022               	movlb	2	; select bank2
  1432  05D2  158E               	bsf	14,3	;volatile
  1433                           
  1434                           ;main.c: 420: FlashEraseRow(0x7C0);
  1435  05D3  30C0               	movlw	192
  1436  05D4  00F0               	movwf	FlashEraseRow@rowAddr
  1437  05D5  3007               	movlw	7
  1438  05D6  00F1               	movwf	FlashEraseRow@rowAddr+1
  1439  05D7  20FB               	fcall	_FlashEraseRow
  1440  05D8  0064               	clrwdt	;# 
  1441                           
  1442                           ;main.c: 422: _delay((unsigned long)((500)*(8000000/4000.0)));
  1443  05D9  3006               	movlw	6
  1444  05DA  0020               	movlb	0	; select bank0
  1445  05DB  00D8               	movwf	??_main+1
  1446  05DC  3013               	movlw	19
  1447  05DD  00D7               	movwf	??_main
  1448  05DE  30AD               	movlw	173
  1449  05DF                     u1637:	
  1450  05DF  0B89               	decfsz	9,f
  1451  05E0  2DDF               	goto	u1637
  1452  05E1  0BD7               	decfsz	??_main,f
  1453  05E2  2DDF               	goto	u1637
  1454  05E3  0BD8               	decfsz	??_main+1,f
  1455  05E4  2DDF               	goto	u1637
  1456  05E5  3200               	nop2
  1457  05E6  0064               	clrwdt	;# 
  1458                           
  1459                           ;main.c: 424: FlashWrite(0x7C0, chn);
  1460  05E7  30C0               	movlw	192
  1461  05E8  00F0               	movwf	FlashWrite@addr
  1462  05E9  3007               	movlw	7
  1463  05EA  00F1               	movwf	FlashWrite@addr+1
  1464  05EB  0020               	movlb	0	; select bank0
  1465  05EC  0861               	movf	main@chn_437,w
  1466  05ED  00F2               	movwf	FlashWrite@flash_data
  1467  05EE  01F3               	clrf	FlashWrite@flash_data+1
  1468  05EF  2125               	fcall	_FlashWrite
  1469                           
  1470                           ;main.c: 425: FlashWrite(0x7C1, 0x5A);
  1471  05F0  30C1               	movlw	193
  1472  05F1  00F0               	movwf	FlashWrite@addr
  1473  05F2  3007               	movlw	7
  1474  05F3  00F1               	movwf	FlashWrite@addr+1
  1475  05F4  305A               	movlw	90
  1476  05F5  00F2               	movwf	FlashWrite@flash_data
  1477  05F6  01F3               	clrf	FlashWrite@flash_data+1
  1478  05F7  2125               	fcall	_FlashWrite
  1479  05F8  0064               	clrwdt	;# 
  1480                           
  1481                           ;main.c: 427: DevType = Init_TypeFromFlash();
  1482  05F9  2138               	fcall	_Init_TypeFromFlash
  1483  05FA  0020               	movlb	0	; select bank0
  1484  05FB  00A7               	movwf	_DevType
  1485                           
  1486                           ;main.c: 428: DevMode &= ~MODE_CHANGE_ACTIVE;
  1487  05FC  1126               	bcf	_DevMode,2
  1488                           
  1489                           ;main.c: 429: LATCbits.LATC3 = OFF;
  1490  05FD  0022               	movlb	2	; select bank2
  1491  05FE  118E               	bcf	14,3	;volatile
  1492                           
  1493                           ;main.c: 430: noo_send_data[0] = Type[0] >> 8;
  1494  05FF  30C1               	movlw	193
  1495  0600  0084               	movwf	4
  1496  0601  3087               	movlw	135
  1497  0602  0085               	movwf	5
  1498  0603  0800               	movf	0,w	;code access
  1499  0604  0020               	movlb	0	; select bank0
  1500  0605  00C0               	movwf	_noo_send_data
  1501                           
  1502                           ;main.c: 431: noo_send_data[1] = Type[0];
  1503  0606  30C0               	movlw	192
  1504  0607  0084               	movwf	4
  1505  0608  0800               	movf	0,w	;code access
  1506  0609  00C1               	movwf	_noo_send_data+1
  1507                           
  1508                           ;main.c: 432: noo_send_data[2] = DevType;
  1509  060A  0827               	movf	_DevType,w
  1510  060B  00C2               	movwf	_noo_send_data+2
  1511                           
  1512                           ;main.c: 433: noolite_send(chn, 22, 7, &noo_send_data[0]);
  1513  060C  3016               	movlw	22
  1514  060D  00F0               	movwf	noolite_send@noo_send_command
  1515  060E  3007               	movlw	7
  1516  060F  00F1               	movwf	noolite_send@noo_send_format
  1517  0610  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1518  0611  00F2               	movwf	noolite_send@data
  1519  0612  0861               	movf	main@chn_437,w
  1520  0613  22EA               	fcall	_noolite_send
  1521  0614                     l1991:	
  1522                           
  1523                           ;main.c: 434: }
  1524                           ;main.c: 435: Keys[chn].StateTemp = Keys[chn].State;
  1525  0614  0020               	movlb	0	; select bank0
  1526  0615  0861               	movf	main@chn_437,w
  1527  0616  0709               	addwf	9,w
  1528  0617  0709               	addwf	9,w
  1529  0618  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1530  0619  0086               	movwf	6
  1531  061A  0187               	clrf	7
  1532  061B  0861               	movf	main@chn_437,w
  1533  061C  0709               	addwf	9,w
  1534  061D  0709               	addwf	9,w
  1535  061E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1536  061F  0084               	movwf	4
  1537  0620  0185               	clrf	5
  1538  0621  0800               	movf	0,w
  1539  0622  0081               	movwf	1
  1540  0623                     l1993:	
  1541  0623  0AE1               	incf	main@chn_437,f
  1542  0624  2D93               	goto	l1951
  1543  0625                     l1997:	
  1544                           
  1545                           ;main.c: 440: for (uint8_t chn = 0; chn < 4; chn++) {
  1546  0625  01E2               	clrf	main@chn_438
  1547  0626                     l1999:	
  1548  0626  3004               	movlw	4
  1549  0627  0262               	subwf	main@chn_438,w
  1550  0628  1803               	btfsc	3,0
  1551  0629  2F3B               	goto	l2091
  1552                           
  1553                           ;main.c: 441: if (Keys[chn].State != Keys[chn].StateTemp) {
  1554  062A  0862               	movf	main@chn_438,w
  1555  062B  0709               	addwf	9,w
  1556  062C  0709               	addwf	9,w
  1557  062D  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1558  062E  0086               	movwf	6
  1559  062F  0187               	clrf	7
  1560  0630  0862               	movf	main@chn_438,w
  1561  0631  0709               	addwf	9,w
  1562  0632  0709               	addwf	9,w
  1563  0633  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1564  0634  0084               	movwf	4
  1565  0635  0185               	clrf	5
  1566  0636  0800               	movf	0,w
  1567  0637  0601               	xorwf	1,w
  1568  0638  1D03               	btfss	3,2
  1569  0639  2EB8               	goto	l2043
  1570  063A  2F2B               	goto	l2069
  1571  063B                     l2007:	
  1572                           
  1573                           ;main.c: 444: KeyOffHandler(&Keys[chn], chn, 4);
  1574  063B  0862               	movf	main@chn_438,w
  1575  063C  00FB               	movwf	KeyOffHandler@chn
  1576  063D  3004               	movlw	4
  1577  063E  00FC               	movwf	KeyOffHandler@cmd
  1578  063F  0862               	movf	main@chn_438,w
  1579  0640  0709               	addwf	9,w
  1580  0641  0709               	addwf	9,w
  1581  0642  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1582  0643  2179               	fcall	_KeyOffHandler
  1583                           
  1584                           ;main.c: 445: break;
  1585  0644  2EC6               	goto	l2045
  1586  0645                     l2009:	
  1587                           
  1588                           ;main.c: 447: if (Keys[chn].State == 0) {
  1589  0645  0862               	movf	main@chn_438,w
  1590  0646  0709               	addwf	9,w
  1591  0647  0709               	addwf	9,w
  1592  0648  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1593  0649  0086               	movwf	6
  1594  064A  0187               	clrf	7
  1595  064B  0801               	movf	1,w
  1596  064C  1D03               	btfss	3,2
  1597  064D  2EC6               	goto	l2045
  1598                           
  1599                           ;main.c: 448: if ((chn == 0) || (chn == 2)) {
  1600  064E  0862               	movf	main@chn_438,w
  1601  064F  1903               	btfsc	3,2
  1602  0650  2E55               	goto	l2015
  1603  0651  3002               	movlw	2
  1604  0652  0662               	xorwf	main@chn_438,w
  1605  0653  1D03               	btfss	3,2
  1606  0654  2E5E               	goto	l2017
  1607  0655                     l2015:	
  1608                           
  1609                           ;main.c: 449: KeyOffHandler(&Keys[chn], chn, 0);
  1610  0655  0862               	movf	main@chn_438,w
  1611  0656  00FB               	movwf	KeyOffHandler@chn
  1612  0657  01FC               	clrf	KeyOffHandler@cmd
  1613  0658  0862               	movf	main@chn_438,w
  1614  0659  0709               	addwf	9,w
  1615  065A  0709               	addwf	9,w
  1616  065B  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1617  065C  2179               	fcall	_KeyOffHandler
  1618                           
  1619                           ;main.c: 450: } else {
  1620  065D  2EC6               	goto	l2045
  1621  065E                     l2017:	
  1622                           
  1623                           ;main.c: 451: KeyOffHandler(&Keys[chn], chn, 2);
  1624  065E  0862               	movf	main@chn_438,w
  1625  065F  00FB               	movwf	KeyOffHandler@chn
  1626  0660  3002               	movlw	2
  1627  0661  00FC               	movwf	KeyOffHandler@cmd
  1628  0662  0862               	movf	main@chn_438,w
  1629  0663  0709               	addwf	9,w
  1630  0664  0709               	addwf	9,w
  1631  0665  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1632  0666  2179               	fcall	_KeyOffHandler
  1633                           
  1634                           ;main.c: 452: }
  1635                           ;main.c: 453: }
  1636                           ;main.c: 454: break;
  1637  0667  2EC6               	goto	l2045
  1638  0668                     l2019:	
  1639                           
  1640                           ;main.c: 456: if (chn > 1) {
  1641  0668  3002               	movlw	2
  1642  0669  0262               	subwf	main@chn_438,w
  1643                           
  1644                           ;main.c: 457: if (Keys[chn].State == 0) {
  1645  066A  0862               	movf	main@chn_438,w
  1646  066B  1C03               	skipc
  1647  066C  2E8A               	goto	L2
  1648  066D  0709               	addwf	9,w
  1649  066E  0709               	addwf	9,w
  1650  066F  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1651  0670  0086               	movwf	6
  1652  0671  0187               	clrf	7
  1653  0672  0801               	movf	1,w
  1654  0673  1D03               	btfss	3,2
  1655  0674  2EC6               	goto	l2045
  1656                           
  1657                           ;main.c: 458: if (Keys[chn].Tick100ms < 10) {
  1658  0675  0862               	movf	main@chn_438,w
  1659  0676  0709               	addwf	9,w
  1660  0677  0709               	addwf	9,w
  1661  0678  3E2E               	addlw	(low ((_Keys| 0+2)))& (0+255)
  1662  0679  0086               	movwf	6
  1663  067A  300A               	movlw	10
  1664  067B  0201               	subwf	1,w
  1665  067C  1803               	skipnc
  1666  067D  2EC6               	goto	l2045
  1667                           
  1668                           ;main.c: 459: if (chn > 1) {
  1669  067E  3002               	movlw	2
  1670  067F  0262               	subwf	main@chn_438,w
  1671  0680  1C03               	skipc
  1672  0681  2EC6               	goto	l2045
  1673                           
  1674                           ;main.c: 460: noolite_send(chn, 7, 0, &noo_send_data[0]);
  1675  0682  3007               	movlw	7
  1676  0683  00F0               	movwf	noolite_send@noo_send_command
  1677  0684  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1678  0685  01F1               	clrf	noolite_send@noo_send_format
  1679  0686  00F2               	movwf	noolite_send@data
  1680  0687  0862               	movf	main@chn_438,w
  1681  0688  22EA               	fcall	_noolite_send
  1682  0689  2EC6               	goto	l2045
  1683  068A                     L2:	
  1684                           ;main.c: 465: KeyOffHandler(&Keys[chn], chn, 4);
  1685                           
  1686  068A  00FB               	movwf	KeyOffHandler@chn
  1687  068B  3004               	movlw	4
  1688  068C  00FC               	movwf	KeyOffHandler@cmd
  1689  068D  0862               	movf	main@chn_438,w
  1690  068E  0709               	addwf	9,w
  1691  068F  0709               	addwf	9,w
  1692  0690  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1693  0691  2179               	fcall	_KeyOffHandler
  1694  0692  2EC6               	goto	l2045
  1695  0693                     l2031:	
  1696                           
  1697                           ;main.c: 469: if (chn > 1) {
  1698  0693  3002               	movlw	2
  1699  0694  0262               	subwf	main@chn_438,w
  1700                           
  1701                           ;main.c: 470: if (Keys[chn].State) {
  1702  0695  0862               	movf	main@chn_438,w
  1703  0696  1C03               	skipc
  1704  0697  2EAF               	goto	L3
  1705  0698  0709               	addwf	9,w
  1706  0699  0709               	addwf	9,w
  1707  069A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1708  069B  0086               	movwf	6
  1709  069C  0187               	clrf	7
  1710  069D  0801               	movf	1,w
  1711  069E  1903               	btfsc	3,2
  1712  069F  2EA8               	goto	l2037
  1713                           
  1714                           ;main.c: 471: noolite_send(chn, 2, 0, &noo_send_data[0]);
  1715  06A0  3002               	movlw	2
  1716  06A1  00F0               	movwf	noolite_send@noo_send_command
  1717  06A2  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1718  06A3  01F1               	clrf	noolite_send@noo_send_format
  1719  06A4  00F2               	movwf	noolite_send@data
  1720  06A5  0862               	movf	main@chn_438,w
  1721  06A6  22EA               	fcall	_noolite_send
  1722                           
  1723                           ;main.c: 472: } else {
  1724  06A7  2EC6               	goto	l2045
  1725  06A8                     l2037:	
  1726  06A8  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1727                           
  1728                           ;main.c: 473: noolite_send(chn, 0, 0, &noo_send_data[0]);
  1729  06A9  01F0               	clrf	noolite_send@noo_send_command
  1730  06AA  01F1               	clrf	noolite_send@noo_send_format
  1731  06AB  00F2               	movwf	noolite_send@data
  1732  06AC  0862               	movf	main@chn_438,w
  1733  06AD  22EA               	fcall	_noolite_send
  1734  06AE  2EC6               	goto	l2045
  1735  06AF                     L3:	
  1736                           ;main.c: 476: KeyOffHandler(&Keys[chn], chn, 4);
  1737                           
  1738  06AF  00FB               	movwf	KeyOffHandler@chn
  1739  06B0  3004               	movlw	4
  1740  06B1  00FC               	movwf	KeyOffHandler@cmd
  1741  06B2  0862               	movf	main@chn_438,w
  1742  06B3  0709               	addwf	9,w
  1743  06B4  0709               	addwf	9,w
  1744  06B5  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1745  06B6  2179               	fcall	_KeyOffHandler
  1746  06B7  2EC6               	goto	l2045
  1747  06B8                     l2043:	
  1748  06B8  0827               	movf	_DevType,w
  1749                           
  1750                           ; Switch size 1, requested type "space"
  1751                           ; Number of cases is 4, Range of values is 0 to 3
  1752                           ; switch strategies available:
  1753                           ; Name         Instructions Cycles
  1754                           ; simple_byte           13     7 (average)
  1755                           ; direct_byte           14     6 (fixed)
  1756                           ; jumptable            260     6 (fixed)
  1757                           ;	Chosen strategy is simple_byte
  1758  06B9  3A00               	xorlw	0	; case 0
  1759  06BA  1903               	skipnz
  1760  06BB  2E3B               	goto	l2007
  1761  06BC  3A01               	xorlw	1	; case 1
  1762  06BD  1903               	skipnz
  1763  06BE  2E45               	goto	l2009
  1764  06BF  3A03               	xorlw	3	; case 2
  1765  06C0  1903               	skipnz
  1766  06C1  2E68               	goto	l2019
  1767  06C2  3A01               	xorlw	1	; case 3
  1768  06C3  1903               	skipnz
  1769  06C4  2E93               	goto	l2031
  1770  06C5  2EC6               	goto	l2045
  1771  06C6                     l2045:	
  1772                           
  1773                           ;main.c: 480: Keys[chn].StateTemp = Keys[chn].State;
  1774  06C6  0020               	movlb	0	; select bank0
  1775  06C7  0862               	movf	main@chn_438,w
  1776  06C8  0709               	addwf	9,w
  1777  06C9  0709               	addwf	9,w
  1778  06CA  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1779  06CB  0086               	movwf	6
  1780  06CC  0187               	clrf	7
  1781  06CD  0862               	movf	main@chn_438,w
  1782  06CE  0709               	addwf	9,w
  1783  06CF  0709               	addwf	9,w
  1784  06D0  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1785  06D1  0084               	movwf	4
  1786  06D2  0185               	clrf	5
  1787  06D3  0800               	movf	0,w
  1788  06D4  0081               	movwf	1
  1789  06D5  2F2B               	goto	l2069
  1790  06D6                     l2047:	
  1791                           
  1792                           ;main.c: 485: KeyLongHandler(&Keys[chn], chn, 5, 9);
  1793  06D6  0862               	movf	main@chn_438,w
  1794  06D7  00FB               	movwf	KeyLongHandler@chn
  1795  06D8  3005               	movlw	5
  1796  06D9  00FC               	movwf	KeyLongHandler@cmd
  1797  06DA  3009               	movlw	9
  1798  06DB  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1799  06DC  0862               	movf	main@chn_438,w
  1800  06DD  0709               	addwf	9,w
  1801  06DE  0709               	addwf	9,w
  1802  06DF  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1803  06E0  214C               	fcall	_KeyLongHandler
  1804                           
  1805                           ;main.c: 486: break;
  1806  06E1  2F39               	goto	l2071
  1807  06E2                     l2049:	
  1808                           
  1809                           ;main.c: 488: if (chn == 0 || chn == 2) {
  1810  06E2  0862               	movf	main@chn_438,w
  1811  06E3  1903               	btfsc	3,2
  1812  06E4  2EE9               	goto	l2053
  1813  06E5  3002               	movlw	2
  1814  06E6  0662               	xorwf	main@chn_438,w
  1815  06E7  1D03               	btfss	3,2
  1816  06E8  2EF5               	goto	l2055
  1817  06E9                     l2053:	
  1818                           
  1819                           ;main.c: 489: KeyLongHandler(&Keys[chn], chn, 1, 9);
  1820  06E9  0862               	movf	main@chn_438,w
  1821  06EA  00FB               	movwf	KeyLongHandler@chn
  1822  06EB  3009               	movlw	9
  1823  06EC  01FC               	clrf	KeyLongHandler@cmd
  1824  06ED  0AFC               	incf	KeyLongHandler@cmd,f
  1825  06EE  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1826  06EF  0862               	movf	main@chn_438,w
  1827  06F0  0709               	addwf	9,w
  1828  06F1  0709               	addwf	9,w
  1829  06F2  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1830  06F3  214C               	fcall	_KeyLongHandler
  1831                           
  1832                           ;main.c: 490: } else {
  1833  06F4  2F39               	goto	l2071
  1834  06F5                     l2055:	
  1835                           
  1836                           ;main.c: 491: KeyLongHandler(&Keys[chn], chn, 3, 9);
  1837  06F5  0862               	movf	main@chn_438,w
  1838  06F6  00FB               	movwf	KeyLongHandler@chn
  1839  06F7  3003               	movlw	3
  1840  06F8  00FC               	movwf	KeyLongHandler@cmd
  1841  06F9  3009               	movlw	9
  1842  06FA  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1843  06FB  0862               	movf	main@chn_438,w
  1844  06FC  0709               	addwf	9,w
  1845  06FD  0709               	addwf	9,w
  1846  06FE  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1847  06FF  214C               	fcall	_KeyLongHandler
  1848  0700  2F39               	goto	l2071
  1849  0701                     l2057:	
  1850                           
  1851                           ;main.c: 495: if (chn < 2) {
  1852  0701  3002               	movlw	2
  1853  0702  0262               	subwf	main@chn_438,w
  1854                           
  1855                           ;main.c: 496: KeyLongHandler(&Keys[chn], chn, 5, 9);
  1856  0703  0862               	movf	main@chn_438,w
  1857  0704  00FB               	movwf	KeyLongHandler@chn
  1858  0705  1803               	skipnc
  1859  0706  2F11               	goto	L4
  1860  0707  3005               	movlw	5
  1861  0708  00FC               	movwf	KeyLongHandler@cmd
  1862  0709  3009               	movlw	9
  1863  070A  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1864  070B  0862               	movf	main@chn_438,w
  1865  070C  0709               	addwf	9,w
  1866  070D  0709               	addwf	9,w
  1867  070E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1868  070F  214C               	fcall	_KeyLongHandler
  1869                           
  1870                           ;main.c: 497: } else {
  1871  0710  2F39               	goto	l2071
  1872  0711                     L4:	
  1873                           ;main.c: 498: KeyLongHandler(&Keys[chn], chn, 8, 49);
  1874                           
  1875  0711  3008               	movlw	8
  1876  0712  00FC               	movwf	KeyLongHandler@cmd
  1877  0713  3031               	movlw	49
  1878  0714  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1879  0715  0862               	movf	main@chn_438,w
  1880  0716  0709               	addwf	9,w
  1881  0717  0709               	addwf	9,w
  1882  0718  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1883  0719  214C               	fcall	_KeyLongHandler
  1884  071A  2F39               	goto	l2071
  1885  071B                     l2063:	
  1886                           
  1887                           ;main.c: 502: if (chn < 2) {
  1888  071B  3002               	movlw	2
  1889  071C  0262               	subwf	main@chn_438,w
  1890  071D  1803               	skipnc
  1891  071E  2F39               	goto	l2071
  1892                           
  1893                           ;main.c: 503: KeyLongHandler(&Keys[chn], chn, 5, 9);
  1894  071F  0862               	movf	main@chn_438,w
  1895  0720  00FB               	movwf	KeyLongHandler@chn
  1896  0721  3005               	movlw	5
  1897  0722  00FC               	movwf	KeyLongHandler@cmd
  1898  0723  3009               	movlw	9
  1899  0724  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1900  0725  0862               	movf	main@chn_438,w
  1901  0726  0709               	addwf	9,w
  1902  0727  0709               	addwf	9,w
  1903  0728  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1904  0729  214C               	fcall	_KeyLongHandler
  1905  072A  2F39               	goto	l2071
  1906  072B                     l2069:	
  1907  072B  0827               	movf	_DevType,w
  1908                           
  1909                           ; Switch size 1, requested type "space"
  1910                           ; Number of cases is 4, Range of values is 0 to 3
  1911                           ; switch strategies available:
  1912                           ; Name         Instructions Cycles
  1913                           ; simple_byte           13     7 (average)
  1914                           ; direct_byte           14     6 (fixed)
  1915                           ; jumptable            260     6 (fixed)
  1916                           ;	Chosen strategy is simple_byte
  1917  072C  3A00               	xorlw	0	; case 0
  1918  072D  1903               	skipnz
  1919  072E  2ED6               	goto	l2047
  1920  072F  3A01               	xorlw	1	; case 1
  1921  0730  1903               	skipnz
  1922  0731  2EE2               	goto	l2049
  1923  0732  3A03               	xorlw	3	; case 2
  1924  0733  1903               	skipnz
  1925  0734  2F01               	goto	l2057
  1926  0735  3A01               	xorlw	1	; case 3
  1927  0736  1903               	skipnz
  1928  0737  2F1B               	goto	l2063
  1929  0738  2F39               	goto	l2071
  1930  0739                     l2071:	
  1931  0739  0AE2               	incf	main@chn_438,f
  1932  073A  2E26               	goto	l1999
  1933  073B                     l2091:	
  1934                           
  1935                           ;main.c: 520: }
  1936                           ;main.c: 522: if (((DevMode & 0x07) == 0) && ((PORTA & All_Pressed) == 0)) {
  1937  073B  0826               	movf	_DevMode,w
  1938  073C  3907               	andlw	7
  1939  073D  1D03               	btfss	3,2
  1940  073E  2FA8               	goto	l2125
  1941  073F  080C               	movf	12,w	;volatile
  1942  0740  3917               	andlw	23
  1943  0741  1D03               	btfss	3,2
  1944  0742  2FA8               	goto	l2125
  1945                           
  1946                           ;main.c: 523: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  1947  0743  01DE               	clrf	main@cellNum
  1948                           
  1949                           ;main.c: 530: break;
  1950  0744  2F62               	goto	l2097
  1951  0745                     l2115:	
  1952                           
  1953                           ;main.c: 532: if (cellNum == 7) {
  1954  0745  3007               	movlw	7
  1955  0746  065E               	xorwf	main@cellNum,w
  1956  0747  1D03               	btfss	3,2
  1957  0748  2F60               	goto	l2119
  1958                           
  1959                           ;main.c: 533: FlashEraseRow(0x7D0);
  1960  0749  30D0               	movlw	208
  1961  074A  00F0               	movwf	FlashEraseRow@rowAddr
  1962  074B  3007               	movlw	7
  1963  074C  00F1               	movwf	FlashEraseRow@rowAddr+1
  1964  074D  20FB               	fcall	_FlashEraseRow
  1965                           
  1966                           ;main.c: 534: FlashWrite(0x7D0, tx_status & 0x02);
  1967  074E  30D0               	movlw	208
  1968  074F  00F0               	movwf	FlashWrite@addr
  1969  0750  3007               	movlw	7
  1970  0751  00F1               	movwf	FlashWrite@addr+1
  1971  0752  0020               	movlb	0	; select bank0
  1972  0753  082B               	movf	_tx_status,w
  1973  0754  3902               	andlw	2
  1974  0755  00F2               	movwf	FlashWrite@flash_data
  1975  0756  01F3               	clrf	FlashWrite@flash_data+1
  1976  0757  2125               	fcall	_FlashWrite
  1977                           
  1978                           ;main.c: 535: FlashWrite(0x7D1, 0x5A);
  1979  0758  30D1               	movlw	209
  1980  0759  00F0               	movwf	FlashWrite@addr
  1981  075A  3007               	movlw	7
  1982  075B  00F1               	movwf	FlashWrite@addr+1
  1983  075C  305A               	movlw	90
  1984  075D  00F2               	movwf	FlashWrite@flash_data
  1985  075E  01F3               	clrf	FlashWrite@flash_data+1
  1986  075F  2125               	fcall	_FlashWrite
  1987  0760                     l2119:	
  1988  0760  0020               	movlb	0	; select bank0
  1989  0761  0ADE               	incf	main@cellNum,f
  1990  0762                     l2097:	
  1991  0762  3008               	movlw	8
  1992  0763  025E               	subwf	main@cellNum,w
  1993  0764  1803               	btfsc	3,0
  1994  0765  2F98               	goto	l230
  1995                           
  1996                           ;main.c: 524: uint16_t adrToWrite = (0x7D0 + (cellNum * 2));
  1997  0766  085E               	movf	main@cellNum,w
  1998  0767  00DB               	movwf	main@adrToWrite
  1999  0768  30D0               	movlw	208
  2000  0769  01DC               	clrf	main@adrToWrite+1
  2001  076A  35DB               	lslf	main@adrToWrite,f
  2002  076B  0DDC               	rlf	main@adrToWrite+1,f
  2003  076C  07DB               	addwf	main@adrToWrite,f
  2004  076D  3007               	movlw	7
  2005  076E  3DDC               	addwfc	main@adrToWrite+1,f
  2006                           
  2007                           ;main.c: 525: if (TxStatus[cellNum] == 0xFFFF) {
  2008  076F  085E               	movf	main@cellNum,w
  2009  0770  00D7               	movwf	??_main
  2010  0771  30D0               	movlw	208
  2011  0772  01D8               	clrf	??_main+1
  2012  0773  35D7               	lslf	??_main,f
  2013  0774  0DD8               	rlf	??_main+1,f
  2014  0775  0757               	addwf	??_main,w
  2015  0776  0084               	movwf	4
  2016  0777  3087               	movlw	135
  2017  0778  3D58               	addwfc	??_main+1,w
  2018  0779  0085               	movwf	5
  2019  077A  0012               	moviw fsr0++
  2020  077B  3AFF               	xorlw	255
  2021  077C  00D9               	movwf	??_main+2
  2022  077D  0012               	moviw fsr0++
  2023  077E  3AFF               	xorlw	255
  2024  077F  04D9               	iorwf	??_main+2,f
  2025  0780  1D03               	btfss	3,2
  2026  0781  2F45               	goto	l2115
  2027                           
  2028                           ;main.c: 526: FlashWrite(adrToWrite, tx_status & 0x02);
  2029  0782  085C               	movf	main@adrToWrite+1,w
  2030  0783  00F1               	movwf	FlashWrite@addr+1
  2031  0784  085B               	movf	main@adrToWrite,w
  2032  0785  00F0               	movwf	FlashWrite@addr
  2033  0786  082B               	movf	_tx_status,w
  2034  0787  3902               	andlw	2
  2035  0788  00F2               	movwf	FlashWrite@flash_data
  2036  0789  01F3               	clrf	FlashWrite@flash_data+1
  2037  078A  2125               	fcall	_FlashWrite
  2038                           
  2039                           ;main.c: 527: FlashWrite((adrToWrite + 1), 0x5A);
  2040  078B  0020               	movlb	0	; select bank0
  2041  078C  085B               	movf	main@adrToWrite,w
  2042  078D  3E01               	addlw	1
  2043  078E  00F0               	movwf	FlashWrite@addr
  2044  078F  3000               	movlw	0
  2045  0790  3D5C               	addwfc	main@adrToWrite+1,w
  2046  0791  00F1               	movwf	FlashWrite@addr+1
  2047  0792  305A               	movlw	90
  2048  0793  00F2               	movwf	FlashWrite@flash_data
  2049  0794  01F3               	clrf	FlashWrite@flash_data+1
  2050  0795  2125               	fcall	_FlashWrite
  2051                           
  2052                           ;main.c: 528: __nop();
  2053  0796  0000               	nop
  2054  0797  0064               	clrwdt	;# 
  2055  0798                     l230:	
  2056                           
  2057                           ;main.c: 536: }
  2058                           ;main.c: 537: }
  2059                           ;main.c: 538: }
  2060                           ;main.c: 549: LATCbits.LATC5 = 0;
  2061  0798  0022               	movlb	2	; select bank2
  2062  0799  128E               	bcf	14,5	;volatile
  2063                           
  2064                           ;main.c: 550: _delay((unsigned long)((100)*(8000000/4000.0)));
  2065  079A  3002               	movlw	2
  2066  079B  0020               	movlb	0	; select bank0
  2067  079C  00D8               	movwf	??_main+1
  2068  079D  3004               	movlw	4
  2069  079E  00D7               	movwf	??_main
  2070  079F  30BA               	movlw	186
  2071  07A0                     u1647:	
  2072  07A0  0B89               	decfsz	9,f
  2073  07A1  2FA0               	goto	u1647
  2074  07A2  0BD7               	decfsz	??_main,f
  2075  07A3  2FA0               	goto	u1647
  2076  07A4  0BD8               	decfsz	??_main+1,f
  2077  07A5  2FA0               	goto	u1647
  2078  07A6  0000               	nop
  2079                           
  2080                           ;main.c: 551: } else {
  2081  07A7  2C91               	goto	l1813
  2082  07A8                     l2125:	
  2083                           
  2084                           ;main.c: 552: WDTCONbits.WDTPS = 0b00110;
  2085  07A8  0021               	movlb	1	; select bank1
  2086  07A9  0817               	movf	23,w	;volatile
  2087  07AA  39C1               	andlw	-63
  2088  07AB  380C               	iorlw	12
  2089  07AC  0097               	movwf	23	;volatile
  2090                           
  2091                           ;main.c: 553: __nop();
  2092  07AD  0000               	nop
  2093  07AE  0063               	sleep	;# 
  2094                           
  2095                           ;main.c: 555: __nop();
  2096  07AF  0000               	nop
  2097                           
  2098                           ;main.c: 556: WDTCONbits.WDTPS = 0b00101;
  2099  07B0  0021               	movlb	1	; select bank1
  2100  07B1  0817               	movf	23,w	;volatile
  2101  07B2  39C1               	andlw	-63
  2102  07B3  380A               	iorlw	10
  2103  07B4  0097               	movwf	23	;volatile
  2104                           
  2105                           ;main.c: 557: __nop();
  2106  07B5  0000               	nop
  2107  07B6  0063               	sleep	;# 
  2108                           
  2109                           ;main.c: 559: __nop();
  2110  07B7  0000               	nop
  2111                           
  2112                           ;main.c: 560: WDTCONbits.WDTPS = 0b01011;
  2113  07B8  0021               	movlb	1	; select bank1
  2114  07B9  0817               	movf	23,w	;volatile
  2115  07BA  39C1               	andlw	-63
  2116  07BB  3816               	iorlw	22
  2117  07BC  0097               	movwf	23	;volatile
  2118                           
  2119                           ;main.c: 561: __nop();
  2120  07BD  0000               	nop
  2121  07BE  0064               	clrwdt	;# 
  2122  07BF  2C91               	goto	l1813
  2123  07C0                     __end_of_main:	
  2124                           
  2125                           	psect	text1
  2126  025F                     __ptext1:	
  2127 ;; *************** function _RF_Init *****************
  2128 ;; Defined at:
  2129 ;;		line 25 in file "noolite.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2138 ;; Tracked objects:
  2139 ;;		On entry : B1F/1
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1
  2143 ;;      Params:         0       0       0
  2144 ;;      Locals:         0       0       0
  2145 ;;      Temps:          7       0       0
  2146 ;;      Totals:         7       0       0
  2147 ;;Total ram usage:        7 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           
  2157                           ;psect for function _RF_Init
  2158  025F                     _RF_Init:	
  2159                           
  2160                           ;noolite.c: 27: startaddress = 0;
  2161                           
  2162                           ;incstack = 0
  2163                           ; Regs used in _RF_Init: [wreg-fsr0h+status,2+status,0+pclath]
  2164  025F  0020               	movlb	0	; select bank0
  2165  0260  30F3               	movlw	243
  2166  0261  01A0               	clrf	_startaddress
  2167  0262  01A1               	clrf	_startaddress+1
  2168  0263  01A2               	clrf	_startaddress+2
  2169  0264  01A3               	clrf	_startaddress+3
  2170                           
  2171                           ;noolite.c: 28: startaddress |= ((unsigned int) system_settings[5]) << 8;
  2172  0265  0084               	movwf	4
  2173  0266  3087               	movlw	135
  2174  0267  0085               	movwf	5
  2175  0268  0800               	movf	0,w	;code access
  2176  0269  00F0               	movwf	??_RF_Init
  2177  026A  01F1               	clrf	??_RF_Init+1
  2178  026B  00F1               	movwf	??_RF_Init+1
  2179  026C  01F0               	clrf	??_RF_Init
  2180  026D  0870               	movf	??_RF_Init,w
  2181  026E  00F3               	movwf	??_RF_Init+3
  2182  026F  0871               	movf	??_RF_Init+1,w
  2183  0270  00F4               	movwf	??_RF_Init+4
  2184  0271  01F5               	clrf	??_RF_Init+5
  2185  0272  01F6               	clrf	??_RF_Init+6
  2186  0273  0873               	movf	??_RF_Init+3,w
  2187  0274  04A0               	iorwf	_startaddress,f
  2188  0275  0874               	movf	??_RF_Init+4,w
  2189  0276  04A1               	iorwf	_startaddress+1,f
  2190  0277  0875               	movf	??_RF_Init+5,w
  2191  0278  04A2               	iorwf	_startaddress+2,f
  2192  0279  0876               	movf	??_RF_Init+6,w
  2193  027A  04A3               	iorwf	_startaddress+3,f
  2194                           
  2195                           ;noolite.c: 29: startaddress |= system_settings[4];
  2196  027B  30F2               	movlw	242
  2197  027C  0084               	movwf	4
  2198  027D  0800               	movf	0,w	;code access
  2199  027E  00F0               	movwf	??_RF_Init
  2200  027F  01F1               	clrf	??_RF_Init+1
  2201  0280  01F2               	clrf	??_RF_Init+2
  2202  0281  01F3               	clrf	??_RF_Init+3
  2203  0282  04A0               	iorwf	_startaddress,f
  2204  0283  0871               	movf	??_RF_Init+1,w
  2205  0284  04A1               	iorwf	_startaddress+1,f
  2206  0285  0872               	movf	??_RF_Init+2,w
  2207  0286  04A2               	iorwf	_startaddress+2,f
  2208  0287  0873               	movf	??_RF_Init+3,w
  2209  0288  04A3               	iorwf	_startaddress+3,f
  2210                           
  2211                           ;noolite.c: 30: if ((startaddress != 0) && (startaddress != 0xFFFF)) {
  2212  0289  0823               	movf	_startaddress+3,w
  2213  028A  0422               	iorwf	_startaddress+2,w
  2214  028B  0421               	iorwf	_startaddress+1,w
  2215  028C  0420               	iorwf	_startaddress,w
  2216  028D  1903               	skipnz
  2217  028E  2A98               	goto	l266
  2218  028F  0F20               	incfsz	_startaddress,w
  2219  0290  2A96               	goto	l1757
  2220  0291  0A21               	incf	_startaddress+1,w
  2221  0292  0422               	iorwf	_startaddress+2,w
  2222  0293  0423               	iorwf	_startaddress+3,w
  2223  0294  1903               	btfsc	3,2
  2224  0295  2A98               	goto	l266
  2225  0296                     l1757:	
  2226                           
  2227                           ;noolite.c: 31: noo_address_type = 0;
  2228  0296  01A4               	clrf	_noo_address_type
  2229                           
  2230                           ;noolite.c: 32: } else {
  2231  0297  2AE8               	goto	l267
  2232  0298                     l266:	
  2233  0298  30F9               	movlw	249
  2234                           
  2235                           ;noolite.c: 33: startaddress = 0;
  2236  0299  01A0               	clrf	_startaddress
  2237  029A  01A1               	clrf	_startaddress+1
  2238  029B  01A2               	clrf	_startaddress+2
  2239  029C  01A3               	clrf	_startaddress+3
  2240                           
  2241                           ;noolite.c: 34: startaddress |= ((unsigned long) system_settings[11]) << 24;
  2242  029D  0084               	movwf	4
  2243  029E  3087               	movlw	135
  2244  029F  0085               	movwf	5
  2245  02A0  0800               	movf	0,w	;code access
  2246  02A1  00F3               	movwf	??_RF_Init+3
  2247  02A2  01F2               	clrf	??_RF_Init+2
  2248  02A3  01F1               	clrf	??_RF_Init+1
  2249  02A4  01F0               	clrf	??_RF_Init
  2250  02A5  0870               	movf	??_RF_Init,w
  2251  02A6  04A0               	iorwf	_startaddress,f
  2252  02A7  0871               	movf	??_RF_Init+1,w
  2253  02A8  04A1               	iorwf	_startaddress+1,f
  2254  02A9  0872               	movf	??_RF_Init+2,w
  2255  02AA  04A2               	iorwf	_startaddress+2,f
  2256  02AB  0873               	movf	??_RF_Init+3,w
  2257  02AC  04A3               	iorwf	_startaddress+3,f
  2258                           
  2259                           ;noolite.c: 35: startaddress |= ((unsigned long) system_settings[10]) << 16;
  2260  02AD  30F8               	movlw	248
  2261  02AE  0084               	movwf	4
  2262  02AF  0800               	movf	0,w	;code access
  2263  02B0  00F0               	movwf	??_RF_Init
  2264  02B1  01F1               	clrf	??_RF_Init+1
  2265  02B2  01F2               	clrf	??_RF_Init+2
  2266  02B3  01F3               	clrf	??_RF_Init+3
  2267  02B4  0871               	movf	??_RF_Init+1,w
  2268  02B5  00F3               	movwf	??_RF_Init+3
  2269  02B6  0870               	movf	??_RF_Init,w
  2270  02B7  00F2               	movwf	??_RF_Init+2
  2271  02B8  01F1               	clrf	??_RF_Init+1
  2272  02B9  01F0               	clrf	??_RF_Init
  2273  02BA  0870               	movf	??_RF_Init,w
  2274  02BB  04A0               	iorwf	_startaddress,f
  2275  02BC  0871               	movf	??_RF_Init+1,w
  2276  02BD  04A1               	iorwf	_startaddress+1,f
  2277  02BE  0872               	movf	??_RF_Init+2,w
  2278  02BF  04A2               	iorwf	_startaddress+2,f
  2279  02C0  0873               	movf	??_RF_Init+3,w
  2280  02C1  04A3               	iorwf	_startaddress+3,f
  2281                           
  2282                           ;noolite.c: 36: startaddress |= ((unsigned long) system_settings[9]) << 8;
  2283  02C2  30F7               	movlw	247
  2284  02C3  0084               	movwf	4
  2285  02C4  0800               	movf	0,w	;code access
  2286  02C5  00F0               	movwf	??_RF_Init
  2287  02C6  01F1               	clrf	??_RF_Init+1
  2288  02C7  01F2               	clrf	??_RF_Init+2
  2289  02C8  01F3               	clrf	??_RF_Init+3
  2290  02C9  0872               	movf	??_RF_Init+2,w
  2291  02CA  00F3               	movwf	??_RF_Init+3
  2292  02CB  0871               	movf	??_RF_Init+1,w
  2293  02CC  00F2               	movwf	??_RF_Init+2
  2294  02CD  0870               	movf	??_RF_Init,w
  2295  02CE  00F1               	movwf	??_RF_Init+1
  2296  02CF  01F0               	clrf	??_RF_Init
  2297  02D0  0870               	movf	??_RF_Init,w
  2298  02D1  04A0               	iorwf	_startaddress,f
  2299  02D2  0871               	movf	??_RF_Init+1,w
  2300  02D3  04A1               	iorwf	_startaddress+1,f
  2301  02D4  0872               	movf	??_RF_Init+2,w
  2302  02D5  04A2               	iorwf	_startaddress+2,f
  2303  02D6  0873               	movf	??_RF_Init+3,w
  2304  02D7  04A3               	iorwf	_startaddress+3,f
  2305                           
  2306                           ;noolite.c: 37: startaddress |= system_settings[8];
  2307  02D8  30F6               	movlw	246
  2308  02D9  0084               	movwf	4
  2309  02DA  0800               	movf	0,w	;code access
  2310  02DB  00F0               	movwf	??_RF_Init
  2311  02DC  01F1               	clrf	??_RF_Init+1
  2312  02DD  01F2               	clrf	??_RF_Init+2
  2313  02DE  01F3               	clrf	??_RF_Init+3
  2314  02DF  04A0               	iorwf	_startaddress,f
  2315  02E0  0871               	movf	??_RF_Init+1,w
  2316  02E1  04A1               	iorwf	_startaddress+1,f
  2317  02E2  0872               	movf	??_RF_Init+2,w
  2318  02E3  04A2               	iorwf	_startaddress+2,f
  2319  02E4  0873               	movf	??_RF_Init+3,w
  2320  02E5  04A3               	iorwf	_startaddress+3,f
  2321                           
  2322                           ;noolite.c: 38: noo_address_type = 1;
  2323  02E6  01A4               	clrf	_noo_address_type
  2324  02E7  0AA4               	incf	_noo_address_type,f
  2325  02E8                     l267:	
  2326  02E8  0064               	clrwdt	;# 
  2327  02E9  0008               	return
  2328  02EA                     __end_of_RF_Init:	
  2329                           
  2330                           	psect	text2
  2331  0179                     __ptext2:	
  2332 ;; *************** function _KeyOffHandler *****************
  2333 ;; Defined at:
  2334 ;;		line 264 in file "main.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  key             1    wreg     PTR struct .
  2337 ;;		 -> Keys(20), 
  2338 ;;  chn             1   11[COMMON] unsigned char 
  2339 ;;  cmd             1   12[COMMON] unsigned char 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  key             1   18[BANK0 ] PTR struct .
  2342 ;;		 -> Keys(20), 
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      void 
  2345 ;; Registers used:
  2346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2347 ;; Tracked objects:
  2348 ;;		On entry : 1F/0
  2349 ;;		On exit  : 1D/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMMON   BANK0   BANK1
  2352 ;;      Params:         2       0       0
  2353 ;;      Locals:         0       1       0
  2354 ;;      Temps:          1       0       0
  2355 ;;      Totals:         3       1       0
  2356 ;;Total ram usage:        4 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; Hardware stack levels required when called:    1
  2359 ;; This function calls:
  2360 ;;		_noolite_send
  2361 ;; This function is called by:
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           
  2367                           ;psect for function _KeyOffHandler
  2368  0179                     _KeyOffHandler:	
  2369                           
  2370                           ;incstack = 0
  2371                           ; Regs used in _KeyOffHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2372                           ;KeyOffHandler@key stored from wreg
  2373  0179  00D6               	movwf	KeyOffHandler@key
  2374                           
  2375                           ;main.c: 265: if (key->State == 0) {
  2376  017A  0086               	movwf	6
  2377  017B  0187               	clrf	7
  2378  017C  0801               	movf	1,w
  2379  017D  1D03               	btfss	3,2
  2380  017E  0008               	return
  2381                           
  2382                           ;main.c: 266: if (key->Tick100ms < 10) {
  2383  017F  0856               	movf	KeyOffHandler@key,w
  2384  0180  3E02               	addlw	2
  2385  0181  0086               	movwf	6
  2386  0182  300A               	movlw	10
  2387  0183  0201               	subwf	1,w
  2388  0184  1C03               	btfss	3,0
  2389  0185  29A1               	goto	l1723
  2390  0186  29AC               	goto	l1725
  2391  0187                     l1713:	
  2392  0187  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2393                           
  2394                           ;main.c: 269: noolite_send(chn, 0, 0, &noo_send_data[0]);
  2395  0188  01F0               	clrf	noolite_send@noo_send_command
  2396  0189  01F1               	clrf	noolite_send@noo_send_format
  2397  018A  00F2               	movwf	noolite_send@data
  2398  018B  087B               	movf	KeyOffHandler@chn,w
  2399  018C  2AEA               	ljmp	_noolite_send
  2400  018D                     l1715:	
  2401                           ;main.c: 270: break;
  2402                           
  2403                           
  2404                           ;main.c: 272: noolite_send(chn, 2, 0, &noo_send_data[0]);
  2405  018D  3002               	movlw	2
  2406  018E  00F0               	movwf	noolite_send@noo_send_command
  2407  018F  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2408  0190  01F1               	clrf	noolite_send@noo_send_format
  2409  0191  00F2               	movwf	noolite_send@data
  2410  0192  087B               	movf	KeyOffHandler@chn,w
  2411  0193  2AEA               	ljmp	_noolite_send
  2412  0194                     l1717:	
  2413                           ;main.c: 273: break;
  2414                           
  2415                           
  2416                           ;main.c: 275: noolite_send(chn, 4, 0, &noo_send_data[0]);
  2417  0194  3004               	movlw	4
  2418  0195  00F0               	movwf	noolite_send@noo_send_command
  2419  0196  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2420  0197  01F1               	clrf	noolite_send@noo_send_format
  2421  0198  00F2               	movwf	noolite_send@data
  2422  0199  087B               	movf	KeyOffHandler@chn,w
  2423  019A  2AEA               	ljmp	_noolite_send
  2424  019B                     l1719:	
  2425                           ;main.c: 276: break;
  2426                           
  2427  019B  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2428                           
  2429                           ;main.c: 278: noolite_send(chn, 0, 0, &noo_send_data[0]);
  2430  019C  01F0               	clrf	noolite_send@noo_send_command
  2431  019D  01F1               	clrf	noolite_send@noo_send_format
  2432  019E  00F2               	movwf	noolite_send@data
  2433  019F  087B               	movf	KeyOffHandler@chn,w
  2434  01A0  2AEA               	ljmp	_noolite_send
  2435  01A1                     l1723:	
  2436                           ;main.c: 279: break;
  2437                           
  2438  01A1  087C               	movf	KeyOffHandler@cmd,w
  2439                           
  2440                           ; Switch size 1, requested type "space"
  2441                           ; Number of cases is 3, Range of values is 0 to 4
  2442                           ; switch strategies available:
  2443                           ; Name         Instructions Cycles
  2444                           ; simple_byte           10     6 (average)
  2445                           ; direct_byte           16     6 (fixed)
  2446                           ; jumptable            260     6 (fixed)
  2447                           ;	Chosen strategy is simple_byte
  2448  01A2  3A00               	xorlw	0	; case 0
  2449  01A3  1903               	skipnz
  2450  01A4  2987               	goto	l1713
  2451  01A5  3A02               	xorlw	2	; case 2
  2452  01A6  1903               	skipnz
  2453  01A7  298D               	goto	l1715
  2454  01A8  3A06               	xorlw	6	; case 4
  2455  01A9  1903               	skipnz
  2456  01AA  2994               	goto	l1717
  2457  01AB  299B               	goto	l1719
  2458  01AC                     l1725:	
  2459                           
  2460                           ;main.c: 282: noolite_send(chn, 10, 0, &noo_send_data[0]);
  2461  01AC  300A               	movlw	10
  2462  01AD  00F0               	movwf	noolite_send@noo_send_command
  2463  01AE  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2464  01AF  01F1               	clrf	noolite_send@noo_send_format
  2465  01B0  00F2               	movwf	noolite_send@data
  2466  01B1  087B               	movf	KeyOffHandler@chn,w
  2467  01B2  22EA               	fcall	_noolite_send
  2468                           
  2469                           ;main.c: 283: _delay((unsigned long)((15)*(8000000/4000.0)));
  2470  01B3  3027               	movlw	39
  2471  01B4  00FD               	movwf	??_KeyOffHandler
  2472  01B5  30F5               	movlw	245
  2473  01B6                     u1657:	
  2474  01B6  0B89               	decfsz	9,f
  2475  01B7  29B6               	goto	u1657
  2476  01B8  0BFD               	decfsz	??_KeyOffHandler,f
  2477  01B9  29B6               	goto	u1657
  2478  01BA  0000               	nop
  2479                           
  2480                           ;main.c: 284: noolite_send(chn, 10, 0, &noo_send_data[0]);
  2481  01BB  300A               	movlw	10
  2482  01BC  00F0               	movwf	noolite_send@noo_send_command
  2483  01BD  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2484  01BE  01F1               	clrf	noolite_send@noo_send_format
  2485  01BF  00F2               	movwf	noolite_send@data
  2486  01C0  087B               	movf	KeyOffHandler@chn,w
  2487  01C1  22EA               	fcall	_noolite_send
  2488                           
  2489                           ;main.c: 285: _delay((unsigned long)((15)*(8000000/4000.0)));
  2490  01C2  3027               	movlw	39
  2491  01C3  00FD               	movwf	??_KeyOffHandler
  2492  01C4  30F5               	movlw	245
  2493  01C5                     u1667:	
  2494  01C5  0B89               	decfsz	9,f
  2495  01C6  29C5               	goto	u1667
  2496  01C7  0BFD               	decfsz	??_KeyOffHandler,f
  2497  01C8  29C5               	goto	u1667
  2498  01C9  0000               	nop
  2499                           
  2500                           ;main.c: 286: noolite_send(chn, 10, 0, &noo_send_data[0]);
  2501  01CA  300A               	movlw	10
  2502  01CB  00F0               	movwf	noolite_send@noo_send_command
  2503  01CC  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2504  01CD  01F1               	clrf	noolite_send@noo_send_format
  2505  01CE  00F2               	movwf	noolite_send@data
  2506  01CF  087B               	movf	KeyOffHandler@chn,w
  2507  01D0  22EA               	fcall	_noolite_send
  2508                           
  2509                           ;main.c: 287: key->FirstCmdSent = 0;
  2510  01D1  0020               	movlb	0	; select bank0
  2511  01D2  0856               	movf	KeyOffHandler@key,w
  2512  01D3  3E03               	addlw	3
  2513  01D4  0086               	movwf	6
  2514  01D5  0187               	clrf	7
  2515  01D6  0181               	clrf	1
  2516  01D7  0008               	return
  2517  01D8                     __end_of_KeyOffHandler:	
  2518                           
  2519                           	psect	text3
  2520  014C                     __ptext3:	
  2521 ;; *************** function _KeyLongHandler *****************
  2522 ;; Defined at:
  2523 ;;		line 292 in file "main.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  key             1    wreg     PTR struct .
  2526 ;;		 -> Keys(20), 
  2527 ;;  chn             1   11[COMMON] unsigned char 
  2528 ;;  cmd             1   12[COMMON] unsigned char 
  2529 ;;  ticksToTrigg    1   13[COMMON] unsigned char 
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;  key             1   18[BANK0 ] PTR struct .
  2532 ;;		 -> Keys(20), 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 1F/0
  2539 ;;		On exit  : 1F/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1
  2542 ;;      Params:         3       0       0
  2543 ;;      Locals:         0       1       0
  2544 ;;      Temps:          0       0       0
  2545 ;;      Totals:         3       1       0
  2546 ;;Total ram usage:        4 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    1
  2549 ;; This function calls:
  2550 ;;		_noolite_send
  2551 ;; This function is called by:
  2552 ;;		_main
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           
  2557                           ;psect for function _KeyLongHandler
  2558  014C                     _KeyLongHandler:	
  2559                           
  2560                           ;incstack = 0
  2561                           ; Regs used in _KeyLongHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2562                           ;KeyLongHandler@key stored from wreg
  2563  014C  00D6               	movwf	KeyLongHandler@key
  2564                           
  2565                           ;main.c: 293: if (key->State != 0) {
  2566  014D  0086               	movwf	6
  2567  014E  0187               	clrf	7
  2568  014F  0801               	movf	1,w
  2569  0150  1903               	btfsc	3,2
  2570  0151  2973               	goto	l1747
  2571                           
  2572                           ;main.c: 294: if (key->Tick100ms > ticksToTrigger) {
  2573  0152  0856               	movf	KeyLongHandler@key,w
  2574  0153  3E02               	addlw	2
  2575  0154  0086               	movwf	6
  2576  0155  0801               	movf	1,w
  2577  0156  027D               	subwf	KeyLongHandler@ticksToTrigger,w
  2578                           
  2579                           ;main.c: 295: if (key->FirstCmdSent == 0) {
  2580  0157  0856               	movf	KeyLongHandler@key,w
  2581  0158  1803               	skipnc
  2582  0159  296E               	goto	L5
  2583  015A  3E03               	addlw	3
  2584  015B  0086               	movwf	6
  2585  015C  0801               	movf	1,w
  2586  015D  1D03               	btfss	3,2
  2587  015E  296D               	goto	l1745
  2588                           
  2589                           ;main.c: 296: noolite_send(chn, cmd, 0, &noo_send_data[0]);
  2590  015F  087C               	movf	KeyLongHandler@cmd,w
  2591  0160  00F0               	movwf	noolite_send@noo_send_command
  2592  0161  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2593  0162  01F1               	clrf	noolite_send@noo_send_format
  2594  0163  00F2               	movwf	noolite_send@data
  2595  0164  087B               	movf	KeyLongHandler@chn,w
  2596  0165  22EA               	fcall	_noolite_send
  2597                           
  2598                           ;main.c: 297: key->FirstCmdSent = 1;
  2599  0166  0020               	movlb	0	; select bank0
  2600  0167  0856               	movf	KeyLongHandler@key,w
  2601  0168  3E03               	addlw	3
  2602  0169  0086               	movwf	6
  2603  016A  0187               	clrf	7
  2604  016B  0181               	clrf	1
  2605  016C  0A81               	incf	1,f
  2606  016D                     l1745:	
  2607                           
  2608                           ;main.c: 298: }
  2609                           ;main.c: 299: }
  2610                           ;main.c: 300: key->Tick100ms++;
  2611  016D  0856               	movf	KeyLongHandler@key,w
  2612  016E                     L5:	
  2613  016E  3E02               	addlw	2
  2614  016F  0086               	movwf	6
  2615  0170  0187               	clrf	7
  2616  0171  0A81               	incf	1,f
  2617                           
  2618                           ;main.c: 301: } else {
  2619  0172  0008               	return
  2620  0173                     l1747:	
  2621                           
  2622                           ;main.c: 302: key->Tick100ms = 0;
  2623  0173  0856               	movf	KeyLongHandler@key,w
  2624  0174  3E02               	addlw	2
  2625  0175  0086               	movwf	6
  2626  0176  0187               	clrf	7
  2627  0177  0181               	clrf	1
  2628  0178  0008               	return
  2629  0179                     __end_of_KeyLongHandler:	
  2630                           
  2631                           	psect	text4
  2632  02EA                     __ptext4:	
  2633 ;; *************** function _noolite_send *****************
  2634 ;; Defined at:
  2635 ;;		line 174 in file "noolite.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  chn             1    wreg     unsigned char 
  2638 ;;  noo_send_com    1    0[COMMON] unsigned char 
  2639 ;;  noo_send_for    1    1[COMMON] unsigned char 
  2640 ;;  data            1    2[COMMON] PTR unsigned char 
  2641 ;;		 -> noo_send_data(4), 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  chn             1   14[BANK0 ] unsigned char 
  2644 ;;  noo_send_buf   12    0[BANK0 ] unsigned char [12]
  2645 ;;  endpos          1   17[BANK0 ] unsigned char 
  2646 ;;  temp_send       1   16[BANK0 ] unsigned char 
  2647 ;;  countsend       1   15[BANK0 ] unsigned char 
  2648 ;;  countbit        1   13[BANK0 ] unsigned char 
  2649 ;;  startpos        1   12[BANK0 ] unsigned char 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 1F/2
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1
  2659 ;;      Params:         3       0       0
  2660 ;;      Locals:         0      18       0
  2661 ;;      Temps:          8       0       0
  2662 ;;      Totals:        11      18       0
  2663 ;;Total ram usage:       29 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; This function calls:
  2666 ;;		Nothing
  2667 ;; This function is called by:
  2668 ;;		_KeyOffHandler
  2669 ;;		_KeyLongHandler
  2670 ;;		_main
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           
  2675                           ;psect for function _noolite_send
  2676  02EA                     _noolite_send:	
  2677                           
  2678                           ;incstack = 0
  2679                           ; Regs used in _noolite_send: [wreg+fsr1l+fsr1h+status,2+status,0]
  2680                           ;noolite_send@chn stored from wreg
  2681  02EA  0020               	movlb	0	; select bank0
  2682  02EB  00D2               	movwf	noolite_send@chn
  2683  02EC  0064               	clrwdt	;# 
  2684                           
  2685                           ;noolite.c: 185: tx_status ^= (1<<1);
  2686  02ED  3002               	movlw	2
  2687  02EE  0020               	movlb	0	; select bank0
  2688  02EF  06AB               	xorwf	_tx_status,f
  2689                           
  2690                           ;noolite.c: 188: if (noo_send_command < 16) {
  2691  02F0  3010               	movlw	16
  2692  02F1  0270               	subwf	noolite_send@noo_send_command,w
  2693  02F2  1803               	skipnc
  2694  02F3  2B00               	goto	l1463
  2695                           
  2696                           ;noolite.c: 189: startpos = 10;
  2697  02F4  300A               	movlw	10
  2698  02F5  00D0               	movwf	noolite_send@startpos
  2699                           
  2700                           ;noolite.c: 190: noo_send_buffer[1] = (noo_send_command << 4) | (1 << 2);
  2701  02F6  0E70               	swapf	noolite_send@noo_send_command,w
  2702  02F7  39F0               	andlw	240
  2703  02F8  3804               	iorlw	4
  2704  02F9  00C5               	movwf	noolite_send@noo_send_buffer+1
  2705                           
  2706                           ;noolite.c: 191: if (((tx_status & (1<<1)) != 0)) {
  2707  02FA  1CAB               	btfss	_tx_status,1
  2708  02FB  2AFE               	goto	l272
  2709                           
  2710                           ;noolite.c: 192: noo_send_buffer[1] |= (1<<3);
  2711  02FC  15C5               	bsf	noolite_send@noo_send_buffer+1,3
  2712                           
  2713                           ;noolite.c: 193: } else {
  2714  02FD  2B0C               	goto	l274
  2715  02FE                     l272:	
  2716                           
  2717                           ;noolite.c: 194: noo_send_buffer[1] &= (~(1<<3));
  2718  02FE  11C5               	bcf	noolite_send@noo_send_buffer+1,3
  2719  02FF  2B0C               	goto	l274
  2720  0300                     l1463:	
  2721                           
  2722                           ;noolite.c: 197: startpos = 6;
  2723  0300  3006               	movlw	6
  2724  0301  00D0               	movwf	noolite_send@startpos
  2725                           
  2726                           ;noolite.c: 198: noo_send_buffer[0] = (1 << 6);
  2727  0302  3040               	movlw	64
  2728  0303  00C4               	movwf	noolite_send@noo_send_buffer
  2729                           
  2730                           ;noolite.c: 199: if (((tx_status & (1<<1)) != 0)) {
  2731  0304  1CAB               	btfss	_tx_status,1
  2732  0305  2B08               	goto	l275
  2733                           
  2734                           ;noolite.c: 200: noo_send_buffer[0] |= (1<<7);
  2735  0306  17C4               	bsf	noolite_send@noo_send_buffer,7
  2736                           
  2737                           ;noolite.c: 201: } else {
  2738  0307  2B09               	goto	l1469
  2739  0308                     l275:	
  2740                           
  2741                           ;noolite.c: 202: noo_send_buffer[0] &= (~(1<<7));
  2742  0308  13C4               	bcf	noolite_send@noo_send_buffer,7
  2743  0309                     l1469:	
  2744                           
  2745                           ;noolite.c: 203: };
  2746                           ;noolite.c: 204: noo_send_buffer[1] = noo_send_command;
  2747  0309  0870               	movf	noolite_send@noo_send_command,w
  2748  030A  00C5               	movwf	noolite_send@noo_send_buffer+1
  2749                           
  2750                           ;noolite.c: 205: noo_send_format = noo_send_format | 4;
  2751  030B  1571               	bsf	noolite_send@noo_send_format,2
  2752  030C                     l274:	
  2753                           
  2754                           ;noolite.c: 206: }
  2755                           ;noolite.c: 207: endpos = 2;
  2756  030C  3002               	movlw	2
  2757  030D  00D5               	movwf	noolite_send@endpos
  2758                           
  2759                           ;noolite.c: 208: temp_send = noo_send_format & 3;
  2760  030E  0871               	movf	noolite_send@noo_send_format,w
  2761  030F  00D4               	movwf	noolite_send@temp_send
  2762  0310  3003               	movlw	3
  2763  0311  05D4               	andwf	noolite_send@temp_send,f
  2764                           
  2765                           ;noolite.c: 209: if (temp_send == 1) {
  2766  0312  0B54               	decfsz	noolite_send@temp_send,w
  2767  0313  2B1B               	goto	l1481
  2768                           
  2769                           ;noolite.c: 211: noo_send_buffer[2] = data[0];
  2770  0314  0872               	movf	noolite_send@data,w
  2771  0315  0086               	movwf	6
  2772  0316  0187               	clrf	7
  2773  0317  0801               	movf	1,w
  2774  0318  00C6               	movwf	noolite_send@noo_send_buffer+2
  2775                           
  2776                           ;noolite.c: 212: endpos++;
  2777  0319  0AD5               	incf	noolite_send@endpos,f
  2778                           
  2779                           ;noolite.c: 213: } else if (temp_send == 3) {
  2780  031A  2B32               	goto	l1487
  2781  031B                     l1481:	
  2782  031B  3003               	movlw	3
  2783  031C  0654               	xorwf	noolite_send@temp_send,w
  2784  031D  1D03               	btfss	3,2
  2785  031E  2B32               	goto	l1487
  2786                           
  2787                           ;noolite.c: 218: noo_send_buffer[2] = data[0];
  2788  031F  0872               	movf	noolite_send@data,w
  2789  0320  0086               	movwf	6
  2790  0321  0187               	clrf	7
  2791  0322  0801               	movf	1,w
  2792  0323  00C6               	movwf	noolite_send@noo_send_buffer+2
  2793                           
  2794                           ;noolite.c: 219: noo_send_buffer[3] = data[1];
  2795  0324  0872               	movf	noolite_send@data,w
  2796  0325  0086               	movwf	6
  2797  0326  3F41               	moviw [1]fsr1
  2798  0327  00C7               	movwf	noolite_send@noo_send_buffer+3
  2799                           
  2800                           ;noolite.c: 220: noo_send_buffer[4] = data[2];
  2801  0328  0872               	movf	noolite_send@data,w
  2802  0329  0086               	movwf	6
  2803  032A  3F42               	moviw [2]fsr1
  2804  032B  00C8               	movwf	noolite_send@noo_send_buffer+4
  2805                           
  2806                           ;noolite.c: 221: noo_send_buffer[5] = data[3];
  2807  032C  0872               	movf	noolite_send@data,w
  2808  032D  0086               	movwf	6
  2809  032E  3F43               	moviw [3]fsr1
  2810  032F  00C9               	movwf	noolite_send@noo_send_buffer+5
  2811                           
  2812                           ;noolite.c: 222: endpos += 4;
  2813  0330  3004               	movlw	4
  2814  0331  07D5               	addwf	noolite_send@endpos,f
  2815  0332                     l1487:	
  2816                           
  2817                           ;noolite.c: 223: }
  2818                           ;noolite.c: 224: if (noo_address_type != 0) {
  2819  0332  0824               	movf	_noo_address_type,w
  2820  0333  1903               	btfsc	3,2
  2821  0334  2B9C               	goto	l1503
  2822                           
  2823                           ;noolite.c: 225: noo_send_format = noo_send_format | 0x10;
  2824  0335  1671               	bsf	noolite_send@noo_send_format,4
  2825                           
  2826                           ;noolite.c: 226: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  2827  0336  0855               	movf	noolite_send@endpos,w
  2828  0337  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2829  0338  0086               	movwf	6
  2830  0339  0187               	clrf	7
  2831  033A  0852               	movf	noolite_send@chn,w
  2832  033B  0720               	addwf	_startaddress,w
  2833  033C  0081               	movwf	1
  2834                           
  2835                           ;noolite.c: 227: endpos++;
  2836  033D  0AD5               	incf	noolite_send@endpos,f
  2837                           
  2838                           ;noolite.c: 228: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  2839  033E  0855               	movf	noolite_send@endpos,w
  2840  033F  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2841  0340  0086               	movwf	6
  2842  0341  0820               	movf	_startaddress,w
  2843  0342  00F3               	movwf	??_noolite_send
  2844  0343  0821               	movf	_startaddress+1,w
  2845  0344  00F4               	movwf	??_noolite_send+1
  2846  0345  0822               	movf	_startaddress+2,w
  2847  0346  00F5               	movwf	??_noolite_send+2
  2848  0347  0823               	movf	_startaddress+3,w
  2849  0348  00F6               	movwf	??_noolite_send+3
  2850  0349  0852               	movf	noolite_send@chn,w
  2851  034A  00F7               	movwf	??_noolite_send+4
  2852  034B  01F8               	clrf	??_noolite_send+5
  2853  034C  01F9               	clrf	??_noolite_send+6
  2854  034D  01FA               	clrf	??_noolite_send+7
  2855  034E  07F3               	addwf	??_noolite_send,f
  2856  034F  0878               	movf	??_noolite_send+5,w
  2857  0350  3DF4               	addwfc	??_noolite_send+1,f
  2858  0351  0879               	movf	??_noolite_send+6,w
  2859  0352  3DF5               	addwfc	??_noolite_send+2,f
  2860  0353  087A               	movf	??_noolite_send+7,w
  2861  0354  3DF6               	addwfc	??_noolite_send+3,f
  2862  0355  0874               	movf	??_noolite_send+1,w
  2863  0356  00F3               	movwf	??_noolite_send
  2864  0357  0875               	movf	??_noolite_send+2,w
  2865  0358  00F4               	movwf	??_noolite_send+1
  2866  0359  0876               	movf	??_noolite_send+3,w
  2867  035A  00F5               	movwf	??_noolite_send+2
  2868  035B  01F6               	clrf	??_noolite_send+3
  2869  035C  0873               	movf	??_noolite_send,w
  2870  035D  0081               	movwf	1
  2871                           
  2872                           ;noolite.c: 229: endpos++;
  2873  035E  0AD5               	incf	noolite_send@endpos,f
  2874                           
  2875                           ;noolite.c: 230: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 16);
  2876  035F  0855               	movf	noolite_send@endpos,w
  2877  0360  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2878  0361  0086               	movwf	6
  2879  0362  0820               	movf	_startaddress,w
  2880  0363  00F3               	movwf	??_noolite_send
  2881  0364  0821               	movf	_startaddress+1,w
  2882  0365  00F4               	movwf	??_noolite_send+1
  2883  0366  0822               	movf	_startaddress+2,w
  2884  0367  00F5               	movwf	??_noolite_send+2
  2885  0368  0823               	movf	_startaddress+3,w
  2886  0369  00F6               	movwf	??_noolite_send+3
  2887  036A  0852               	movf	noolite_send@chn,w
  2888  036B  00F7               	movwf	??_noolite_send+4
  2889  036C  01F8               	clrf	??_noolite_send+5
  2890  036D  01F9               	clrf	??_noolite_send+6
  2891  036E  01FA               	clrf	??_noolite_send+7
  2892  036F  07F3               	addwf	??_noolite_send,f
  2893  0370  0878               	movf	??_noolite_send+5,w
  2894  0371  3DF4               	addwfc	??_noolite_send+1,f
  2895  0372  0879               	movf	??_noolite_send+6,w
  2896  0373  3DF5               	addwfc	??_noolite_send+2,f
  2897  0374  087A               	movf	??_noolite_send+7,w
  2898  0375  3DF6               	addwfc	??_noolite_send+3,f
  2899  0376  0875               	movf	??_noolite_send+2,w
  2900  0377  00F3               	movwf	??_noolite_send
  2901  0378  0876               	movf	??_noolite_send+3,w
  2902  0379  00F4               	movwf	??_noolite_send+1
  2903  037A  01F5               	clrf	??_noolite_send+2
  2904  037B  01F6               	clrf	??_noolite_send+3
  2905  037C  0873               	movf	??_noolite_send,w
  2906  037D  0081               	movwf	1
  2907                           
  2908                           ;noolite.c: 231: endpos++;
  2909  037E  0AD5               	incf	noolite_send@endpos,f
  2910                           
  2911                           ;noolite.c: 232: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 24);
  2912  037F  0855               	movf	noolite_send@endpos,w
  2913  0380  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2914  0381  0086               	movwf	6
  2915  0382  0820               	movf	_startaddress,w
  2916  0383  00F3               	movwf	??_noolite_send
  2917  0384  0821               	movf	_startaddress+1,w
  2918  0385  00F4               	movwf	??_noolite_send+1
  2919  0386  0822               	movf	_startaddress+2,w
  2920  0387  00F5               	movwf	??_noolite_send+2
  2921  0388  0823               	movf	_startaddress+3,w
  2922  0389  00F6               	movwf	??_noolite_send+3
  2923  038A  0852               	movf	noolite_send@chn,w
  2924  038B  00F7               	movwf	??_noolite_send+4
  2925  038C  01F8               	clrf	??_noolite_send+5
  2926  038D  01F9               	clrf	??_noolite_send+6
  2927  038E  01FA               	clrf	??_noolite_send+7
  2928  038F  07F3               	addwf	??_noolite_send,f
  2929  0390  0878               	movf	??_noolite_send+5,w
  2930  0391  3DF4               	addwfc	??_noolite_send+1,f
  2931  0392  0879               	movf	??_noolite_send+6,w
  2932  0393  3DF5               	addwfc	??_noolite_send+2,f
  2933  0394  087A               	movf	??_noolite_send+7,w
  2934  0395  3DF6               	addwfc	??_noolite_send+3,f
  2935  0396  0876               	movf	??_noolite_send+3,w
  2936  0397  00F3               	movwf	??_noolite_send
  2937  0398  01F4               	clrf	??_noolite_send+1
  2938  0399  01F5               	clrf	??_noolite_send+2
  2939  039A  01F6               	clrf	??_noolite_send+3
  2940  039B  2BC3               	goto	L6
  2941  039C                     l1503:	
  2942                           ;noolite.c: 234: } else {
  2943                           
  2944                           ;noolite.c: 233: endpos++;
  2945                           
  2946                           
  2947                           ;noolite.c: 235: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  2948  039C  0855               	movf	noolite_send@endpos,w
  2949  039D  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2950  039E  0086               	movwf	6
  2951  039F  0187               	clrf	7
  2952  03A0  0852               	movf	noolite_send@chn,w
  2953  03A1  0720               	addwf	_startaddress,w
  2954  03A2  0081               	movwf	1
  2955                           
  2956                           ;noolite.c: 236: endpos++;
  2957  03A3  0AD5               	incf	noolite_send@endpos,f
  2958                           
  2959                           ;noolite.c: 237: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  2960  03A4  0855               	movf	noolite_send@endpos,w
  2961  03A5  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2962  03A6  0086               	movwf	6
  2963  03A7  0820               	movf	_startaddress,w
  2964  03A8  00F3               	movwf	??_noolite_send
  2965  03A9  0821               	movf	_startaddress+1,w
  2966  03AA  00F4               	movwf	??_noolite_send+1
  2967  03AB  0822               	movf	_startaddress+2,w
  2968  03AC  00F5               	movwf	??_noolite_send+2
  2969  03AD  0823               	movf	_startaddress+3,w
  2970  03AE  00F6               	movwf	??_noolite_send+3
  2971  03AF  0852               	movf	noolite_send@chn,w
  2972  03B0  00F7               	movwf	??_noolite_send+4
  2973  03B1  01F8               	clrf	??_noolite_send+5
  2974  03B2  01F9               	clrf	??_noolite_send+6
  2975  03B3  01FA               	clrf	??_noolite_send+7
  2976  03B4  07F3               	addwf	??_noolite_send,f
  2977  03B5  0878               	movf	??_noolite_send+5,w
  2978  03B6  3DF4               	addwfc	??_noolite_send+1,f
  2979  03B7  0879               	movf	??_noolite_send+6,w
  2980  03B8  3DF5               	addwfc	??_noolite_send+2,f
  2981  03B9  087A               	movf	??_noolite_send+7,w
  2982  03BA  3DF6               	addwfc	??_noolite_send+3,f
  2983  03BB  0874               	movf	??_noolite_send+1,w
  2984  03BC  00F3               	movwf	??_noolite_send
  2985  03BD  0875               	movf	??_noolite_send+2,w
  2986  03BE  00F4               	movwf	??_noolite_send+1
  2987  03BF  0876               	movf	??_noolite_send+3,w
  2988  03C0  00F5               	movwf	??_noolite_send+2
  2989  03C1  01F6               	clrf	??_noolite_send+3
  2990  03C2  0873               	movf	??_noolite_send,w
  2991  03C3                     L6:	
  2992  03C3  0081               	movwf	1
  2993                           
  2994                           ;noolite.c: 238: endpos++;
  2995  03C4  0AD5               	incf	noolite_send@endpos,f
  2996                           
  2997                           ;noolite.c: 239: }
  2998                           ;noolite.c: 240: noo_send_buffer[endpos] = noo_send_format;
  2999  03C5  0855               	movf	noolite_send@endpos,w
  3000  03C6  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3001  03C7  0086               	movwf	6
  3002  03C8  0187               	clrf	7
  3003  03C9  0871               	movf	noolite_send@noo_send_format,w
  3004  03CA  0081               	movwf	1
  3005                           
  3006                           ;noolite.c: 241: endpos++;
  3007  03CB  0AD5               	incf	noolite_send@endpos,f
  3008                           
  3009                           ;noolite.c: 242: temp_send = 0;
  3010  03CC  01D4               	clrf	noolite_send@temp_send
  3011                           
  3012                           ;noolite.c: 243: countbit = (unsigned char) (endpos * 8);
  3013  03CD  0855               	movf	noolite_send@endpos,w
  3014  03CE  0709               	addwf	9,w
  3015  03CF  0709               	addwf	9,w
  3016  03D0  0709               	addwf	9,w
  3017  03D1  00D1               	movwf	noolite_send@countbit
  3018                           
  3019                           ;noolite.c: 244: countsend = startpos + 1;
  3020  03D2  0850               	movf	noolite_send@startpos,w
  3021  03D3  3E01               	addlw	1
  3022  03D4  00D3               	movwf	noolite_send@countsend
  3023  03D5                     l1541:	
  3024                           ;noolite.c: 245: while (countsend < countbit) {
  3025                           
  3026  03D5  0020               	movlb	0	; select bank0
  3027  03D6  0851               	movf	noolite_send@countbit,w
  3028  03D7  0253               	subwf	noolite_send@countsend,w
  3029  03D8  1803               	btfsc	3,0
  3030  03D9  2BFF               	goto	l1543
  3031                           
  3032                           ;noolite.c: 246: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3033  03DA  0853               	movf	noolite_send@countsend,w
  3034  03DB  00F3               	movwf	??_noolite_send
  3035  03DC  36F3               	lsrf	??_noolite_send,f
  3036  03DD  36F3               	lsrf	??_noolite_send,f
  3037  03DE  36F3               	lsrf	??_noolite_send,f
  3038  03DF  0873               	movf	??_noolite_send,w
  3039  03E0  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3040  03E1  0086               	movwf	6
  3041  03E2  3001               	movlw	1
  3042  03E3  0187               	clrf	7
  3043  03E4  00F4               	movwf	??_noolite_send+1
  3044  03E5  0853               	movf	noolite_send@countsend,w
  3045  03E6  3907               	andlw	7
  3046  03E7  0A89               	incf	9,f
  3047  03E8  2BEA               	goto	u844
  3048  03E9                     u845:	
  3049  03E9  35F4               	lslf	??_noolite_send+1,f
  3050  03EA                     u844:	
  3051  03EA  0B89               	decfsz	9,f
  3052  03EB  2BE9               	goto	u845
  3053  03EC  0874               	movf	??_noolite_send+1,w
  3054  03ED  0501               	andwf	1,w
  3055  03EE  1903               	btfsc	3,2
  3056  03EF  2BF2               	goto	l1523
  3057                           
  3058                           ;noolite.c: 247: temp_send = temp_send^0x01;
  3059  03F0  3001               	movlw	1
  3060  03F1  06D4               	xorwf	noolite_send@temp_send,f
  3061  03F2                     l1523:	
  3062                           
  3063                           ;noolite.c: 248: }
  3064                           ;noolite.c: 249: tx_status &= (~(1<<4));
  3065  03F2  122B               	bcf	_tx_status,4
  3066                           
  3067                           ;noolite.c: 250: if (((temp_send & (1<<0)) != 0)) {
  3068  03F3  1C54               	btfss	noolite_send@temp_send,0
  3069  03F4  2BF8               	goto	l1531
  3070                           
  3071                           ;noolite.c: 251: temp_send = temp_send^0x18;
  3072  03F5  3018               	movlw	24
  3073  03F6  06D4               	xorwf	noolite_send@temp_send,f
  3074                           
  3075                           ;noolite.c: 252: tx_status |= (1<<4);
  3076  03F7  162B               	bsf	_tx_status,4
  3077  03F8                     l1531:	
  3078                           
  3079                           ;noolite.c: 253: }
  3080                           ;noolite.c: 254: temp_send = temp_send >> 1;
  3081  03F8  36D4               	lsrf	noolite_send@temp_send,f
  3082                           
  3083                           ;noolite.c: 255: temp_send &= (~(1<<7));
  3084  03F9  13D4               	bcf	noolite_send@temp_send,7
  3085                           
  3086                           ;noolite.c: 256: if (((tx_status & (1<<4)) != 0)) {
  3087  03FA  1A2B               	btfsc	_tx_status,4
  3088                           
  3089                           ;noolite.c: 257: temp_send |= (1<<7);
  3090  03FB  17D4               	bsf	noolite_send@temp_send,7
  3091                           
  3092                           ;noolite.c: 258: }
  3093                           ;noolite.c: 259: countsend++;
  3094  03FC  0AD3               	incf	noolite_send@countsend,f
  3095  03FD  0064               	clrwdt	;# 
  3096  03FE  2BD5               	goto	l1541
  3097  03FF                     l1543:	
  3098                           
  3099                           ;noolite.c: 261: }
  3100                           ;noolite.c: 262: noo_send_buffer[endpos] = temp_send;
  3101  03FF  0855               	movf	noolite_send@endpos,w
  3102  0400  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3103  0401  0086               	movwf	6
  3104  0402  0187               	clrf	7
  3105  0403  0854               	movf	noolite_send@temp_send,w
  3106  0404  0081               	movwf	1
  3107  0405  30C0               	movlw	192
  3108                           
  3109                           ;noolite.c: 263: endpos++;
  3110  0406  0AD5               	incf	noolite_send@endpos,f
  3111                           
  3112                           ;noolite.c: 264: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3113  0407  0021               	movlb	1	; select bank1
  3114  0408  0595               	andwf	21,f	;volatile
  3115  0409  3003               	movlw	3
  3116  040A  0495               	iorwf	21,f	;volatile
  3117                           
  3118                           ;noolite.c: 265: temp_send = 3;
  3119  040B  0020               	movlb	0	; select bank0
  3120  040C  00D4               	movwf	noolite_send@temp_send
  3121  040D  3026               	movlw	38
  3122                           
  3123                           ;noolite.c: 266: tx_status &= (~(1<<2));
  3124  040E  112B               	bcf	_tx_status,2
  3125                           
  3126                           ;noolite.c: 267: tx_status &= (~(1<<3));
  3127  040F  11AB               	bcf	_tx_status,3
  3128                           
  3129                           ;noolite.c: 268: tx_status |= (1<<0);
  3130  0410  142B               	bsf	_tx_status,0
  3131                           
  3132                           ;noolite.c: 269: tx_status |= (1<<5);
  3133  0411  16AB               	bsf	_tx_status,5
  3134                           
  3135                           ;noolite.c: 270: countsend = 0;
  3136  0412  01D3               	clrf	noolite_send@countsend
  3137                           
  3138                           ;noolite.c: 271: countbit = 38;
  3139  0413  00D1               	movwf	noolite_send@countbit
  3140  0414  0064               	clrwdt	;# 
  3141                           
  3142                           ;noolite.c: 273: LATCbits.LATC3 = 1;
  3143  0415  0022               	movlb	2	; select bank2
  3144  0416  158E               	bsf	14,3	;volatile
  3145                           
  3146                           ;noolite.c: 274: _delay((unsigned long)((15)*(8000000/4000.0)));
  3147  0417  3027               	movlw	39
  3148  0418  00F3               	movwf	??_noolite_send
  3149  0419  30F5               	movlw	245
  3150  041A                     u1677:	
  3151  041A  0B89               	decfsz	9,f
  3152  041B  2C1A               	goto	u1677
  3153  041C  0BF3               	decfsz	??_noolite_send,f
  3154  041D  2C1A               	goto	u1677
  3155  041E  0000               	nop
  3156                           
  3157                           ;noolite.c: 275: LATCbits.LATC3 = 0;
  3158  041F  0022               	movlb	2	; select bank2
  3159  0420  118E               	bcf	14,3	;volatile
  3160                           
  3161                           ;noolite.c: 276: TMR0 = 196;
  3162  0421  30C4               	movlw	196
  3163  0422  0020               	movlb	0	; select bank0
  3164  0423  0095               	movwf	21	;volatile
  3165                           
  3166                           ;noolite.c: 277: TMR0IF = 0;
  3167  0424  110B               	bcf	11,2	;volatile
  3168                           
  3169                           ;noolite.c: 278: TMR0IE = 0;
  3170  0425  128B               	bcf	11,5	;volatile
  3171  0426                     l288:	
  3172                           ;noolite.c: 279: while (((tx_status & (1<<3)) == 0)) {
  3173                           
  3174  0426  19AB               	btfsc	_tx_status,3
  3175  0427  2C80               	goto	l299
  3176                           
  3177                           ;noolite.c: 280: if (TMR0IF) {
  3178  0428  1D0B               	btfss	11,2	;volatile
  3179  0429  2C26               	goto	l288
  3180                           
  3181                           ;noolite.c: 281: __nop();
  3182  042A  0000               	nop
  3183                           
  3184                           ;noolite.c: 282: if (countsend < countbit) {
  3185  042B  0020               	movlb	0	; select bank0
  3186  042C  0851               	movf	noolite_send@countbit,w
  3187  042D  0253               	subwf	noolite_send@countsend,w
  3188  042E  1803               	skipnc
  3189  042F  2C47               	goto	l291
  3190                           
  3191                           ;noolite.c: 283: if (((tx_status & (1<<2)) == 0)) {
  3192  0430  192B               	btfsc	_tx_status,2
  3193  0431  2C3E               	goto	l1591
  3194                           
  3195                           ;noolite.c: 284: if (((tx_status & (1<<0)) == 0)) {
  3196  0432  182B               	btfsc	_tx_status,0
  3197  0433  2C37               	goto	l293
  3198                           
  3199                           ;noolite.c: 285: LATAbits.LATA5 = 1;
  3200  0434  0022               	movlb	2	; select bank2
  3201  0435  168C               	bsf	12,5	;volatile
  3202                           
  3203                           ;noolite.c: 286: } else {
  3204  0436  2C39               	goto	l1587
  3205  0437                     l293:	
  3206                           
  3207                           ;noolite.c: 287: LATAbits.LATA5 = 0;
  3208  0437  0022               	movlb	2	; select bank2
  3209  0438  128C               	bcf	12,5	;volatile
  3210  0439                     l1587:	
  3211                           
  3212                           ;noolite.c: 288: }
  3213                           ;noolite.c: 289: TMR0 = 196;
  3214  0439  30C4               	movlw	196
  3215  043A  0020               	movlb	0	; select bank0
  3216  043B  0095               	movwf	21	;volatile
  3217                           
  3218                           ;noolite.c: 290: tx_status |= (1<<2);
  3219  043C  152B               	bsf	_tx_status,2
  3220                           
  3221                           ;noolite.c: 291: } else {
  3222  043D  2C63               	goto	l296
  3223  043E                     l1591:	
  3224                           
  3225                           ;noolite.c: 292: LATA ^= (1<<5);
  3226  043E  3020               	movlw	32
  3227  043F  0022               	movlb	2	; select bank2
  3228  0440  068C               	xorwf	12,f	;volatile
  3229                           
  3230                           ;noolite.c: 293: TMR0 = 196;
  3231  0441  30C4               	movlw	196
  3232  0442  0020               	movlb	0	; select bank0
  3233  0443  0095               	movwf	21	;volatile
  3234                           
  3235                           ;noolite.c: 294: tx_status &= (~(1<<2));
  3236  0444  112B               	bcf	_tx_status,2
  3237                           
  3238                           ;noolite.c: 295: countsend++;
  3239  0445  0AD3               	incf	noolite_send@countsend,f
  3240  0446  2C63               	goto	l296
  3241  0447                     l291:	
  3242                           
  3243                           ;noolite.c: 298: LATAbits.LATA5 = 0;
  3244  0447  0022               	movlb	2	; select bank2
  3245  0448  128C               	bcf	12,5	;volatile
  3246                           
  3247                           ;noolite.c: 299: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3248  0449  30C0               	movlw	192
  3249  044A  0021               	movlb	1	; select bank1
  3250  044B  0595               	andwf	21,f	;volatile
  3251  044C  3003               	movlw	3
  3252  044D  0495               	iorwf	21,f	;volatile
  3253                           
  3254                           ;noolite.c: 300: TMR0 = 67;
  3255  044E  3043               	movlw	67
  3256  044F  0020               	movlb	0	; select bank0
  3257  0450  0095               	movwf	21	;volatile
  3258  0451  0064               	clrwdt	;# 
  3259                           
  3260                           ;noolite.c: 302: tx_status &= (~(1<<5));
  3261  0452  0020               	movlb	0	; select bank0
  3262  0453  12AB               	bcf	_tx_status,5
  3263                           
  3264                           ;noolite.c: 303: countsend = startpos;
  3265  0454  0850               	movf	noolite_send@startpos,w
  3266  0455  00D3               	movwf	noolite_send@countsend
  3267                           
  3268                           ;noolite.c: 304: countbit = endpos * 8;
  3269  0456  0855               	movf	noolite_send@endpos,w
  3270  0457  0709               	addwf	9,w
  3271  0458  0709               	addwf	9,w
  3272  0459  0709               	addwf	9,w
  3273  045A  00D1               	movwf	noolite_send@countbit
  3274                           
  3275                           ;noolite.c: 305: if (temp_send != 0) {
  3276  045B  0854               	movf	noolite_send@temp_send,w
  3277  045C  1903               	btfsc	3,2
  3278  045D  2C60               	goto	l1607
  3279                           
  3280                           ;noolite.c: 306: temp_send--;
  3281  045E  03D4               	decf	noolite_send@temp_send,f
  3282                           
  3283                           ;noolite.c: 307: } else {
  3284  045F  2C63               	goto	l296
  3285  0460                     l1607:	
  3286                           
  3287                           ;noolite.c: 308: TMR0 = 0;
  3288  0460  0195               	clrf	21	;volatile
  3289                           
  3290                           ;noolite.c: 309: tx_status |= (1<<3);
  3291  0461  15AB               	bsf	_tx_status,3
  3292                           
  3293                           ;noolite.c: 310: break;
  3294  0462  2C80               	goto	l299
  3295  0463                     l296:	
  3296                           
  3297                           ;noolite.c: 311: }
  3298                           ;noolite.c: 312: }
  3299                           ;noolite.c: 313: if (((tx_status & (1<<5)) == 0)) {
  3300  0463  1AAB               	btfsc	_tx_status,5
  3301  0464  2C7E               	goto	l300
  3302                           
  3303                           ;noolite.c: 314: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3304  0465  0853               	movf	noolite_send@countsend,w
  3305  0466  00F3               	movwf	??_noolite_send
  3306  0467  36F3               	lsrf	??_noolite_send,f
  3307  0468  36F3               	lsrf	??_noolite_send,f
  3308  0469  36F3               	lsrf	??_noolite_send,f
  3309  046A  0873               	movf	??_noolite_send,w
  3310  046B  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3311  046C  0086               	movwf	6
  3312  046D  3001               	movlw	1
  3313  046E  0187               	clrf	7
  3314  046F  00F4               	movwf	??_noolite_send+1
  3315  0470  0853               	movf	noolite_send@countsend,w
  3316  0471  3907               	andlw	7
  3317  0472  0A89               	incf	9,f
  3318  0473  2C75               	goto	u954
  3319  0474                     u955:	
  3320  0474  35F4               	lslf	??_noolite_send+1,f
  3321  0475                     u954:	
  3322  0475  0B89               	decfsz	9,f
  3323  0476  2C74               	goto	u955
  3324  0477  0874               	movf	??_noolite_send+1,w
  3325  0478  0501               	andwf	1,w
  3326  0479  1903               	btfsc	3,2
  3327  047A  2C7D               	goto	l301
  3328                           
  3329                           ;noolite.c: 315: tx_status |= (1<<0);
  3330  047B  142B               	bsf	_tx_status,0
  3331                           
  3332                           ;noolite.c: 316: } else {
  3333  047C  2C7E               	goto	l300
  3334  047D                     l301:	
  3335                           
  3336                           ;noolite.c: 317: tx_status &= (~(1<<0));
  3337  047D  102B               	bcf	_tx_status,0
  3338  047E                     l300:	
  3339                           
  3340                           ;noolite.c: 318: }
  3341                           ;noolite.c: 319: }
  3342                           ;noolite.c: 320: TMR0IF = 0;
  3343  047E  110B               	bcf	11,2	;volatile
  3344  047F  2C26               	goto	l288
  3345  0480                     l299:	
  3346                           
  3347                           ;noolite.c: 321: }
  3348                           ;noolite.c: 322: }
  3349                           ;noolite.c: 323: TMR0IF = 0;
  3350  0480  110B               	bcf	11,2	;volatile
  3351                           
  3352                           ;noolite.c: 324: LATAbits.LATA5 = 0;
  3353  0481  0022               	movlb	2	; select bank2
  3354  0482  128C               	bcf	12,5	;volatile
  3355  0483  0008               	return
  3356  0484                     __end_of_noolite_send:	
  3357                           
  3358                           	psect	text5
  3359  0138                     __ptext5:	
  3360 ;; *************** function _Init_TypeFromFlash *****************
  3361 ;; Defined at:
  3362 ;;		line 231 in file "main.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;		None
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;		None
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      unsigned char 
  3369 ;; Registers used:
  3370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/2
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1
  3376 ;;      Params:         0       0       0
  3377 ;;      Locals:         0       0       0
  3378 ;;      Temps:          1       0       0
  3379 ;;      Totals:         1       0       0
  3380 ;;Total ram usage:        1 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _Init_TypeFromFlash
  3391  0138                     _Init_TypeFromFlash:	
  3392                           
  3393                           ;main.c: 232: if (((Type[0] >> 8) == 0x5A) && ((Type[0] & 0xFF) < 4)) {
  3394                           
  3395                           ;incstack = 0
  3396                           ; Regs used in _Init_TypeFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3397  0138  30C1               	movlw	193
  3398  0139  0084               	movwf	4
  3399  013A  3087               	movlw	135
  3400  013B  0085               	movwf	5
  3401  013C  0012               	moviw fsr0++
  3402  013D  3A5A               	xorlw	90
  3403  013E  1D03               	btfss	3,2
  3404  013F  3400               	retlw	0
  3405  0140  30C0               	movlw	192
  3406  0141  0084               	movwf	4
  3407  0142  3087               	movlw	135
  3408  0143  0085               	movwf	5
  3409  0144  0800               	movf	0,w	;code access
  3410  0145  00F0               	movwf	??_Init_TypeFromFlash
  3411  0146  3004               	movlw	4
  3412  0147  0270               	subwf	??_Init_TypeFromFlash,w
  3413  0148  1803               	skipnc
  3414  0149  3400               	retlw	0
  3415                           
  3416                           ;main.c: 233: return (Type[0] & 0xFF);
  3417  014A  0800               	movf	0,w	;code access
  3418  014B  0008               	return
  3419  014C                     __end_of_Init_TypeFromFlash:	
  3420                           ;main.c: 235: return 0;
  3421                           
  3422                           
  3423                           	psect	text6
  3424  01D8                     __ptext6:	
  3425 ;; *************** function _Init_TxStatusFromFlash *****************
  3426 ;; Defined at:
  3427 ;;		line 239 in file "main.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  cellNum         1    4[COMMON] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      unsigned char 
  3434 ;; Registers used:
  3435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3436 ;; Tracked objects:
  3437 ;;		On entry : 1F/0
  3438 ;;		On exit  : 1F/0
  3439 ;;		Unchanged: 1F/0
  3440 ;; Data sizes:     COMMON   BANK0   BANK1
  3441 ;;      Params:         0       0       0
  3442 ;;      Locals:         1       0       0
  3443 ;;      Temps:          4       0       0
  3444 ;;      Totals:         5       0       0
  3445 ;;Total ram usage:        5 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_main
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           
  3455                           ;psect for function _Init_TxStatusFromFlash
  3456  01D8                     _Init_TxStatusFromFlash:	
  3457                           
  3458                           ;main.c: 240: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  3459                           
  3460                           ;incstack = 0
  3461                           ; Regs used in _Init_TxStatusFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3462  01D8  01F4               	clrf	Init_TxStatusFromFlash@cellNum
  3463  01D9                     l1661:	
  3464                           
  3465                           ;main.c: 241: if (TxStatus[cellNum] == 0xFFFF) {
  3466  01D9  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3467  01DA  00F0               	movwf	??_Init_TxStatusFromFlash
  3468  01DB  30D0               	movlw	208
  3469  01DC  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3470  01DD  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3471  01DE  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3472  01DF  0770               	addwf	??_Init_TxStatusFromFlash,w
  3473  01E0  0084               	movwf	4
  3474  01E1  3087               	movlw	135
  3475  01E2  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3476  01E3  0085               	movwf	5
  3477  01E4  0012               	moviw fsr0++
  3478  01E5  3AFF               	xorlw	255
  3479  01E6  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3480  01E7  0012               	moviw fsr0++
  3481  01E8  3AFF               	xorlw	255
  3482  01E9  04F2               	iorwf	??_Init_TxStatusFromFlash+2,f
  3483  01EA  1D03               	btfss	3,2
  3484  01EB  2A22               	goto	l1683
  3485                           
  3486                           ;main.c: 242: if (cellNum > 0) {
  3487  01EC  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3488  01ED  1903               	btfsc	3,2
  3489  01EE  3400               	retlw	0
  3490                           
  3491                           ;main.c: 243: if (((TxStatus[cellNum - 1] >> 8) == 0x5A) && ((TxStatus[cellNum - 1] & 0x
      +                          FF) < 3)) {
  3492  01EF  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3493  01F0  00F0               	movwf	??_Init_TxStatusFromFlash
  3494  01F1  30CE               	movlw	206
  3495  01F2  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3496  01F3  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3497  01F4  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3498  01F5  0770               	addwf	??_Init_TxStatusFromFlash,w
  3499  01F6  0084               	movwf	4
  3500  01F7  3087               	movlw	135
  3501  01F8  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3502  01F9  0085               	movwf	5
  3503  01FA  3F00               	moviw [0]fsr0
  3504  01FB  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3505  01FC  3F01               	moviw [1]fsr0
  3506  01FD  00F3               	movwf	??_Init_TxStatusFromFlash+3
  3507  01FE  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3508  01FF  305A               	movlw	90
  3509  0200  01F3               	clrf	??_Init_TxStatusFromFlash+3
  3510  0201  0672               	xorwf	??_Init_TxStatusFromFlash+2,w
  3511  0202  1D03               	btfss	3,2
  3512  0203  3400               	retlw	0
  3513  0204  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3514  0205  00F0               	movwf	??_Init_TxStatusFromFlash
  3515  0206  30CE               	movlw	206
  3516  0207  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3517  0208  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3518  0209  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3519  020A  0770               	addwf	??_Init_TxStatusFromFlash,w
  3520  020B  0084               	movwf	4
  3521  020C  3087               	movlw	135
  3522  020D  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3523  020E  0085               	movwf	5
  3524  020F  0800               	movf	0,w	;code access
  3525  0210  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3526  0211  3003               	movlw	3
  3527  0212  0272               	subwf	??_Init_TxStatusFromFlash+2,w
  3528  0213  1803               	skipnc
  3529  0214  3400               	retlw	0
  3530                           
  3531                           ;main.c: 244: return TxStatus[cellNum - 1];
  3532  0215  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3533  0216  00F0               	movwf	??_Init_TxStatusFromFlash
  3534  0217  30CE               	movlw	206
  3535  0218  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3536  0219  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3537  021A  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3538  021B  0770               	addwf	??_Init_TxStatusFromFlash,w
  3539  021C  0084               	movwf	4
  3540  021D  3087               	movlw	135
  3541  021E  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3542  021F  0085               	movwf	5
  3543  0220  0800               	movf	0,w	;code access
  3544  0221  0008               	return
  3545  0222                     l1683:	
  3546                           ;main.c: 246: return 0;
  3547                           
  3548                           
  3549                           ;main.c: 252: if (cellNum == 7) {
  3550  0222  3007               	movlw	7
  3551  0223  0674               	xorwf	Init_TxStatusFromFlash@cellNum,w
  3552  0224  1D03               	btfss	3,2
  3553  0225  2A59               	goto	l1699
  3554                           
  3555                           ;main.c: 253: if (((TxStatus[cellNum] >> 8) == 0x5A) && ((TxStatus[cellNum] & 0xFF) < 3)
      +                          ) {
  3556  0226  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3557  0227  00F0               	movwf	??_Init_TxStatusFromFlash
  3558  0228  30D0               	movlw	208
  3559  0229  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3560  022A  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3561  022B  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3562  022C  0770               	addwf	??_Init_TxStatusFromFlash,w
  3563  022D  0084               	movwf	4
  3564  022E  3087               	movlw	135
  3565  022F  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3566  0230  0085               	movwf	5
  3567  0231  3F00               	moviw [0]fsr0
  3568  0232  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3569  0233  3F01               	moviw [1]fsr0
  3570  0234  00F3               	movwf	??_Init_TxStatusFromFlash+3
  3571  0235  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3572  0236  305A               	movlw	90
  3573  0237  01F3               	clrf	??_Init_TxStatusFromFlash+3
  3574  0238  0672               	xorwf	??_Init_TxStatusFromFlash+2,w
  3575  0239  1D03               	btfss	3,2
  3576  023A  3400               	retlw	0
  3577  023B  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3578  023C  00F0               	movwf	??_Init_TxStatusFromFlash
  3579  023D  30D0               	movlw	208
  3580  023E  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3581  023F  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3582  0240  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3583  0241  0770               	addwf	??_Init_TxStatusFromFlash,w
  3584  0242  0084               	movwf	4
  3585  0243  3087               	movlw	135
  3586  0244  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3587  0245  0085               	movwf	5
  3588  0246  0800               	movf	0,w	;code access
  3589  0247  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3590  0248  3003               	movlw	3
  3591  0249  0272               	subwf	??_Init_TxStatusFromFlash+2,w
  3592  024A  1803               	skipnc
  3593  024B  3400               	retlw	0
  3594                           
  3595                           ;main.c: 254: return TxStatus[cellNum];
  3596  024C  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3597  024D  00F0               	movwf	??_Init_TxStatusFromFlash
  3598  024E  30D0               	movlw	208
  3599  024F  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3600  0250  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3601  0251  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3602  0252  0770               	addwf	??_Init_TxStatusFromFlash,w
  3603  0253  0084               	movwf	4
  3604  0254  3087               	movlw	135
  3605  0255  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3606  0256  0085               	movwf	5
  3607  0257  0800               	movf	0,w	;code access
  3608  0258  0008               	return
  3609  0259                     l1699:	
  3610  0259  3008               	movlw	8
  3611  025A  0AF4               	incf	Init_TxStatusFromFlash@cellNum,f
  3612  025B  0274               	subwf	Init_TxStatusFromFlash@cellNum,w
  3613  025C  1803               	btfsc	3,0
  3614  025D  3400               	retlw	0
  3615  025E  29D9               	goto	l1661
  3616  025F                     __end_of_Init_TxStatusFromFlash:	
  3617                           
  3618                           	psect	text7
  3619  0115                     __ptext7:	
  3620 ;; *************** function _Init_IO *****************
  3621 ;; Defined at:
  3622 ;;		line 120 in file "main.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2
  3631 ;; Tracked objects:
  3632 ;;		On entry : B1F/0
  3633 ;;		On exit  : B1F/2
  3634 ;;		Unchanged: B00/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1
  3636 ;;      Params:         0       0       0
  3637 ;;      Locals:         0       0       0
  3638 ;;      Temps:          0       0       0
  3639 ;;      Totals:         0       0       0
  3640 ;;Total ram usage:        0 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_main
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           
  3650                           ;psect for function _Init_IO
  3651  0115                     _Init_IO:	
  3652                           
  3653                           ;main.c: 121: OPTION_REGbits.nWPUEN = 0;
  3654                           
  3655                           ;incstack = 0
  3656                           ; Regs used in _Init_IO: [wreg+status,2]
  3657  0115  0021               	movlb	1	; select bank1
  3658  0116  1395               	bcf	21,7	;volatile
  3659                           
  3660                           ;main.c: 122: TRISA = 0x1F;
  3661  0117  301F               	movlw	31
  3662  0118  008C               	movwf	12	;volatile
  3663                           
  3664                           ;main.c: 123: ANSELA = 0;
  3665  0119  0023               	movlb	3	; select bank3
  3666  011A  018C               	clrf	12	;volatile
  3667                           
  3668                           ;main.c: 124: WPUA = 0x08;
  3669  011B  3008               	movlw	8
  3670  011C  0024               	movlb	4	; select bank4
  3671  011D  008C               	movwf	12	;volatile
  3672                           
  3673                           ;main.c: 126: TRISC = 0x00;
  3674  011E  0021               	movlb	1	; select bank1
  3675  011F  018E               	clrf	14	;volatile
  3676                           
  3677                           ;main.c: 127: ANSELC = 0;
  3678  0120  0023               	movlb	3	; select bank3
  3679  0121  018E               	clrf	14	;volatile
  3680                           
  3681                           ;main.c: 128: LATC = 0x00;
  3682  0122  0022               	movlb	2	; select bank2
  3683  0123  018E               	clrf	14	;volatile
  3684  0124  0008               	return
  3685  0125                     __end_of_Init_IO:	
  3686                           
  3687                           	psect	text8
  3688  0108                     __ptext8:	
  3689 ;; *************** function _Init_CLK *****************
  3690 ;; Defined at:
  3691 ;;		line 89 in file "main.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;		None
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0
  3700 ;; Tracked objects:
  3701 ;;		On entry : B1F/2
  3702 ;;		On exit  : B1F/1
  3703 ;;		Unchanged: B00/0
  3704 ;; Data sizes:     COMMON   BANK0   BANK1
  3705 ;;      Params:         0       0       0
  3706 ;;      Locals:         0       0       0
  3707 ;;      Temps:          0       0       0
  3708 ;;      Totals:         0       0       0
  3709 ;;Total ram usage:        0 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; This function calls:
  3712 ;;		Nothing
  3713 ;; This function is called by:
  3714 ;;		_main
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function _Init_CLK
  3720  0108                     _Init_CLK:	
  3721                           
  3722                           ;main.c: 92: OSCCONbits.IRCF = 0b1110;
  3723                           
  3724                           ;incstack = 0
  3725                           ; Regs used in _Init_CLK: [wreg+status,2+status,0]
  3726  0108  0021               	movlb	1	; select bank1
  3727  0109  0819               	movf	25,w	;volatile
  3728  010A  3987               	andlw	-121
  3729  010B  3870               	iorlw	112
  3730  010C  0099               	movwf	25	;volatile
  3731                           
  3732                           ;main.c: 108: WDTCONbits.WDTPS = 0b01011;
  3733  010D  0817               	movf	23,w	;volatile
  3734  010E  39C1               	andlw	-63
  3735  010F  3816               	iorlw	22
  3736  0110  0097               	movwf	23	;volatile
  3737                           
  3738                           ;main.c: 115: WDTCONbits.SWDTEN = 1;
  3739  0111  1417               	bsf	23,0	;volatile
  3740  0112                     l67:	
  3741                           ;main.c: 116: while (!OSCSTATbits.HFIOFR) {
  3742                           
  3743  0112  1A1A               	btfsc	26,4	;volatile
  3744  0113  0008               	return
  3745  0114  2912               	goto	l67
  3746  0115                     __end_of_Init_CLK:	
  3747                           
  3748                           	psect	text9
  3749  00EF                     __ptext9:	
  3750 ;; *************** function _Init_ADC *****************
  3751 ;; Defined at:
  3752 ;;		line 131 in file "main.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;		None
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0
  3761 ;; Tracked objects:
  3762 ;;		On entry : B1F/1
  3763 ;;		On exit  : B1F/1
  3764 ;;		Unchanged: B00/0
  3765 ;; Data sizes:     COMMON   BANK0   BANK1
  3766 ;;      Params:         0       0       0
  3767 ;;      Locals:         0       0       0
  3768 ;;      Temps:          0       0       0
  3769 ;;      Totals:         0       0       0
  3770 ;;Total ram usage:        0 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; This function calls:
  3773 ;;		Nothing
  3774 ;; This function is called by:
  3775 ;;		_main
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           
  3780                           ;psect for function _Init_ADC
  3781  00EF                     _Init_ADC:	
  3782                           
  3783                           ;main.c: 132: FVRCON = 0;
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in _Init_ADC: [wreg+status,2+status,0]
  3787  00EF  0022               	movlb	2	; select bank2
  3788  00F0  0197               	clrf	23	;volatile
  3789                           
  3790                           ;main.c: 134: ADCON1bits.ADFM = 1;
  3791  00F1  0021               	movlb	1	; select bank1
  3792  00F2  179E               	bsf	30,7	;volatile
  3793                           
  3794                           ;main.c: 135: ADCON1bits.ADCS = 0b001;
  3795  00F3  081E               	movf	30,w	;volatile
  3796  00F4  398F               	andlw	-113
  3797  00F5  3810               	iorlw	16
  3798  00F6  009E               	movwf	30	;volatile
  3799                           
  3800                           ;main.c: 138: ADCON1bits.ADPREF = 0b00;
  3801  00F7  30FC               	movlw	-4
  3802  00F8  059E               	andwf	30,f	;volatile
  3803                           
  3804                           ;main.c: 140: ADCON0bits.ADON = 0;
  3805  00F9  101D               	bcf	29,0	;volatile
  3806  00FA  0008               	return
  3807  00FB                     __end_of_Init_ADC:	
  3808                           
  3809                           	psect	text10
  3810  0125                     __ptext10:	
  3811 ;; *************** function _FlashWrite *****************
  3812 ;; Defined at:
  3813 ;;		line 41 in file "FLASH.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  addr            2    0[COMMON] unsigned int 
  3816 ;;  flash_data      2    2[COMMON] unsigned int 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, status,0, pclath, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 1C/0
  3825 ;;		On exit  : 1F/3
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1
  3828 ;;      Params:         4       0       0
  3829 ;;      Locals:         0       0       0
  3830 ;;      Temps:          0       0       0
  3831 ;;      Totals:         4       0       0
  3832 ;;Total ram usage:        4 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    1
  3835 ;; This function calls:
  3836 ;;		_FlashUnlock
  3837 ;; This function is called by:
  3838 ;;		_main
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           
  3843                           ;psect for function _FlashWrite
  3844  0125                     _FlashWrite:	
  3845                           
  3846                           ;FLASH.c: 42: PMCON1bits.CFGS = 0;
  3847                           
  3848                           ;incstack = 0
  3849                           ; Regs used in _FlashWrite: [wreg+status,2+status,0+pclath+cstack]
  3850  0125  0023               	movlb	3	; select bank3
  3851  0126  1315               	bcf	21,6	;volatile
  3852                           
  3853                           ;FLASH.c: 43: PMADRH = (unsigned char) (addr >> 8);
  3854  0127  0871               	movf	FlashWrite@addr+1,w
  3855  0128  0092               	movwf	18	;volatile
  3856                           
  3857                           ;FLASH.c: 44: PMADRL = (unsigned char) (addr);
  3858  0129  0870               	movf	FlashWrite@addr,w
  3859  012A  0091               	movwf	17	;volatile
  3860                           
  3861                           ;FLASH.c: 45: PMCON1bits.FREE = 0;
  3862  012B  1215               	bcf	21,4	;volatile
  3863                           
  3864                           ;FLASH.c: 46: PMCON1bits.LWLO = 1;
  3865  012C  1695               	bsf	21,5	;volatile
  3866                           
  3867                           ;FLASH.c: 47: PMCON1bits.WREN = 1;
  3868  012D  1515               	bsf	21,2	;volatile
  3869                           
  3870                           ;FLASH.c: 48: PMDATH = (unsigned char) (flash_data >> 8);
  3871  012E  0873               	movf	FlashWrite@flash_data+1,w
  3872  012F  0094               	movwf	20	;volatile
  3873                           
  3874                           ;FLASH.c: 49: PMDATL = (unsigned char) flash_data;
  3875  0130  0872               	movf	FlashWrite@flash_data,w
  3876  0131  0093               	movwf	19	;volatile
  3877                           
  3878                           ;FLASH.c: 50: PMCON1bits.LWLO = 0;
  3879  0132  1295               	bcf	21,5	;volatile
  3880                           
  3881                           ;FLASH.c: 51: INTCONbits.GIE = 0;
  3882  0133  138B               	bcf	11,7	;volatile
  3883                           
  3884                           ;FLASH.c: 52: FlashUnlock();
  3885  0134  20E9               	fcall	_FlashUnlock
  3886                           
  3887                           ;FLASH.c: 53: INTCONbits.GIE = 1;
  3888  0135  178B               	bsf	11,7	;volatile
  3889                           
  3890                           ;FLASH.c: 54: PMCON1bits.WREN = 0;
  3891  0136  1115               	bcf	21,2	;volatile
  3892  0137  0008               	return
  3893  0138                     __end_of_FlashWrite:	
  3894                           
  3895                           	psect	text11
  3896  00FB                     __ptext11:	
  3897 ;; *************** function _FlashEraseRow *****************
  3898 ;; Defined at:
  3899 ;;		line 29 in file "FLASH.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  rowAddr         2    0[COMMON] unsigned int 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, status,2, status,0, pclath, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 1D/2
  3910 ;;		On exit  : 1F/3
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMMON   BANK0   BANK1
  3913 ;;      Params:         2       0       0
  3914 ;;      Locals:         0       0       0
  3915 ;;      Temps:          0       0       0
  3916 ;;      Totals:         2       0       0
  3917 ;;Total ram usage:        2 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    1
  3920 ;; This function calls:
  3921 ;;		_FlashUnlock
  3922 ;; This function is called by:
  3923 ;;		_main
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           
  3928                           ;psect for function _FlashEraseRow
  3929  00FB                     _FlashEraseRow:	
  3930                           
  3931                           ;FLASH.c: 30: PMCON1bits.CFGS = 0;
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _FlashEraseRow: [wreg+status,2+status,0+pclath+cstack]
  3935  00FB  0023               	movlb	3	; select bank3
  3936  00FC  1315               	bcf	21,6	;volatile
  3937                           
  3938                           ;FLASH.c: 31: PMADRH = (unsigned char) (rowAddr >> 8);
  3939  00FD  0871               	movf	FlashEraseRow@rowAddr+1,w
  3940  00FE  0092               	movwf	18	;volatile
  3941                           
  3942                           ;FLASH.c: 32: PMADRL = (unsigned char) (rowAddr);
  3943  00FF  0870               	movf	FlashEraseRow@rowAddr,w
  3944  0100  0091               	movwf	17	;volatile
  3945                           
  3946                           ;FLASH.c: 33: PMCON1bits.FREE = 1;
  3947  0101  1615               	bsf	21,4	;volatile
  3948                           
  3949                           ;FLASH.c: 34: PMCON1bits.WREN = 1;
  3950  0102  1515               	bsf	21,2	;volatile
  3951                           
  3952                           ;FLASH.c: 35: INTCONbits.GIE = 0;
  3953  0103  138B               	bcf	11,7	;volatile
  3954                           
  3955                           ;FLASH.c: 36: FlashUnlock();
  3956  0104  20E9               	fcall	_FlashUnlock
  3957                           
  3958                           ;FLASH.c: 37: INTCONbits.GIE = 1;
  3959  0105  178B               	bsf	11,7	;volatile
  3960                           
  3961                           ;FLASH.c: 38: PMCON1bits.WREN = 0;
  3962  0106  1115               	bcf	21,2	;volatile
  3963  0107  0008               	return
  3964  0108                     __end_of_FlashEraseRow:	
  3965                           
  3966                           	psect	text12
  3967  00E9                     __ptext12:	
  3968 ;; *************** function _FlashUnlock *****************
  3969 ;; Defined at:
  3970 ;;		line 23 in file "FLASH.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;		None
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;		None
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg
  3979 ;; Tracked objects:
  3980 ;;		On entry : 1F/3
  3981 ;;		On exit  : 1F/3
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMMON   BANK0   BANK1
  3984 ;;      Params:         0       0       0
  3985 ;;      Locals:         0       0       0
  3986 ;;      Temps:          0       0       0
  3987 ;;      Totals:         0       0       0
  3988 ;;Total ram usage:        0 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; This function calls:
  3991 ;;		Nothing
  3992 ;; This function is called by:
  3993 ;;		_FlashEraseRow
  3994 ;;		_FlashWrite
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           
  3999                           ;psect for function _FlashUnlock
  4000  00E9                     _FlashUnlock:	
  4001                           
  4002                           ;FLASH.c: 24: PMCON2 = 0x55;
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in _FlashUnlock: [wreg]
  4006  00E9  3055               	movlw	85
  4007  00EA  0096               	movwf	22	;volsfr
  4008                           
  4009                           ;FLASH.c: 25: PMCON2 = 0xAA;
  4010  00EB  30AA               	movlw	170
  4011  00EC  0096               	movwf	22	;volsfr
  4012                           
  4013                           ;FLASH.c: 26: PMCON1bits.WR = 1;
  4014  00ED  1495               	bsf	21,1	;volatile
  4015  00EE  0008               	return
  4016  00EF                     __end_of_FlashUnlock:	
  4017  007E                     btemp	set	126	;btemp
  4018  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     31      67
    BANK1            32      0       0

Pointer List with Targets:

    noolite_send@data	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyLongHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    KeyOffHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_KeyLongHandler
    _main->_KeyOffHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK0

    _main->_KeyLongHandler
    _main->_KeyOffHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   19004
                                             19 BANK0     12    12      0
                      _FlashEraseRow
                         _FlashWrite
                           _Init_ADC
                           _Init_CLK
                            _Init_IO
             _Init_TxStatusFromFlash
                 _Init_TypeFromFlash
                     _KeyLongHandler
                      _KeyOffHandler
                            _RF_Init
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _RF_Init                                              7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _KeyOffHandler                                        4     2      2    5496
                                             11 COMMON     3     1      2
                                             18 BANK0      1     1      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _KeyLongHandler                                       4     1      3    5994
                                             11 COMMON     3     0      3
                                             18 BANK0      1     1      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _noolite_send                                        29    26      3    4464
                                              0 COMMON    11     8      3
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _Init_TypeFromFlash                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_TxStatusFromFlash                               5     5      0     244
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_CLK                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlashWrite                                           4     0      4     858
                                              0 COMMON     4     0      4
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (1) _FlashEraseRow                                        2     0      2     173
                                              0 COMMON     2     0      2
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (2) _FlashUnlock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashEraseRow
     _FlashUnlock
   _FlashWrite
     _FlashUnlock
   _Init_ADC
   _Init_CLK
   _Init_IO
   _Init_TxStatusFromFlash
   _Init_TypeFromFlash
   _KeyLongHandler
     _noolite_send
   _KeyOffHandler
     _noolite_send
   _RF_Init
   _noolite_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      51       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1F      43       6       83.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      51       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Sep 08 08:57:58 2018

                     __CFG_CP$ON 0000                               l67 0112                              l300 047E  
                            l301 047D                              l230 0798                              l160 04E6  
                            l171 0555                              l149 04DC                              l166 04FB  
                            l167 0514                              l272 02FE                              l168 051D  
                            l177 0590                              l274 030C                              l266 0298  
                            l291 0447                              l275 0308                              l267 02E8  
                            l293 0437                              l296 0463                              l288 0426  
                            l299 0480                              u844 03EA                              u845 03E9  
                            u954 0475                              u955 0474                     __CFG_IDLOC0$ 0000  
                   __CFG_IDLOC1$ 0007                     __CFG_IDLOC2$ 0000                     __CFG_IDLOC3$ 0007  
                   __CFG_BORV$LO 0000                              wreg 0009                      main@chn_436 0060  
                    main@chn_437 0061                      main@chn_438 0062                      main@cellNum 005E  
       ??_Init_TxStatusFromFlash 0070                     __CFG_LVP$OFF 0000                  ?_KeyLongHandler 007B  
                           l2031 0693                             l2015 0655                             l2007 063B  
                           l2017 065E                             l2009 0645                             l2115 0745  
                           l2019 0668                             l2043 06B8                             l2125 07A8  
                           l2053 06E9                             l2037 06A8                             l2045 06C6  
                           l1503 039C                             l2119 0760                             l2063 071B  
                           l2055 06F5                             l2071 0739                             l2047 06D6  
                           l2057 0701                             l2049 06E2                             l1531 03F8  
                           l1523 03F2                             l2091 073B                             l1541 03D5  
                           l2069 072B                             l1607 0460                             l1543 03FF  
                           l1463 0300                             l1481 031B                             l1713 0187  
                           l2097 0762                             l2185 0505                             l1715 018D  
                           l1723 01A1                             l1661 01D9                             l1469 0309  
                           l1717 0194                             l1725 01AC                             l1901 0512  
                           l1813 0491                             l1591 043E                             l1487 0332  
                           l1719 019B                             l1745 016D                             l1921 0541  
                           l1913 0520                             l1841 04DA                             l1683 0222  
                           l1587 0439                             l1747 0173                             l1923 054F  
                           l1843 04B3                             l1757 0296                             l1951 0593  
                           l1943 057F                             l1945 058E                             l1929 0558  
                           l1865 04D3                             l1849 04BD                             l1699 0259  
                           l1883 04E9                             l1859 04C9                             l1885 04F0  
                           l1877 04E0                             l1991 0614                             l1879 04E1  
                           l1993 0623                             l1889 04F6                             l1897 04FC  
                           l1899 0510                             l1997 0625                             l1999 0626  
                           _LATA 010C                             _LATC 010E                             u1627 05C9  
                           u1637 05DF                             u1647 07A0                             u1657 01B6  
                           u1667 01C5                             u1677 041A                             _TMR0 0015  
                           _WPUA 020C                             _Keys 002C                     _startaddress 0020  
                   __CFG_WRT$OFF 0000                             _Type 07C0                             _main 0484  
                __end_of_RF_Init 02EA                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E     noolite_send@noo_send_command 0070  
                           start 0001              __end_of_FlashUnlock 00EF                    __CFG_MCLRE$ON 0000  
                __end_of_Init_IO 0125                    __CFG_LPBOR$ON 0000                            ?_main 0070  
                    _BattLowSent 002A                       _FlashWrite 0125                            _PORTA 000C  
                          _TRISA 008C                            _TRISC 008E                    __CFG_PWRTE$ON 0000  
                ??_KeyOffHandler 007D          __p_system_settings_text 07EE                     _Type_absaddr 07C0  
                          status 0003                            wtemp0 007E                  __initialization 07E0  
                   __end_of_Type 07D0                     __end_of_main 07C0                 __end_of_Init_ADC 00FB  
               __end_of_Init_CLK 0115                           ??_main 0057                 _TxStatus_absaddr 07D0  
               __end_of_TxStatus 07E0  __size_of_Init_TxStatusFromFlash 0087                        ??_RF_Init 0070  
                         _ANSELA 018C                           _ANSELC 018E       __end_of_Init_TypeFromFlash 014C  
                         _FVRCON 0117                      _FlashUnlock 00E9                           _PMADRH 0192  
                         _PMADRL 0191                           _PMDATH 0194                           _PMDATL 0193  
                         _PMCON2 0196                           _TMR0IE 005D                           _TMR0IF 005A  
                   __p_Type_text 07C0                        ??_Init_IO 0070                   __CFG_STVREN$ON 0000  
                _system_settings 07EE             noolite_send@countbit 0051            __end_of_FlashEraseRow 0108  
                    ?_FlashWrite 0070                  noolite_send@chn 0052             noolite_send@startpos 0050  
        __end_of__initialization 07E6    Init_TxStatusFromFlash@cellNum 0074                   main@adrToWrite 005B  
                 __pcstackCOMMON 0070           _Init_TxStatusFromFlash 01D8                 ??_KeyLongHandler 007E  
                 _OPTION_REGbits 0095                       __pbssBANK0 0020                        ?_Init_ADC 0070  
                      ?_Init_CLK 0070          __end_of_system_settings 07FF              __size_of_FlashWrite 0013  
                     __pmaintext 0484                          _RF_Init 025F             FlashEraseRow@rowAddr 0070  
                     ??_Init_ADC 0070                       ??_Init_CLK 0070                          _DevMode 0026  
                        _DevType 0027                          _Init_IO 0115                    ?_noolite_send 0070  
                        __ptext1 025F                          __ptext2 0179                          __ptext3 014C  
                        __ptext4 02EA                          __ptext5 0138                          __ptext6 01D8  
                        __ptext7 0115                          __ptext8 0108                          __ptext9 00EF  
          noolite_send@countsend 0053                          main@chn 005F            __end_of_KeyOffHandler 01D8  
                        clrloop0 07E9             end_of_initialization 07E6                     ?_FlashUnlock 0070  
               noolite_send@data 0072            noolite_send@temp_send 0054                   FlashWrite@addr 0070  
             _Init_TypeFromFlash 0138                   ??_noolite_send 0073              ?_Init_TypeFromFlash 0070  
                   ??_FlashWrite 0074                 __CFG_FOSC$INTOSC 0000             ??_Init_TypeFromFlash 0070  
        ?_Init_TxStatusFromFlash 0070               __end_of_FlashWrite 0138              start_initialization 07E0  
 __end_of_Init_TxStatusFromFlash 025F                __size_of_Init_ADC 000C                __size_of_Init_CLK 000D  
         __size_of_FlashEraseRow 000D                 __p_TxStatus_text 07D0                        ___latbits 0000  
                  __pcstackBANK0 0044                         ?_RF_Init 0070             __end_of_noolite_send 0484  
           __size_of_FlashUnlock 0006                         ?_Init_IO 0070                    _noo_send_data 0040  
                  _FlashEraseRow 00FB                 __CFG_WDTE$SWDTEN 0000          __size_of_KeyLongHandler 002D  
                       _LATAbits 010C                         _LATCbits 010E                        clear_ram0 07E8  
               KeyOffHandler@cmd 007C                 KeyOffHandler@chn 007B                 KeyOffHandler@key 0056  
    noolite_send@noo_send_buffer 0044      noolite_send@noo_send_format 0071                       _ADCON0bits 009D  
                     _ADCON1bits 009E                   ?_FlashEraseRow 0070                        _tx_status 002B  
               __size_of_RF_Init 008B                         _Init_ADC 00EF                         _Init_CLK 0108  
                   _SkipHandling 0025                 _noo_address_type 0024                 __size_of_Init_IO 0010  
             noolite_send@endpos 0055                         _TxStatus 07D0           __size_of_KeyOffHandler 005F  
          __size_of_noolite_send 019A                         __ptext10 0125                         __ptext11 00FB  
                       __ptext12 00E9                      _tick3_100ms 0028                    __size_of_main 033C  
    __size_of_Init_TypeFromFlash 0014                  ??_FlashEraseRow 0072                     _noolite_send 02EA  
                    _OSCSTATbits 009A                       _INTCONbits 000B                __CFG_BOREN$NSLEEP 0000  
                  _KeyOffHandler 0179                   _KeyLongHandler 014C     KeyLongHandler@ticksToTrigger 007D  
                     _PMCON1bits 0195             FlashWrite@flash_data 0072                __CFG_CLKOUTEN$OFF 0000  
             _LedPulseTick_100ms 0029                       _OSCCONbits 0099                KeyLongHandler@cmd 007C  
              KeyLongHandler@chn 007B                       _OPTION_REG 0095                KeyLongHandler@key 0056  
                     _WDTCONbits 0097           __end_of_KeyLongHandler 0179                   ?_KeyOffHandler 007B  
                  ??_FlashUnlock 0070          _system_settings_absaddr 07EE  
