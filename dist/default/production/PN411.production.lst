

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Sep 08 12:37:52 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	_system_settings_text,global,class=CODE,delta=2
     5                           	psect	_TxStatus_text,global,class=CODE,delta=2
     6                           	psect	_Type_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16LF1503 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000E                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0097                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  010C                     	;# 
   104  010E                     	;# 
   105  0111                     	;# 
   106  0112                     	;# 
   107  0113                     	;# 
   108  0114                     	;# 
   109  0115                     	;# 
   110  0116                     	;# 
   111  0117                     	;# 
   112  0118                     	;# 
   113  0119                     	;# 
   114  011D                     	;# 
   115  018C                     	;# 
   116  018E                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  020C                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0391                     	;# 
   142  0392                     	;# 
   143  0393                     	;# 
   144  0498                     	;# 
   145  0498                     	;# 
   146  0499                     	;# 
   147  049A                     	;# 
   148  049B                     	;# 
   149  049B                     	;# 
   150  049C                     	;# 
   151  049D                     	;# 
   152  049E                     	;# 
   153  049F                     	;# 
   154  0611                     	;# 
   155  0612                     	;# 
   156  0613                     	;# 
   157  0613                     	;# 
   158  0614                     	;# 
   159  0615                     	;# 
   160  0616                     	;# 
   161  0616                     	;# 
   162  0617                     	;# 
   163  0618                     	;# 
   164  0619                     	;# 
   165  0619                     	;# 
   166  061A                     	;# 
   167  061B                     	;# 
   168  061C                     	;# 
   169  061C                     	;# 
   170  0691                     	;# 
   171  0692                     	;# 
   172  0693                     	;# 
   173  0694                     	;# 
   174  0695                     	;# 
   175  0F0F                     	;# 
   176  0F10                     	;# 
   177  0F11                     	;# 
   178  0F12                     	;# 
   179  0F13                     	;# 
   180  0F14                     	;# 
   181  0F15                     	;# 
   182  0F16                     	;# 
   183  0F17                     	;# 
   184  0F18                     	;# 
   185  0F19                     	;# 
   186  0F1A                     	;# 
   187  0F1B                     	;# 
   188  0F1C                     	;# 
   189  0F1D                     	;# 
   190  0F1E                     	;# 
   191  0F1F                     	;# 
   192  0FE3                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000E                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  008C                     	;# 
   231  008E                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010E                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011D                     	;# 
   258  018C                     	;# 
   259  018E                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  020C                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0214                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0216                     	;# 
   281  0216                     	;# 
   282  0217                     	;# 
   283  0217                     	;# 
   284  0391                     	;# 
   285  0392                     	;# 
   286  0393                     	;# 
   287  0498                     	;# 
   288  0498                     	;# 
   289  0499                     	;# 
   290  049A                     	;# 
   291  049B                     	;# 
   292  049B                     	;# 
   293  049C                     	;# 
   294  049D                     	;# 
   295  049E                     	;# 
   296  049F                     	;# 
   297  0611                     	;# 
   298  0612                     	;# 
   299  0613                     	;# 
   300  0613                     	;# 
   301  0614                     	;# 
   302  0615                     	;# 
   303  0616                     	;# 
   304  0616                     	;# 
   305  0617                     	;# 
   306  0618                     	;# 
   307  0619                     	;# 
   308  0619                     	;# 
   309  061A                     	;# 
   310  061B                     	;# 
   311  061C                     	;# 
   312  061C                     	;# 
   313  0691                     	;# 
   314  0692                     	;# 
   315  0693                     	;# 
   316  0694                     	;# 
   317  0695                     	;# 
   318  0F0F                     	;# 
   319  0F10                     	;# 
   320  0F11                     	;# 
   321  0F12                     	;# 
   322  0F13                     	;# 
   323  0F14                     	;# 
   324  0F15                     	;# 
   325  0F16                     	;# 
   326  0F17                     	;# 
   327  0F18                     	;# 
   328  0F19                     	;# 
   329  0F1A                     	;# 
   330  0F1B                     	;# 
   331  0F1C                     	;# 
   332  0F1D                     	;# 
   333  0F1E                     	;# 
   334  0F1F                     	;# 
   335  0FE3                     	;# 
   336  0FE4                     	;# 
   337  0FE5                     	;# 
   338  0FE6                     	;# 
   339  0FE7                     	;# 
   340  0FE8                     	;# 
   341  0FE9                     	;# 
   342  0FEA                     	;# 
   343  0FEB                     	;# 
   344  0FED                     	;# 
   345  0FEE                     	;# 
   346  0FEF                     	;# 
   347  0000                     	;# 
   348  0001                     	;# 
   349  0002                     	;# 
   350  0003                     	;# 
   351  0004                     	;# 
   352  0005                     	;# 
   353  0006                     	;# 
   354  0007                     	;# 
   355  0008                     	;# 
   356  0009                     	;# 
   357  000A                     	;# 
   358  000B                     	;# 
   359  000C                     	;# 
   360  000E                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008E                     	;# 
   375  0091                     	;# 
   376  0092                     	;# 
   377  0093                     	;# 
   378  0095                     	;# 
   379  0096                     	;# 
   380  0097                     	;# 
   381  0099                     	;# 
   382  009A                     	;# 
   383  009B                     	;# 
   384  009B                     	;# 
   385  009C                     	;# 
   386  009D                     	;# 
   387  009E                     	;# 
   388  009F                     	;# 
   389  010C                     	;# 
   390  010E                     	;# 
   391  0111                     	;# 
   392  0112                     	;# 
   393  0113                     	;# 
   394  0114                     	;# 
   395  0115                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  0118                     	;# 
   399  0119                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018E                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  020C                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  0391                     	;# 
   428  0392                     	;# 
   429  0393                     	;# 
   430  0498                     	;# 
   431  0498                     	;# 
   432  0499                     	;# 
   433  049A                     	;# 
   434  049B                     	;# 
   435  049B                     	;# 
   436  049C                     	;# 
   437  049D                     	;# 
   438  049E                     	;# 
   439  049F                     	;# 
   440  0611                     	;# 
   441  0612                     	;# 
   442  0613                     	;# 
   443  0613                     	;# 
   444  0614                     	;# 
   445  0615                     	;# 
   446  0616                     	;# 
   447  0616                     	;# 
   448  0617                     	;# 
   449  0618                     	;# 
   450  0619                     	;# 
   451  0619                     	;# 
   452  061A                     	;# 
   453  061B                     	;# 
   454  061C                     	;# 
   455  061C                     	;# 
   456  0691                     	;# 
   457  0692                     	;# 
   458  0693                     	;# 
   459  0694                     	;# 
   460  0695                     	;# 
   461  0F0F                     	;# 
   462  0F10                     	;# 
   463  0F11                     	;# 
   464  0F12                     	;# 
   465  0F13                     	;# 
   466  0F14                     	;# 
   467  0F15                     	;# 
   468  0F16                     	;# 
   469  0F17                     	;# 
   470  0F18                     	;# 
   471  0F19                     	;# 
   472  0F1A                     	;# 
   473  0F1B                     	;# 
   474  0F1C                     	;# 
   475  0F1D                     	;# 
   476  0F1E                     	;# 
   477  0F1F                     	;# 
   478  0FE3                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000E                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0013                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008E                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0093                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  009F                     	;# 
   532  010C                     	;# 
   533  010E                     	;# 
   534  0111                     	;# 
   535  0112                     	;# 
   536  0113                     	;# 
   537  0114                     	;# 
   538  0115                     	;# 
   539  0116                     	;# 
   540  0117                     	;# 
   541  0118                     	;# 
   542  0119                     	;# 
   543  011D                     	;# 
   544  018C                     	;# 
   545  018E                     	;# 
   546  0191                     	;# 
   547  0191                     	;# 
   548  0192                     	;# 
   549  0193                     	;# 
   550  0193                     	;# 
   551  0194                     	;# 
   552  0195                     	;# 
   553  0196                     	;# 
   554  020C                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0391                     	;# 
   571  0392                     	;# 
   572  0393                     	;# 
   573  0498                     	;# 
   574  0498                     	;# 
   575  0499                     	;# 
   576  049A                     	;# 
   577  049B                     	;# 
   578  049B                     	;# 
   579  049C                     	;# 
   580  049D                     	;# 
   581  049E                     	;# 
   582  049F                     	;# 
   583  0611                     	;# 
   584  0612                     	;# 
   585  0613                     	;# 
   586  0613                     	;# 
   587  0614                     	;# 
   588  0615                     	;# 
   589  0616                     	;# 
   590  0616                     	;# 
   591  0617                     	;# 
   592  0618                     	;# 
   593  0619                     	;# 
   594  0619                     	;# 
   595  061A                     	;# 
   596  061B                     	;# 
   597  061C                     	;# 
   598  061C                     	;# 
   599  0691                     	;# 
   600  0692                     	;# 
   601  0693                     	;# 
   602  0694                     	;# 
   603  0695                     	;# 
   604  0F0F                     	;# 
   605  0F10                     	;# 
   606  0F11                     	;# 
   607  0F12                     	;# 
   608  0F13                     	;# 
   609  0F14                     	;# 
   610  0F15                     	;# 
   611  0F16                     	;# 
   612  0F17                     	;# 
   613  0F18                     	;# 
   614  0F19                     	;# 
   615  0F1A                     	;# 
   616  0F1B                     	;# 
   617  0F1C                     	;# 
   618  0F1D                     	;# 
   619  0F1E                     	;# 
   620  0F1F                     	;# 
   621  0FE3                     	;# 
   622  0FE4                     	;# 
   623  0FE5                     	;# 
   624  0FE6                     	;# 
   625  0FE7                     	;# 
   626  0FE8                     	;# 
   627  0FE9                     	;# 
   628  0FEA                     	;# 
   629  0FEB                     	;# 
   630  0FED                     	;# 
   631  0FEE                     	;# 
   632  0FEF                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0008                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000E                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0016                     	;# 
   653  0017                     	;# 
   654  0018                     	;# 
   655  0019                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  008C                     	;# 
   660  008E                     	;# 
   661  0091                     	;# 
   662  0092                     	;# 
   663  0093                     	;# 
   664  0095                     	;# 
   665  0096                     	;# 
   666  0097                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010E                     	;# 
   677  0111                     	;# 
   678  0112                     	;# 
   679  0113                     	;# 
   680  0114                     	;# 
   681  0115                     	;# 
   682  0116                     	;# 
   683  0117                     	;# 
   684  0118                     	;# 
   685  0119                     	;# 
   686  011D                     	;# 
   687  018C                     	;# 
   688  018E                     	;# 
   689  0191                     	;# 
   690  0191                     	;# 
   691  0192                     	;# 
   692  0193                     	;# 
   693  0193                     	;# 
   694  0194                     	;# 
   695  0195                     	;# 
   696  0196                     	;# 
   697  020C                     	;# 
   698  0211                     	;# 
   699  0211                     	;# 
   700  0212                     	;# 
   701  0212                     	;# 
   702  0213                     	;# 
   703  0213                     	;# 
   704  0214                     	;# 
   705  0214                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0216                     	;# 
   710  0216                     	;# 
   711  0217                     	;# 
   712  0217                     	;# 
   713  0391                     	;# 
   714  0392                     	;# 
   715  0393                     	;# 
   716  0498                     	;# 
   717  0498                     	;# 
   718  0499                     	;# 
   719  049A                     	;# 
   720  049B                     	;# 
   721  049B                     	;# 
   722  049C                     	;# 
   723  049D                     	;# 
   724  049E                     	;# 
   725  049F                     	;# 
   726  0611                     	;# 
   727  0612                     	;# 
   728  0613                     	;# 
   729  0613                     	;# 
   730  0614                     	;# 
   731  0615                     	;# 
   732  0616                     	;# 
   733  0616                     	;# 
   734  0617                     	;# 
   735  0618                     	;# 
   736  0619                     	;# 
   737  0619                     	;# 
   738  061A                     	;# 
   739  061B                     	;# 
   740  061C                     	;# 
   741  061C                     	;# 
   742  0691                     	;# 
   743  0692                     	;# 
   744  0693                     	;# 
   745  0694                     	;# 
   746  0695                     	;# 
   747  0F0F                     	;# 
   748  0F10                     	;# 
   749  0F11                     	;# 
   750  0F12                     	;# 
   751  0F13                     	;# 
   752  0F14                     	;# 
   753  0F15                     	;# 
   754  0F16                     	;# 
   755  0F17                     	;# 
   756  0F18                     	;# 
   757  0F19                     	;# 
   758  0F1A                     	;# 
   759  0F1B                     	;# 
   760  0F1C                     	;# 
   761  0F1D                     	;# 
   762  0F1E                     	;# 
   763  0F1F                     	;# 
   764  0FE3                     	;# 
   765  0FE4                     	;# 
   766  0FE5                     	;# 
   767  0FE6                     	;# 
   768  0FE7                     	;# 
   769  0FE8                     	;# 
   770  0FE9                     	;# 
   771  0FEA                     	;# 
   772  0FEB                     	;# 
   773  0FED                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  07EE                     _system_settings_absaddr	set	2030
   777  07D0                     _TxStatus_absaddr	set	2000
   778  07C0                     _Type_absaddr	set	1984
   779  07EE                     _system_settings_absaddr	set	2030
   780                           
   781                           	psect	_system_settings_text
   782  07EE                     __p_system_settings_text:	
   783  07EE                     _system_settings:	
   784  07EE  3443               	retlw	67
   785  07EF  3404               	retlw	4
   786  07F0  345F               	retlw	95
   787  07F1  3441               	retlw	65
   788  07F2  341F               	retlw	31
   789  07F3  34FB               	retlw	251
   790  07F4  345F               	retlw	95
   791  07F5  3441               	retlw	65
   792  07F6  3478               	retlw	120
   793  07F7  3456               	retlw	86
   794  07F8  3434               	retlw	52
   795  07F9  3412               	retlw	18
   796  07FA  345F               	retlw	95
   797  07FB  3442               	retlw	66
   798  07FC  3410               	retlw	16
   799  07FD  3400               	retlw	0
   800  07FE  345F               	retlw	95
   801  07FF                     __end_of_system_settings:	
   802  07D0                     _TxStatus_absaddr	set	2000
   803                           
   804                           	psect	_TxStatus_text
   805  07D0                     __p_TxStatus_text:	
   806  07D0                     _TxStatus:	
   807  07D0  34FF               	retlw	255
   808  07D1  34FF               	retlw	255
   809  07D2  34FF               	retlw	255
   810  07D3  34FF               	retlw	255
   811  07D4  34FF               	retlw	255
   812  07D5  34FF               	retlw	255
   813  07D6  34FF               	retlw	255
   814  07D7  34FF               	retlw	255
   815  07D8  34FF               	retlw	255
   816  07D9  34FF               	retlw	255
   817  07DA  34FF               	retlw	255
   818  07DB  34FF               	retlw	255
   819  07DC  34FF               	retlw	255
   820  07DD  34FF               	retlw	255
   821  07DE  34FF               	retlw	255
   822  07DF  34FF               	retlw	255
   823  07E0                     __end_of_TxStatus:	
   824  07C0                     _Type_absaddr	set	1984
   825                           
   826                           	psect	_Type_text
   827  07C0                     __p_Type_text:	
   828  07C0                     _Type:	
   829  07C0  34FF               	retlw	255
   830  07C1  34FF               	retlw	255
   831  07C2  34FF               	retlw	255
   832  07C3  34FF               	retlw	255
   833  07C4  34FF               	retlw	255
   834  07C5  34FF               	retlw	255
   835  07C6  34FF               	retlw	255
   836  07C7  34FF               	retlw	255
   837  07C8  34FF               	retlw	255
   838  07C9  34FF               	retlw	255
   839  07CA  34FF               	retlw	255
   840  07CB  34FF               	retlw	255
   841  07CC  34FF               	retlw	255
   842  07CD  34FF               	retlw	255
   843  07CE  34FF               	retlw	255
   844  07CF  34FF               	retlw	255
   845  07D0                     __end_of_Type:	
   846  0015                     _TMR0	set	21
   847  000C                     _PORTA	set	12
   848  000B                     _INTCONbits	set	11
   849  005D                     _TMR0IE	set	93
   850  005A                     _TMR0IF	set	90
   851  009D                     _ADCON0bits	set	157
   852  009E                     _ADCON1bits	set	158
   853  008E                     _TRISC	set	142
   854  008C                     _TRISA	set	140
   855  0095                     _OPTION_REGbits	set	149
   856  009A                     _OSCSTATbits	set	154
   857  0099                     _OSCCONbits	set	153
   858  0095                     _OPTION_REG	set	149
   859  0097                     _WDTCONbits	set	151
   860  0117                     _FVRCON	set	279
   861  010E                     _LATC	set	270
   862  010C                     _LATA	set	268
   863  010C                     _LATAbits	set	268
   864  010E                     _LATCbits	set	270
   865  018E                     _ANSELC	set	398
   866  018C                     _ANSELA	set	396
   867  0196                     _PMCON2	set	406
   868  0193                     _PMDATL	set	403
   869  0194                     _PMDATH	set	404
   870  0191                     _PMADRL	set	401
   871  0192                     _PMADRH	set	402
   872  0195                     _PMCON1bits	set	405
   873  020C                     _WPUA	set	524
   874                           
   875                           ; #config settings
   876  0007                     
   877                           	psect	cinit
   878  07E0                     start_initialization:	
   879  07E0                     __initialization:	
   880                           
   881                           ; Clear objects allocated to BANK0
   882  07E0  3020               	movlw	low __pbssBANK0
   883  07E1  0084               	movwf	4
   884  07E2  3000               	movlw	high __pbssBANK0
   885  07E3  0085               	movwf	5
   886  07E4  3024               	movlw	36
   887  07E5  27E8               	fcall	clear_ram0
   888  07E6                     end_of_initialization:	
   889                           ;End of C runtime variable initialization code
   890                           
   891  07E6                     __end_of__initialization:	
   892  07E6  0020               	movlb	0
   893  07E7  2C9B               	ljmp	_main	;jump to C main() function
   894                           
   895                           	psect	bssBANK0
   896  0020                     __pbssBANK0:	
   897  0020                     _startaddress:	
   898  0020                     	ds	4
   899  0024                     _noo_address_type:	
   900  0024                     	ds	1
   901  0025                     _OffDelayTicks_100ms:	
   902  0025                     	ds	1
   903  0026                     _SkipHandling:	
   904  0026                     	ds	1
   905  0027                     _DevMode:	
   906  0027                     	ds	1
   907  0028                     _DevType:	
   908  0028                     	ds	1
   909  0029                     _tick3_100ms:	
   910  0029                     	ds	1
   911  002A                     _LedPulseTick_100ms:	
   912  002A                     	ds	1
   913  002B                     _tx_status:	
   914  002B                     	ds	1
   915  002C                     _Keys:	
   916  002C                     	ds	20
   917  0040                     _noo_send_data:	
   918  0040                     	ds	4
   919                           
   920                           	psect	clrtext
   921  07E8                     clear_ram0:	
   922                           ;	Called with FSR0 containing the base address, and
   923                           ;	WREG with the size to clear
   924                           
   925  07E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   926  07E9                     clrloop0:	
   927  07E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   928  07EA  3101               	addfsr 0,1
   929  07EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   930  07EC  2FE9               	goto	clrloop0	;have we reached the end yet?
   931  07ED  3400               	retlw	0	;all done for this memory range, return
   932                           
   933                           	psect	cstackCOMMON
   934  0070                     __pcstackCOMMON:	
   935  0070                     ?_Init_IO:	
   936  0070                     ??_Init_IO:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_Init_CLK:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ??_Init_CLK:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_Init_ADC:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ??_Init_ADC:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_RF_Init:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ??_RF_Init:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_Init_TypeFromFlash:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_Init_TxStatusFromFlash:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_noolite_send:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_FlashEraseRow:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_FlashWrite:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_main:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_FlashUnlock:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ??_FlashUnlock:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     noolite_send@noo_send_command:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     FlashEraseRow@rowAddr:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     FlashWrite@addr:	
   988                           ; 2 bytes @ 0x0
   989                           
   990  0070                     Init_TypeFromFlash@type:	
   991                           ; 2 bytes @ 0x0
   992                           
   993  0070                     Init_TxStatusFromFlash@txStatus:	
   994                           ; 2 bytes @ 0x0
   995                           
   996                           
   997                           ; 2 bytes @ 0x0
   998  0070                     	ds	1
   999  0071                     noolite_send@noo_send_format:	
  1000                           
  1001                           ; 1 bytes @ 0x1
  1002  0071                     	ds	1
  1003  0072                     ??_Init_TypeFromFlash:	
  1004  0072                     ??_Init_TxStatusFromFlash:	
  1005                           ; 1 bytes @ 0x2
  1006                           
  1007  0072                     ??_FlashEraseRow:	
  1008                           ; 1 bytes @ 0x2
  1009                           
  1010  0072                     noolite_send@data:	
  1011                           ; 1 bytes @ 0x2
  1012                           
  1013  0072                     FlashWrite@flash_data:	
  1014                           ; 1 bytes @ 0x2
  1015                           
  1016                           
  1017                           ; 2 bytes @ 0x2
  1018  0072                     	ds	1
  1019  0073                     ??_noolite_send:	
  1020                           
  1021                           ; 1 bytes @ 0x3
  1022  0073                     	ds	1
  1023  0074                     ??_FlashWrite:	
  1024                           
  1025                           ; 1 bytes @ 0x4
  1026  0074                     	ds	4
  1027  0078                     Init_TxStatusFromFlash@cellNum:	
  1028                           
  1029                           ; 1 bytes @ 0x8
  1030  0078                     	ds	3
  1031  007B                     ?_KeyOffHandler:	
  1032  007B                     ??_KeyLongHandler:	
  1033                           ; 1 bytes @ 0xB
  1034                           
  1035  007B                     KeyOffHandler@chn:	
  1036                           ; 1 bytes @ 0xB
  1037                           
  1038  007B                     KeyLongHandler@key:	
  1039                           ; 1 bytes @ 0xB
  1040                           
  1041                           
  1042                           ; 1 bytes @ 0xB
  1043  007B                     	ds	1
  1044  007C                     KeyOffHandler@cmd:	
  1045                           
  1046                           ; 1 bytes @ 0xC
  1047  007C                     	ds	1
  1048  007D                     KeyOffHandler@nooData:	
  1049                           
  1050                           ; 1 bytes @ 0xD
  1051  007D                     	ds	1
  1052                           
  1053                           	psect	cstackBANK0
  1054  0044                     __pcstackBANK0:	
  1055  0044                     noolite_send@noo_send_buffer:	
  1056                           
  1057                           ; 12 bytes @ 0x0
  1058  0044                     	ds	12
  1059  0050                     noolite_send@startpos:	
  1060                           
  1061                           ; 1 bytes @ 0xC
  1062  0050                     	ds	1
  1063  0051                     noolite_send@countbit:	
  1064                           
  1065                           ; 1 bytes @ 0xD
  1066  0051                     	ds	1
  1067  0052                     noolite_send@chn:	
  1068                           
  1069                           ; 1 bytes @ 0xE
  1070  0052                     	ds	1
  1071  0053                     noolite_send@countsend:	
  1072                           
  1073                           ; 1 bytes @ 0xF
  1074  0053                     	ds	1
  1075  0054                     noolite_send@temp_send:	
  1076                           
  1077                           ; 1 bytes @ 0x10
  1078  0054                     	ds	1
  1079  0055                     noolite_send@endpos:	
  1080                           
  1081                           ; 1 bytes @ 0x11
  1082  0055                     	ds	1
  1083  0056                     ??_KeyOffHandler:	
  1084  0056                     ?_KeyLongHandler:	
  1085                           ; 1 bytes @ 0x12
  1086                           
  1087  0056                     KeyLongHandler@chn:	
  1088                           ; 1 bytes @ 0x12
  1089                           
  1090                           
  1091                           ; 1 bytes @ 0x12
  1092  0056                     	ds	1
  1093  0057                     KeyOffHandler@key:	
  1094  0057                     KeyLongHandler@cmd:	
  1095                           ; 1 bytes @ 0x13
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x13
  1099  0057                     	ds	1
  1100  0058                     KeyLongHandler@ticksToTrigger:	
  1101                           
  1102                           ; 1 bytes @ 0x14
  1103  0058                     	ds	1
  1104  0059                     KeyLongHandler@nooData:	
  1105                           
  1106                           ; 1 bytes @ 0x15
  1107  0059                     	ds	1
  1108  005A                     ??_main:	
  1109                           
  1110                           ; 1 bytes @ 0x16
  1111  005A                     	ds	4
  1112  005E                     main@adrToWrite:	
  1113                           
  1114                           ; 2 bytes @ 0x1A
  1115  005E                     	ds	2
  1116  0060                     main@cellNum:	
  1117                           
  1118                           ; 1 bytes @ 0x1C
  1119  0060                     	ds	1
  1120  0061                     main@chn:	
  1121                           
  1122                           ; 1 bytes @ 0x1D
  1123  0061                     	ds	1
  1124  0062                     main@chn_243:	
  1125                           
  1126                           ; 1 bytes @ 0x1E
  1127  0062                     	ds	1
  1128  0063                     main@chn_244:	
  1129                           
  1130                           ; 1 bytes @ 0x1F
  1131  0063                     	ds	1
  1132  0064                     main@chn_245:	
  1133                           
  1134                           ; 1 bytes @ 0x20
  1135  0064                     	ds	1
  1136                           
  1137                           	psect	maintext
  1138  049B                     __pmaintext:	
  1139 ;;
  1140 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1141 ;;
  1142 ;; *************** function _main *****************
  1143 ;; Defined at:
  1144 ;;		line 129 in file "main.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  adrToWrite      2   26[BANK0 ] unsigned int 
  1149 ;;  chn             1   32[BANK0 ] unsigned char 
  1150 ;;  chn             1   31[BANK0 ] unsigned char 
  1151 ;;  chn             1   30[BANK0 ] unsigned char 
  1152 ;;  chn             1   29[BANK0 ] unsigned char 
  1153 ;;  cellNum         1   28[BANK0 ] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : B1F/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMMON   BANK0   BANK1
  1163 ;;      Params:         0       0       0
  1164 ;;      Locals:         0       7       0
  1165 ;;      Temps:          0       4       0
  1166 ;;      Totals:         0      11       0
  1167 ;;Total ram usage:       11 bytes
  1168 ;; Hardware stack levels required when called:    2
  1169 ;; This function calls:
  1170 ;;		_FlashEraseRow
  1171 ;;		_FlashWrite
  1172 ;;		_Init_ADC
  1173 ;;		_Init_CLK
  1174 ;;		_Init_IO
  1175 ;;		_Init_TxStatusFromFlash
  1176 ;;		_Init_TypeFromFlash
  1177 ;;		_KeyLongHandler
  1178 ;;		_KeyOffHandler
  1179 ;;		_RF_Init
  1180 ;;		_noolite_send
  1181 ;; This function is called by:
  1182 ;;		Startup code after reset
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           
  1187                           ;psect for function _main
  1188  049B                     _main:	
  1189                           
  1190                           ;main.c: 130: Init_IO();
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1194  049B  2130               	fcall	_Init_IO
  1195                           
  1196                           ;main.c: 131: Init_CLK();
  1197  049C  2123               	fcall	_Init_CLK
  1198                           
  1199                           ;main.c: 132: Init_ADC();
  1200  049D  210A               	fcall	_Init_ADC
  1201                           
  1202                           ;main.c: 133: RF_Init();
  1203  049E  21DD               	fcall	_RF_Init
  1204                           
  1205                           ;main.c: 135: LATCbits.LATC5 = 1;
  1206  049F  0022               	movlb	2	; select bank2
  1207  04A0  168E               	bsf	14,5	;volatile
  1208                           
  1209                           ;main.c: 136: DevType = Init_TypeFromFlash(&Type[0]);
  1210  04A1  30C0               	movlw	192
  1211  04A2  00F0               	movwf	Init_TypeFromFlash@type
  1212  04A3  3087               	movlw	135
  1213  04A4  00F1               	movwf	Init_TypeFromFlash@type+1
  1214  04A5  2153               	fcall	_Init_TypeFromFlash
  1215  04A6  0020               	movlb	0	; select bank0
  1216  04A7  00A8               	movwf	_DevType
  1217                           
  1218                           ;main.c: 137: tx_status = Init_TxStatusFromFlash(&TxStatus[0]);
  1219  04A8  30D0               	movlw	208
  1220  04A9  00F0               	movwf	Init_TxStatusFromFlash@txStatus
  1221  04AA  3087               	movlw	135
  1222  04AB  00F1               	movwf	Init_TxStatusFromFlash@txStatus+1
  1223  04AC  2268               	fcall	_Init_TxStatusFromFlash
  1224  04AD  00AB               	movwf	_tx_status
  1225                           
  1226                           ;main.c: 139: INTCONbits.PEIE = 1;
  1227  04AE  170B               	bsf	11,6	;volatile
  1228                           
  1229                           ;main.c: 140: INTCONbits.GIE = 1;
  1230  04AF  178B               	bsf	11,7	;volatile
  1231  04B0                     l1767:	
  1232                           
  1233                           ;main.c: 143: Keys[A].State = (uint8_t) (PORTA & A_Pressed);
  1234  04B0  0020               	movlb	0	; select bank0
  1235  04B1  080C               	movf	12,w	;volatile
  1236  04B2  00AC               	movwf	_Keys
  1237  04B3  3002               	movlw	2
  1238  04B4  05AC               	andwf	_Keys,f
  1239                           
  1240                           ;main.c: 144: Keys[B].State = (uint8_t) (PORTA & B_Pressed);
  1241  04B5  080C               	movf	12,w	;volatile
  1242  04B6  00B0               	movwf	_Keys+4
  1243  04B7  3001               	movlw	1
  1244  04B8  05B0               	andwf	_Keys+4,f
  1245                           
  1246                           ;main.c: 145: Keys[C].State = (uint8_t) (PORTA & C_Pressed);
  1247  04B9  080C               	movf	12,w	;volatile
  1248  04BA  00B4               	movwf	_Keys+8
  1249  04BB  3004               	movlw	4
  1250  04BC  05B4               	andwf	_Keys+8,f
  1251                           
  1252                           ;main.c: 146: Keys[D].State = (uint8_t) (PORTA & D_Pressed);
  1253  04BD  080C               	movf	12,w	;volatile
  1254  04BE  00B8               	movwf	_Keys+12
  1255  04BF  3010               	movlw	16
  1256  04C0  05B8               	andwf	_Keys+12,f
  1257                           
  1258                           ;main.c: 147: Keys[CD].State = (uint8_t) (PORTA & (C_Pressed | D_Pressed));
  1259  04C1  080C               	movf	12,w	;volatile
  1260  04C2  00BC               	movwf	_Keys+16
  1261  04C3  3014               	movlw	20
  1262  04C4  05BC               	andwf	_Keys+16,f
  1263                           
  1264                           ;main.c: 148: if (Keys[CD].State == (C_Pressed | D_Pressed)) {
  1265  04C5  063C               	xorwf	_Keys+16,w
  1266  04C6  1D03               	btfss	3,2
  1267  04C7  2CFF               	goto	l1831
  1268                           
  1269                           ;main.c: 149: SkipHandling = 5;
  1270  04C8  3005               	movlw	5
  1271  04C9  00A6               	movwf	_SkipHandling
  1272                           
  1273                           ;main.c: 150: if (Keys[CD].Tick100ms < 15) {
  1274  04CA  300F               	movlw	15
  1275  04CB  023E               	subwf	_Keys+18,w
  1276  04CC  1803               	skipnc
  1277  04CD  2CD2               	goto	l1797
  1278                           
  1279                           ;main.c: 151: DevMode &= ~(UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1280  04CE  30F9               	movlw	249
  1281  04CF  05A7               	andwf	_DevMode,f
  1282                           
  1283                           ;main.c: 152: DevMode |= BIND_ACTIVE;
  1284  04D0  1427               	bsf	_DevMode,0
  1285                           
  1286                           ;main.c: 154: } else if ((Keys[CD].Tick100ms >= 35) && (Keys[CD].Tick100ms < 49)) {
  1287  04D1  2CF9               	goto	l1795
  1288  04D2                     l1797:	
  1289  04D2  3023               	movlw	35
  1290  04D3  023E               	subwf	_Keys+18,w
  1291  04D4  1C03               	skipc
  1292  04D5  2CDC               	goto	l1803
  1293  04D6  3031               	movlw	49
  1294  04D7  023E               	subwf	_Keys+18,w
  1295  04D8  1803               	skipnc
  1296  04D9  2CDC               	goto	l1803
  1297                           
  1298                           ;main.c: 155: DevMode &= ~BIND_ACTIVE;
  1299  04DA  1027               	bcf	_DevMode,0
  1300                           
  1301                           ;main.c: 156: } else if ((Keys[CD].Tick100ms >= 50) && (Keys[CD].Tick100ms < 85)) {
  1302  04DB  2CFB               	goto	l66
  1303  04DC                     l1803:	
  1304  04DC  3032               	movlw	50
  1305  04DD  023E               	subwf	_Keys+18,w
  1306  04DE  3055               	movlw	85
  1307  04DF  1C03               	skipc
  1308  04E0  2CE9               	goto	L1
  1309  04E1  023E               	subwf	_Keys+18,w
  1310  04E2  1803               	skipnc
  1311  04E3  2CE8               	goto	l1813
  1312                           
  1313                           ;main.c: 157: DevMode &= ~(BIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1314  04E4  30FA               	movlw	250
  1315  04E5  05A7               	andwf	_DevMode,f
  1316                           
  1317                           ;main.c: 158: DevMode |= UNBIND_ACTIVE;
  1318  04E6  14A7               	bsf	_DevMode,1
  1319  04E7  2CF9               	goto	l1795
  1320  04E8                     l1813:	
  1321  04E8  3055               	movlw	85
  1322  04E9                     L1:	
  1323  04E9  023E               	subwf	_Keys+18,w
  1324  04EA  1C03               	skipc
  1325  04EB  2CF2               	goto	l1819
  1326  04EC  3063               	movlw	99
  1327  04ED  023E               	subwf	_Keys+18,w
  1328  04EE  1803               	skipnc
  1329  04EF  2CF2               	goto	l1819
  1330                           
  1331                           ;main.c: 161: DevMode &= ~UNBIND_ACTIVE;
  1332  04F0  10A7               	bcf	_DevMode,1
  1333                           
  1334                           ;main.c: 162: } else if (Keys[CD].Tick100ms >= 100) {
  1335  04F1  2CFB               	goto	l66
  1336  04F2                     l1819:	
  1337  04F2  3064               	movlw	100
  1338  04F3  023E               	subwf	_Keys+18,w
  1339  04F4  1C03               	skipc
  1340  04F5  2CFB               	goto	l66
  1341                           
  1342                           ;main.c: 163: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE);
  1343  04F6  30FC               	movlw	252
  1344  04F7  05A7               	andwf	_DevMode,f
  1345                           
  1346                           ;main.c: 164: DevMode |= MODE_CHANGE_ACTIVE;
  1347  04F8  1527               	bsf	_DevMode,2
  1348  04F9                     l1795:	
  1349                           
  1350                           ;main.c: 153: tick3_100ms = 100;
  1351  04F9  3064               	movlw	100
  1352  04FA  00A9               	movwf	_tick3_100ms
  1353  04FB                     l66:	
  1354                           
  1355                           ;main.c: 166: }
  1356                           ;main.c: 167: Keys[CD].Tick100ms++;
  1357  04FB  0ABE               	incf	_Keys+18,f
  1358                           
  1359                           ;main.c: 169: Keys[C].StateTemp = 0;
  1360  04FC  01B5               	clrf	_Keys+9
  1361                           
  1362                           ;main.c: 170: Keys[D].StateTemp = 0;
  1363  04FD  01B9               	clrf	_Keys+13
  1364                           
  1365                           ;main.c: 171: } else {
  1366  04FE  2D00               	goto	l1833
  1367  04FF                     l1831:	
  1368                           
  1369                           ;main.c: 172: Keys[CD].Tick100ms = 0;
  1370  04FF  01BE               	clrf	_Keys+18
  1371  0500                     l1833:	
  1372                           
  1373                           ;main.c: 173: }
  1374                           ;main.c: 175: if (tick3_100ms != 0) {
  1375  0500  0829               	movf	_tick3_100ms,w
  1376  0501  1903               	btfsc	3,2
  1377  0502  2D2F               	goto	l1853
  1378                           
  1379                           ;main.c: 176: tick3_100ms--;
  1380  0503  03A9               	decf	_tick3_100ms,f
  1381                           
  1382                           ;main.c: 177: switch (DevMode & 0x07) {
  1383  0504  2D1B               	goto	l1851
  1384  0505                     l77:	
  1385                           ;main.c: 178: case BIND_ACTIVE:
  1386                           
  1387                           
  1388                           ;main.c: 179: LATCbits.LATC3 = ON;
  1389  0505  0022               	movlb	2	; select bank2
  1390  0506  158E               	bsf	14,3	;volatile
  1391                           
  1392                           ;main.c: 180: break;
  1393  0507  2D33               	goto	l84
  1394  0508                     l1837:	
  1395                           
  1396                           ;main.c: 182: if (LedPulseTick_100ms++ > 2) {
  1397  0508  082A               	movf	_LedPulseTick_100ms,w
  1398  0509  0AAA               	incf	_LedPulseTick_100ms,f
  1399  050A  00DA               	movwf	??_main
  1400  050B  3003               	movlw	3
  1401  050C  025A               	subwf	??_main,w
  1402  050D  1C03               	skipc
  1403  050E  2D33               	goto	l84
  1404  050F                     l1839:	
  1405                           
  1406                           ;main.c: 183: LATCbits.LATC3 = ~LATCbits.LATC3;
  1407  050F  3008               	movlw	8
  1408  0510  0022               	movlb	2	; select bank2
  1409  0511  068E               	xorwf	14,f	;volatile
  1410                           
  1411                           ;main.c: 184: LedPulseTick_100ms = 0;
  1412  0512  0020               	movlb	0	; select bank0
  1413  0513  01AA               	clrf	_LedPulseTick_100ms
  1414  0514  2D33               	goto	l84
  1415  0515                     l1843:	
  1416                           
  1417                           ;main.c: 188: if (LedPulseTick_100ms++ > 0) {
  1418  0515  0AAA               	incf	_LedPulseTick_100ms,f
  1419  0516  032A               	decf	_LedPulseTick_100ms,w
  1420  0517  1903               	btfsc	3,2
  1421  0518  2D33               	goto	l84
  1422  0519  2D0F               	goto	l1839
  1423  051A                     l83:	
  1424                           ;main.c: 193: default:
  1425                           
  1426                           ;main.c: 189: LATCbits.LATC3 = ~LATCbits.LATC3;
  1427                           
  1428  051A  2D31               	goto	l1855
  1429  051B                     l1851:	
  1430                           ;main.c: 195: break;
  1431                           
  1432                           ;main.c: 194: LATCbits.LATC3 = OFF;
  1433                           
  1434  051B  0827               	movf	_DevMode,w
  1435  051C  3907               	andlw	7
  1436  051D  00DA               	movwf	??_main
  1437  051E  01DB               	clrf	??_main+1
  1438                           
  1439                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1440                           ; Switch size 1, requested type "space"
  1441                           ; Number of cases is 1, Range of values is 0 to 0
  1442                           ; switch strategies available:
  1443                           ; Name         Instructions Cycles
  1444                           ; simple_byte            4     3 (average)
  1445                           ; direct_byte            8     6 (fixed)
  1446                           ; jumptable            260     6 (fixed)
  1447                           ;	Chosen strategy is simple_byte
  1448  051F  085B               	movf	??_main+1,w
  1449  0520  3A00               	xorlw	0	; case 0
  1450  0521  1903               	skipnz
  1451  0522  2D24               	goto	l2109
  1452  0523  2D1A               	goto	l83
  1453  0524                     l2109:	
  1454                           
  1455                           ; Switch size 1, requested type "space"
  1456                           ; Number of cases is 3, Range of values is 1 to 4
  1457                           ; switch strategies available:
  1458                           ; Name         Instructions Cycles
  1459                           ; simple_byte           10     6 (average)
  1460                           ; direct_byte           17     9 (fixed)
  1461                           ; jumptable            263     9 (fixed)
  1462                           ;	Chosen strategy is simple_byte
  1463  0524  085A               	movf	??_main,w
  1464  0525  3A01               	xorlw	1	; case 1
  1465  0526  1903               	skipnz
  1466  0527  2D05               	goto	l77
  1467  0528  3A03               	xorlw	3	; case 2
  1468  0529  1903               	skipnz
  1469  052A  2D08               	goto	l1837
  1470  052B  3A06               	xorlw	6	; case 4
  1471  052C  1903               	skipnz
  1472  052D  2D15               	goto	l1843
  1473  052E  2D1A               	goto	l83
  1474  052F                     l1853:	
  1475                           
  1476                           ;main.c: 198: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1477  052F  30F8               	movlw	248
  1478  0530  05A7               	andwf	_DevMode,f
  1479  0531                     l1855:	
  1480                           
  1481                           ;main.c: 199: LATCbits.LATC3 = OFF;
  1482  0531  0022               	movlb	2	; select bank2
  1483  0532  118E               	bcf	14,3	;volatile
  1484  0533                     l84:	
  1485                           
  1486                           ;main.c: 200: }
  1487                           ;main.c: 202: if (SkipHandling != 0) {
  1488  0533  0020               	movlb	0	; select bank0
  1489  0534  0826               	movf	_SkipHandling,w
  1490  0535  1903               	btfsc	3,2
  1491  0536  2D3C               	goto	l85
  1492                           
  1493                           ;main.c: 203: if (Keys[CD].State == 0) {
  1494  0537  083C               	movf	_Keys+16,w
  1495  0538  1D03               	btfss	3,2
  1496  0539  2F39               	goto	l2009
  1497                           
  1498                           ;main.c: 204: SkipHandling--;
  1499  053A  03A6               	decf	_SkipHandling,f
  1500  053B  2F39               	goto	l2009
  1501  053C                     l85:	
  1502                           
  1503                           ;main.c: 207: if ((DevMode & BIND_ACTIVE) != 0) {
  1504  053C  1C27               	btfss	_DevMode,0
  1505  053D  2D74               	goto	l88
  1506                           
  1507                           ;main.c: 208: for (uint8_t chn = 0; chn < 4; chn++) {
  1508  053E  01E1               	clrf	main@chn
  1509  053F                     l1867:	
  1510                           
  1511                           ;main.c: 209: if (Keys[chn].State != Keys[chn].StateTemp) {
  1512  053F  0861               	movf	main@chn,w
  1513  0540  0709               	addwf	9,w
  1514  0541  0709               	addwf	9,w
  1515  0542  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1516  0543  0086               	movwf	6
  1517  0544  0187               	clrf	7
  1518  0545  0861               	movf	main@chn,w
  1519  0546  0709               	addwf	9,w
  1520  0547  0709               	addwf	9,w
  1521  0548  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1522  0549  0084               	movwf	4
  1523  054A  0185               	clrf	5
  1524  054B  0800               	movf	0,w
  1525  054C  0601               	xorwf	1,w
  1526  054D  1903               	skipnz
  1527  054E  2D6E               	goto	l1877
  1528                           
  1529                           ;main.c: 210: if (Keys[chn].State == 0) {
  1530  054F  0861               	movf	main@chn,w
  1531  0550  0709               	addwf	9,w
  1532  0551  0709               	addwf	9,w
  1533  0552  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1534  0553  0086               	movwf	6
  1535  0554  0801               	movf	1,w
  1536  0555  1D03               	btfss	3,2
  1537  0556  2D60               	goto	l1875
  1538                           
  1539                           ;main.c: 211: noolite_send(chn, CMD_Bind, 0, &noo_send_data[0]);
  1540  0557  300F               	movlw	15
  1541  0558  00F0               	movwf	noolite_send@noo_send_command
  1542  0559  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1543  055A  01F1               	clrf	noolite_send@noo_send_format
  1544  055B  00F2               	movwf	noolite_send@data
  1545  055C  0861               	movf	main@chn,w
  1546  055D  2301               	fcall	_noolite_send
  1547                           
  1548                           ;main.c: 212: DevMode &= ~BIND_ACTIVE;
  1549  055E  0020               	movlb	0	; select bank0
  1550  055F  1027               	bcf	_DevMode,0
  1551  0560                     l1875:	
  1552                           
  1553                           ;main.c: 213: }
  1554                           ;main.c: 214: Keys[chn].StateTemp = Keys[chn].State;
  1555  0560  0861               	movf	main@chn,w
  1556  0561  0709               	addwf	9,w
  1557  0562  0709               	addwf	9,w
  1558  0563  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1559  0564  0086               	movwf	6
  1560  0565  0187               	clrf	7
  1561  0566  0861               	movf	main@chn,w
  1562  0567  0709               	addwf	9,w
  1563  0568  0709               	addwf	9,w
  1564  0569  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1565  056A  0084               	movwf	4
  1566  056B  0185               	clrf	5
  1567  056C  0800               	movf	0,w
  1568  056D  0081               	movwf	1
  1569  056E                     l1877:	
  1570  056E  3004               	movlw	4
  1571  056F  0AE1               	incf	main@chn,f
  1572  0570  0261               	subwf	main@chn,w
  1573  0571  1803               	btfsc	3,0
  1574  0572  2F39               	goto	l2009
  1575  0573  2D3F               	goto	l1867
  1576  0574                     l88:	
  1577  0574  1CA7               	btfss	_DevMode,1
  1578  0575  2DAF               	goto	l94
  1579                           
  1580                           ;main.c: 218: for (uint8_t chn = 0; chn < 4; chn++) {
  1581  0576  01E2               	clrf	main@chn_243
  1582  0577                     l1883:	
  1583  0577  3004               	movlw	4
  1584  0578  0262               	subwf	main@chn_243,w
  1585  0579  1803               	btfsc	3,0
  1586  057A  2F39               	goto	l2009
  1587                           
  1588                           ;main.c: 219: if (Keys[chn].State != Keys[chn].StateTemp) {
  1589  057B  0862               	movf	main@chn_243,w
  1590  057C  0709               	addwf	9,w
  1591  057D  0709               	addwf	9,w
  1592  057E  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1593  057F  0086               	movwf	6
  1594  0580  0187               	clrf	7
  1595  0581  0862               	movf	main@chn_243,w
  1596  0582  0709               	addwf	9,w
  1597  0583  0709               	addwf	9,w
  1598  0584  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1599  0585  0084               	movwf	4
  1600  0586  0185               	clrf	5
  1601  0587  0800               	movf	0,w
  1602  0588  0601               	xorwf	1,w
  1603  0589  1903               	skipnz
  1604  058A  2DAD               	goto	l1899
  1605                           
  1606                           ;main.c: 220: if (Keys[chn].State == 0) {
  1607  058B  0862               	movf	main@chn_243,w
  1608  058C  0709               	addwf	9,w
  1609  058D  0709               	addwf	9,w
  1610  058E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1611  058F  0086               	movwf	6
  1612  0590  0801               	movf	1,w
  1613  0591  1D03               	btfss	3,2
  1614  0592  2D9E               	goto	l1897
  1615                           
  1616                           ;main.c: 221: noolite_send(chn, CMD_Unbind, 0, &noo_send_data[0]);
  1617  0593  3009               	movlw	9
  1618  0594  00F0               	movwf	noolite_send@noo_send_command
  1619  0595  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1620  0596  01F1               	clrf	noolite_send@noo_send_format
  1621  0597  00F2               	movwf	noolite_send@data
  1622  0598  0862               	movf	main@chn_243,w
  1623  0599  2301               	fcall	_noolite_send
  1624                           
  1625                           ;main.c: 222: DevMode &= ~UNBIND_ACTIVE;
  1626  059A  0020               	movlb	0	; select bank0
  1627  059B  10A7               	bcf	_DevMode,1
  1628                           
  1629                           ;main.c: 223: LATCbits.LATC3 = OFF;
  1630  059C  0022               	movlb	2	; select bank2
  1631  059D  118E               	bcf	14,3	;volatile
  1632  059E                     l1897:	
  1633                           
  1634                           ;main.c: 224: }
  1635                           ;main.c: 225: Keys[chn].StateTemp = Keys[chn].State;
  1636  059E  0020               	movlb	0	; select bank0
  1637  059F  0862               	movf	main@chn_243,w
  1638  05A0  0709               	addwf	9,w
  1639  05A1  0709               	addwf	9,w
  1640  05A2  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1641  05A3  0086               	movwf	6
  1642  05A4  0187               	clrf	7
  1643  05A5  0862               	movf	main@chn_243,w
  1644  05A6  0709               	addwf	9,w
  1645  05A7  0709               	addwf	9,w
  1646  05A8  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1647  05A9  0084               	movwf	4
  1648  05AA  0185               	clrf	5
  1649  05AB  0800               	movf	0,w
  1650  05AC  0081               	movwf	1
  1651  05AD                     l1899:	
  1652  05AD  0AE2               	incf	main@chn_243,f
  1653  05AE  2D77               	goto	l1883
  1654  05AF                     l94:	
  1655  05AF  1D27               	btfss	_DevMode,2
  1656  05B0  2E13               	goto	l1931
  1657                           
  1658                           ;main.c: 229: for (uint8_t chn = 0; chn < 4; chn++) {
  1659  05B1  01E3               	clrf	main@chn_244
  1660  05B2                     l1905:	
  1661  05B2  3004               	movlw	4
  1662  05B3  0263               	subwf	main@chn_244,w
  1663  05B4  1803               	btfsc	3,0
  1664  05B5  2F39               	goto	l2009
  1665                           
  1666                           ;main.c: 230: if (Keys[chn].State != Keys[chn].StateTemp) {
  1667  05B6  0863               	movf	main@chn_244,w
  1668  05B7  0709               	addwf	9,w
  1669  05B8  0709               	addwf	9,w
  1670  05B9  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1671  05BA  0086               	movwf	6
  1672  05BB  0187               	clrf	7
  1673  05BC  0863               	movf	main@chn_244,w
  1674  05BD  0709               	addwf	9,w
  1675  05BE  0709               	addwf	9,w
  1676  05BF  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1677  05C0  0084               	movwf	4
  1678  05C1  0185               	clrf	5
  1679  05C2  0800               	movf	0,w
  1680  05C3  0601               	xorwf	1,w
  1681  05C4  1903               	skipnz
  1682  05C5  2E11               	goto	l1927
  1683                           
  1684                           ;main.c: 231: if (Keys[chn].State == 0) {
  1685  05C6  0863               	movf	main@chn_244,w
  1686  05C7  0709               	addwf	9,w
  1687  05C8  0709               	addwf	9,w
  1688  05C9  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1689  05CA  0086               	movwf	6
  1690  05CB  0801               	movf	1,w
  1691  05CC  1D03               	btfss	3,2
  1692  05CD  2E02               	goto	l1925
  1693  05CE  0064               	clrwdt	;# 
  1694                           
  1695                           ;main.c: 233: LATCbits.LATC3 = ON;
  1696  05CF  0022               	movlb	2	; select bank2
  1697  05D0  158E               	bsf	14,3	;volatile
  1698                           
  1699                           ;main.c: 234: FlashEraseRow(TYPE_ADR);
  1700  05D1  30C0               	movlw	192
  1701  05D2  00F0               	movwf	FlashEraseRow@rowAddr
  1702  05D3  3007               	movlw	7
  1703  05D4  00F1               	movwf	FlashEraseRow@rowAddr+1
  1704  05D5  2116               	fcall	_FlashEraseRow
  1705  05D6  0064               	clrwdt	;# 
  1706                           
  1707                           ;main.c: 236: FlashWrite(TYPE_ADR, chn);
  1708  05D7  30C0               	movlw	192
  1709  05D8  00F0               	movwf	FlashWrite@addr
  1710  05D9  3007               	movlw	7
  1711  05DA  00F1               	movwf	FlashWrite@addr+1
  1712  05DB  0020               	movlb	0	; select bank0
  1713  05DC  0863               	movf	main@chn_244,w
  1714  05DD  00F2               	movwf	FlashWrite@flash_data
  1715  05DE  01F3               	clrf	FlashWrite@flash_data+1
  1716  05DF  2140               	fcall	_FlashWrite
  1717  05E0  0064               	clrwdt	;# 
  1718                           
  1719                           ;main.c: 238: FlashWrite(TYPE_ADR + 1, 0x5A);
  1720  05E1  30C1               	movlw	193
  1721  05E2  00F0               	movwf	FlashWrite@addr
  1722  05E3  3007               	movlw	7
  1723  05E4  00F1               	movwf	FlashWrite@addr+1
  1724  05E5  305A               	movlw	90
  1725  05E6  00F2               	movwf	FlashWrite@flash_data
  1726  05E7  01F3               	clrf	FlashWrite@flash_data+1
  1727  05E8  2140               	fcall	_FlashWrite
  1728  05E9  0064               	clrwdt	;# 
  1729                           
  1730                           ;main.c: 240: _delay((unsigned long)((500)*(8000000/4000.0)));
  1731  05EA  3006               	movlw	6
  1732  05EB  0020               	movlb	0	; select bank0
  1733  05EC  00DB               	movwf	??_main+1
  1734  05ED  3013               	movlw	19
  1735  05EE  00DA               	movwf	??_main
  1736  05EF  30AD               	movlw	173
  1737  05F0                     u1647:	
  1738  05F0  0B89               	decfsz	9,f
  1739  05F1  2DF0               	goto	u1647
  1740  05F2  0BDA               	decfsz	??_main,f
  1741  05F3  2DF0               	goto	u1647
  1742  05F4  0BDB               	decfsz	??_main+1,f
  1743  05F5  2DF0               	goto	u1647
  1744  05F6  3200               	nop2
  1745  05F7  0064               	clrwdt	;# 
  1746                           
  1747                           ;main.c: 242: DevType = Init_TypeFromFlash(&Type[0]);
  1748  05F8  30C0               	movlw	192
  1749  05F9  00F0               	movwf	Init_TypeFromFlash@type
  1750  05FA  3087               	movlw	135
  1751  05FB  00F1               	movwf	Init_TypeFromFlash@type+1
  1752  05FC  2153               	fcall	_Init_TypeFromFlash
  1753  05FD  0020               	movlb	0	; select bank0
  1754  05FE  00A8               	movwf	_DevType
  1755                           
  1756                           ;main.c: 243: DevMode &= ~MODE_CHANGE_ACTIVE;
  1757  05FF  1127               	bcf	_DevMode,2
  1758                           
  1759                           ;main.c: 244: LATCbits.LATC3 = OFF;
  1760  0600  0022               	movlb	2	; select bank2
  1761  0601  118E               	bcf	14,3	;volatile
  1762  0602                     l1925:	
  1763                           
  1764                           ;main.c: 245: }
  1765                           ;main.c: 246: Keys[chn].StateTemp = Keys[chn].State;
  1766  0602  0020               	movlb	0	; select bank0
  1767  0603  0863               	movf	main@chn_244,w
  1768  0604  0709               	addwf	9,w
  1769  0605  0709               	addwf	9,w
  1770  0606  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1771  0607  0086               	movwf	6
  1772  0608  0187               	clrf	7
  1773  0609  0863               	movf	main@chn_244,w
  1774  060A  0709               	addwf	9,w
  1775  060B  0709               	addwf	9,w
  1776  060C  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1777  060D  0084               	movwf	4
  1778  060E  0185               	clrf	5
  1779  060F  0800               	movf	0,w
  1780  0610  0081               	movwf	1
  1781  0611                     l1927:	
  1782  0611  0AE3               	incf	main@chn_244,f
  1783  0612  2DB2               	goto	l1905
  1784  0613                     l1931:	
  1785                           
  1786                           ;main.c: 251: for (uint8_t chn = 0; chn < 4; chn++) {
  1787  0613  01E4               	clrf	main@chn_245
  1788  0614                     l1933:	
  1789  0614  3004               	movlw	4
  1790  0615  0264               	subwf	main@chn_245,w
  1791  0616  1803               	btfsc	3,0
  1792  0617  2F39               	goto	l2009
  1793                           
  1794                           ;main.c: 252: if (Keys[chn].State != Keys[chn].StateTemp) {
  1795  0618  0864               	movf	main@chn_245,w
  1796  0619  0709               	addwf	9,w
  1797  061A  0709               	addwf	9,w
  1798  061B  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1799  061C  0086               	movwf	6
  1800  061D  0187               	clrf	7
  1801  061E  0864               	movf	main@chn_245,w
  1802  061F  0709               	addwf	9,w
  1803  0620  0709               	addwf	9,w
  1804  0621  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1805  0622  0084               	movwf	4
  1806  0623  0185               	clrf	5
  1807  0624  0800               	movf	0,w
  1808  0625  0601               	xorwf	1,w
  1809  0626  1D03               	btfss	3,2
  1810  0627  2EA7               	goto	l1975
  1811  0628  2F28               	goto	l2003
  1812  0629                     l1941:	
  1813                           
  1814                           ;main.c: 255: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1815  0629  0864               	movf	main@chn_245,w
  1816  062A  00FB               	movwf	KeyOffHandler@chn
  1817  062B  3004               	movlw	4
  1818  062C  00FC               	movwf	KeyOffHandler@cmd
  1819  062D  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1820  062E  00FD               	movwf	KeyOffHandler@nooData
  1821  062F  0864               	movf	main@chn_245,w
  1822  0630  0709               	addwf	9,w
  1823  0631  0709               	addwf	9,w
  1824  0632  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1825  0633  219D               	fcall	_KeyOffHandler
  1826                           
  1827                           ;main.c: 256: break;
  1828  0634  2EB5               	goto	l1977
  1829  0635                     l1943:	
  1830                           
  1831                           ;main.c: 258: if ((chn == 0) || (chn == 2)) {
  1832  0635  0864               	movf	main@chn_245,w
  1833  0636  1903               	btfsc	3,2
  1834  0637  2E3C               	goto	l1947
  1835  0638  3002               	movlw	2
  1836  0639  0664               	xorwf	main@chn_245,w
  1837  063A  1D03               	btfss	3,2
  1838  063B  2E47               	goto	l1949
  1839  063C                     l1947:	
  1840                           
  1841                           ;main.c: 259: KeyOffHandler(&Keys[chn], chn, CMD_OFF, &noo_send_data[0]);
  1842  063C  0864               	movf	main@chn_245,w
  1843  063D  00FB               	movwf	KeyOffHandler@chn
  1844  063E  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1845  063F  01FC               	clrf	KeyOffHandler@cmd
  1846  0640  00FD               	movwf	KeyOffHandler@nooData
  1847  0641  0864               	movf	main@chn_245,w
  1848  0642  0709               	addwf	9,w
  1849  0643  0709               	addwf	9,w
  1850  0644  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1851  0645  219D               	fcall	_KeyOffHandler
  1852                           
  1853                           ;main.c: 260: } else {
  1854  0646  2EB5               	goto	l1977
  1855  0647                     l1949:	
  1856                           
  1857                           ;main.c: 261: KeyOffHandler(&Keys[chn], chn, CMD_ON, &noo_send_data[0]);
  1858  0647  0864               	movf	main@chn_245,w
  1859  0648  00FB               	movwf	KeyOffHandler@chn
  1860  0649  3002               	movlw	2
  1861  064A  00FC               	movwf	KeyOffHandler@cmd
  1862  064B  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1863  064C  00FD               	movwf	KeyOffHandler@nooData
  1864  064D  0864               	movf	main@chn_245,w
  1865  064E  0709               	addwf	9,w
  1866  064F  0709               	addwf	9,w
  1867  0650  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1868  0651  219D               	fcall	_KeyOffHandler
  1869                           
  1870                           ;main.c: 262: }
  1871                           ;main.c: 263: break;
  1872  0652  2EB5               	goto	l1977
  1873  0653                     l1951:	
  1874                           
  1875                           ;main.c: 265: if (chn > 1) {
  1876  0653  3002               	movlw	2
  1877  0654  0264               	subwf	main@chn_245,w
  1878                           
  1879                           ;main.c: 266: if (Keys[chn].State == 0) {
  1880  0655  0864               	movf	main@chn_245,w
  1881  0656  1C03               	skipc
  1882  0657  2E75               	goto	L2
  1883  0658  0709               	addwf	9,w
  1884  0659  0709               	addwf	9,w
  1885  065A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1886  065B  0086               	movwf	6
  1887  065C  0187               	clrf	7
  1888  065D  0801               	movf	1,w
  1889  065E  1D03               	btfss	3,2
  1890  065F  2EB5               	goto	l1977
  1891                           
  1892                           ;main.c: 267: if (Keys[chn].Tick100ms < 10) {
  1893  0660  0864               	movf	main@chn_245,w
  1894  0661  0709               	addwf	9,w
  1895  0662  0709               	addwf	9,w
  1896  0663  3E2E               	addlw	(low ((_Keys| 0+2)))& (0+255)
  1897  0664  0086               	movwf	6
  1898  0665  300A               	movlw	10
  1899  0666  0201               	subwf	1,w
  1900  0667  1803               	skipnc
  1901  0668  2EB5               	goto	l1977
  1902                           
  1903                           ;main.c: 268: if (chn > 1) {
  1904  0669  3002               	movlw	2
  1905  066A  0264               	subwf	main@chn_245,w
  1906  066B  1C03               	skipc
  1907  066C  2EB5               	goto	l1977
  1908                           
  1909                           ;main.c: 269: noolite_send(chn, CMD_Load_Preset, 0, &noo_send_data[0]);
  1910  066D  3007               	movlw	7
  1911  066E  00F0               	movwf	noolite_send@noo_send_command
  1912  066F  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1913  0670  01F1               	clrf	noolite_send@noo_send_format
  1914  0671  00F2               	movwf	noolite_send@data
  1915  0672  0864               	movf	main@chn_245,w
  1916  0673  2301               	fcall	_noolite_send
  1917  0674  2EB5               	goto	l1977
  1918  0675                     L2:	
  1919                           ;main.c: 274: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1920                           
  1921  0675  00FB               	movwf	KeyOffHandler@chn
  1922  0676  3004               	movlw	4
  1923  0677  00FC               	movwf	KeyOffHandler@cmd
  1924  0678  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1925  0679  00FD               	movwf	KeyOffHandler@nooData
  1926  067A  0864               	movf	main@chn_245,w
  1927  067B  0709               	addwf	9,w
  1928  067C  0709               	addwf	9,w
  1929  067D  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1930  067E  219D               	fcall	_KeyOffHandler
  1931  067F  2EB5               	goto	l1977
  1932  0680                     l1963:	
  1933                           
  1934                           ;main.c: 278: if (chn > 1) {
  1935  0680  3002               	movlw	2
  1936  0681  0264               	subwf	main@chn_245,w
  1937                           
  1938                           ;main.c: 279: if (Keys[chn].State) {
  1939  0682  0864               	movf	main@chn_245,w
  1940  0683  1C03               	skipc
  1941  0684  2E9C               	goto	L3
  1942  0685  0709               	addwf	9,w
  1943  0686  0709               	addwf	9,w
  1944  0687  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1945  0688  0086               	movwf	6
  1946  0689  0187               	clrf	7
  1947  068A  0801               	movf	1,w
  1948  068B  1903               	btfsc	3,2
  1949  068C  2E95               	goto	l1969
  1950                           
  1951                           ;main.c: 280: noolite_send(chn, CMD_ON, 0, &noo_send_data[0]);
  1952  068D  3002               	movlw	2
  1953  068E  00F0               	movwf	noolite_send@noo_send_command
  1954  068F  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1955  0690  01F1               	clrf	noolite_send@noo_send_format
  1956  0691  00F2               	movwf	noolite_send@data
  1957  0692  0864               	movf	main@chn_245,w
  1958  0693  2301               	fcall	_noolite_send
  1959                           
  1960                           ;main.c: 281: } else {
  1961  0694  2EB5               	goto	l1977
  1962  0695                     l1969:	
  1963  0695  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1964                           
  1965                           ;main.c: 282: noolite_send(chn, CMD_OFF, 0, &noo_send_data[0]);
  1966  0696  01F0               	clrf	noolite_send@noo_send_command
  1967  0697  01F1               	clrf	noolite_send@noo_send_format
  1968  0698  00F2               	movwf	noolite_send@data
  1969  0699  0864               	movf	main@chn_245,w
  1970  069A  2301               	fcall	_noolite_send
  1971  069B  2EB5               	goto	l1977
  1972  069C                     L3:	
  1973                           ;main.c: 285: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1974                           
  1975  069C  00FB               	movwf	KeyOffHandler@chn
  1976  069D  3004               	movlw	4
  1977  069E  00FC               	movwf	KeyOffHandler@cmd
  1978  069F  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1979  06A0  00FD               	movwf	KeyOffHandler@nooData
  1980  06A1  0864               	movf	main@chn_245,w
  1981  06A2  0709               	addwf	9,w
  1982  06A3  0709               	addwf	9,w
  1983  06A4  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1984  06A5  219D               	fcall	_KeyOffHandler
  1985  06A6  2EB5               	goto	l1977
  1986  06A7                     l1975:	
  1987  06A7  0828               	movf	_DevType,w
  1988                           
  1989                           ; Switch size 1, requested type "space"
  1990                           ; Number of cases is 4, Range of values is 0 to 3
  1991                           ; switch strategies available:
  1992                           ; Name         Instructions Cycles
  1993                           ; simple_byte           13     7 (average)
  1994                           ; direct_byte           14     6 (fixed)
  1995                           ; jumptable            260     6 (fixed)
  1996                           ;	Chosen strategy is simple_byte
  1997  06A8  3A00               	xorlw	0	; case 0
  1998  06A9  1903               	skipnz
  1999  06AA  2E29               	goto	l1941
  2000  06AB  3A01               	xorlw	1	; case 1
  2001  06AC  1903               	skipnz
  2002  06AD  2E35               	goto	l1943
  2003  06AE  3A03               	xorlw	3	; case 2
  2004  06AF  1903               	skipnz
  2005  06B0  2E53               	goto	l1951
  2006  06B1  3A01               	xorlw	1	; case 3
  2007  06B2  1903               	skipnz
  2008  06B3  2E80               	goto	l1963
  2009  06B4  2EB5               	goto	l1977
  2010  06B5                     l1977:	
  2011                           
  2012                           ;main.c: 289: OffDelayTicks_100ms = 3;
  2013  06B5  3003               	movlw	3
  2014  06B6  0020               	movlb	0	; select bank0
  2015  06B7  00A5               	movwf	_OffDelayTicks_100ms
  2016                           
  2017                           ;main.c: 290: Keys[chn].StateTemp = Keys[chn].State;
  2018  06B8  0864               	movf	main@chn_245,w
  2019  06B9  0709               	addwf	9,w
  2020  06BA  0709               	addwf	9,w
  2021  06BB  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  2022  06BC  0086               	movwf	6
  2023  06BD  0187               	clrf	7
  2024  06BE  0864               	movf	main@chn_245,w
  2025  06BF  0709               	addwf	9,w
  2026  06C0  0709               	addwf	9,w
  2027  06C1  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2028  06C2  0084               	movwf	4
  2029  06C3  0185               	clrf	5
  2030  06C4  0800               	movf	0,w
  2031  06C5  0081               	movwf	1
  2032  06C6  2F28               	goto	l2003
  2033  06C7                     l1981:	
  2034                           
  2035                           ;main.c: 295: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2036  06C7  0864               	movf	main@chn_245,w
  2037  06C8  00D6               	movwf	KeyLongHandler@chn
  2038  06C9  3005               	movlw	5
  2039  06CA  00D7               	movwf	KeyLongHandler@cmd
  2040  06CB  3009               	movlw	9
  2041  06CC  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2042  06CD  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2043  06CE  00D9               	movwf	KeyLongHandler@nooData
  2044  06CF  0864               	movf	main@chn_245,w
  2045  06D0  0709               	addwf	9,w
  2046  06D1  0709               	addwf	9,w
  2047  06D2  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2048  06D3  2171               	fcall	_KeyLongHandler
  2049                           
  2050                           ;main.c: 296: break;
  2051  06D4  2F36               	goto	l2005
  2052  06D5                     l1983:	
  2053                           
  2054                           ;main.c: 298: if (chn == 0 || chn == 2) {
  2055  06D5  0864               	movf	main@chn_245,w
  2056  06D6  1903               	btfsc	3,2
  2057  06D7  2EDC               	goto	l1987
  2058  06D8  3002               	movlw	2
  2059  06D9  0664               	xorwf	main@chn_245,w
  2060  06DA  1D03               	btfss	3,2
  2061  06DB  2EEA               	goto	l1989
  2062  06DC                     l1987:	
  2063                           
  2064                           ;main.c: 299: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Down, 9, &noo_send_data[0]);
  2065  06DC  0864               	movf	main@chn_245,w
  2066  06DD  00D6               	movwf	KeyLongHandler@chn
  2067  06DE  3009               	movlw	9
  2068  06DF  01D7               	clrf	KeyLongHandler@cmd
  2069  06E0  0AD7               	incf	KeyLongHandler@cmd,f
  2070  06E1  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2071  06E2  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2072  06E3  00D9               	movwf	KeyLongHandler@nooData
  2073  06E4  0864               	movf	main@chn_245,w
  2074  06E5  0709               	addwf	9,w
  2075  06E6  0709               	addwf	9,w
  2076  06E7  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2077  06E8  2171               	fcall	_KeyLongHandler
  2078                           
  2079                           ;main.c: 300: } else {
  2080  06E9  2F36               	goto	l2005
  2081  06EA                     l1989:	
  2082                           
  2083                           ;main.c: 301: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Up, 9, &noo_send_data[0]);
  2084  06EA  0864               	movf	main@chn_245,w
  2085  06EB  00D6               	movwf	KeyLongHandler@chn
  2086  06EC  3003               	movlw	3
  2087  06ED  00D7               	movwf	KeyLongHandler@cmd
  2088  06EE  3009               	movlw	9
  2089  06EF  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2090  06F0  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2091  06F1  00D9               	movwf	KeyLongHandler@nooData
  2092  06F2  0864               	movf	main@chn_245,w
  2093  06F3  0709               	addwf	9,w
  2094  06F4  0709               	addwf	9,w
  2095  06F5  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2096  06F6  2171               	fcall	_KeyLongHandler
  2097  06F7  2F36               	goto	l2005
  2098  06F8                     l1991:	
  2099                           
  2100                           ;main.c: 305: if (chn < 2) {
  2101  06F8  3002               	movlw	2
  2102  06F9  0264               	subwf	main@chn_245,w
  2103                           
  2104                           ;main.c: 306: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2105  06FA  0864               	movf	main@chn_245,w
  2106  06FB  00D6               	movwf	KeyLongHandler@chn
  2107  06FC  1803               	skipnc
  2108  06FD  2F0A               	goto	L4
  2109  06FE  3005               	movlw	5
  2110  06FF  00D7               	movwf	KeyLongHandler@cmd
  2111  0700  3009               	movlw	9
  2112  0701  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2113  0702  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2114  0703  00D9               	movwf	KeyLongHandler@nooData
  2115  0704  0864               	movf	main@chn_245,w
  2116  0705  0709               	addwf	9,w
  2117  0706  0709               	addwf	9,w
  2118  0707  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2119  0708  2171               	fcall	_KeyLongHandler
  2120                           
  2121                           ;main.c: 307: } else {
  2122  0709  2F36               	goto	l2005
  2123  070A                     L4:	
  2124                           ;main.c: 308: KeyLongHandler(&Keys[chn], chn, CMD_Save_Preset, 49, &noo_send_data[0]);
  2125                           
  2126  070A  3008               	movlw	8
  2127  070B  00D7               	movwf	KeyLongHandler@cmd
  2128  070C  3031               	movlw	49
  2129  070D  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2130  070E  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2131  070F  00D9               	movwf	KeyLongHandler@nooData
  2132  0710  0864               	movf	main@chn_245,w
  2133  0711  0709               	addwf	9,w
  2134  0712  0709               	addwf	9,w
  2135  0713  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2136  0714  2171               	fcall	_KeyLongHandler
  2137  0715  2F36               	goto	l2005
  2138  0716                     l1997:	
  2139                           
  2140                           ;main.c: 312: if (chn < 2) {
  2141  0716  3002               	movlw	2
  2142  0717  0264               	subwf	main@chn_245,w
  2143  0718  1803               	skipnc
  2144  0719  2F36               	goto	l2005
  2145                           
  2146                           ;main.c: 313: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2147  071A  0864               	movf	main@chn_245,w
  2148  071B  00D6               	movwf	KeyLongHandler@chn
  2149  071C  3005               	movlw	5
  2150  071D  00D7               	movwf	KeyLongHandler@cmd
  2151  071E  3009               	movlw	9
  2152  071F  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2153  0720  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2154  0721  00D9               	movwf	KeyLongHandler@nooData
  2155  0722  0864               	movf	main@chn_245,w
  2156  0723  0709               	addwf	9,w
  2157  0724  0709               	addwf	9,w
  2158  0725  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2159  0726  2171               	fcall	_KeyLongHandler
  2160  0727  2F36               	goto	l2005
  2161  0728                     l2003:	
  2162  0728  0828               	movf	_DevType,w
  2163                           
  2164                           ; Switch size 1, requested type "space"
  2165                           ; Number of cases is 4, Range of values is 0 to 3
  2166                           ; switch strategies available:
  2167                           ; Name         Instructions Cycles
  2168                           ; simple_byte           13     7 (average)
  2169                           ; direct_byte           14     6 (fixed)
  2170                           ; jumptable            260     6 (fixed)
  2171                           ;	Chosen strategy is simple_byte
  2172  0729  3A00               	xorlw	0	; case 0
  2173  072A  1903               	skipnz
  2174  072B  2EC7               	goto	l1981
  2175  072C  3A01               	xorlw	1	; case 1
  2176  072D  1903               	skipnz
  2177  072E  2ED5               	goto	l1983
  2178  072F  3A03               	xorlw	3	; case 2
  2179  0730  1903               	skipnz
  2180  0731  2EF8               	goto	l1991
  2181  0732  3A01               	xorlw	1	; case 3
  2182  0733  1903               	skipnz
  2183  0734  2F16               	goto	l1997
  2184  0735  2F36               	goto	l2005
  2185  0736                     l2005:	
  2186  0736  0020               	movlb	0	; select bank0
  2187  0737  0AE4               	incf	main@chn_245,f
  2188  0738  2E14               	goto	l1933
  2189  0739                     l2009:	
  2190                           
  2191                           ;main.c: 318: }
  2192                           ;main.c: 319: }
  2193                           ;main.c: 320: }
  2194                           ;main.c: 321: if (OffDelayTicks_100ms != 0) {
  2195  0739  0825               	movf	_OffDelayTicks_100ms,w
  2196  073A  1903               	btfsc	3,2
  2197  073B  2F3E               	goto	l141
  2198                           
  2199                           ;main.c: 322: OffDelayTicks_100ms--;
  2200  073C  03A5               	decf	_OffDelayTicks_100ms,f
  2201                           
  2202                           ;main.c: 323: } else {
  2203  073D  2F3F               	goto	l2013
  2204  073E                     l141:	
  2205                           
  2206                           ;main.c: 324: DevMode |= GO_OFF;
  2207  073E  15A7               	bsf	_DevMode,3
  2208  073F                     l2013:	
  2209                           
  2210                           ;main.c: 325: }
  2211                           ;main.c: 327: if (((DevMode & 0x07) == 0) && ((PORTA & All_Pressed) == 0) && ((DevMode &
      +                           GO_OFF) != 0)) {
  2212  073F  0827               	movf	_DevMode,w
  2213  0740  3907               	andlw	7
  2214  0741  1D03               	btfss	3,2
  2215  0742  2FA8               	goto	l2049
  2216  0743  080C               	movf	12,w	;volatile
  2217  0744  3917               	andlw	23
  2218  0745  1903               	btfsc	3,2
  2219  0746  1DA7               	btfss	_DevMode,3
  2220  0747  2FA8               	goto	l2049
  2221                           
  2222                           ;main.c: 328: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  2223  0748  01E0               	clrf	main@cellNum
  2224                           
  2225                           ;main.c: 335: break;
  2226  0749  2F67               	goto	l2021
  2227  074A                     l2039:	
  2228                           
  2229                           ;main.c: 337: if (cellNum == 7) {
  2230  074A  3007               	movlw	7
  2231  074B  0660               	xorwf	main@cellNum,w
  2232  074C  1D03               	btfss	3,2
  2233  074D  2F65               	goto	l2043
  2234                           
  2235                           ;main.c: 338: FlashEraseRow(TX_STATUS_ADR);
  2236  074E  30D0               	movlw	208
  2237  074F  00F0               	movwf	FlashEraseRow@rowAddr
  2238  0750  3007               	movlw	7
  2239  0751  00F1               	movwf	FlashEraseRow@rowAddr+1
  2240  0752  2116               	fcall	_FlashEraseRow
  2241                           
  2242                           ;main.c: 339: FlashWrite(TX_STATUS_ADR, tx_status & 0x02);
  2243  0753  30D0               	movlw	208
  2244  0754  00F0               	movwf	FlashWrite@addr
  2245  0755  3007               	movlw	7
  2246  0756  00F1               	movwf	FlashWrite@addr+1
  2247  0757  0020               	movlb	0	; select bank0
  2248  0758  082B               	movf	_tx_status,w
  2249  0759  3902               	andlw	2
  2250  075A  00F2               	movwf	FlashWrite@flash_data
  2251  075B  01F3               	clrf	FlashWrite@flash_data+1
  2252  075C  2140               	fcall	_FlashWrite
  2253                           
  2254                           ;main.c: 340: FlashWrite(TX_STATUS_ADR + 1, 0x5A);
  2255  075D  30D1               	movlw	209
  2256  075E  00F0               	movwf	FlashWrite@addr
  2257  075F  3007               	movlw	7
  2258  0760  00F1               	movwf	FlashWrite@addr+1
  2259  0761  305A               	movlw	90
  2260  0762  00F2               	movwf	FlashWrite@flash_data
  2261  0763  01F3               	clrf	FlashWrite@flash_data+1
  2262  0764  2140               	fcall	_FlashWrite
  2263  0765                     l2043:	
  2264  0765  0020               	movlb	0	; select bank0
  2265  0766  0AE0               	incf	main@cellNum,f
  2266  0767                     l2021:	
  2267  0767  3008               	movlw	8
  2268  0768  0260               	subwf	main@cellNum,w
  2269  0769  1803               	btfsc	3,0
  2270  076A  2F9D               	goto	l145
  2271                           
  2272                           ;main.c: 329: uint16_t adrToWrite = (TX_STATUS_ADR + (cellNum * 2));
  2273  076B  0860               	movf	main@cellNum,w
  2274  076C  00DE               	movwf	main@adrToWrite
  2275  076D  30D0               	movlw	208
  2276  076E  01DF               	clrf	main@adrToWrite+1
  2277  076F  35DE               	lslf	main@adrToWrite,f
  2278  0770  0DDF               	rlf	main@adrToWrite+1,f
  2279  0771  07DE               	addwf	main@adrToWrite,f
  2280  0772  3007               	movlw	7
  2281  0773  3DDF               	addwfc	main@adrToWrite+1,f
  2282                           
  2283                           ;main.c: 330: if (TxStatus[cellNum] == 0xFFFF) {
  2284  0774  0860               	movf	main@cellNum,w
  2285  0775  00DA               	movwf	??_main
  2286  0776  30D0               	movlw	208
  2287  0777  01DB               	clrf	??_main+1
  2288  0778  35DA               	lslf	??_main,f
  2289  0779  0DDB               	rlf	??_main+1,f
  2290  077A  075A               	addwf	??_main,w
  2291  077B  0084               	movwf	4
  2292  077C  3087               	movlw	135
  2293  077D  3D5B               	addwfc	??_main+1,w
  2294  077E  0085               	movwf	5
  2295  077F  0012               	moviw fsr0++
  2296  0780  3AFF               	xorlw	255
  2297  0781  00DC               	movwf	??_main+2
  2298  0782  0012               	moviw fsr0++
  2299  0783  3AFF               	xorlw	255
  2300  0784  04DC               	iorwf	??_main+2,f
  2301  0785  1D03               	btfss	3,2
  2302  0786  2F4A               	goto	l2039
  2303                           
  2304                           ;main.c: 331: FlashWrite(adrToWrite, tx_status & 0x02);
  2305  0787  085F               	movf	main@adrToWrite+1,w
  2306  0788  00F1               	movwf	FlashWrite@addr+1
  2307  0789  085E               	movf	main@adrToWrite,w
  2308  078A  00F0               	movwf	FlashWrite@addr
  2309  078B  082B               	movf	_tx_status,w
  2310  078C  3902               	andlw	2
  2311  078D  00F2               	movwf	FlashWrite@flash_data
  2312  078E  01F3               	clrf	FlashWrite@flash_data+1
  2313  078F  2140               	fcall	_FlashWrite
  2314                           
  2315                           ;main.c: 332: FlashWrite((adrToWrite + 1), 0x5A);
  2316  0790  0020               	movlb	0	; select bank0
  2317  0791  085E               	movf	main@adrToWrite,w
  2318  0792  3E01               	addlw	1
  2319  0793  00F0               	movwf	FlashWrite@addr
  2320  0794  3000               	movlw	0
  2321  0795  3D5F               	addwfc	main@adrToWrite+1,w
  2322  0796  00F1               	movwf	FlashWrite@addr+1
  2323  0797  305A               	movlw	90
  2324  0798  00F2               	movwf	FlashWrite@flash_data
  2325  0799  01F3               	clrf	FlashWrite@flash_data+1
  2326  079A  2140               	fcall	_FlashWrite
  2327                           
  2328                           ;main.c: 333: __nop();
  2329  079B  0000               	nop
  2330  079C  0064               	clrwdt	;# 
  2331  079D                     l145:	
  2332                           
  2333                           ;main.c: 341: }
  2334                           ;main.c: 342: }
  2335                           ;main.c: 343: }
  2336                           ;main.c: 344: LATCbits.LATC5 = 0;
  2337  079D  0022               	movlb	2	; select bank2
  2338  079E  128E               	bcf	14,5	;volatile
  2339                           
  2340                           ;main.c: 345: _delay((unsigned long)((15)*(8000000/4000.0)));
  2341  079F  3027               	movlw	39
  2342  07A0  0020               	movlb	0	; select bank0
  2343  07A1  00DA               	movwf	??_main
  2344  07A2  30F5               	movlw	245
  2345  07A3                     u1657:	
  2346  07A3  0B89               	decfsz	9,f
  2347  07A4  2FA3               	goto	u1657
  2348  07A5  0BDA               	decfsz	??_main,f
  2349  07A6  2FA3               	goto	u1657
  2350                           
  2351                           ;main.c: 346: } else {
  2352  07A7  2CB0               	goto	l1767
  2353  07A8                     l2049:	
  2354                           
  2355                           ;main.c: 347: WDTCONbits.WDTPS = 0b00110;
  2356  07A8  0021               	movlb	1	; select bank1
  2357  07A9  0817               	movf	23,w	;volatile
  2358  07AA  39C1               	andlw	-63
  2359  07AB  380C               	iorlw	12
  2360  07AC  0097               	movwf	23	;volatile
  2361                           
  2362                           ;main.c: 348: __nop();
  2363  07AD  0000               	nop
  2364  07AE  0063               	sleep	;# 
  2365                           
  2366                           ;main.c: 350: __nop();
  2367  07AF  0000               	nop
  2368                           
  2369                           ;main.c: 351: WDTCONbits.WDTPS = 0b00101;
  2370  07B0  0021               	movlb	1	; select bank1
  2371  07B1  0817               	movf	23,w	;volatile
  2372  07B2  39C1               	andlw	-63
  2373  07B3  380A               	iorlw	10
  2374  07B4  0097               	movwf	23	;volatile
  2375                           
  2376                           ;main.c: 352: __nop();
  2377  07B5  0000               	nop
  2378  07B6  0063               	sleep	;# 
  2379                           
  2380                           ;main.c: 354: __nop();
  2381  07B7  0000               	nop
  2382                           
  2383                           ;main.c: 355: WDTCONbits.WDTPS = 0b01011;
  2384  07B8  0021               	movlb	1	; select bank1
  2385  07B9  0817               	movf	23,w	;volatile
  2386  07BA  39C1               	andlw	-63
  2387  07BB  3816               	iorlw	22
  2388  07BC  0097               	movwf	23	;volatile
  2389                           
  2390                           ;main.c: 356: __nop();
  2391  07BD  0000               	nop
  2392  07BE  0064               	clrwdt	;# 
  2393  07BF  2CB0               	goto	l1767
  2394  07C0                     __end_of_main:	
  2395                           
  2396                           	psect	text1
  2397  01DD                     __ptext1:	
  2398 ;; *************** function _RF_Init *****************
  2399 ;; Defined at:
  2400 ;;		line 25 in file "noolite.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2409 ;; Tracked objects:
  2410 ;;		On entry : B1F/1
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1
  2414 ;;      Params:         0       0       0
  2415 ;;      Locals:         0       0       0
  2416 ;;      Temps:          7       0       0
  2417 ;;      Totals:         7       0       0
  2418 ;;Total ram usage:        7 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           
  2428                           ;psect for function _RF_Init
  2429  01DD                     _RF_Init:	
  2430                           
  2431                           ;noolite.c: 27: startaddress = 0;
  2432                           
  2433                           ;incstack = 0
  2434                           ; Regs used in _RF_Init: [wreg-fsr0h+status,2+status,0+pclath]
  2435  01DD  0020               	movlb	0	; select bank0
  2436  01DE  30F3               	movlw	243
  2437  01DF  01A0               	clrf	_startaddress
  2438  01E0  01A1               	clrf	_startaddress+1
  2439  01E1  01A2               	clrf	_startaddress+2
  2440  01E2  01A3               	clrf	_startaddress+3
  2441                           
  2442                           ;noolite.c: 28: startaddress |= ((unsigned int) system_settings[5]) << 8;
  2443  01E3  0084               	movwf	4
  2444  01E4  3087               	movlw	135
  2445  01E5  0085               	movwf	5
  2446  01E6  0800               	movf	0,w	;code access
  2447  01E7  00F0               	movwf	??_RF_Init
  2448  01E8  01F1               	clrf	??_RF_Init+1
  2449  01E9  00F1               	movwf	??_RF_Init+1
  2450  01EA  01F0               	clrf	??_RF_Init
  2451  01EB  0870               	movf	??_RF_Init,w
  2452  01EC  00F3               	movwf	??_RF_Init+3
  2453  01ED  0871               	movf	??_RF_Init+1,w
  2454  01EE  00F4               	movwf	??_RF_Init+4
  2455  01EF  01F5               	clrf	??_RF_Init+5
  2456  01F0  01F6               	clrf	??_RF_Init+6
  2457  01F1  0873               	movf	??_RF_Init+3,w
  2458  01F2  04A0               	iorwf	_startaddress,f
  2459  01F3  0874               	movf	??_RF_Init+4,w
  2460  01F4  04A1               	iorwf	_startaddress+1,f
  2461  01F5  0875               	movf	??_RF_Init+5,w
  2462  01F6  04A2               	iorwf	_startaddress+2,f
  2463  01F7  0876               	movf	??_RF_Init+6,w
  2464  01F8  04A3               	iorwf	_startaddress+3,f
  2465                           
  2466                           ;noolite.c: 29: startaddress |= system_settings[4];
  2467  01F9  30F2               	movlw	242
  2468  01FA  0084               	movwf	4
  2469  01FB  0800               	movf	0,w	;code access
  2470  01FC  00F0               	movwf	??_RF_Init
  2471  01FD  01F1               	clrf	??_RF_Init+1
  2472  01FE  01F2               	clrf	??_RF_Init+2
  2473  01FF  01F3               	clrf	??_RF_Init+3
  2474  0200  04A0               	iorwf	_startaddress,f
  2475  0201  0871               	movf	??_RF_Init+1,w
  2476  0202  04A1               	iorwf	_startaddress+1,f
  2477  0203  0872               	movf	??_RF_Init+2,w
  2478  0204  04A2               	iorwf	_startaddress+2,f
  2479  0205  0873               	movf	??_RF_Init+3,w
  2480  0206  04A3               	iorwf	_startaddress+3,f
  2481                           
  2482                           ;noolite.c: 30: if ((startaddress != 0) && (startaddress != 0xFFFF)) {
  2483  0207  0823               	movf	_startaddress+3,w
  2484  0208  0422               	iorwf	_startaddress+2,w
  2485  0209  0421               	iorwf	_startaddress+1,w
  2486  020A  0420               	iorwf	_startaddress,w
  2487  020B  1903               	skipnz
  2488  020C  2A16               	goto	l181
  2489  020D  0F20               	incfsz	_startaddress,w
  2490  020E  2A14               	goto	l1615
  2491  020F  0A21               	incf	_startaddress+1,w
  2492  0210  0422               	iorwf	_startaddress+2,w
  2493  0211  0423               	iorwf	_startaddress+3,w
  2494  0212  1903               	btfsc	3,2
  2495  0213  2A16               	goto	l181
  2496  0214                     l1615:	
  2497                           
  2498                           ;noolite.c: 31: noo_address_type = 0;
  2499  0214  01A4               	clrf	_noo_address_type
  2500                           
  2501                           ;noolite.c: 32: } else {
  2502  0215  2A66               	goto	l182
  2503  0216                     l181:	
  2504  0216  30F9               	movlw	249
  2505                           
  2506                           ;noolite.c: 33: startaddress = 0;
  2507  0217  01A0               	clrf	_startaddress
  2508  0218  01A1               	clrf	_startaddress+1
  2509  0219  01A2               	clrf	_startaddress+2
  2510  021A  01A3               	clrf	_startaddress+3
  2511                           
  2512                           ;noolite.c: 34: startaddress |= ((unsigned long) system_settings[11]) << 24;
  2513  021B  0084               	movwf	4
  2514  021C  3087               	movlw	135
  2515  021D  0085               	movwf	5
  2516  021E  0800               	movf	0,w	;code access
  2517  021F  00F3               	movwf	??_RF_Init+3
  2518  0220  01F2               	clrf	??_RF_Init+2
  2519  0221  01F1               	clrf	??_RF_Init+1
  2520  0222  01F0               	clrf	??_RF_Init
  2521  0223  0870               	movf	??_RF_Init,w
  2522  0224  04A0               	iorwf	_startaddress,f
  2523  0225  0871               	movf	??_RF_Init+1,w
  2524  0226  04A1               	iorwf	_startaddress+1,f
  2525  0227  0872               	movf	??_RF_Init+2,w
  2526  0228  04A2               	iorwf	_startaddress+2,f
  2527  0229  0873               	movf	??_RF_Init+3,w
  2528  022A  04A3               	iorwf	_startaddress+3,f
  2529                           
  2530                           ;noolite.c: 35: startaddress |= ((unsigned long) system_settings[10]) << 16;
  2531  022B  30F8               	movlw	248
  2532  022C  0084               	movwf	4
  2533  022D  0800               	movf	0,w	;code access
  2534  022E  00F0               	movwf	??_RF_Init
  2535  022F  01F1               	clrf	??_RF_Init+1
  2536  0230  01F2               	clrf	??_RF_Init+2
  2537  0231  01F3               	clrf	??_RF_Init+3
  2538  0232  0871               	movf	??_RF_Init+1,w
  2539  0233  00F3               	movwf	??_RF_Init+3
  2540  0234  0870               	movf	??_RF_Init,w
  2541  0235  00F2               	movwf	??_RF_Init+2
  2542  0236  01F1               	clrf	??_RF_Init+1
  2543  0237  01F0               	clrf	??_RF_Init
  2544  0238  0870               	movf	??_RF_Init,w
  2545  0239  04A0               	iorwf	_startaddress,f
  2546  023A  0871               	movf	??_RF_Init+1,w
  2547  023B  04A1               	iorwf	_startaddress+1,f
  2548  023C  0872               	movf	??_RF_Init+2,w
  2549  023D  04A2               	iorwf	_startaddress+2,f
  2550  023E  0873               	movf	??_RF_Init+3,w
  2551  023F  04A3               	iorwf	_startaddress+3,f
  2552                           
  2553                           ;noolite.c: 36: startaddress |= ((unsigned long) system_settings[9]) << 8;
  2554  0240  30F7               	movlw	247
  2555  0241  0084               	movwf	4
  2556  0242  0800               	movf	0,w	;code access
  2557  0243  00F0               	movwf	??_RF_Init
  2558  0244  01F1               	clrf	??_RF_Init+1
  2559  0245  01F2               	clrf	??_RF_Init+2
  2560  0246  01F3               	clrf	??_RF_Init+3
  2561  0247  0872               	movf	??_RF_Init+2,w
  2562  0248  00F3               	movwf	??_RF_Init+3
  2563  0249  0871               	movf	??_RF_Init+1,w
  2564  024A  00F2               	movwf	??_RF_Init+2
  2565  024B  0870               	movf	??_RF_Init,w
  2566  024C  00F1               	movwf	??_RF_Init+1
  2567  024D  01F0               	clrf	??_RF_Init
  2568  024E  0870               	movf	??_RF_Init,w
  2569  024F  04A0               	iorwf	_startaddress,f
  2570  0250  0871               	movf	??_RF_Init+1,w
  2571  0251  04A1               	iorwf	_startaddress+1,f
  2572  0252  0872               	movf	??_RF_Init+2,w
  2573  0253  04A2               	iorwf	_startaddress+2,f
  2574  0254  0873               	movf	??_RF_Init+3,w
  2575  0255  04A3               	iorwf	_startaddress+3,f
  2576                           
  2577                           ;noolite.c: 37: startaddress |= system_settings[8];
  2578  0256  30F6               	movlw	246
  2579  0257  0084               	movwf	4
  2580  0258  0800               	movf	0,w	;code access
  2581  0259  00F0               	movwf	??_RF_Init
  2582  025A  01F1               	clrf	??_RF_Init+1
  2583  025B  01F2               	clrf	??_RF_Init+2
  2584  025C  01F3               	clrf	??_RF_Init+3
  2585  025D  04A0               	iorwf	_startaddress,f
  2586  025E  0871               	movf	??_RF_Init+1,w
  2587  025F  04A1               	iorwf	_startaddress+1,f
  2588  0260  0872               	movf	??_RF_Init+2,w
  2589  0261  04A2               	iorwf	_startaddress+2,f
  2590  0262  0873               	movf	??_RF_Init+3,w
  2591  0263  04A3               	iorwf	_startaddress+3,f
  2592                           
  2593                           ;noolite.c: 38: noo_address_type = 1;
  2594  0264  01A4               	clrf	_noo_address_type
  2595  0265  0AA4               	incf	_noo_address_type,f
  2596  0266                     l182:	
  2597  0266  0064               	clrwdt	;# 
  2598  0267  0008               	return
  2599  0268                     __end_of_RF_Init:	
  2600                           
  2601                           	psect	text2
  2602  019D                     __ptext2:	
  2603 ;; *************** function _KeyOffHandler *****************
  2604 ;; Defined at:
  2605 ;;		line 55 in file "user_functions.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  key             1    wreg     PTR struct .
  2608 ;;		 -> Keys(20), 
  2609 ;;  chn             1   11[COMMON] unsigned char 
  2610 ;;  cmd             1   12[COMMON] unsigned char 
  2611 ;;  nooData         1   13[COMMON] PTR unsigned char 
  2612 ;;		 -> noo_send_data(4), 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  key             1   19[BANK0 ] PTR struct .
  2615 ;;		 -> Keys(20), 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 1F/0
  2622 ;;		On exit  : 1D/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1
  2625 ;;      Params:         3       0       0
  2626 ;;      Locals:         0       1       0
  2627 ;;      Temps:          0       1       0
  2628 ;;      Totals:         3       2       0
  2629 ;;Total ram usage:        5 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    1
  2632 ;; This function calls:
  2633 ;;		_noolite_send
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function _KeyOffHandler
  2641  019D                     _KeyOffHandler:	
  2642                           
  2643                           ;incstack = 0
  2644                           ; Regs used in _KeyOffHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2645                           ;KeyOffHandler@key stored from wreg
  2646  019D  00D7               	movwf	KeyOffHandler@key
  2647                           
  2648                           ;user_functions.c: 56: if (key->State == 0) {
  2649  019E  0086               	movwf	6
  2650  019F  0187               	clrf	7
  2651  01A0  0801               	movf	1,w
  2652  01A1  1D03               	btfss	3,2
  2653  01A2  0008               	return
  2654                           
  2655                           ;user_functions.c: 57: if (key->Tick100ms < 10) {
  2656  01A3  0857               	movf	KeyOffHandler@key,w
  2657  01A4  3E02               	addlw	2
  2658  01A5  0086               	movwf	6
  2659  01A6  300A               	movlw	10
  2660  01A7  0201               	subwf	1,w
  2661  01A8  1803               	skipnc
  2662  01A9  29B1               	goto	l1729
  2663                           
  2664                           ;user_functions.c: 58: noolite_send(chn, cmd, 0, &nooData[0]);
  2665  01AA  087C               	movf	KeyOffHandler@cmd,w
  2666  01AB  00F0               	movwf	noolite_send@noo_send_command
  2667  01AC  01F1               	clrf	noolite_send@noo_send_format
  2668  01AD  087D               	movf	KeyOffHandler@nooData,w
  2669  01AE  00F2               	movwf	noolite_send@data
  2670  01AF  087B               	movf	KeyOffHandler@chn,w
  2671  01B0  2B01               	ljmp	_noolite_send
  2672  01B1                     l1729:	
  2673                           ;user_functions.c: 59: } else {
  2674                           
  2675                           
  2676                           ;user_functions.c: 60: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2677  01B1  300A               	movlw	10
  2678  01B2  00F0               	movwf	noolite_send@noo_send_command
  2679  01B3  01F1               	clrf	noolite_send@noo_send_format
  2680  01B4  087D               	movf	KeyOffHandler@nooData,w
  2681  01B5  00F2               	movwf	noolite_send@data
  2682  01B6  087B               	movf	KeyOffHandler@chn,w
  2683  01B7  2301               	fcall	_noolite_send
  2684                           
  2685                           ;user_functions.c: 61: _delay((unsigned long)((15)*(8000000/4000.0)));
  2686  01B8  3027               	movlw	39
  2687  01B9  0020               	movlb	0	; select bank0
  2688  01BA  00D6               	movwf	??_KeyOffHandler
  2689  01BB  30F5               	movlw	245
  2690  01BC                     u1667:	
  2691  01BC  0B89               	decfsz	9,f
  2692  01BD  29BC               	goto	u1667
  2693  01BE  0BD6               	decfsz	??_KeyOffHandler,f
  2694  01BF  29BC               	goto	u1667
  2695                           
  2696                           ;user_functions.c: 62: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2697  01C0  300A               	movlw	10
  2698  01C1  00F0               	movwf	noolite_send@noo_send_command
  2699  01C2  01F1               	clrf	noolite_send@noo_send_format
  2700  01C3  087D               	movf	KeyOffHandler@nooData,w
  2701  01C4  00F2               	movwf	noolite_send@data
  2702  01C5  087B               	movf	KeyOffHandler@chn,w
  2703  01C6  2301               	fcall	_noolite_send
  2704                           
  2705                           ;user_functions.c: 63: _delay((unsigned long)((15)*(8000000/4000.0)));
  2706  01C7  3027               	movlw	39
  2707  01C8  0020               	movlb	0	; select bank0
  2708  01C9  00D6               	movwf	??_KeyOffHandler
  2709  01CA  30F5               	movlw	245
  2710  01CB                     u1677:	
  2711  01CB  0B89               	decfsz	9,f
  2712  01CC  29CB               	goto	u1677
  2713  01CD  0BD6               	decfsz	??_KeyOffHandler,f
  2714  01CE  29CB               	goto	u1677
  2715                           
  2716                           ;user_functions.c: 64: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2717  01CF  300A               	movlw	10
  2718  01D0  00F0               	movwf	noolite_send@noo_send_command
  2719  01D1  01F1               	clrf	noolite_send@noo_send_format
  2720  01D2  087D               	movf	KeyOffHandler@nooData,w
  2721  01D3  00F2               	movwf	noolite_send@data
  2722  01D4  087B               	movf	KeyOffHandler@chn,w
  2723  01D5  2301               	fcall	_noolite_send
  2724                           
  2725                           ;user_functions.c: 65: key->FirstCmdSent = 0;
  2726  01D6  0020               	movlb	0	; select bank0
  2727  01D7  0857               	movf	KeyOffHandler@key,w
  2728  01D8  3E03               	addlw	3
  2729  01D9  0086               	movwf	6
  2730  01DA  0187               	clrf	7
  2731  01DB  0181               	clrf	1
  2732  01DC  0008               	return
  2733  01DD                     __end_of_KeyOffHandler:	
  2734                           
  2735                           	psect	text3
  2736  0171                     __ptext3:	
  2737 ;; *************** function _KeyLongHandler *****************
  2738 ;; Defined at:
  2739 ;;		line 70 in file "user_functions.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  key             1    wreg     PTR struct .
  2742 ;;		 -> Keys(20), 
  2743 ;;  chn             1   18[BANK0 ] unsigned char 
  2744 ;;  cmd             1   19[BANK0 ] unsigned char 
  2745 ;;  ticksToTrigg    1   20[BANK0 ] unsigned char 
  2746 ;;  nooData         1   21[BANK0 ] PTR unsigned char 
  2747 ;;		 -> noo_send_data(4), 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  key             1   11[COMMON] PTR struct .
  2750 ;;		 -> Keys(20), 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 1F/0
  2757 ;;		On exit  : 1D/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1
  2760 ;;      Params:         0       4       0
  2761 ;;      Locals:         1       0       0
  2762 ;;      Temps:          0       0       0
  2763 ;;      Totals:         1       4       0
  2764 ;;Total ram usage:        5 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    1
  2767 ;; This function calls:
  2768 ;;		_noolite_send
  2769 ;; This function is called by:
  2770 ;;		_main
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           
  2775                           ;psect for function _KeyLongHandler
  2776  0171                     _KeyLongHandler:	
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _KeyLongHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2780                           ;KeyLongHandler@key stored from wreg
  2781  0171  00FB               	movwf	KeyLongHandler@key
  2782                           
  2783                           ;user_functions.c: 71: if (key->State != 0) {
  2784  0172  0086               	movwf	6
  2785  0173  0187               	clrf	7
  2786  0174  0801               	movf	1,w
  2787  0175  1903               	btfsc	3,2
  2788  0176  2997               	goto	l1751
  2789                           
  2790                           ;user_functions.c: 72: if (key->Tick100ms > ticksToTrigger) {
  2791  0177  087B               	movf	KeyLongHandler@key,w
  2792  0178  3E02               	addlw	2
  2793  0179  0086               	movwf	6
  2794  017A  0801               	movf	1,w
  2795  017B  0258               	subwf	KeyLongHandler@ticksToTrigger,w
  2796                           
  2797                           ;user_functions.c: 73: if (key->FirstCmdSent == 0) {
  2798  017C  087B               	movf	KeyLongHandler@key,w
  2799  017D  1803               	skipnc
  2800  017E  2992               	goto	L5
  2801  017F  3E03               	addlw	3
  2802  0180  0086               	movwf	6
  2803  0181  0801               	movf	1,w
  2804  0182  1D03               	btfss	3,2
  2805  0183  2991               	goto	l1749
  2806                           
  2807                           ;user_functions.c: 74: noolite_send(chn, cmd, 0, &nooData[0]);
  2808  0184  0857               	movf	KeyLongHandler@cmd,w
  2809  0185  00F0               	movwf	noolite_send@noo_send_command
  2810  0186  01F1               	clrf	noolite_send@noo_send_format
  2811  0187  0859               	movf	KeyLongHandler@nooData,w
  2812  0188  00F2               	movwf	noolite_send@data
  2813  0189  0856               	movf	KeyLongHandler@chn,w
  2814  018A  2301               	fcall	_noolite_send
  2815                           
  2816                           ;user_functions.c: 75: key->FirstCmdSent = 1;
  2817  018B  087B               	movf	KeyLongHandler@key,w
  2818  018C  3E03               	addlw	3
  2819  018D  0086               	movwf	6
  2820  018E  0187               	clrf	7
  2821  018F  0181               	clrf	1
  2822  0190  0A81               	incf	1,f
  2823  0191                     l1749:	
  2824                           
  2825                           ;user_functions.c: 76: }
  2826                           ;user_functions.c: 77: }
  2827                           ;user_functions.c: 78: key->Tick100ms++;
  2828  0191  087B               	movf	KeyLongHandler@key,w
  2829  0192                     L5:	
  2830  0192  3E02               	addlw	2
  2831  0193  0086               	movwf	6
  2832  0194  0187               	clrf	7
  2833  0195  0A81               	incf	1,f
  2834                           
  2835                           ;user_functions.c: 79: } else {
  2836  0196  0008               	return
  2837  0197                     l1751:	
  2838                           
  2839                           ;user_functions.c: 80: key->Tick100ms = 0;
  2840  0197  087B               	movf	KeyLongHandler@key,w
  2841  0198  3E02               	addlw	2
  2842  0199  0086               	movwf	6
  2843  019A  0187               	clrf	7
  2844  019B  0181               	clrf	1
  2845  019C  0008               	return
  2846  019D                     __end_of_KeyLongHandler:	
  2847                           
  2848                           	psect	text4
  2849  0301                     __ptext4:	
  2850 ;; *************** function _noolite_send *****************
  2851 ;; Defined at:
  2852 ;;		line 174 in file "noolite.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  chn             1    wreg     unsigned char 
  2855 ;;  noo_send_com    1    0[COMMON] unsigned char 
  2856 ;;  noo_send_for    1    1[COMMON] unsigned char 
  2857 ;;  data            1    2[COMMON] PTR unsigned char 
  2858 ;;		 -> noo_send_data(4), 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  chn             1   14[BANK0 ] unsigned char 
  2861 ;;  noo_send_buf   12    0[BANK0 ] unsigned char [12]
  2862 ;;  endpos          1   17[BANK0 ] unsigned char 
  2863 ;;  temp_send       1   16[BANK0 ] unsigned char 
  2864 ;;  countsend       1   15[BANK0 ] unsigned char 
  2865 ;;  countbit        1   13[BANK0 ] unsigned char 
  2866 ;;  startpos        1   12[BANK0 ] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      void 
  2869 ;; Registers used:
  2870 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 1F/2
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1
  2876 ;;      Params:         3       0       0
  2877 ;;      Locals:         0      18       0
  2878 ;;      Temps:          8       0       0
  2879 ;;      Totals:        11      18       0
  2880 ;;Total ram usage:       29 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_main
  2886 ;;		_KeyOffHandler
  2887 ;;		_KeyLongHandler
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           
  2892                           ;psect for function _noolite_send
  2893  0301                     _noolite_send:	
  2894                           
  2895                           ;incstack = 0
  2896                           ; Regs used in _noolite_send: [wreg+fsr1l+fsr1h+status,2+status,0]
  2897                           ;noolite_send@chn stored from wreg
  2898  0301  0020               	movlb	0	; select bank0
  2899  0302  00D2               	movwf	noolite_send@chn
  2900  0303  0064               	clrwdt	;# 
  2901                           
  2902                           ;noolite.c: 185: tx_status ^= (1<<1);
  2903  0304  3002               	movlw	2
  2904  0305  0020               	movlb	0	; select bank0
  2905  0306  06AB               	xorwf	_tx_status,f
  2906                           
  2907                           ;noolite.c: 188: if (noo_send_command < 16) {
  2908  0307  3010               	movlw	16
  2909  0308  0270               	subwf	noolite_send@noo_send_command,w
  2910  0309  1803               	skipnc
  2911  030A  2B17               	goto	l1429
  2912                           
  2913                           ;noolite.c: 189: startpos = 10;
  2914  030B  300A               	movlw	10
  2915  030C  00D0               	movwf	noolite_send@startpos
  2916                           
  2917                           ;noolite.c: 190: noo_send_buffer[1] = (noo_send_command << 4) | (1 << 2);
  2918  030D  0E70               	swapf	noolite_send@noo_send_command,w
  2919  030E  39F0               	andlw	240
  2920  030F  3804               	iorlw	4
  2921  0310  00C5               	movwf	noolite_send@noo_send_buffer+1
  2922                           
  2923                           ;noolite.c: 191: if (((tx_status & (1<<1)) != 0)) {
  2924  0311  1CAB               	btfss	_tx_status,1
  2925  0312  2B15               	goto	l187
  2926                           
  2927                           ;noolite.c: 192: noo_send_buffer[1] |= (1<<3);
  2928  0313  15C5               	bsf	noolite_send@noo_send_buffer+1,3
  2929                           
  2930                           ;noolite.c: 193: } else {
  2931  0314  2B23               	goto	l189
  2932  0315                     l187:	
  2933                           
  2934                           ;noolite.c: 194: noo_send_buffer[1] &= (~(1<<3));
  2935  0315  11C5               	bcf	noolite_send@noo_send_buffer+1,3
  2936  0316  2B23               	goto	l189
  2937  0317                     l1429:	
  2938                           
  2939                           ;noolite.c: 197: startpos = 6;
  2940  0317  3006               	movlw	6
  2941  0318  00D0               	movwf	noolite_send@startpos
  2942                           
  2943                           ;noolite.c: 198: noo_send_buffer[0] = (1 << 6);
  2944  0319  3040               	movlw	64
  2945  031A  00C4               	movwf	noolite_send@noo_send_buffer
  2946                           
  2947                           ;noolite.c: 199: if (((tx_status & (1<<1)) != 0)) {
  2948  031B  1CAB               	btfss	_tx_status,1
  2949  031C  2B1F               	goto	l190
  2950                           
  2951                           ;noolite.c: 200: noo_send_buffer[0] |= (1<<7);
  2952  031D  17C4               	bsf	noolite_send@noo_send_buffer,7
  2953                           
  2954                           ;noolite.c: 201: } else {
  2955  031E  2B20               	goto	l1435
  2956  031F                     l190:	
  2957                           
  2958                           ;noolite.c: 202: noo_send_buffer[0] &= (~(1<<7));
  2959  031F  13C4               	bcf	noolite_send@noo_send_buffer,7
  2960  0320                     l1435:	
  2961                           
  2962                           ;noolite.c: 203: };
  2963                           ;noolite.c: 204: noo_send_buffer[1] = noo_send_command;
  2964  0320  0870               	movf	noolite_send@noo_send_command,w
  2965  0321  00C5               	movwf	noolite_send@noo_send_buffer+1
  2966                           
  2967                           ;noolite.c: 205: noo_send_format = noo_send_format | 4;
  2968  0322  1571               	bsf	noolite_send@noo_send_format,2
  2969  0323                     l189:	
  2970                           
  2971                           ;noolite.c: 206: }
  2972                           ;noolite.c: 207: endpos = 2;
  2973  0323  3002               	movlw	2
  2974  0324  00D5               	movwf	noolite_send@endpos
  2975                           
  2976                           ;noolite.c: 208: temp_send = noo_send_format & 3;
  2977  0325  0871               	movf	noolite_send@noo_send_format,w
  2978  0326  00D4               	movwf	noolite_send@temp_send
  2979  0327  3003               	movlw	3
  2980  0328  05D4               	andwf	noolite_send@temp_send,f
  2981                           
  2982                           ;noolite.c: 209: if (temp_send == 1) {
  2983  0329  0B54               	decfsz	noolite_send@temp_send,w
  2984  032A  2B32               	goto	l1447
  2985                           
  2986                           ;noolite.c: 211: noo_send_buffer[2] = data[0];
  2987  032B  0872               	movf	noolite_send@data,w
  2988  032C  0086               	movwf	6
  2989  032D  0187               	clrf	7
  2990  032E  0801               	movf	1,w
  2991  032F  00C6               	movwf	noolite_send@noo_send_buffer+2
  2992                           
  2993                           ;noolite.c: 212: endpos++;
  2994  0330  0AD5               	incf	noolite_send@endpos,f
  2995                           
  2996                           ;noolite.c: 213: } else if (temp_send == 3) {
  2997  0331  2B49               	goto	l1453
  2998  0332                     l1447:	
  2999  0332  3003               	movlw	3
  3000  0333  0654               	xorwf	noolite_send@temp_send,w
  3001  0334  1D03               	btfss	3,2
  3002  0335  2B49               	goto	l1453
  3003                           
  3004                           ;noolite.c: 218: noo_send_buffer[2] = data[0];
  3005  0336  0872               	movf	noolite_send@data,w
  3006  0337  0086               	movwf	6
  3007  0338  0187               	clrf	7
  3008  0339  0801               	movf	1,w
  3009  033A  00C6               	movwf	noolite_send@noo_send_buffer+2
  3010                           
  3011                           ;noolite.c: 219: noo_send_buffer[3] = data[1];
  3012  033B  0872               	movf	noolite_send@data,w
  3013  033C  0086               	movwf	6
  3014  033D  3F41               	moviw [1]fsr1
  3015  033E  00C7               	movwf	noolite_send@noo_send_buffer+3
  3016                           
  3017                           ;noolite.c: 220: noo_send_buffer[4] = data[2];
  3018  033F  0872               	movf	noolite_send@data,w
  3019  0340  0086               	movwf	6
  3020  0341  3F42               	moviw [2]fsr1
  3021  0342  00C8               	movwf	noolite_send@noo_send_buffer+4
  3022                           
  3023                           ;noolite.c: 221: noo_send_buffer[5] = data[3];
  3024  0343  0872               	movf	noolite_send@data,w
  3025  0344  0086               	movwf	6
  3026  0345  3F43               	moviw [3]fsr1
  3027  0346  00C9               	movwf	noolite_send@noo_send_buffer+5
  3028                           
  3029                           ;noolite.c: 222: endpos += 4;
  3030  0347  3004               	movlw	4
  3031  0348  07D5               	addwf	noolite_send@endpos,f
  3032  0349                     l1453:	
  3033                           
  3034                           ;noolite.c: 223: }
  3035                           ;noolite.c: 224: if (noo_address_type != 0) {
  3036  0349  0824               	movf	_noo_address_type,w
  3037  034A  1903               	btfsc	3,2
  3038  034B  2BB3               	goto	l1469
  3039                           
  3040                           ;noolite.c: 225: noo_send_format = noo_send_format | 0x10;
  3041  034C  1671               	bsf	noolite_send@noo_send_format,4
  3042                           
  3043                           ;noolite.c: 226: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3044  034D  0855               	movf	noolite_send@endpos,w
  3045  034E  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3046  034F  0086               	movwf	6
  3047  0350  0187               	clrf	7
  3048  0351  0852               	movf	noolite_send@chn,w
  3049  0352  0720               	addwf	_startaddress,w
  3050  0353  0081               	movwf	1
  3051                           
  3052                           ;noolite.c: 227: endpos++;
  3053  0354  0AD5               	incf	noolite_send@endpos,f
  3054                           
  3055                           ;noolite.c: 228: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3056  0355  0855               	movf	noolite_send@endpos,w
  3057  0356  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3058  0357  0086               	movwf	6
  3059  0358  0820               	movf	_startaddress,w
  3060  0359  00F3               	movwf	??_noolite_send
  3061  035A  0821               	movf	_startaddress+1,w
  3062  035B  00F4               	movwf	??_noolite_send+1
  3063  035C  0822               	movf	_startaddress+2,w
  3064  035D  00F5               	movwf	??_noolite_send+2
  3065  035E  0823               	movf	_startaddress+3,w
  3066  035F  00F6               	movwf	??_noolite_send+3
  3067  0360  0852               	movf	noolite_send@chn,w
  3068  0361  00F7               	movwf	??_noolite_send+4
  3069  0362  01F8               	clrf	??_noolite_send+5
  3070  0363  01F9               	clrf	??_noolite_send+6
  3071  0364  01FA               	clrf	??_noolite_send+7
  3072  0365  07F3               	addwf	??_noolite_send,f
  3073  0366  0878               	movf	??_noolite_send+5,w
  3074  0367  3DF4               	addwfc	??_noolite_send+1,f
  3075  0368  0879               	movf	??_noolite_send+6,w
  3076  0369  3DF5               	addwfc	??_noolite_send+2,f
  3077  036A  087A               	movf	??_noolite_send+7,w
  3078  036B  3DF6               	addwfc	??_noolite_send+3,f
  3079  036C  0874               	movf	??_noolite_send+1,w
  3080  036D  00F3               	movwf	??_noolite_send
  3081  036E  0875               	movf	??_noolite_send+2,w
  3082  036F  00F4               	movwf	??_noolite_send+1
  3083  0370  0876               	movf	??_noolite_send+3,w
  3084  0371  00F5               	movwf	??_noolite_send+2
  3085  0372  01F6               	clrf	??_noolite_send+3
  3086  0373  0873               	movf	??_noolite_send,w
  3087  0374  0081               	movwf	1
  3088                           
  3089                           ;noolite.c: 229: endpos++;
  3090  0375  0AD5               	incf	noolite_send@endpos,f
  3091                           
  3092                           ;noolite.c: 230: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 16);
  3093  0376  0855               	movf	noolite_send@endpos,w
  3094  0377  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3095  0378  0086               	movwf	6
  3096  0379  0820               	movf	_startaddress,w
  3097  037A  00F3               	movwf	??_noolite_send
  3098  037B  0821               	movf	_startaddress+1,w
  3099  037C  00F4               	movwf	??_noolite_send+1
  3100  037D  0822               	movf	_startaddress+2,w
  3101  037E  00F5               	movwf	??_noolite_send+2
  3102  037F  0823               	movf	_startaddress+3,w
  3103  0380  00F6               	movwf	??_noolite_send+3
  3104  0381  0852               	movf	noolite_send@chn,w
  3105  0382  00F7               	movwf	??_noolite_send+4
  3106  0383  01F8               	clrf	??_noolite_send+5
  3107  0384  01F9               	clrf	??_noolite_send+6
  3108  0385  01FA               	clrf	??_noolite_send+7
  3109  0386  07F3               	addwf	??_noolite_send,f
  3110  0387  0878               	movf	??_noolite_send+5,w
  3111  0388  3DF4               	addwfc	??_noolite_send+1,f
  3112  0389  0879               	movf	??_noolite_send+6,w
  3113  038A  3DF5               	addwfc	??_noolite_send+2,f
  3114  038B  087A               	movf	??_noolite_send+7,w
  3115  038C  3DF6               	addwfc	??_noolite_send+3,f
  3116  038D  0875               	movf	??_noolite_send+2,w
  3117  038E  00F3               	movwf	??_noolite_send
  3118  038F  0876               	movf	??_noolite_send+3,w
  3119  0390  00F4               	movwf	??_noolite_send+1
  3120  0391  01F5               	clrf	??_noolite_send+2
  3121  0392  01F6               	clrf	??_noolite_send+3
  3122  0393  0873               	movf	??_noolite_send,w
  3123  0394  0081               	movwf	1
  3124                           
  3125                           ;noolite.c: 231: endpos++;
  3126  0395  0AD5               	incf	noolite_send@endpos,f
  3127                           
  3128                           ;noolite.c: 232: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 24);
  3129  0396  0855               	movf	noolite_send@endpos,w
  3130  0397  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3131  0398  0086               	movwf	6
  3132  0399  0820               	movf	_startaddress,w
  3133  039A  00F3               	movwf	??_noolite_send
  3134  039B  0821               	movf	_startaddress+1,w
  3135  039C  00F4               	movwf	??_noolite_send+1
  3136  039D  0822               	movf	_startaddress+2,w
  3137  039E  00F5               	movwf	??_noolite_send+2
  3138  039F  0823               	movf	_startaddress+3,w
  3139  03A0  00F6               	movwf	??_noolite_send+3
  3140  03A1  0852               	movf	noolite_send@chn,w
  3141  03A2  00F7               	movwf	??_noolite_send+4
  3142  03A3  01F8               	clrf	??_noolite_send+5
  3143  03A4  01F9               	clrf	??_noolite_send+6
  3144  03A5  01FA               	clrf	??_noolite_send+7
  3145  03A6  07F3               	addwf	??_noolite_send,f
  3146  03A7  0878               	movf	??_noolite_send+5,w
  3147  03A8  3DF4               	addwfc	??_noolite_send+1,f
  3148  03A9  0879               	movf	??_noolite_send+6,w
  3149  03AA  3DF5               	addwfc	??_noolite_send+2,f
  3150  03AB  087A               	movf	??_noolite_send+7,w
  3151  03AC  3DF6               	addwfc	??_noolite_send+3,f
  3152  03AD  0876               	movf	??_noolite_send+3,w
  3153  03AE  00F3               	movwf	??_noolite_send
  3154  03AF  01F4               	clrf	??_noolite_send+1
  3155  03B0  01F5               	clrf	??_noolite_send+2
  3156  03B1  01F6               	clrf	??_noolite_send+3
  3157  03B2  2BDA               	goto	L6
  3158  03B3                     l1469:	
  3159                           ;noolite.c: 234: } else {
  3160                           
  3161                           ;noolite.c: 233: endpos++;
  3162                           
  3163                           
  3164                           ;noolite.c: 235: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3165  03B3  0855               	movf	noolite_send@endpos,w
  3166  03B4  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3167  03B5  0086               	movwf	6
  3168  03B6  0187               	clrf	7
  3169  03B7  0852               	movf	noolite_send@chn,w
  3170  03B8  0720               	addwf	_startaddress,w
  3171  03B9  0081               	movwf	1
  3172                           
  3173                           ;noolite.c: 236: endpos++;
  3174  03BA  0AD5               	incf	noolite_send@endpos,f
  3175                           
  3176                           ;noolite.c: 237: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3177  03BB  0855               	movf	noolite_send@endpos,w
  3178  03BC  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3179  03BD  0086               	movwf	6
  3180  03BE  0820               	movf	_startaddress,w
  3181  03BF  00F3               	movwf	??_noolite_send
  3182  03C0  0821               	movf	_startaddress+1,w
  3183  03C1  00F4               	movwf	??_noolite_send+1
  3184  03C2  0822               	movf	_startaddress+2,w
  3185  03C3  00F5               	movwf	??_noolite_send+2
  3186  03C4  0823               	movf	_startaddress+3,w
  3187  03C5  00F6               	movwf	??_noolite_send+3
  3188  03C6  0852               	movf	noolite_send@chn,w
  3189  03C7  00F7               	movwf	??_noolite_send+4
  3190  03C8  01F8               	clrf	??_noolite_send+5
  3191  03C9  01F9               	clrf	??_noolite_send+6
  3192  03CA  01FA               	clrf	??_noolite_send+7
  3193  03CB  07F3               	addwf	??_noolite_send,f
  3194  03CC  0878               	movf	??_noolite_send+5,w
  3195  03CD  3DF4               	addwfc	??_noolite_send+1,f
  3196  03CE  0879               	movf	??_noolite_send+6,w
  3197  03CF  3DF5               	addwfc	??_noolite_send+2,f
  3198  03D0  087A               	movf	??_noolite_send+7,w
  3199  03D1  3DF6               	addwfc	??_noolite_send+3,f
  3200  03D2  0874               	movf	??_noolite_send+1,w
  3201  03D3  00F3               	movwf	??_noolite_send
  3202  03D4  0875               	movf	??_noolite_send+2,w
  3203  03D5  00F4               	movwf	??_noolite_send+1
  3204  03D6  0876               	movf	??_noolite_send+3,w
  3205  03D7  00F5               	movwf	??_noolite_send+2
  3206  03D8  01F6               	clrf	??_noolite_send+3
  3207  03D9  0873               	movf	??_noolite_send,w
  3208  03DA                     L6:	
  3209  03DA  0081               	movwf	1
  3210                           
  3211                           ;noolite.c: 238: endpos++;
  3212  03DB  0AD5               	incf	noolite_send@endpos,f
  3213                           
  3214                           ;noolite.c: 239: }
  3215                           ;noolite.c: 240: noo_send_buffer[endpos] = noo_send_format;
  3216  03DC  0855               	movf	noolite_send@endpos,w
  3217  03DD  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3218  03DE  0086               	movwf	6
  3219  03DF  0187               	clrf	7
  3220  03E0  0871               	movf	noolite_send@noo_send_format,w
  3221  03E1  0081               	movwf	1
  3222                           
  3223                           ;noolite.c: 241: endpos++;
  3224  03E2  0AD5               	incf	noolite_send@endpos,f
  3225                           
  3226                           ;noolite.c: 242: temp_send = 0;
  3227  03E3  01D4               	clrf	noolite_send@temp_send
  3228                           
  3229                           ;noolite.c: 243: countbit = (unsigned char) (endpos * 8);
  3230  03E4  0855               	movf	noolite_send@endpos,w
  3231  03E5  0709               	addwf	9,w
  3232  03E6  0709               	addwf	9,w
  3233  03E7  0709               	addwf	9,w
  3234  03E8  00D1               	movwf	noolite_send@countbit
  3235                           
  3236                           ;noolite.c: 244: countsend = startpos + 1;
  3237  03E9  0850               	movf	noolite_send@startpos,w
  3238  03EA  3E01               	addlw	1
  3239  03EB  00D3               	movwf	noolite_send@countsend
  3240  03EC                     l1507:	
  3241                           ;noolite.c: 245: while (countsend < countbit) {
  3242                           
  3243  03EC  0020               	movlb	0	; select bank0
  3244  03ED  0851               	movf	noolite_send@countbit,w
  3245  03EE  0253               	subwf	noolite_send@countsend,w
  3246  03EF  1803               	btfsc	3,0
  3247  03F0  2C16               	goto	l1509
  3248                           
  3249                           ;noolite.c: 246: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3250  03F1  0853               	movf	noolite_send@countsend,w
  3251  03F2  00F3               	movwf	??_noolite_send
  3252  03F3  36F3               	lsrf	??_noolite_send,f
  3253  03F4  36F3               	lsrf	??_noolite_send,f
  3254  03F5  36F3               	lsrf	??_noolite_send,f
  3255  03F6  0873               	movf	??_noolite_send,w
  3256  03F7  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3257  03F8  0086               	movwf	6
  3258  03F9  3001               	movlw	1
  3259  03FA  0187               	clrf	7
  3260  03FB  00F4               	movwf	??_noolite_send+1
  3261  03FC  0853               	movf	noolite_send@countsend,w
  3262  03FD  3907               	andlw	7
  3263  03FE  0A89               	incf	9,f
  3264  03FF  2C01               	goto	u854
  3265  0400                     u855:	
  3266  0400  35F4               	lslf	??_noolite_send+1,f
  3267  0401                     u854:	
  3268  0401  0B89               	decfsz	9,f
  3269  0402  2C00               	goto	u855
  3270  0403  0874               	movf	??_noolite_send+1,w
  3271  0404  0501               	andwf	1,w
  3272  0405  1903               	btfsc	3,2
  3273  0406  2C09               	goto	l1489
  3274                           
  3275                           ;noolite.c: 247: temp_send = temp_send^0x01;
  3276  0407  3001               	movlw	1
  3277  0408  06D4               	xorwf	noolite_send@temp_send,f
  3278  0409                     l1489:	
  3279                           
  3280                           ;noolite.c: 248: }
  3281                           ;noolite.c: 249: tx_status &= (~(1<<4));
  3282  0409  122B               	bcf	_tx_status,4
  3283                           
  3284                           ;noolite.c: 250: if (((temp_send & (1<<0)) != 0)) {
  3285  040A  1C54               	btfss	noolite_send@temp_send,0
  3286  040B  2C0F               	goto	l1497
  3287                           
  3288                           ;noolite.c: 251: temp_send = temp_send^0x18;
  3289  040C  3018               	movlw	24
  3290  040D  06D4               	xorwf	noolite_send@temp_send,f
  3291                           
  3292                           ;noolite.c: 252: tx_status |= (1<<4);
  3293  040E  162B               	bsf	_tx_status,4
  3294  040F                     l1497:	
  3295                           
  3296                           ;noolite.c: 253: }
  3297                           ;noolite.c: 254: temp_send = temp_send >> 1;
  3298  040F  36D4               	lsrf	noolite_send@temp_send,f
  3299                           
  3300                           ;noolite.c: 255: temp_send &= (~(1<<7));
  3301  0410  13D4               	bcf	noolite_send@temp_send,7
  3302                           
  3303                           ;noolite.c: 256: if (((tx_status & (1<<4)) != 0)) {
  3304  0411  1A2B               	btfsc	_tx_status,4
  3305                           
  3306                           ;noolite.c: 257: temp_send |= (1<<7);
  3307  0412  17D4               	bsf	noolite_send@temp_send,7
  3308                           
  3309                           ;noolite.c: 258: }
  3310                           ;noolite.c: 259: countsend++;
  3311  0413  0AD3               	incf	noolite_send@countsend,f
  3312  0414  0064               	clrwdt	;# 
  3313  0415  2BEC               	goto	l1507
  3314  0416                     l1509:	
  3315                           
  3316                           ;noolite.c: 261: }
  3317                           ;noolite.c: 262: noo_send_buffer[endpos] = temp_send;
  3318  0416  0855               	movf	noolite_send@endpos,w
  3319  0417  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3320  0418  0086               	movwf	6
  3321  0419  0187               	clrf	7
  3322  041A  0854               	movf	noolite_send@temp_send,w
  3323  041B  0081               	movwf	1
  3324  041C  30C0               	movlw	192
  3325                           
  3326                           ;noolite.c: 263: endpos++;
  3327  041D  0AD5               	incf	noolite_send@endpos,f
  3328                           
  3329                           ;noolite.c: 264: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3330  041E  0021               	movlb	1	; select bank1
  3331  041F  0595               	andwf	21,f	;volatile
  3332  0420  3003               	movlw	3
  3333  0421  0495               	iorwf	21,f	;volatile
  3334                           
  3335                           ;noolite.c: 265: temp_send = 3;
  3336  0422  0020               	movlb	0	; select bank0
  3337  0423  00D4               	movwf	noolite_send@temp_send
  3338  0424  3026               	movlw	38
  3339                           
  3340                           ;noolite.c: 266: tx_status &= (~(1<<2));
  3341  0425  112B               	bcf	_tx_status,2
  3342                           
  3343                           ;noolite.c: 267: tx_status &= (~(1<<3));
  3344  0426  11AB               	bcf	_tx_status,3
  3345                           
  3346                           ;noolite.c: 268: tx_status |= (1<<0);
  3347  0427  142B               	bsf	_tx_status,0
  3348                           
  3349                           ;noolite.c: 269: tx_status |= (1<<5);
  3350  0428  16AB               	bsf	_tx_status,5
  3351                           
  3352                           ;noolite.c: 270: countsend = 0;
  3353  0429  01D3               	clrf	noolite_send@countsend
  3354                           
  3355                           ;noolite.c: 271: countbit = 38;
  3356  042A  00D1               	movwf	noolite_send@countbit
  3357  042B  0064               	clrwdt	;# 
  3358                           
  3359                           ;noolite.c: 273: LATCbits.LATC3 = 1;
  3360  042C  0022               	movlb	2	; select bank2
  3361  042D  158E               	bsf	14,3	;volatile
  3362                           
  3363                           ;noolite.c: 274: _delay((unsigned long)((15)*(8000000/4000.0)));
  3364  042E  3027               	movlw	39
  3365  042F  00F3               	movwf	??_noolite_send
  3366  0430  30F5               	movlw	245
  3367  0431                     u1687:	
  3368  0431  0B89               	decfsz	9,f
  3369  0432  2C31               	goto	u1687
  3370  0433  0BF3               	decfsz	??_noolite_send,f
  3371  0434  2C31               	goto	u1687
  3372  0435  0000               	nop
  3373                           
  3374                           ;noolite.c: 275: LATCbits.LATC3 = 0;
  3375  0436  0022               	movlb	2	; select bank2
  3376  0437  118E               	bcf	14,3	;volatile
  3377                           
  3378                           ;noolite.c: 276: TMR0 = 196;
  3379  0438  30C4               	movlw	196
  3380  0439  0020               	movlb	0	; select bank0
  3381  043A  0095               	movwf	21	;volatile
  3382                           
  3383                           ;noolite.c: 277: TMR0IF = 0;
  3384  043B  110B               	bcf	11,2	;volatile
  3385                           
  3386                           ;noolite.c: 278: TMR0IE = 0;
  3387  043C  128B               	bcf	11,5	;volatile
  3388  043D                     l203:	
  3389                           ;noolite.c: 279: while (((tx_status & (1<<3)) == 0)) {
  3390                           
  3391  043D  19AB               	btfsc	_tx_status,3
  3392  043E  2C97               	goto	l214
  3393                           
  3394                           ;noolite.c: 280: if (TMR0IF) {
  3395  043F  1D0B               	btfss	11,2	;volatile
  3396  0440  2C3D               	goto	l203
  3397                           
  3398                           ;noolite.c: 281: __nop();
  3399  0441  0000               	nop
  3400                           
  3401                           ;noolite.c: 282: if (countsend < countbit) {
  3402  0442  0020               	movlb	0	; select bank0
  3403  0443  0851               	movf	noolite_send@countbit,w
  3404  0444  0253               	subwf	noolite_send@countsend,w
  3405  0445  1803               	skipnc
  3406  0446  2C5E               	goto	l206
  3407                           
  3408                           ;noolite.c: 283: if (((tx_status & (1<<2)) == 0)) {
  3409  0447  192B               	btfsc	_tx_status,2
  3410  0448  2C55               	goto	l1557
  3411                           
  3412                           ;noolite.c: 284: if (((tx_status & (1<<0)) == 0)) {
  3413  0449  182B               	btfsc	_tx_status,0
  3414  044A  2C4E               	goto	l208
  3415                           
  3416                           ;noolite.c: 285: LATAbits.LATA5 = 1;
  3417  044B  0022               	movlb	2	; select bank2
  3418  044C  168C               	bsf	12,5	;volatile
  3419                           
  3420                           ;noolite.c: 286: } else {
  3421  044D  2C50               	goto	l1553
  3422  044E                     l208:	
  3423                           
  3424                           ;noolite.c: 287: LATAbits.LATA5 = 0;
  3425  044E  0022               	movlb	2	; select bank2
  3426  044F  128C               	bcf	12,5	;volatile
  3427  0450                     l1553:	
  3428                           
  3429                           ;noolite.c: 288: }
  3430                           ;noolite.c: 289: TMR0 = 196;
  3431  0450  30C4               	movlw	196
  3432  0451  0020               	movlb	0	; select bank0
  3433  0452  0095               	movwf	21	;volatile
  3434                           
  3435                           ;noolite.c: 290: tx_status |= (1<<2);
  3436  0453  152B               	bsf	_tx_status,2
  3437                           
  3438                           ;noolite.c: 291: } else {
  3439  0454  2C7A               	goto	l211
  3440  0455                     l1557:	
  3441                           
  3442                           ;noolite.c: 292: LATA ^= (1<<5);
  3443  0455  3020               	movlw	32
  3444  0456  0022               	movlb	2	; select bank2
  3445  0457  068C               	xorwf	12,f	;volatile
  3446                           
  3447                           ;noolite.c: 293: TMR0 = 196;
  3448  0458  30C4               	movlw	196
  3449  0459  0020               	movlb	0	; select bank0
  3450  045A  0095               	movwf	21	;volatile
  3451                           
  3452                           ;noolite.c: 294: tx_status &= (~(1<<2));
  3453  045B  112B               	bcf	_tx_status,2
  3454                           
  3455                           ;noolite.c: 295: countsend++;
  3456  045C  0AD3               	incf	noolite_send@countsend,f
  3457  045D  2C7A               	goto	l211
  3458  045E                     l206:	
  3459                           
  3460                           ;noolite.c: 298: LATAbits.LATA5 = 0;
  3461  045E  0022               	movlb	2	; select bank2
  3462  045F  128C               	bcf	12,5	;volatile
  3463                           
  3464                           ;noolite.c: 299: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3465  0460  30C0               	movlw	192
  3466  0461  0021               	movlb	1	; select bank1
  3467  0462  0595               	andwf	21,f	;volatile
  3468  0463  3003               	movlw	3
  3469  0464  0495               	iorwf	21,f	;volatile
  3470                           
  3471                           ;noolite.c: 300: TMR0 = 67;
  3472  0465  3043               	movlw	67
  3473  0466  0020               	movlb	0	; select bank0
  3474  0467  0095               	movwf	21	;volatile
  3475  0468  0064               	clrwdt	;# 
  3476                           
  3477                           ;noolite.c: 302: tx_status &= (~(1<<5));
  3478  0469  0020               	movlb	0	; select bank0
  3479  046A  12AB               	bcf	_tx_status,5
  3480                           
  3481                           ;noolite.c: 303: countsend = startpos;
  3482  046B  0850               	movf	noolite_send@startpos,w
  3483  046C  00D3               	movwf	noolite_send@countsend
  3484                           
  3485                           ;noolite.c: 304: countbit = endpos * 8;
  3486  046D  0855               	movf	noolite_send@endpos,w
  3487  046E  0709               	addwf	9,w
  3488  046F  0709               	addwf	9,w
  3489  0470  0709               	addwf	9,w
  3490  0471  00D1               	movwf	noolite_send@countbit
  3491                           
  3492                           ;noolite.c: 305: if (temp_send != 0) {
  3493  0472  0854               	movf	noolite_send@temp_send,w
  3494  0473  1903               	btfsc	3,2
  3495  0474  2C77               	goto	l1573
  3496                           
  3497                           ;noolite.c: 306: temp_send--;
  3498  0475  03D4               	decf	noolite_send@temp_send,f
  3499                           
  3500                           ;noolite.c: 307: } else {
  3501  0476  2C7A               	goto	l211
  3502  0477                     l1573:	
  3503                           
  3504                           ;noolite.c: 308: TMR0 = 0;
  3505  0477  0195               	clrf	21	;volatile
  3506                           
  3507                           ;noolite.c: 309: tx_status |= (1<<3);
  3508  0478  15AB               	bsf	_tx_status,3
  3509                           
  3510                           ;noolite.c: 310: break;
  3511  0479  2C97               	goto	l214
  3512  047A                     l211:	
  3513                           
  3514                           ;noolite.c: 311: }
  3515                           ;noolite.c: 312: }
  3516                           ;noolite.c: 313: if (((tx_status & (1<<5)) == 0)) {
  3517  047A  1AAB               	btfsc	_tx_status,5
  3518  047B  2C95               	goto	l215
  3519                           
  3520                           ;noolite.c: 314: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3521  047C  0853               	movf	noolite_send@countsend,w
  3522  047D  00F3               	movwf	??_noolite_send
  3523  047E  36F3               	lsrf	??_noolite_send,f
  3524  047F  36F3               	lsrf	??_noolite_send,f
  3525  0480  36F3               	lsrf	??_noolite_send,f
  3526  0481  0873               	movf	??_noolite_send,w
  3527  0482  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3528  0483  0086               	movwf	6
  3529  0484  3001               	movlw	1
  3530  0485  0187               	clrf	7
  3531  0486  00F4               	movwf	??_noolite_send+1
  3532  0487  0853               	movf	noolite_send@countsend,w
  3533  0488  3907               	andlw	7
  3534  0489  0A89               	incf	9,f
  3535  048A  2C8C               	goto	u964
  3536  048B                     u965:	
  3537  048B  35F4               	lslf	??_noolite_send+1,f
  3538  048C                     u964:	
  3539  048C  0B89               	decfsz	9,f
  3540  048D  2C8B               	goto	u965
  3541  048E  0874               	movf	??_noolite_send+1,w
  3542  048F  0501               	andwf	1,w
  3543  0490  1903               	btfsc	3,2
  3544  0491  2C94               	goto	l216
  3545                           
  3546                           ;noolite.c: 315: tx_status |= (1<<0);
  3547  0492  142B               	bsf	_tx_status,0
  3548                           
  3549                           ;noolite.c: 316: } else {
  3550  0493  2C95               	goto	l215
  3551  0494                     l216:	
  3552                           
  3553                           ;noolite.c: 317: tx_status &= (~(1<<0));
  3554  0494  102B               	bcf	_tx_status,0
  3555  0495                     l215:	
  3556                           
  3557                           ;noolite.c: 318: }
  3558                           ;noolite.c: 319: }
  3559                           ;noolite.c: 320: TMR0IF = 0;
  3560  0495  110B               	bcf	11,2	;volatile
  3561  0496  2C3D               	goto	l203
  3562  0497                     l214:	
  3563                           
  3564                           ;noolite.c: 321: }
  3565                           ;noolite.c: 322: }
  3566                           ;noolite.c: 323: TMR0IF = 0;
  3567  0497  110B               	bcf	11,2	;volatile
  3568                           
  3569                           ;noolite.c: 324: LATAbits.LATA5 = 0;
  3570  0498  0022               	movlb	2	; select bank2
  3571  0499  128C               	bcf	12,5	;volatile
  3572  049A  0008               	return
  3573  049B                     __end_of_noolite_send:	
  3574                           
  3575                           	psect	text5
  3576  0153                     __ptext5:	
  3577 ;; *************** function _Init_TypeFromFlash *****************
  3578 ;; Defined at:
  3579 ;;		line 22 in file "user_functions.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  type            2    0[COMMON] PTR const unsigned int 
  3582 ;;		 -> Type(16), 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      unsigned char 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/2
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1
  3594 ;;      Params:         2       0       0
  3595 ;;      Locals:         0       0       0
  3596 ;;      Temps:          2       0       0
  3597 ;;      Totals:         4       0       0
  3598 ;;Total ram usage:        4 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; This function calls:
  3601 ;;		Nothing
  3602 ;; This function is called by:
  3603 ;;		_main
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           
  3608                           ;psect for function _Init_TypeFromFlash
  3609  0153                     _Init_TypeFromFlash:	
  3610                           
  3611                           ;user_functions.c: 23: if (((type[0] >> 8) == 0x5A) && ((type[0] & 0xFF) < 4)) {
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _Init_TypeFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3615  0153  0870               	movf	Init_TypeFromFlash@type,w
  3616  0154  0084               	movwf	4
  3617  0155  0871               	movf	Init_TypeFromFlash@type+1,w
  3618  0156  0085               	movwf	5
  3619  0157  3F00               	moviw [0]fsr0
  3620  0158  00F2               	movwf	??_Init_TypeFromFlash
  3621  0159  3F01               	moviw [1]fsr0
  3622  015A  00F3               	movwf	??_Init_TypeFromFlash+1
  3623  015B  00F2               	movwf	??_Init_TypeFromFlash
  3624  015C  305A               	movlw	90
  3625  015D  01F3               	clrf	??_Init_TypeFromFlash+1
  3626  015E  0672               	xorwf	??_Init_TypeFromFlash,w
  3627  015F  1D03               	btfss	3,2
  3628  0160  3400               	retlw	0
  3629  0161  0870               	movf	Init_TypeFromFlash@type,w
  3630  0162  0084               	movwf	4
  3631  0163  0871               	movf	Init_TypeFromFlash@type+1,w
  3632  0164  0085               	movwf	5
  3633  0165  0800               	movf	0,w	;code access
  3634  0166  00F2               	movwf	??_Init_TypeFromFlash
  3635  0167  3004               	movlw	4
  3636  0168  0272               	subwf	??_Init_TypeFromFlash,w
  3637  0169  1803               	skipnc
  3638  016A  3400               	retlw	0
  3639                           
  3640                           ;user_functions.c: 24: return (type[0] & 0xFF);
  3641  016B  0870               	movf	Init_TypeFromFlash@type,w
  3642  016C  0084               	movwf	4
  3643  016D  0871               	movf	Init_TypeFromFlash@type+1,w
  3644  016E  0085               	movwf	5
  3645  016F  0800               	movf	0,w	;code access
  3646  0170  0008               	return
  3647  0171                     __end_of_Init_TypeFromFlash:	
  3648                           ;user_functions.c: 26: return 0;
  3649                           
  3650                           
  3651                           	psect	text6
  3652  0268                     __ptext6:	
  3653 ;; *************** function _Init_TxStatusFromFlash *****************
  3654 ;; Defined at:
  3655 ;;		line 30 in file "user_functions.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  txStatus        2    0[COMMON] PTR const unsigned int 
  3658 ;;		 -> TxStatus(16), 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  cellNum         1    8[COMMON] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      unsigned char 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3665 ;; Tracked objects:
  3666 ;;		On entry : 1F/0
  3667 ;;		On exit  : 1F/0
  3668 ;;		Unchanged: 1F/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1
  3670 ;;      Params:         2       0       0
  3671 ;;      Locals:         1       0       0
  3672 ;;      Temps:          6       0       0
  3673 ;;      Totals:         9       0       0
  3674 ;;Total ram usage:        9 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_main
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _Init_TxStatusFromFlash
  3685  0268                     _Init_TxStatusFromFlash:	
  3686                           
  3687                           ;user_functions.c: 31: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _Init_TxStatusFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3691  0268  01F8               	clrf	Init_TxStatusFromFlash@cellNum
  3692  0269                     l1641:	
  3693                           
  3694                           ;user_functions.c: 32: if (txStatus[cellNum] == 0xFFFF) {
  3695  0269  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3696  026A  00F2               	movwf	??_Init_TxStatusFromFlash
  3697  026B  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3698  026C  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3699  026D  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3700  026E  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3701  026F  0772               	addwf	??_Init_TxStatusFromFlash,w
  3702  0270  0084               	movwf	4
  3703  0271  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3704  0272  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3705  0273  0085               	movwf	5
  3706  0274  0012               	moviw fsr0++
  3707  0275  3AFF               	xorlw	255
  3708  0276  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3709  0277  0012               	moviw fsr0++
  3710  0278  3AFF               	xorlw	255
  3711  0279  04F4               	iorwf	??_Init_TxStatusFromFlash+2,f
  3712  027A  1D03               	btfss	3,2
  3713  027B  2AC4               	goto	l1663
  3714                           
  3715                           ;user_functions.c: 33: if (cellNum > 0) {
  3716  027C  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3717  027D  1903               	btfsc	3,2
  3718  027E  3400               	retlw	0
  3719                           
  3720                           ;user_functions.c: 34: if (((txStatus[cellNum - 1] >> 8) == 0x5A) && ((txStatus[cellNum 
      +                          - 1] & 0xFF) < 3)) {
  3721  027F  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3722  0280  00F2               	movwf	??_Init_TxStatusFromFlash
  3723  0281  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3724  0282  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3725  0283  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3726  0284  0872               	movf	??_Init_TxStatusFromFlash,w
  3727  0285  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  3728  0286  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3729  0287  0873               	movf	??_Init_TxStatusFromFlash+1,w
  3730  0288  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  3731  0289  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3732  028A  30FE               	movlw	254
  3733  028B  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  3734  028C  0084               	movwf	4
  3735  028D  30FF               	movlw	255
  3736  028E  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  3737  028F  0085               	movwf	5
  3738  0290  3F00               	moviw [0]fsr0
  3739  0291  00F6               	movwf	??_Init_TxStatusFromFlash+4
  3740  0292  3F01               	moviw [1]fsr0
  3741  0293  00F7               	movwf	??_Init_TxStatusFromFlash+5
  3742  0294  00F6               	movwf	??_Init_TxStatusFromFlash+4
  3743  0295  305A               	movlw	90
  3744  0296  01F7               	clrf	??_Init_TxStatusFromFlash+5
  3745  0297  0676               	xorwf	??_Init_TxStatusFromFlash+4,w
  3746  0298  1D03               	btfss	3,2
  3747  0299  3400               	retlw	0
  3748  029A  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3749  029B  00F2               	movwf	??_Init_TxStatusFromFlash
  3750  029C  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3751  029D  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3752  029E  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3753  029F  0872               	movf	??_Init_TxStatusFromFlash,w
  3754  02A0  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  3755  02A1  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3756  02A2  0873               	movf	??_Init_TxStatusFromFlash+1,w
  3757  02A3  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  3758  02A4  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3759  02A5  30FE               	movlw	254
  3760  02A6  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  3761  02A7  0084               	movwf	4
  3762  02A8  30FF               	movlw	255
  3763  02A9  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  3764  02AA  0085               	movwf	5
  3765  02AB  0800               	movf	0,w	;code access
  3766  02AC  00F6               	movwf	??_Init_TxStatusFromFlash+4
  3767  02AD  3003               	movlw	3
  3768  02AE  0276               	subwf	??_Init_TxStatusFromFlash+4,w
  3769  02AF  1803               	skipnc
  3770  02B0  3400               	retlw	0
  3771                           
  3772                           ;user_functions.c: 35: return txStatus[cellNum - 1];
  3773  02B1  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3774  02B2  00F2               	movwf	??_Init_TxStatusFromFlash
  3775  02B3  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3776  02B4  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3777  02B5  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3778  02B6  0872               	movf	??_Init_TxStatusFromFlash,w
  3779  02B7  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  3780  02B8  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3781  02B9  0873               	movf	??_Init_TxStatusFromFlash+1,w
  3782  02BA  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  3783  02BB  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3784  02BC  30FE               	movlw	254
  3785  02BD  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  3786  02BE  0084               	movwf	4
  3787  02BF  30FF               	movlw	255
  3788  02C0  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  3789  02C1  0085               	movwf	5
  3790  02C2  0800               	movf	0,w	;code access
  3791  02C3  0008               	return
  3792  02C4                     l1663:	
  3793                           ;user_functions.c: 37: return 0;
  3794                           
  3795                           
  3796                           ;user_functions.c: 43: if (cellNum == 7) {
  3797  02C4  3007               	movlw	7
  3798  02C5  0678               	xorwf	Init_TxStatusFromFlash@cellNum,w
  3799  02C6  1D03               	btfss	3,2
  3800  02C7  2AFB               	goto	l1679
  3801                           
  3802                           ;user_functions.c: 44: if (((txStatus[cellNum] >> 8) == 0x5A) && ((txStatus[cellNum] & 0
      +                          xFF) < 3)) {
  3803  02C8  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3804  02C9  00F2               	movwf	??_Init_TxStatusFromFlash
  3805  02CA  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3806  02CB  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3807  02CC  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3808  02CD  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3809  02CE  0772               	addwf	??_Init_TxStatusFromFlash,w
  3810  02CF  0084               	movwf	4
  3811  02D0  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3812  02D1  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3813  02D2  0085               	movwf	5
  3814  02D3  3F00               	moviw [0]fsr0
  3815  02D4  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3816  02D5  3F01               	moviw [1]fsr0
  3817  02D6  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3818  02D7  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3819  02D8  305A               	movlw	90
  3820  02D9  01F5               	clrf	??_Init_TxStatusFromFlash+3
  3821  02DA  0674               	xorwf	??_Init_TxStatusFromFlash+2,w
  3822  02DB  1D03               	btfss	3,2
  3823  02DC  3400               	retlw	0
  3824  02DD  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3825  02DE  00F2               	movwf	??_Init_TxStatusFromFlash
  3826  02DF  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3827  02E0  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3828  02E1  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3829  02E2  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3830  02E3  0772               	addwf	??_Init_TxStatusFromFlash,w
  3831  02E4  0084               	movwf	4
  3832  02E5  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3833  02E6  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3834  02E7  0085               	movwf	5
  3835  02E8  0800               	movf	0,w	;code access
  3836  02E9  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3837  02EA  3003               	movlw	3
  3838  02EB  0274               	subwf	??_Init_TxStatusFromFlash+2,w
  3839  02EC  1803               	skipnc
  3840  02ED  3400               	retlw	0
  3841                           
  3842                           ;user_functions.c: 45: return txStatus[cellNum];
  3843  02EE  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3844  02EF  00F2               	movwf	??_Init_TxStatusFromFlash
  3845  02F0  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3846  02F1  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3847  02F2  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3848  02F3  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3849  02F4  0772               	addwf	??_Init_TxStatusFromFlash,w
  3850  02F5  0084               	movwf	4
  3851  02F6  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3852  02F7  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3853  02F8  0085               	movwf	5
  3854  02F9  0800               	movf	0,w	;code access
  3855  02FA  0008               	return
  3856  02FB                     l1679:	
  3857  02FB  3008               	movlw	8
  3858  02FC  0AF8               	incf	Init_TxStatusFromFlash@cellNum,f
  3859  02FD  0278               	subwf	Init_TxStatusFromFlash@cellNum,w
  3860  02FE  1803               	btfsc	3,0
  3861  02FF  3400               	retlw	0
  3862  0300  2A69               	goto	l1641
  3863  0301                     __end_of_Init_TxStatusFromFlash:	
  3864                           
  3865                           	psect	text7
  3866  0130                     __ptext7:	
  3867 ;; *************** function _Init_IO *****************
  3868 ;; Defined at:
  3869 ;;		line 46 in file "periph_config.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;		None
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2
  3878 ;; Tracked objects:
  3879 ;;		On entry : B1F/0
  3880 ;;		On exit  : B1F/2
  3881 ;;		Unchanged: B00/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1
  3883 ;;      Params:         0       0       0
  3884 ;;      Locals:         0       0       0
  3885 ;;      Temps:          0       0       0
  3886 ;;      Totals:         0       0       0
  3887 ;;Total ram usage:        0 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_main
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           
  3897                           ;psect for function _Init_IO
  3898  0130                     _Init_IO:	
  3899                           
  3900                           ;periph_config.c: 47: OPTION_REGbits.nWPUEN = 0;
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in _Init_IO: [wreg+status,2]
  3904  0130  0021               	movlb	1	; select bank1
  3905  0131  1395               	bcf	21,7	;volatile
  3906                           
  3907                           ;periph_config.c: 48: TRISA = 0x1F;
  3908  0132  301F               	movlw	31
  3909  0133  008C               	movwf	12	;volatile
  3910                           
  3911                           ;periph_config.c: 49: ANSELA = 0;
  3912  0134  0023               	movlb	3	; select bank3
  3913  0135  018C               	clrf	12	;volatile
  3914                           
  3915                           ;periph_config.c: 50: WPUA = 0x08;
  3916  0136  3008               	movlw	8
  3917  0137  0024               	movlb	4	; select bank4
  3918  0138  008C               	movwf	12	;volatile
  3919                           
  3920                           ;periph_config.c: 52: TRISC = 0x00;
  3921  0139  0021               	movlb	1	; select bank1
  3922  013A  018E               	clrf	14	;volatile
  3923                           
  3924                           ;periph_config.c: 53: ANSELC = 0;
  3925  013B  0023               	movlb	3	; select bank3
  3926  013C  018E               	clrf	14	;volatile
  3927                           
  3928                           ;periph_config.c: 54: LATC = 0x00;
  3929  013D  0022               	movlb	2	; select bank2
  3930  013E  018E               	clrf	14	;volatile
  3931  013F  0008               	return
  3932  0140                     __end_of_Init_IO:	
  3933                           
  3934                           	psect	text8
  3935  0123                     __ptext8:	
  3936 ;; *************** function _Init_CLK *****************
  3937 ;; Defined at:
  3938 ;;		line 15 in file "periph_config.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		wreg, status,2, status,0
  3947 ;; Tracked objects:
  3948 ;;		On entry : B1F/2
  3949 ;;		On exit  : B1F/1
  3950 ;;		Unchanged: B00/0
  3951 ;; Data sizes:     COMMON   BANK0   BANK1
  3952 ;;      Params:         0       0       0
  3953 ;;      Locals:         0       0       0
  3954 ;;      Temps:          0       0       0
  3955 ;;      Totals:         0       0       0
  3956 ;;Total ram usage:        0 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_main
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           
  3966                           ;psect for function _Init_CLK
  3967  0123                     _Init_CLK:	
  3968                           
  3969                           ;periph_config.c: 18: OSCCONbits.IRCF = 0b1110;
  3970                           
  3971                           ;incstack = 0
  3972                           ; Regs used in _Init_CLK: [wreg+status,2+status,0]
  3973  0123  0021               	movlb	1	; select bank1
  3974  0124  0819               	movf	25,w	;volatile
  3975  0125  3987               	andlw	-121
  3976  0126  3870               	iorlw	112
  3977  0127  0099               	movwf	25	;volatile
  3978                           
  3979                           ;periph_config.c: 34: WDTCONbits.WDTPS = 0b01011;
  3980  0128  0817               	movf	23,w	;volatile
  3981  0129  39C1               	andlw	-63
  3982  012A  3816               	iorlw	22
  3983  012B  0097               	movwf	23	;volatile
  3984                           
  3985                           ;periph_config.c: 41: WDTCONbits.SWDTEN = 1;
  3986  012C  1417               	bsf	23,0	;volatile
  3987  012D                     l273:	
  3988                           ;periph_config.c: 42: while (!OSCSTATbits.HFIOFR) {
  3989                           
  3990  012D  1A1A               	btfsc	26,4	;volatile
  3991  012E  0008               	return
  3992  012F  292D               	goto	l273
  3993  0130                     __end_of_Init_CLK:	
  3994                           
  3995                           	psect	text9
  3996  010A                     __ptext9:	
  3997 ;; *************** function _Init_ADC *****************
  3998 ;; Defined at:
  3999 ;;		line 57 in file "periph_config.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      void 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0
  4008 ;; Tracked objects:
  4009 ;;		On entry : B1F/1
  4010 ;;		On exit  : B1F/1
  4011 ;;		Unchanged: B00/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1
  4013 ;;      Params:         0       0       0
  4014 ;;      Locals:         0       0       0
  4015 ;;      Temps:          0       0       0
  4016 ;;      Totals:         0       0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_main
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function _Init_ADC
  4028  010A                     _Init_ADC:	
  4029                           
  4030                           ;periph_config.c: 58: FVRCON = 0;
  4031                           
  4032                           ;incstack = 0
  4033                           ; Regs used in _Init_ADC: [wreg+status,2+status,0]
  4034  010A  0022               	movlb	2	; select bank2
  4035  010B  0197               	clrf	23	;volatile
  4036                           
  4037                           ;periph_config.c: 60: ADCON1bits.ADFM = 1;
  4038  010C  0021               	movlb	1	; select bank1
  4039  010D  179E               	bsf	30,7	;volatile
  4040                           
  4041                           ;periph_config.c: 61: ADCON1bits.ADCS = 0b001;
  4042  010E  081E               	movf	30,w	;volatile
  4043  010F  398F               	andlw	-113
  4044  0110  3810               	iorlw	16
  4045  0111  009E               	movwf	30	;volatile
  4046                           
  4047                           ;periph_config.c: 64: ADCON1bits.ADPREF = 0b00;
  4048  0112  30FC               	movlw	-4
  4049  0113  059E               	andwf	30,f	;volatile
  4050                           
  4051                           ;periph_config.c: 66: ADCON0bits.ADON = 0;
  4052  0114  101D               	bcf	29,0	;volatile
  4053  0115  0008               	return
  4054  0116                     __end_of_Init_ADC:	
  4055                           
  4056                           	psect	text10
  4057  0140                     __ptext10:	
  4058 ;; *************** function _FlashWrite *****************
  4059 ;; Defined at:
  4060 ;;		line 43 in file "FLASH.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  addr            2    0[COMMON] unsigned int 
  4063 ;;  flash_data      2    2[COMMON] unsigned int 
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;		None
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, status,2, status,0, pclath, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 1F/3
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMMON   BANK0   BANK1
  4075 ;;      Params:         4       0       0
  4076 ;;      Locals:         0       0       0
  4077 ;;      Temps:          0       0       0
  4078 ;;      Totals:         4       0       0
  4079 ;;Total ram usage:        4 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:    1
  4082 ;; This function calls:
  4083 ;;		_FlashUnlock
  4084 ;; This function is called by:
  4085 ;;		_main
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _FlashWrite
  4091  0140                     _FlashWrite:	
  4092                           
  4093                           ;FLASH.c: 44: PMCON1bits.CFGS = 0;
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in _FlashWrite: [wreg+status,2+status,0+pclath+cstack]
  4097  0140  0023               	movlb	3	; select bank3
  4098  0141  1315               	bcf	21,6	;volatile
  4099                           
  4100                           ;FLASH.c: 45: PMADRH = (unsigned char) (addr >> 8);
  4101  0142  0871               	movf	FlashWrite@addr+1,w
  4102  0143  0092               	movwf	18	;volatile
  4103                           
  4104                           ;FLASH.c: 46: PMADRL = (unsigned char) (addr);
  4105  0144  0870               	movf	FlashWrite@addr,w
  4106  0145  0091               	movwf	17	;volatile
  4107                           
  4108                           ;FLASH.c: 47: PMCON1bits.FREE = 0;
  4109  0146  1215               	bcf	21,4	;volatile
  4110                           
  4111                           ;FLASH.c: 48: PMCON1bits.LWLO = 1;
  4112  0147  1695               	bsf	21,5	;volatile
  4113                           
  4114                           ;FLASH.c: 49: PMCON1bits.WREN = 1;
  4115  0148  1515               	bsf	21,2	;volatile
  4116                           
  4117                           ;FLASH.c: 50: PMDATH = (unsigned char) (flash_data >> 8);
  4118  0149  0873               	movf	FlashWrite@flash_data+1,w
  4119  014A  0094               	movwf	20	;volatile
  4120                           
  4121                           ;FLASH.c: 51: PMDATL = (unsigned char) flash_data;
  4122  014B  0872               	movf	FlashWrite@flash_data,w
  4123  014C  0093               	movwf	19	;volatile
  4124                           
  4125                           ;FLASH.c: 52: PMCON1bits.LWLO = 0;
  4126  014D  1295               	bcf	21,5	;volatile
  4127                           
  4128                           ;FLASH.c: 53: INTCONbits.GIE = 0;
  4129  014E  138B               	bcf	11,7	;volatile
  4130                           
  4131                           ;FLASH.c: 54: FlashUnlock();
  4132  014F  2104               	fcall	_FlashUnlock
  4133                           
  4134                           ;FLASH.c: 55: INTCONbits.GIE = 1;
  4135  0150  178B               	bsf	11,7	;volatile
  4136                           
  4137                           ;FLASH.c: 56: PMCON1bits.WREN = 0;
  4138  0151  1115               	bcf	21,2	;volatile
  4139  0152  0008               	return
  4140  0153                     __end_of_FlashWrite:	
  4141                           
  4142                           	psect	text11
  4143  0116                     __ptext11:	
  4144 ;; *************** function _FlashEraseRow *****************
  4145 ;; Defined at:
  4146 ;;		line 31 in file "FLASH.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  rowAddr         2    0[COMMON] unsigned int 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, pclath, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 1D/2
  4157 ;;		On exit  : 1F/3
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMMON   BANK0   BANK1
  4160 ;;      Params:         2       0       0
  4161 ;;      Locals:         0       0       0
  4162 ;;      Temps:          0       0       0
  4163 ;;      Totals:         2       0       0
  4164 ;;Total ram usage:        2 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    1
  4167 ;; This function calls:
  4168 ;;		_FlashUnlock
  4169 ;; This function is called by:
  4170 ;;		_main
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           
  4175                           ;psect for function _FlashEraseRow
  4176  0116                     _FlashEraseRow:	
  4177                           
  4178                           ;FLASH.c: 32: PMCON1bits.CFGS = 0;
  4179                           
  4180                           ;incstack = 0
  4181                           ; Regs used in _FlashEraseRow: [wreg+status,2+status,0+pclath+cstack]
  4182  0116  0023               	movlb	3	; select bank3
  4183  0117  1315               	bcf	21,6	;volatile
  4184                           
  4185                           ;FLASH.c: 33: PMADRH = (uint8_t) (rowAddr >> 8);
  4186  0118  0871               	movf	FlashEraseRow@rowAddr+1,w
  4187  0119  0092               	movwf	18	;volatile
  4188                           
  4189                           ;FLASH.c: 34: PMADRL = (uint8_t) (rowAddr);
  4190  011A  0870               	movf	FlashEraseRow@rowAddr,w
  4191  011B  0091               	movwf	17	;volatile
  4192                           
  4193                           ;FLASH.c: 35: PMCON1bits.FREE = 1;
  4194  011C  1615               	bsf	21,4	;volatile
  4195                           
  4196                           ;FLASH.c: 36: PMCON1bits.WREN = 1;
  4197  011D  1515               	bsf	21,2	;volatile
  4198                           
  4199                           ;FLASH.c: 37: INTCONbits.GIE = 0;
  4200  011E  138B               	bcf	11,7	;volatile
  4201                           
  4202                           ;FLASH.c: 38: FlashUnlock();
  4203  011F  2104               	fcall	_FlashUnlock
  4204                           
  4205                           ;FLASH.c: 39: INTCONbits.GIE = 1;
  4206  0120  178B               	bsf	11,7	;volatile
  4207                           
  4208                           ;FLASH.c: 40: PMCON1bits.WREN = 0;
  4209  0121  1115               	bcf	21,2	;volatile
  4210  0122  0008               	return
  4211  0123                     __end_of_FlashEraseRow:	
  4212                           
  4213                           	psect	text12
  4214  0104                     __ptext12:	
  4215 ;; *************** function _FlashUnlock *****************
  4216 ;; Defined at:
  4217 ;;		line 25 in file "FLASH.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;		None
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg
  4226 ;; Tracked objects:
  4227 ;;		On entry : 1F/3
  4228 ;;		On exit  : 1F/3
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1
  4231 ;;      Params:         0       0       0
  4232 ;;      Locals:         0       0       0
  4233 ;;      Temps:          0       0       0
  4234 ;;      Totals:         0       0       0
  4235 ;;Total ram usage:        0 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_FlashEraseRow
  4241 ;;		_FlashWrite
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function _FlashUnlock
  4247  0104                     _FlashUnlock:	
  4248                           
  4249                           ;FLASH.c: 26: PMCON2 = 0x55;
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in _FlashUnlock: [wreg]
  4253  0104  3055               	movlw	85
  4254  0105  0096               	movwf	22	;volsfr
  4255                           
  4256                           ;FLASH.c: 27: PMCON2 = 0xAA;
  4257  0106  30AA               	movlw	170
  4258  0107  0096               	movwf	22	;volsfr
  4259                           
  4260                           ;FLASH.c: 28: PMCON1bits.WR = 1;
  4261  0108  1495               	bsf	21,1	;volatile
  4262  0109  0008               	return
  4263  010A                     __end_of_FlashUnlock:	
  4264  007E                     btemp	set	126	;btemp
  4265  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     33      69
    BANK1            32      0       0

Pointer List with Targets:

    KeyLongHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyLongHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    KeyOffHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyOffHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    Init_TxStatusFromFlash@txStatus	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TypeFromFlash@type	PTR const unsigned int  size(2) Largest target is 16
		 -> Type(CODE[16]), 

    noolite_send@data	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_KeyOffHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK0

    _main->_KeyLongHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   16574
                                             22 BANK0     11    11      0
                      _FlashEraseRow
                         _FlashWrite
                           _Init_ADC
                           _Init_CLK
                            _Init_IO
             _Init_TxStatusFromFlash
                 _Init_TypeFromFlash
                     _KeyLongHandler
                      _KeyOffHandler
                            _RF_Init
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _RF_Init                                              7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _KeyOffHandler                                        5     2      3    4686
                                             11 COMMON     3     0      3
                                             18 BANK0      2     2      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _KeyLongHandler                                       5     1      4    5248
                                             11 COMMON     1     1      0
                                             18 BANK0      4     0      4
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _noolite_send                                        29    26      3    3312
                                              0 COMMON    11     8      3
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _Init_TypeFromFlash                                   4     2      2     194
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_TxStatusFromFlash                               9     7      2     462
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_CLK                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlashWrite                                           4     0      4     858
                                              0 COMMON     4     0      4
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (1) _FlashEraseRow                                        2     0      2     173
                                              0 COMMON     2     0      2
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (2) _FlashUnlock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashEraseRow
     _FlashUnlock
   _FlashWrite
     _FlashUnlock
   _Init_ADC
   _Init_CLK
   _Init_IO
   _Init_TxStatusFromFlash
   _Init_TypeFromFlash
   _KeyLongHandler
     _noolite_send
   _KeyOffHandler
     _noolite_send
   _RF_Init
   _noolite_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      53       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     21      45       6       86.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      53       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Sep 08 12:37:52 2018

                     __CFG_CP$ON 0000                               l66 04FB                               l83 051A  
                             l84 0533                               l85 053C                               l77 0505  
                             l94 05AF                               l88 0574                              l211 047A  
                            l203 043D                              l141 073E                              l214 0497  
                            l206 045E                              l215 0495                              l216 0494  
                            l208 044E                              l145 079D                              l181 0216  
                            l190 031F                              l182 0266                              l273 012D  
                            l187 0315                              l189 0323                              u854 0401  
                            u855 0400                              u964 048C                              u965 048B  
                   __CFG_IDLOC0$ 0000                     __CFG_IDLOC1$ 0007                     __CFG_IDLOC2$ 0000  
                   __CFG_IDLOC3$ 0007                     __CFG_BORV$LO 0000                              wreg 0009  
                    main@chn_243 0062                      main@chn_244 0063                      main@chn_245 0064  
                    main@cellNum 0060         ??_Init_TxStatusFromFlash 0072                     __CFG_LVP$OFF 0000  
                ?_KeyLongHandler 0056                             l2003 0728                             l2021 0767  
                           l2013 073F                             l2005 0736                             l2009 0739  
                           l2043 0765                             l2109 0524                             l2039 074A  
                           l2049 07A8                             l1507 03EC                             l1435 0320  
                           l1509 0416                             l1453 0349                             l1429 0317  
                           l1447 0332                             l1615 0214                             l1641 0269  
                           l1553 0450                             l1803 04DC                             l1573 0477  
                           l1557 0455                             l1469 03B3                             l1813 04E8  
                           l1663 02C4                             l1751 0197                             l1831 04FF  
                           l1497 040F                             l1489 0409                             l1729 01B1  
                           l1905 05B2                             l1833 0500                             l1931 0613  
                           l1843 0515                             l1851 051B                             l1819 04F2  
                           l1749 0191                             l1941 0629                             l1933 0614  
                           l1925 0602                             l1837 0508                             l1853 052F  
                           l1679 02FB                             l1951 0653                             l1943 0635  
                           l1927 0611                             l1855 0531                             l1839 050F  
                           l1767 04B0                             l1963 0680                             l1947 063C  
                           l1883 0577                             l1875 0560                             l1867 053F  
                           l1795 04F9                             l1981 06C7                             l1949 0647  
                           l1877 056E                             l1797 04D2                             l1991 06F8  
                           l1983 06D5                             l1975 06A7                             l1969 0695  
                           l1977 06B5                             l1897 059E                             l1987 06DC  
                           l1899 05AD                             l1997 0716                             l1989 06EA  
                           _LATA 010C                             _LATC 010E                             u1647 05F0  
                           u1657 07A3                             u1667 01BC                             u1677 01CB  
                           u1687 0431                             _TMR0 0015                             _WPUA 020C  
                           _Keys 002C                     _startaddress 0020                     __CFG_WRT$OFF 0000  
                           _Type 07C0                             _main 049B                  __end_of_RF_Init 0268  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           btemp 007E     noolite_send@noo_send_command 0070                             start 0001  
            __end_of_FlashUnlock 010A                    __CFG_MCLRE$ON 0000                  __end_of_Init_IO 0140  
                  __CFG_LPBOR$ON 0000                            ?_main 0070                       _FlashWrite 0140  
                          _PORTA 000C                            _TRISA 008C                            _TRISC 008E  
                  __CFG_PWRTE$ON 0000                  ??_KeyOffHandler 0056          __p_system_settings_text 07EE  
                   _Type_absaddr 07C0                            status 0003                            wtemp0 007E  
                __initialization 07E0                     __end_of_Type 07D0                     __end_of_main 07C0  
               __end_of_Init_ADC 0116                 __end_of_Init_CLK 0130                           ??_main 005A  
               _TxStatus_absaddr 07D0   Init_TxStatusFromFlash@txStatus 0070                 __end_of_TxStatus 07E0  
__size_of_Init_TxStatusFromFlash 0099                        ??_RF_Init 0070                           _ANSELA 018C  
                         _ANSELC 018E       __end_of_Init_TypeFromFlash 0171                           _FVRCON 0117  
                    _FlashUnlock 0104                           _PMADRH 0192                           _PMADRL 0191  
                         _PMDATH 0194                           _PMDATL 0193                           _PMCON2 0196  
                         _TMR0IE 005D                           _TMR0IF 005A                     __p_Type_text 07C0  
                      ??_Init_IO 0070                   __CFG_STVREN$ON 0000                  _system_settings 07EE  
           noolite_send@countbit 0051            __end_of_FlashEraseRow 0123                      ?_FlashWrite 0070  
                noolite_send@chn 0052             noolite_send@startpos 0050          __end_of__initialization 07E6  
  Init_TxStatusFromFlash@cellNum 0078                   main@adrToWrite 005E                   __pcstackCOMMON 0070  
         _Init_TxStatusFromFlash 0268                 ??_KeyLongHandler 007B                   _OPTION_REGbits 0095  
          KeyLongHandler@nooData 0059                       __pbssBANK0 0020                        ?_Init_ADC 0070  
                      ?_Init_CLK 0070          __end_of_system_settings 07FF              __size_of_FlashWrite 0013  
                     __pmaintext 049B                          _RF_Init 01DD             FlashEraseRow@rowAddr 0070  
                     ??_Init_ADC 0070                       ??_Init_CLK 0070                          _DevMode 0027  
                        _DevType 0028                          _Init_IO 0130                    ?_noolite_send 0070  
         Init_TypeFromFlash@type 0070                          __ptext1 01DD                          __ptext2 019D  
                        __ptext3 0171                          __ptext4 0301                          __ptext5 0153  
                        __ptext6 0268                          __ptext7 0130                          __ptext8 0123  
                        __ptext9 010A            noolite_send@countsend 0053                          main@chn 0061  
          __end_of_KeyOffHandler 01DD                          clrloop0 07E9             end_of_initialization 07E6  
                   ?_FlashUnlock 0070                 noolite_send@data 0072            noolite_send@temp_send 0054  
                 FlashWrite@addr 0070               _Init_TypeFromFlash 0153                   ??_noolite_send 0073  
            ?_Init_TypeFromFlash 0070                     ??_FlashWrite 0074                 __CFG_FOSC$INTOSC 0000  
           ??_Init_TypeFromFlash 0072          ?_Init_TxStatusFromFlash 0070               __end_of_FlashWrite 0153  
            start_initialization 07E0   __end_of_Init_TxStatusFromFlash 0301                __size_of_Init_ADC 000C  
              __size_of_Init_CLK 000D           __size_of_FlashEraseRow 000D                 __p_TxStatus_text 07D0  
                      ___latbits 0000                    __pcstackBANK0 0044                         ?_RF_Init 0070  
           __end_of_noolite_send 049B             __size_of_FlashUnlock 0006                         ?_Init_IO 0070  
           KeyOffHandler@nooData 007D                    _noo_send_data 0040                    _FlashEraseRow 0116  
               __CFG_WDTE$SWDTEN 0000          __size_of_KeyLongHandler 002C                         _LATAbits 010C  
                       _LATCbits 010E                        clear_ram0 07E8                 KeyOffHandler@cmd 007C  
               KeyOffHandler@chn 007B                 KeyOffHandler@key 0057      noolite_send@noo_send_buffer 0044  
    noolite_send@noo_send_format 0071                       _ADCON0bits 009D                       _ADCON1bits 009E  
                 ?_FlashEraseRow 0070                        _tx_status 002B                 __size_of_RF_Init 008B  
                       _Init_ADC 010A                         _Init_CLK 0123                     _SkipHandling 0026  
               _noo_address_type 0024                 __size_of_Init_IO 0010               noolite_send@endpos 0055  
                       _TxStatus 07D0           __size_of_KeyOffHandler 0040            __size_of_noolite_send 019A  
                       __ptext10 0140                         __ptext11 0116                         __ptext12 0104  
            _OffDelayTicks_100ms 0025                      _tick3_100ms 0029                    __size_of_main 0325  
    __size_of_Init_TypeFromFlash 001E                  ??_FlashEraseRow 0072                     _noolite_send 0301  
                    _OSCSTATbits 009A                       _INTCONbits 000B                __CFG_BOREN$NSLEEP 0000  
                  _KeyOffHandler 019D                   _KeyLongHandler 0171     KeyLongHandler@ticksToTrigger 0058  
                     _PMCON1bits 0195             FlashWrite@flash_data 0072                __CFG_CLKOUTEN$OFF 0000  
             _LedPulseTick_100ms 002A                       _OSCCONbits 0099                KeyLongHandler@cmd 0057  
              KeyLongHandler@chn 0056                       _OPTION_REG 0095                KeyLongHandler@key 007B  
                     _WDTCONbits 0097           __end_of_KeyLongHandler 019D                   ?_KeyOffHandler 007B  
                  ??_FlashUnlock 0070          _system_settings_absaddr 07EE  
