

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Sep 10 21:59:47 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	_system_settings_text,global,class=CODE,delta=2
     5                           	psect	_TxStatus_text,global,class=CODE,delta=2
     6                           	psect	_Type_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16LF1503 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000E                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0095                     	;# 
    94  0096                     	;# 
    95  0097                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009B                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010E                     	;# 
   106  0111                     	;# 
   107  0112                     	;# 
   108  0113                     	;# 
   109  0114                     	;# 
   110  0115                     	;# 
   111  0116                     	;# 
   112  0117                     	;# 
   113  0118                     	;# 
   114  0119                     	;# 
   115  011D                     	;# 
   116  018C                     	;# 
   117  018E                     	;# 
   118  0191                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  0193                     	;# 
   122  0193                     	;# 
   123  0194                     	;# 
   124  0195                     	;# 
   125  0196                     	;# 
   126  020C                     	;# 
   127  0211                     	;# 
   128  0211                     	;# 
   129  0212                     	;# 
   130  0212                     	;# 
   131  0213                     	;# 
   132  0213                     	;# 
   133  0214                     	;# 
   134  0214                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0216                     	;# 
   139  0216                     	;# 
   140  0217                     	;# 
   141  0217                     	;# 
   142  0391                     	;# 
   143  0392                     	;# 
   144  0393                     	;# 
   145  0498                     	;# 
   146  0498                     	;# 
   147  0499                     	;# 
   148  049A                     	;# 
   149  049B                     	;# 
   150  049B                     	;# 
   151  049C                     	;# 
   152  049D                     	;# 
   153  049E                     	;# 
   154  049F                     	;# 
   155  0611                     	;# 
   156  0612                     	;# 
   157  0613                     	;# 
   158  0613                     	;# 
   159  0614                     	;# 
   160  0615                     	;# 
   161  0616                     	;# 
   162  0616                     	;# 
   163  0617                     	;# 
   164  0618                     	;# 
   165  0619                     	;# 
   166  0619                     	;# 
   167  061A                     	;# 
   168  061B                     	;# 
   169  061C                     	;# 
   170  061C                     	;# 
   171  0691                     	;# 
   172  0692                     	;# 
   173  0693                     	;# 
   174  0694                     	;# 
   175  0695                     	;# 
   176  0F0F                     	;# 
   177  0F10                     	;# 
   178  0F11                     	;# 
   179  0F12                     	;# 
   180  0F13                     	;# 
   181  0F14                     	;# 
   182  0F15                     	;# 
   183  0F16                     	;# 
   184  0F17                     	;# 
   185  0F18                     	;# 
   186  0F19                     	;# 
   187  0F1A                     	;# 
   188  0F1B                     	;# 
   189  0F1C                     	;# 
   190  0F1D                     	;# 
   191  0F1E                     	;# 
   192  0F1F                     	;# 
   193  0FE3                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  0006                     	;# 
   212  0007                     	;# 
   213  0008                     	;# 
   214  0009                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000E                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018E                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0194                     	;# 
   267  0195                     	;# 
   268  0196                     	;# 
   269  020C                     	;# 
   270  0211                     	;# 
   271  0211                     	;# 
   272  0212                     	;# 
   273  0212                     	;# 
   274  0213                     	;# 
   275  0213                     	;# 
   276  0214                     	;# 
   277  0214                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0216                     	;# 
   282  0216                     	;# 
   283  0217                     	;# 
   284  0217                     	;# 
   285  0391                     	;# 
   286  0392                     	;# 
   287  0393                     	;# 
   288  0498                     	;# 
   289  0498                     	;# 
   290  0499                     	;# 
   291  049A                     	;# 
   292  049B                     	;# 
   293  049B                     	;# 
   294  049C                     	;# 
   295  049D                     	;# 
   296  049E                     	;# 
   297  049F                     	;# 
   298  0611                     	;# 
   299  0612                     	;# 
   300  0613                     	;# 
   301  0613                     	;# 
   302  0614                     	;# 
   303  0615                     	;# 
   304  0616                     	;# 
   305  0616                     	;# 
   306  0617                     	;# 
   307  0618                     	;# 
   308  0619                     	;# 
   309  0619                     	;# 
   310  061A                     	;# 
   311  061B                     	;# 
   312  061C                     	;# 
   313  061C                     	;# 
   314  0691                     	;# 
   315  0692                     	;# 
   316  0693                     	;# 
   317  0694                     	;# 
   318  0695                     	;# 
   319  0F0F                     	;# 
   320  0F10                     	;# 
   321  0F11                     	;# 
   322  0F12                     	;# 
   323  0F13                     	;# 
   324  0F14                     	;# 
   325  0F15                     	;# 
   326  0F16                     	;# 
   327  0F17                     	;# 
   328  0F18                     	;# 
   329  0F19                     	;# 
   330  0F1A                     	;# 
   331  0F1B                     	;# 
   332  0F1C                     	;# 
   333  0F1D                     	;# 
   334  0F1E                     	;# 
   335  0F1F                     	;# 
   336  0FE3                     	;# 
   337  0FE4                     	;# 
   338  0FE5                     	;# 
   339  0FE6                     	;# 
   340  0FE7                     	;# 
   341  0FE8                     	;# 
   342  0FE9                     	;# 
   343  0FEA                     	;# 
   344  0FEB                     	;# 
   345  0FED                     	;# 
   346  0FEE                     	;# 
   347  0FEF                     	;# 
   348  0000                     	;# 
   349  0001                     	;# 
   350  0002                     	;# 
   351  0003                     	;# 
   352  0004                     	;# 
   353  0005                     	;# 
   354  0006                     	;# 
   355  0007                     	;# 
   356  0008                     	;# 
   357  0009                     	;# 
   358  000A                     	;# 
   359  000B                     	;# 
   360  000C                     	;# 
   361  000E                     	;# 
   362  0011                     	;# 
   363  0012                     	;# 
   364  0013                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  008C                     	;# 
   375  008E                     	;# 
   376  0091                     	;# 
   377  0092                     	;# 
   378  0093                     	;# 
   379  0095                     	;# 
   380  0096                     	;# 
   381  0097                     	;# 
   382  0099                     	;# 
   383  009A                     	;# 
   384  009B                     	;# 
   385  009B                     	;# 
   386  009C                     	;# 
   387  009D                     	;# 
   388  009E                     	;# 
   389  009F                     	;# 
   390  010C                     	;# 
   391  010E                     	;# 
   392  0111                     	;# 
   393  0112                     	;# 
   394  0113                     	;# 
   395  0114                     	;# 
   396  0115                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  0118                     	;# 
   400  0119                     	;# 
   401  011D                     	;# 
   402  018C                     	;# 
   403  018E                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  020C                     	;# 
   413  0211                     	;# 
   414  0211                     	;# 
   415  0212                     	;# 
   416  0212                     	;# 
   417  0213                     	;# 
   418  0213                     	;# 
   419  0214                     	;# 
   420  0214                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0216                     	;# 
   426  0217                     	;# 
   427  0217                     	;# 
   428  0391                     	;# 
   429  0392                     	;# 
   430  0393                     	;# 
   431  0498                     	;# 
   432  0498                     	;# 
   433  0499                     	;# 
   434  049A                     	;# 
   435  049B                     	;# 
   436  049B                     	;# 
   437  049C                     	;# 
   438  049D                     	;# 
   439  049E                     	;# 
   440  049F                     	;# 
   441  0611                     	;# 
   442  0612                     	;# 
   443  0613                     	;# 
   444  0613                     	;# 
   445  0614                     	;# 
   446  0615                     	;# 
   447  0616                     	;# 
   448  0616                     	;# 
   449  0617                     	;# 
   450  0618                     	;# 
   451  0619                     	;# 
   452  0619                     	;# 
   453  061A                     	;# 
   454  061B                     	;# 
   455  061C                     	;# 
   456  061C                     	;# 
   457  0691                     	;# 
   458  0692                     	;# 
   459  0693                     	;# 
   460  0694                     	;# 
   461  0695                     	;# 
   462  0F0F                     	;# 
   463  0F10                     	;# 
   464  0F11                     	;# 
   465  0F12                     	;# 
   466  0F13                     	;# 
   467  0F14                     	;# 
   468  0F15                     	;# 
   469  0F16                     	;# 
   470  0F17                     	;# 
   471  0F18                     	;# 
   472  0F19                     	;# 
   473  0F1A                     	;# 
   474  0F1B                     	;# 
   475  0F1C                     	;# 
   476  0F1D                     	;# 
   477  0F1E                     	;# 
   478  0F1F                     	;# 
   479  0FE3                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0008                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000E                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0013                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  008C                     	;# 
   518  008E                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0093                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  009F                     	;# 
   533  010C                     	;# 
   534  010E                     	;# 
   535  0111                     	;# 
   536  0112                     	;# 
   537  0113                     	;# 
   538  0114                     	;# 
   539  0115                     	;# 
   540  0116                     	;# 
   541  0117                     	;# 
   542  0118                     	;# 
   543  0119                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018E                     	;# 
   547  0191                     	;# 
   548  0191                     	;# 
   549  0192                     	;# 
   550  0193                     	;# 
   551  0193                     	;# 
   552  0194                     	;# 
   553  0195                     	;# 
   554  0196                     	;# 
   555  020C                     	;# 
   556  0211                     	;# 
   557  0211                     	;# 
   558  0212                     	;# 
   559  0212                     	;# 
   560  0213                     	;# 
   561  0213                     	;# 
   562  0214                     	;# 
   563  0214                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0216                     	;# 
   568  0216                     	;# 
   569  0217                     	;# 
   570  0217                     	;# 
   571  0391                     	;# 
   572  0392                     	;# 
   573  0393                     	;# 
   574  0498                     	;# 
   575  0498                     	;# 
   576  0499                     	;# 
   577  049A                     	;# 
   578  049B                     	;# 
   579  049B                     	;# 
   580  049C                     	;# 
   581  049D                     	;# 
   582  049E                     	;# 
   583  049F                     	;# 
   584  0611                     	;# 
   585  0612                     	;# 
   586  0613                     	;# 
   587  0613                     	;# 
   588  0614                     	;# 
   589  0615                     	;# 
   590  0616                     	;# 
   591  0616                     	;# 
   592  0617                     	;# 
   593  0618                     	;# 
   594  0619                     	;# 
   595  0619                     	;# 
   596  061A                     	;# 
   597  061B                     	;# 
   598  061C                     	;# 
   599  061C                     	;# 
   600  0691                     	;# 
   601  0692                     	;# 
   602  0693                     	;# 
   603  0694                     	;# 
   604  0695                     	;# 
   605  0F0F                     	;# 
   606  0F10                     	;# 
   607  0F11                     	;# 
   608  0F12                     	;# 
   609  0F13                     	;# 
   610  0F14                     	;# 
   611  0F15                     	;# 
   612  0F16                     	;# 
   613  0F17                     	;# 
   614  0F18                     	;# 
   615  0F19                     	;# 
   616  0F1A                     	;# 
   617  0F1B                     	;# 
   618  0F1C                     	;# 
   619  0F1D                     	;# 
   620  0F1E                     	;# 
   621  0F1F                     	;# 
   622  0FE3                     	;# 
   623  0FE4                     	;# 
   624  0FE5                     	;# 
   625  0FE6                     	;# 
   626  0FE7                     	;# 
   627  0FE8                     	;# 
   628  0FE9                     	;# 
   629  0FEA                     	;# 
   630  0FEB                     	;# 
   631  0FED                     	;# 
   632  0FEE                     	;# 
   633  0FEF                     	;# 
   634  0000                     	;# 
   635  0001                     	;# 
   636  0002                     	;# 
   637  0003                     	;# 
   638  0004                     	;# 
   639  0005                     	;# 
   640  0006                     	;# 
   641  0007                     	;# 
   642  0008                     	;# 
   643  0009                     	;# 
   644  000A                     	;# 
   645  000B                     	;# 
   646  000C                     	;# 
   647  000E                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0015                     	;# 
   652  0016                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001C                     	;# 
   660  008C                     	;# 
   661  008E                     	;# 
   662  0091                     	;# 
   663  0092                     	;# 
   664  0093                     	;# 
   665  0095                     	;# 
   666  0096                     	;# 
   667  0097                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  010C                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011D                     	;# 
   688  018C                     	;# 
   689  018E                     	;# 
   690  0191                     	;# 
   691  0191                     	;# 
   692  0192                     	;# 
   693  0193                     	;# 
   694  0193                     	;# 
   695  0194                     	;# 
   696  0195                     	;# 
   697  0196                     	;# 
   698  020C                     	;# 
   699  0211                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0212                     	;# 
   703  0213                     	;# 
   704  0213                     	;# 
   705  0214                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  0391                     	;# 
   715  0392                     	;# 
   716  0393                     	;# 
   717  0498                     	;# 
   718  0498                     	;# 
   719  0499                     	;# 
   720  049A                     	;# 
   721  049B                     	;# 
   722  049B                     	;# 
   723  049C                     	;# 
   724  049D                     	;# 
   725  049E                     	;# 
   726  049F                     	;# 
   727  0611                     	;# 
   728  0612                     	;# 
   729  0613                     	;# 
   730  0613                     	;# 
   731  0614                     	;# 
   732  0615                     	;# 
   733  0616                     	;# 
   734  0616                     	;# 
   735  0617                     	;# 
   736  0618                     	;# 
   737  0619                     	;# 
   738  0619                     	;# 
   739  061A                     	;# 
   740  061B                     	;# 
   741  061C                     	;# 
   742  061C                     	;# 
   743  0691                     	;# 
   744  0692                     	;# 
   745  0693                     	;# 
   746  0694                     	;# 
   747  0695                     	;# 
   748  0F0F                     	;# 
   749  0F10                     	;# 
   750  0F11                     	;# 
   751  0F12                     	;# 
   752  0F13                     	;# 
   753  0F14                     	;# 
   754  0F15                     	;# 
   755  0F16                     	;# 
   756  0F17                     	;# 
   757  0F18                     	;# 
   758  0F19                     	;# 
   759  0F1A                     	;# 
   760  0F1B                     	;# 
   761  0F1C                     	;# 
   762  0F1D                     	;# 
   763  0F1E                     	;# 
   764  0F1F                     	;# 
   765  0FE3                     	;# 
   766  0FE4                     	;# 
   767  0FE5                     	;# 
   768  0FE6                     	;# 
   769  0FE7                     	;# 
   770  0FE8                     	;# 
   771  0FE9                     	;# 
   772  0FEA                     	;# 
   773  0FEB                     	;# 
   774  0FED                     	;# 
   775  0FEE                     	;# 
   776  0FEF                     	;# 
   777  07EE                     _system_settings_absaddr	set	2030
   778  07D0                     _TxStatus_absaddr	set	2000
   779  07C0                     _Type_absaddr	set	1984
   780  07EE                     _system_settings_absaddr	set	2030
   781                           
   782                           	psect	_system_settings_text
   783  07EE                     __p_system_settings_text:	
   784  07EE                     _system_settings:	
   785  07EE  3443               	retlw	67
   786  07EF  3404               	retlw	4
   787  07F0  345F               	retlw	95
   788  07F1  3441               	retlw	65
   789  07F2  341F               	retlw	31
   790  07F3  34FB               	retlw	251
   791  07F4  345F               	retlw	95
   792  07F5  3441               	retlw	65
   793  07F6  3478               	retlw	120
   794  07F7  3456               	retlw	86
   795  07F8  3434               	retlw	52
   796  07F9  3412               	retlw	18
   797  07FA  345F               	retlw	95
   798  07FB  3442               	retlw	66
   799  07FC  3410               	retlw	16
   800  07FD  3400               	retlw	0
   801  07FE  345F               	retlw	95
   802  07FF                     __end_of_system_settings:	
   803  07D0                     _TxStatus_absaddr	set	2000
   804                           
   805                           	psect	_TxStatus_text
   806  07D0                     __p_TxStatus_text:	
   807  07D0                     _TxStatus:	
   808  07D0  34FF               	retlw	255
   809  07D1  34FF               	retlw	255
   810  07D2  34FF               	retlw	255
   811  07D3  34FF               	retlw	255
   812  07D4  34FF               	retlw	255
   813  07D5  34FF               	retlw	255
   814  07D6  34FF               	retlw	255
   815  07D7  34FF               	retlw	255
   816  07D8  34FF               	retlw	255
   817  07D9  34FF               	retlw	255
   818  07DA  34FF               	retlw	255
   819  07DB  34FF               	retlw	255
   820  07DC  34FF               	retlw	255
   821  07DD  34FF               	retlw	255
   822  07DE  34FF               	retlw	255
   823  07DF  34FF               	retlw	255
   824  07E0                     __end_of_TxStatus:	
   825  07C0                     _Type_absaddr	set	1984
   826                           
   827                           	psect	_Type_text
   828  07C0                     __p_Type_text:	
   829  07C0                     _Type:	
   830  07C0  34FF               	retlw	255
   831  07C1  34FF               	retlw	255
   832  07C2  34FF               	retlw	255
   833  07C3  34FF               	retlw	255
   834  07C4  34FF               	retlw	255
   835  07C5  34FF               	retlw	255
   836  07C6  34FF               	retlw	255
   837  07C7  34FF               	retlw	255
   838  07C8  34FF               	retlw	255
   839  07C9  34FF               	retlw	255
   840  07CA  34FF               	retlw	255
   841  07CB  34FF               	retlw	255
   842  07CC  34FF               	retlw	255
   843  07CD  34FF               	retlw	255
   844  07CE  34FF               	retlw	255
   845  07CF  34FF               	retlw	255
   846  07D0                     __end_of_Type:	
   847  0015                     _TMR0	set	21
   848  000C                     _PORTA	set	12
   849  000B                     _INTCONbits	set	11
   850  005D                     _TMR0IE	set	93
   851  005A                     _TMR0IF	set	90
   852  009D                     _ADCON0bits	set	157
   853  009E                     _ADCON1bits	set	158
   854  008E                     _TRISC	set	142
   855  008C                     _TRISA	set	140
   856  0095                     _OPTION_REGbits	set	149
   857  009A                     _OSCSTATbits	set	154
   858  0099                     _OSCCONbits	set	153
   859  0095                     _OPTION_REG	set	149
   860  0097                     _WDTCONbits	set	151
   861  0117                     _FVRCON	set	279
   862  010E                     _LATC	set	270
   863  010C                     _LATA	set	268
   864  010C                     _LATAbits	set	268
   865  010E                     _LATCbits	set	270
   866  018E                     _ANSELC	set	398
   867  018C                     _ANSELA	set	396
   868  0196                     _PMCON2	set	406
   869  0193                     _PMDATL	set	403
   870  0194                     _PMDATH	set	404
   871  0191                     _PMADRL	set	401
   872  0192                     _PMADRH	set	402
   873  0195                     _PMCON1bits	set	405
   874  020C                     _WPUA	set	524
   875                           
   876                           ; #config settings
   877  0007                     
   878                           	psect	cinit
   879  07E0                     start_initialization:	
   880  07E0                     __initialization:	
   881                           
   882                           ; Clear objects allocated to BANK0
   883  07E0  3020               	movlw	low __pbssBANK0
   884  07E1  0084               	movwf	4
   885  07E2  3000               	movlw	high __pbssBANK0
   886  07E3  0085               	movwf	5
   887  07E4  3024               	movlw	36
   888  07E5  27E8               	fcall	clear_ram0
   889  07E6                     end_of_initialization:	
   890                           ;End of C runtime variable initialization code
   891                           
   892  07E6                     __end_of__initialization:	
   893  07E6  0020               	movlb	0
   894  07E7  2CE5               	ljmp	_main	;jump to C main() function
   895                           
   896                           	psect	bssBANK0
   897  0020                     __pbssBANK0:	
   898  0020                     _startaddress:	
   899  0020                     	ds	4
   900  0024                     _noo_address_type:	
   901  0024                     	ds	1
   902  0025                     _OffDelayTicks_100ms:	
   903  0025                     	ds	1
   904  0026                     _SkipHandling:	
   905  0026                     	ds	1
   906  0027                     _DevMode:	
   907  0027                     	ds	1
   908  0028                     _DevType:	
   909  0028                     	ds	1
   910  0029                     _tick3_100ms:	
   911  0029                     	ds	1
   912  002A                     _LedPulseTick_100ms:	
   913  002A                     	ds	1
   914  002B                     _tx_status:	
   915  002B                     	ds	1
   916  002C                     _Keys:	
   917  002C                     	ds	20
   918  0040                     _noo_send_data:	
   919  0040                     	ds	4
   920                           
   921                           	psect	clrtext
   922  07E8                     clear_ram0:	
   923                           ;	Called with FSR0 containing the base address, and
   924                           ;	WREG with the size to clear
   925                           
   926  07E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   927  07E9                     clrloop0:	
   928  07E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   929  07EA  3101               	addfsr 0,1
   930  07EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   931  07EC  2FE9               	goto	clrloop0	;have we reached the end yet?
   932  07ED  3400               	retlw	0	;all done for this memory range, return
   933                           
   934                           	psect	cstackCOMMON
   935  0070                     __pcstackCOMMON:	
   936  0070                     ?_Init_IO:	
   937  0070                     ??_Init_IO:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_Init_CLK:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ??_Init_CLK:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_Init_ADC:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ??_Init_ADC:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_RF_Init:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ??_RF_Init:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_Init_TypeFromFlash:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_Init_TxStatusFromFlash:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_noolite_send:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_FlashEraseRow:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_FlashWrite:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_main:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_FlashUnlock:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ??_FlashUnlock:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     noolite_send@noo_send_command:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     FlashEraseRow@rowAddr:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     FlashWrite@addr:	
   989                           ; 2 bytes @ 0x0
   990                           
   991  0070                     Init_TypeFromFlash@type:	
   992                           ; 2 bytes @ 0x0
   993                           
   994  0070                     Init_TxStatusFromFlash@txStatus:	
   995                           ; 2 bytes @ 0x0
   996                           
   997                           
   998                           ; 2 bytes @ 0x0
   999  0070                     	ds	1
  1000  0071                     noolite_send@noo_send_format:	
  1001                           
  1002                           ; 1 bytes @ 0x1
  1003  0071                     	ds	1
  1004  0072                     ??_Init_TypeFromFlash:	
  1005  0072                     ??_Init_TxStatusFromFlash:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  0072                     ??_FlashEraseRow:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  0072                     noolite_send@data:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0072                     FlashWrite@flash_data:	
  1015                           ; 1 bytes @ 0x2
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x2
  1019  0072                     	ds	1
  1020  0073                     ??_noolite_send:	
  1021                           
  1022                           ; 1 bytes @ 0x3
  1023  0073                     	ds	1
  1024  0074                     ??_FlashWrite:	
  1025  0074                     ?_SaveTxStatusToFlash:	
  1026                           ; 1 bytes @ 0x4
  1027                           
  1028  0074                     SaveTxStatusToFlash@txStatusArray:	
  1029                           ; 1 bytes @ 0x4
  1030                           
  1031                           
  1032                           ; 2 bytes @ 0x4
  1033  0074                     	ds	2
  1034  0076                     SaveTxStatusToFlash@txStatusAdr:	
  1035                           
  1036                           ; 2 bytes @ 0x6
  1037  0076                     	ds	2
  1038  0078                     Init_TxStatusFromFlash@cellNum:	
  1039  0078                     SaveTxStatusToFlash@txStatusVal:	
  1040                           ; 1 bytes @ 0x8
  1041                           
  1042                           
  1043                           ; 1 bytes @ 0x8
  1044  0078                     	ds	1
  1045  0079                     ??_SaveTxStatusToFlash:	
  1046                           
  1047                           ; 1 bytes @ 0x9
  1048  0079                     	ds	2
  1049  007B                     ?_KeyOffHandler:	
  1050  007B                     ??_KeyLongHandler:	
  1051                           ; 1 bytes @ 0xB
  1052                           
  1053  007B                     KeyOffHandler@chn:	
  1054                           ; 1 bytes @ 0xB
  1055                           
  1056  007B                     KeyLongHandler@key:	
  1057                           ; 1 bytes @ 0xB
  1058                           
  1059                           
  1060                           ; 1 bytes @ 0xB
  1061  007B                     	ds	1
  1062  007C                     KeyOffHandler@cmd:	
  1063                           
  1064                           ; 1 bytes @ 0xC
  1065  007C                     	ds	1
  1066  007D                     KeyOffHandler@nooData:	
  1067                           
  1068                           ; 1 bytes @ 0xD
  1069  007D                     	ds	1
  1070                           
  1071                           	psect	cstackBANK0
  1072  0044                     __pcstackBANK0:	
  1073  0044                     SaveTxStatusToFlash@adrToWrite:	
  1074  0044                     noolite_send@noo_send_buffer:	
  1075                           ; 2 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 12 bytes @ 0x0
  1079  0044                     	ds	2
  1080  0046                     SaveTxStatusToFlash@cellNum:	
  1081                           
  1082                           ; 1 bytes @ 0x2
  1083  0046                     	ds	10
  1084  0050                     noolite_send@startpos:	
  1085                           
  1086                           ; 1 bytes @ 0xC
  1087  0050                     	ds	1
  1088  0051                     noolite_send@countbit:	
  1089                           
  1090                           ; 1 bytes @ 0xD
  1091  0051                     	ds	1
  1092  0052                     noolite_send@chn:	
  1093                           
  1094                           ; 1 bytes @ 0xE
  1095  0052                     	ds	1
  1096  0053                     noolite_send@countsend:	
  1097                           
  1098                           ; 1 bytes @ 0xF
  1099  0053                     	ds	1
  1100  0054                     noolite_send@temp_send:	
  1101                           
  1102                           ; 1 bytes @ 0x10
  1103  0054                     	ds	1
  1104  0055                     noolite_send@endpos:	
  1105                           
  1106                           ; 1 bytes @ 0x11
  1107  0055                     	ds	1
  1108  0056                     ??_KeyOffHandler:	
  1109  0056                     ?_KeyLongHandler:	
  1110                           ; 1 bytes @ 0x12
  1111                           
  1112  0056                     KeyLongHandler@chn:	
  1113                           ; 1 bytes @ 0x12
  1114                           
  1115                           
  1116                           ; 1 bytes @ 0x12
  1117  0056                     	ds	1
  1118  0057                     KeyOffHandler@key:	
  1119  0057                     KeyLongHandler@cmd:	
  1120                           ; 1 bytes @ 0x13
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0x13
  1124  0057                     	ds	1
  1125  0058                     KeyLongHandler@ticksToTrigger:	
  1126                           
  1127                           ; 1 bytes @ 0x14
  1128  0058                     	ds	1
  1129  0059                     KeyLongHandler@nooData:	
  1130                           
  1131                           ; 1 bytes @ 0x15
  1132  0059                     	ds	1
  1133  005A                     ??_main:	
  1134                           
  1135                           ; 1 bytes @ 0x16
  1136  005A                     	ds	2
  1137  005C                     main@chn:	
  1138                           
  1139                           ; 1 bytes @ 0x18
  1140  005C                     	ds	1
  1141  005D                     main@chn_250:	
  1142                           
  1143                           ; 1 bytes @ 0x19
  1144  005D                     	ds	1
  1145  005E                     main@chn_251:	
  1146                           
  1147                           ; 1 bytes @ 0x1A
  1148  005E                     	ds	1
  1149  005F                     main@chn_252:	
  1150                           
  1151                           ; 1 bytes @ 0x1B
  1152  005F                     	ds	1
  1153                           
  1154                           	psect	maintext
  1155  04E5                     __pmaintext:	
  1156 ;;
  1157 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1158 ;;
  1159 ;; *************** function _main *****************
  1160 ;; Defined at:
  1161 ;;		line 128 in file "main.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  chn             1   27[BANK0 ] unsigned char 
  1166 ;;  chn             1   26[BANK0 ] unsigned char 
  1167 ;;  chn             1   25[BANK0 ] unsigned char 
  1168 ;;  chn             1   24[BANK0 ] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : B1F/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1
  1178 ;;      Params:         0       0       0
  1179 ;;      Locals:         0       4       0
  1180 ;;      Temps:          0       2       0
  1181 ;;      Totals:         0       6       0
  1182 ;;Total ram usage:        6 bytes
  1183 ;; Hardware stack levels required when called:    3
  1184 ;; This function calls:
  1185 ;;		_FlashEraseRow
  1186 ;;		_FlashWrite
  1187 ;;		_Init_ADC
  1188 ;;		_Init_CLK
  1189 ;;		_Init_IO
  1190 ;;		_Init_TxStatusFromFlash
  1191 ;;		_Init_TypeFromFlash
  1192 ;;		_KeyLongHandler
  1193 ;;		_KeyOffHandler
  1194 ;;		_RF_Init
  1195 ;;		_SaveTxStatusToFlash
  1196 ;;		_noolite_send
  1197 ;; This function is called by:
  1198 ;;		Startup code after reset
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           
  1203                           ;psect for function _main
  1204  04E5                     _main:	
  1205                           
  1206                           ;main.c: 129: Init_IO();
  1207                           
  1208                           ;incstack = 0
  1209                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1210  04E5  2123               	fcall	_Init_IO
  1211                           
  1212                           ;main.c: 130: Init_CLK();
  1213  04E6  2109               	fcall	_Init_CLK
  1214                           
  1215                           ;main.c: 131: Init_ADC();
  1216  04E7  20FD               	fcall	_Init_ADC
  1217                           
  1218                           ;main.c: 132: RF_Init();
  1219  04E8  2227               	fcall	_RF_Init
  1220                           
  1221                           ;main.c: 134: LATCbits.LATC5 = 1;
  1222  04E9  0022               	movlb	2	; select bank2
  1223  04EA  168E               	bsf	14,5	;volatile
  1224                           
  1225                           ;main.c: 135: DevType = Init_TypeFromFlash(&Type[0]);
  1226  04EB  30C0               	movlw	192
  1227  04EC  00F0               	movwf	Init_TypeFromFlash@type
  1228  04ED  3087               	movlw	135
  1229  04EE  00F1               	movwf	Init_TypeFromFlash@type+1
  1230  04EF  2146               	fcall	_Init_TypeFromFlash
  1231  04F0  0020               	movlb	0	; select bank0
  1232  04F1  00A8               	movwf	_DevType
  1233                           
  1234                           ;main.c: 136: tx_status = Init_TxStatusFromFlash(&TxStatus[0]);
  1235  04F2  30D0               	movlw	208
  1236  04F3  00F0               	movwf	Init_TxStatusFromFlash@txStatus
  1237  04F4  3087               	movlw	135
  1238  04F5  00F1               	movwf	Init_TxStatusFromFlash@txStatus+1
  1239  04F6  22B2               	fcall	_Init_TxStatusFromFlash
  1240  04F7  00AB               	movwf	_tx_status
  1241                           
  1242                           ;main.c: 138: INTCONbits.PEIE = 1;
  1243  04F8  170B               	bsf	11,6	;volatile
  1244                           
  1245                           ;main.c: 139: INTCONbits.GIE = 1;
  1246  04F9  178B               	bsf	11,7	;volatile
  1247  04FA                     l1804:	
  1248                           
  1249                           ;main.c: 142: Keys[A].State = (uint8_t) (PORTA & A_Pressed);
  1250  04FA  0020               	movlb	0	; select bank0
  1251  04FB  080C               	movf	12,w	;volatile
  1252  04FC  00AC               	movwf	_Keys
  1253  04FD  3002               	movlw	2
  1254  04FE  05AC               	andwf	_Keys,f
  1255                           
  1256                           ;main.c: 143: Keys[B].State = (uint8_t) (PORTA & B_Pressed);
  1257  04FF  080C               	movf	12,w	;volatile
  1258  0500  00B0               	movwf	_Keys+4
  1259  0501  3001               	movlw	1
  1260  0502  05B0               	andwf	_Keys+4,f
  1261                           
  1262                           ;main.c: 144: Keys[C].State = (uint8_t) (PORTA & C_Pressed);
  1263  0503  080C               	movf	12,w	;volatile
  1264  0504  00B4               	movwf	_Keys+8
  1265  0505  3004               	movlw	4
  1266  0506  05B4               	andwf	_Keys+8,f
  1267                           
  1268                           ;main.c: 145: Keys[D].State = (uint8_t) (PORTA & D_Pressed);
  1269  0507  080C               	movf	12,w	;volatile
  1270  0508  00B8               	movwf	_Keys+12
  1271  0509  3010               	movlw	16
  1272  050A  05B8               	andwf	_Keys+12,f
  1273                           
  1274                           ;main.c: 146: Keys[CD].State = (uint8_t) (PORTA & (C_Pressed | D_Pressed));
  1275  050B  080C               	movf	12,w	;volatile
  1276  050C  00BC               	movwf	_Keys+16
  1277  050D  3014               	movlw	20
  1278  050E  05BC               	andwf	_Keys+16,f
  1279                           
  1280                           ;main.c: 147: if (Keys[CD].State == (C_Pressed | D_Pressed)) {
  1281  050F  063C               	xorwf	_Keys+16,w
  1282  0510  1D03               	btfss	3,2
  1283  0511  2D49               	goto	l1868
  1284                           
  1285                           ;main.c: 148: SkipHandling = 5;
  1286  0512  3005               	movlw	5
  1287  0513  00A6               	movwf	_SkipHandling
  1288                           
  1289                           ;main.c: 149: if (Keys[CD].Tick100ms < 35) {
  1290  0514  3023               	movlw	35
  1291  0515  023E               	subwf	_Keys+18,w
  1292  0516  1803               	skipnc
  1293  0517  2D1C               	goto	l1834
  1294                           
  1295                           ;main.c: 150: DevMode &= ~(UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1296  0518  30F9               	movlw	249
  1297  0519  05A7               	andwf	_DevMode,f
  1298                           
  1299                           ;main.c: 151: DevMode |= BIND_ACTIVE;
  1300  051A  1427               	bsf	_DevMode,0
  1301                           
  1302                           ;main.c: 153: } else if ((Keys[CD].Tick100ms >= 35) && (Keys[CD].Tick100ms < 49)) {
  1303  051B  2D43               	goto	l1832
  1304  051C                     l1834:	
  1305  051C  3023               	movlw	35
  1306  051D  023E               	subwf	_Keys+18,w
  1307  051E  1C03               	skipc
  1308  051F  2D26               	goto	l1840
  1309  0520  3031               	movlw	49
  1310  0521  023E               	subwf	_Keys+18,w
  1311  0522  1803               	skipnc
  1312  0523  2D26               	goto	l1840
  1313                           
  1314                           ;main.c: 154: DevMode &= ~BIND_ACTIVE;
  1315  0524  1027               	bcf	_DevMode,0
  1316                           
  1317                           ;main.c: 155: } else if ((Keys[CD].Tick100ms >= 50) && (Keys[CD].Tick100ms < 85)) {
  1318  0525  2D45               	goto	l68
  1319  0526                     l1840:	
  1320  0526  3032               	movlw	50
  1321  0527  023E               	subwf	_Keys+18,w
  1322  0528  3055               	movlw	85
  1323  0529  1C03               	skipc
  1324  052A  2D33               	goto	L1
  1325  052B  023E               	subwf	_Keys+18,w
  1326  052C  1803               	skipnc
  1327  052D  2D32               	goto	l1850
  1328                           
  1329                           ;main.c: 156: DevMode &= ~(BIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1330  052E  30FA               	movlw	250
  1331  052F  05A7               	andwf	_DevMode,f
  1332                           
  1333                           ;main.c: 157: DevMode |= UNBIND_ACTIVE;
  1334  0530  14A7               	bsf	_DevMode,1
  1335  0531  2D43               	goto	l1832
  1336  0532                     l1850:	
  1337  0532  3055               	movlw	85
  1338  0533                     L1:	
  1339  0533  023E               	subwf	_Keys+18,w
  1340  0534  1C03               	skipc
  1341  0535  2D3C               	goto	l1856
  1342  0536  3063               	movlw	99
  1343  0537  023E               	subwf	_Keys+18,w
  1344  0538  1803               	skipnc
  1345  0539  2D3C               	goto	l1856
  1346                           
  1347                           ;main.c: 160: DevMode &= ~UNBIND_ACTIVE;
  1348  053A  10A7               	bcf	_DevMode,1
  1349                           
  1350                           ;main.c: 161: } else if (Keys[CD].Tick100ms >= 100) {
  1351  053B  2D45               	goto	l68
  1352  053C                     l1856:	
  1353  053C  3064               	movlw	100
  1354  053D  023E               	subwf	_Keys+18,w
  1355  053E  1C03               	skipc
  1356  053F  2D45               	goto	l68
  1357                           
  1358                           ;main.c: 162: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE);
  1359  0540  30FC               	movlw	252
  1360  0541  05A7               	andwf	_DevMode,f
  1361                           
  1362                           ;main.c: 163: DevMode |= MODE_CHANGE_ACTIVE;
  1363  0542  1527               	bsf	_DevMode,2
  1364  0543                     l1832:	
  1365                           
  1366                           ;main.c: 152: tick3_100ms = 100;
  1367  0543  3064               	movlw	100
  1368  0544  00A9               	movwf	_tick3_100ms
  1369  0545                     l68:	
  1370                           
  1371                           ;main.c: 165: }
  1372                           ;main.c: 166: Keys[CD].Tick100ms++;
  1373  0545  0ABE               	incf	_Keys+18,f
  1374                           
  1375                           ;main.c: 168: Keys[C].StateTemp = 0;
  1376  0546  01B5               	clrf	_Keys+9
  1377                           
  1378                           ;main.c: 169: Keys[D].StateTemp = 0;
  1379  0547  01B9               	clrf	_Keys+13
  1380                           
  1381                           ;main.c: 170: } else {
  1382  0548  2D4A               	goto	l1870
  1383  0549                     l1868:	
  1384                           
  1385                           ;main.c: 171: Keys[CD].Tick100ms = 0;
  1386  0549  01BE               	clrf	_Keys+18
  1387  054A                     l1870:	
  1388                           
  1389                           ;main.c: 172: }
  1390                           ;main.c: 174: if (tick3_100ms != 0) {
  1391  054A  0829               	movf	_tick3_100ms,w
  1392  054B  1903               	btfsc	3,2
  1393  054C  2D79               	goto	l1890
  1394                           
  1395                           ;main.c: 175: tick3_100ms--;
  1396  054D  03A9               	decf	_tick3_100ms,f
  1397                           
  1398                           ;main.c: 176: switch (DevMode & 0x07) {
  1399  054E  2D65               	goto	l1888
  1400  054F                     l79:	
  1401                           ;main.c: 177: case BIND_ACTIVE:
  1402                           
  1403                           
  1404                           ;main.c: 178: LATCbits.LATC3 = ON;
  1405  054F  0022               	movlb	2	; select bank2
  1406  0550  158E               	bsf	14,3	;volatile
  1407                           
  1408                           ;main.c: 179: break;
  1409  0551  2D7D               	goto	l86
  1410  0552                     l1874:	
  1411                           
  1412                           ;main.c: 181: if (LedPulseTick_100ms++ > 2) {
  1413  0552  082A               	movf	_LedPulseTick_100ms,w
  1414  0553  0AAA               	incf	_LedPulseTick_100ms,f
  1415  0554  00DA               	movwf	??_main
  1416  0555  3003               	movlw	3
  1417  0556  025A               	subwf	??_main,w
  1418  0557  1C03               	skipc
  1419  0558  2D7D               	goto	l86
  1420  0559                     l1876:	
  1421                           
  1422                           ;main.c: 182: LATCbits.LATC3 = ~LATCbits.LATC3;
  1423  0559  3008               	movlw	8
  1424  055A  0022               	movlb	2	; select bank2
  1425  055B  068E               	xorwf	14,f	;volatile
  1426                           
  1427                           ;main.c: 183: LedPulseTick_100ms = 0;
  1428  055C  0020               	movlb	0	; select bank0
  1429  055D  01AA               	clrf	_LedPulseTick_100ms
  1430  055E  2D7D               	goto	l86
  1431  055F                     l1880:	
  1432                           
  1433                           ;main.c: 187: if (LedPulseTick_100ms++ > 0) {
  1434  055F  0AAA               	incf	_LedPulseTick_100ms,f
  1435  0560  032A               	decf	_LedPulseTick_100ms,w
  1436  0561  1903               	btfsc	3,2
  1437  0562  2D7D               	goto	l86
  1438  0563  2D59               	goto	l1876
  1439  0564                     l85:	
  1440                           ;main.c: 192: default:
  1441                           
  1442                           ;main.c: 188: LATCbits.LATC3 = ~LATCbits.LATC3;
  1443                           
  1444  0564  2D7B               	goto	l1892
  1445  0565                     l1888:	
  1446                           ;main.c: 194: break;
  1447                           
  1448                           ;main.c: 193: LATCbits.LATC3 = OFF;
  1449                           
  1450  0565  0827               	movf	_DevMode,w
  1451  0566  3907               	andlw	7
  1452  0567  00DA               	movwf	??_main
  1453  0568  01DB               	clrf	??_main+1
  1454                           
  1455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1456                           ; Switch size 1, requested type "space"
  1457                           ; Number of cases is 1, Range of values is 0 to 0
  1458                           ; switch strategies available:
  1459                           ; Name         Instructions Cycles
  1460                           ; simple_byte            4     3 (average)
  1461                           ; direct_byte            8     6 (fixed)
  1462                           ; jumptable            260     6 (fixed)
  1463                           ;	Chosen strategy is simple_byte
  1464  0569  085B               	movf	??_main+1,w
  1465  056A  3A00               	xorlw	0	; case 0
  1466  056B  1903               	skipnz
  1467  056C  2D6E               	goto	l2122
  1468  056D  2D64               	goto	l85
  1469  056E                     l2122:	
  1470                           
  1471                           ; Switch size 1, requested type "space"
  1472                           ; Number of cases is 3, Range of values is 1 to 4
  1473                           ; switch strategies available:
  1474                           ; Name         Instructions Cycles
  1475                           ; simple_byte           10     6 (average)
  1476                           ; direct_byte           17     9 (fixed)
  1477                           ; jumptable            263     9 (fixed)
  1478                           ;	Chosen strategy is simple_byte
  1479  056E  085A               	movf	??_main,w
  1480  056F  3A01               	xorlw	1	; case 1
  1481  0570  1903               	skipnz
  1482  0571  2D4F               	goto	l79
  1483  0572  3A03               	xorlw	3	; case 2
  1484  0573  1903               	skipnz
  1485  0574  2D52               	goto	l1874
  1486  0575  3A06               	xorlw	6	; case 4
  1487  0576  1903               	skipnz
  1488  0577  2D5F               	goto	l1880
  1489  0578  2D64               	goto	l85
  1490  0579                     l1890:	
  1491                           
  1492                           ;main.c: 197: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1493  0579  30F8               	movlw	248
  1494  057A  05A7               	andwf	_DevMode,f
  1495  057B                     l1892:	
  1496                           
  1497                           ;main.c: 198: LATCbits.LATC3 = OFF;
  1498  057B  0022               	movlb	2	; select bank2
  1499  057C  118E               	bcf	14,3	;volatile
  1500  057D                     l86:	
  1501                           
  1502                           ;main.c: 199: }
  1503                           ;main.c: 200: if (SkipHandling != 0) {
  1504  057D  0020               	movlb	0	; select bank0
  1505  057E  0826               	movf	_SkipHandling,w
  1506  057F  1903               	btfsc	3,2
  1507  0580  2D86               	goto	l87
  1508                           
  1509                           ;main.c: 201: if (Keys[CD].State == 0) {
  1510  0581  083C               	movf	_Keys+16,w
  1511  0582  1D03               	btfss	3,2
  1512  0583  2F83               	goto	l2046
  1513                           
  1514                           ;main.c: 202: SkipHandling--;
  1515  0584  03A6               	decf	_SkipHandling,f
  1516  0585  2F83               	goto	l2046
  1517  0586                     l87:	
  1518                           
  1519                           ;main.c: 205: if ((DevMode & BIND_ACTIVE) != 0) {
  1520  0586  1C27               	btfss	_DevMode,0
  1521  0587  2DBE               	goto	l90
  1522                           
  1523                           ;main.c: 206: for (uint8_t chn = 0; chn < 4; chn++) {
  1524  0588  01DC               	clrf	main@chn
  1525  0589                     l1904:	
  1526                           
  1527                           ;main.c: 207: if (Keys[chn].State != Keys[chn].StateTemp) {
  1528  0589  085C               	movf	main@chn,w
  1529  058A  0709               	addwf	9,w
  1530  058B  0709               	addwf	9,w
  1531  058C  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1532  058D  0086               	movwf	6
  1533  058E  0187               	clrf	7
  1534  058F  085C               	movf	main@chn,w
  1535  0590  0709               	addwf	9,w
  1536  0591  0709               	addwf	9,w
  1537  0592  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1538  0593  0084               	movwf	4
  1539  0594  0185               	clrf	5
  1540  0595  0800               	movf	0,w
  1541  0596  0601               	xorwf	1,w
  1542  0597  1903               	skipnz
  1543  0598  2DB8               	goto	l1914
  1544                           
  1545                           ;main.c: 208: if (Keys[chn].State == 0) {
  1546  0599  085C               	movf	main@chn,w
  1547  059A  0709               	addwf	9,w
  1548  059B  0709               	addwf	9,w
  1549  059C  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1550  059D  0086               	movwf	6
  1551  059E  0801               	movf	1,w
  1552  059F  1D03               	btfss	3,2
  1553  05A0  2DAA               	goto	l1912
  1554                           
  1555                           ;main.c: 209: noolite_send(chn, CMD_Bind, 0, &noo_send_data[0]);
  1556  05A1  300F               	movlw	15
  1557  05A2  00F0               	movwf	noolite_send@noo_send_command
  1558  05A3  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1559  05A4  01F1               	clrf	noolite_send@noo_send_format
  1560  05A5  00F2               	movwf	noolite_send@data
  1561  05A6  085C               	movf	main@chn,w
  1562  05A7  234B               	fcall	_noolite_send
  1563                           
  1564                           ;main.c: 210: DevMode &= ~BIND_ACTIVE;
  1565  05A8  0020               	movlb	0	; select bank0
  1566  05A9  1027               	bcf	_DevMode,0
  1567  05AA                     l1912:	
  1568                           
  1569                           ;main.c: 211: }
  1570                           ;main.c: 212: Keys[chn].StateTemp = Keys[chn].State;
  1571  05AA  085C               	movf	main@chn,w
  1572  05AB  0709               	addwf	9,w
  1573  05AC  0709               	addwf	9,w
  1574  05AD  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1575  05AE  0086               	movwf	6
  1576  05AF  0187               	clrf	7
  1577  05B0  085C               	movf	main@chn,w
  1578  05B1  0709               	addwf	9,w
  1579  05B2  0709               	addwf	9,w
  1580  05B3  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1581  05B4  0084               	movwf	4
  1582  05B5  0185               	clrf	5
  1583  05B6  0800               	movf	0,w
  1584  05B7  0081               	movwf	1
  1585  05B8                     l1914:	
  1586  05B8  3004               	movlw	4
  1587  05B9  0ADC               	incf	main@chn,f
  1588  05BA  025C               	subwf	main@chn,w
  1589  05BB  1803               	btfsc	3,0
  1590  05BC  2F83               	goto	l2046
  1591  05BD  2D89               	goto	l1904
  1592  05BE                     l90:	
  1593  05BE  1CA7               	btfss	_DevMode,1
  1594  05BF  2DF9               	goto	l96
  1595                           
  1596                           ;main.c: 216: for (uint8_t chn = 0; chn < 4; chn++) {
  1597  05C0  01DD               	clrf	main@chn_250
  1598  05C1                     l1920:	
  1599  05C1  3004               	movlw	4
  1600  05C2  025D               	subwf	main@chn_250,w
  1601  05C3  1803               	btfsc	3,0
  1602  05C4  2F83               	goto	l2046
  1603                           
  1604                           ;main.c: 217: if (Keys[chn].State != Keys[chn].StateTemp) {
  1605  05C5  085D               	movf	main@chn_250,w
  1606  05C6  0709               	addwf	9,w
  1607  05C7  0709               	addwf	9,w
  1608  05C8  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1609  05C9  0086               	movwf	6
  1610  05CA  0187               	clrf	7
  1611  05CB  085D               	movf	main@chn_250,w
  1612  05CC  0709               	addwf	9,w
  1613  05CD  0709               	addwf	9,w
  1614  05CE  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1615  05CF  0084               	movwf	4
  1616  05D0  0185               	clrf	5
  1617  05D1  0800               	movf	0,w
  1618  05D2  0601               	xorwf	1,w
  1619  05D3  1903               	skipnz
  1620  05D4  2DF7               	goto	l1936
  1621                           
  1622                           ;main.c: 218: if (Keys[chn].State == 0) {
  1623  05D5  085D               	movf	main@chn_250,w
  1624  05D6  0709               	addwf	9,w
  1625  05D7  0709               	addwf	9,w
  1626  05D8  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1627  05D9  0086               	movwf	6
  1628  05DA  0801               	movf	1,w
  1629  05DB  1D03               	btfss	3,2
  1630  05DC  2DE8               	goto	l1934
  1631                           
  1632                           ;main.c: 219: noolite_send(chn, CMD_Unbind, 0, &noo_send_data[0]);
  1633  05DD  3009               	movlw	9
  1634  05DE  00F0               	movwf	noolite_send@noo_send_command
  1635  05DF  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1636  05E0  01F1               	clrf	noolite_send@noo_send_format
  1637  05E1  00F2               	movwf	noolite_send@data
  1638  05E2  085D               	movf	main@chn_250,w
  1639  05E3  234B               	fcall	_noolite_send
  1640                           
  1641                           ;main.c: 220: DevMode &= ~UNBIND_ACTIVE;
  1642  05E4  0020               	movlb	0	; select bank0
  1643  05E5  10A7               	bcf	_DevMode,1
  1644                           
  1645                           ;main.c: 221: LATCbits.LATC3 = OFF;
  1646  05E6  0022               	movlb	2	; select bank2
  1647  05E7  118E               	bcf	14,3	;volatile
  1648  05E8                     l1934:	
  1649                           
  1650                           ;main.c: 222: }
  1651                           ;main.c: 223: Keys[chn].StateTemp = Keys[chn].State;
  1652  05E8  0020               	movlb	0	; select bank0
  1653  05E9  085D               	movf	main@chn_250,w
  1654  05EA  0709               	addwf	9,w
  1655  05EB  0709               	addwf	9,w
  1656  05EC  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1657  05ED  0086               	movwf	6
  1658  05EE  0187               	clrf	7
  1659  05EF  085D               	movf	main@chn_250,w
  1660  05F0  0709               	addwf	9,w
  1661  05F1  0709               	addwf	9,w
  1662  05F2  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1663  05F3  0084               	movwf	4
  1664  05F4  0185               	clrf	5
  1665  05F5  0800               	movf	0,w
  1666  05F6  0081               	movwf	1
  1667  05F7                     l1936:	
  1668  05F7  0ADD               	incf	main@chn_250,f
  1669  05F8  2DC1               	goto	l1920
  1670  05F9                     l96:	
  1671  05F9  1D27               	btfss	_DevMode,2
  1672  05FA  2E5D               	goto	l1968
  1673                           
  1674                           ;main.c: 227: for (uint8_t chn = 0; chn < 4; chn++) {
  1675  05FB  01DE               	clrf	main@chn_251
  1676  05FC                     l1942:	
  1677  05FC  3004               	movlw	4
  1678  05FD  025E               	subwf	main@chn_251,w
  1679  05FE  1803               	btfsc	3,0
  1680  05FF  2F83               	goto	l2046
  1681                           
  1682                           ;main.c: 228: if (Keys[chn].State != Keys[chn].StateTemp) {
  1683  0600  085E               	movf	main@chn_251,w
  1684  0601  0709               	addwf	9,w
  1685  0602  0709               	addwf	9,w
  1686  0603  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1687  0604  0086               	movwf	6
  1688  0605  0187               	clrf	7
  1689  0606  085E               	movf	main@chn_251,w
  1690  0607  0709               	addwf	9,w
  1691  0608  0709               	addwf	9,w
  1692  0609  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1693  060A  0084               	movwf	4
  1694  060B  0185               	clrf	5
  1695  060C  0800               	movf	0,w
  1696  060D  0601               	xorwf	1,w
  1697  060E  1903               	skipnz
  1698  060F  2E5B               	goto	l1964
  1699                           
  1700                           ;main.c: 229: if (Keys[chn].State == 0) {
  1701  0610  085E               	movf	main@chn_251,w
  1702  0611  0709               	addwf	9,w
  1703  0612  0709               	addwf	9,w
  1704  0613  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1705  0614  0086               	movwf	6
  1706  0615  0801               	movf	1,w
  1707  0616  1D03               	btfss	3,2
  1708  0617  2E4C               	goto	l1962
  1709  0618  0064               	clrwdt	;# 
  1710                           
  1711                           ;main.c: 231: LATCbits.LATC3 = ON;
  1712  0619  0022               	movlb	2	; select bank2
  1713  061A  158E               	bsf	14,3	;volatile
  1714                           
  1715                           ;main.c: 232: FlashEraseRow(TYPE_ADR);
  1716  061B  30C0               	movlw	192
  1717  061C  00F0               	movwf	FlashEraseRow@rowAddr
  1718  061D  3007               	movlw	7
  1719  061E  00F1               	movwf	FlashEraseRow@rowAddr+1
  1720  061F  2116               	fcall	_FlashEraseRow
  1721  0620  0064               	clrwdt	;# 
  1722                           
  1723                           ;main.c: 234: FlashWrite(TYPE_ADR, chn);
  1724  0621  30C0               	movlw	192
  1725  0622  00F0               	movwf	FlashWrite@addr
  1726  0623  3007               	movlw	7
  1727  0624  00F1               	movwf	FlashWrite@addr+1
  1728  0625  0020               	movlb	0	; select bank0
  1729  0626  085E               	movf	main@chn_251,w
  1730  0627  00F2               	movwf	FlashWrite@flash_data
  1731  0628  01F3               	clrf	FlashWrite@flash_data+1
  1732  0629  2133               	fcall	_FlashWrite
  1733  062A  0064               	clrwdt	;# 
  1734                           
  1735                           ;main.c: 236: FlashWrite(TYPE_ADR + 1, 0x5A);
  1736  062B  30C1               	movlw	193
  1737  062C  00F0               	movwf	FlashWrite@addr
  1738  062D  3007               	movlw	7
  1739  062E  00F1               	movwf	FlashWrite@addr+1
  1740  062F  305A               	movlw	90
  1741  0630  00F2               	movwf	FlashWrite@flash_data
  1742  0631  01F3               	clrf	FlashWrite@flash_data+1
  1743  0632  2133               	fcall	_FlashWrite
  1744  0633  0064               	clrwdt	;# 
  1745                           
  1746                           ;main.c: 239: _delay((unsigned long)((500)*(8000000/4000.0)));
  1747  0634  3006               	movlw	6
  1748  0635  0020               	movlb	0	; select bank0
  1749  0636  00DB               	movwf	??_main+1
  1750  0637  3013               	movlw	19
  1751  0638  00DA               	movwf	??_main
  1752  0639  30AD               	movlw	173
  1753  063A                     u1647:	
  1754  063A  0B89               	decfsz	9,f
  1755  063B  2E3A               	goto	u1647
  1756  063C  0BDA               	decfsz	??_main,f
  1757  063D  2E3A               	goto	u1647
  1758  063E  0BDB               	decfsz	??_main+1,f
  1759  063F  2E3A               	goto	u1647
  1760  0640  3200               	nop2
  1761  0641  0064               	clrwdt	;# 
  1762                           
  1763                           ;main.c: 241: DevType = Init_TypeFromFlash(&Type[0]);
  1764  0642  30C0               	movlw	192
  1765  0643  00F0               	movwf	Init_TypeFromFlash@type
  1766  0644  3087               	movlw	135
  1767  0645  00F1               	movwf	Init_TypeFromFlash@type+1
  1768  0646  2146               	fcall	_Init_TypeFromFlash
  1769  0647  0020               	movlb	0	; select bank0
  1770  0648  00A8               	movwf	_DevType
  1771                           
  1772                           ;main.c: 242: DevMode &= ~MODE_CHANGE_ACTIVE;
  1773  0649  1127               	bcf	_DevMode,2
  1774                           
  1775                           ;main.c: 243: LATCbits.LATC3 = OFF;
  1776  064A  0022               	movlb	2	; select bank2
  1777  064B  118E               	bcf	14,3	;volatile
  1778  064C                     l1962:	
  1779                           
  1780                           ;main.c: 244: }
  1781                           ;main.c: 245: Keys[chn].StateTemp = Keys[chn].State;
  1782  064C  0020               	movlb	0	; select bank0
  1783  064D  085E               	movf	main@chn_251,w
  1784  064E  0709               	addwf	9,w
  1785  064F  0709               	addwf	9,w
  1786  0650  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1787  0651  0086               	movwf	6
  1788  0652  0187               	clrf	7
  1789  0653  085E               	movf	main@chn_251,w
  1790  0654  0709               	addwf	9,w
  1791  0655  0709               	addwf	9,w
  1792  0656  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1793  0657  0084               	movwf	4
  1794  0658  0185               	clrf	5
  1795  0659  0800               	movf	0,w
  1796  065A  0081               	movwf	1
  1797  065B                     l1964:	
  1798  065B  0ADE               	incf	main@chn_251,f
  1799  065C  2DFC               	goto	l1942
  1800  065D                     l1968:	
  1801                           
  1802                           ;main.c: 249: for (uint8_t chn = 0; chn < 4; chn++) {
  1803  065D  01DF               	clrf	main@chn_252
  1804  065E                     l1970:	
  1805  065E  3004               	movlw	4
  1806  065F  025F               	subwf	main@chn_252,w
  1807  0660  1803               	btfsc	3,0
  1808  0661  2F83               	goto	l2046
  1809                           
  1810                           ;main.c: 250: if (Keys[chn].State != Keys[chn].StateTemp) {
  1811  0662  085F               	movf	main@chn_252,w
  1812  0663  0709               	addwf	9,w
  1813  0664  0709               	addwf	9,w
  1814  0665  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1815  0666  0086               	movwf	6
  1816  0667  0187               	clrf	7
  1817  0668  085F               	movf	main@chn_252,w
  1818  0669  0709               	addwf	9,w
  1819  066A  0709               	addwf	9,w
  1820  066B  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1821  066C  0084               	movwf	4
  1822  066D  0185               	clrf	5
  1823  066E  0800               	movf	0,w
  1824  066F  0601               	xorwf	1,w
  1825  0670  1D03               	btfss	3,2
  1826  0671  2EF1               	goto	l2012
  1827  0672  2F72               	goto	l2040
  1828  0673                     l1978:	
  1829                           
  1830                           ;main.c: 253: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1831  0673  085F               	movf	main@chn_252,w
  1832  0674  00FB               	movwf	KeyOffHandler@chn
  1833  0675  3004               	movlw	4
  1834  0676  00FC               	movwf	KeyOffHandler@cmd
  1835  0677  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1836  0678  00FD               	movwf	KeyOffHandler@nooData
  1837  0679  085F               	movf	main@chn_252,w
  1838  067A  0709               	addwf	9,w
  1839  067B  0709               	addwf	9,w
  1840  067C  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1841  067D  2190               	fcall	_KeyOffHandler
  1842                           
  1843                           ;main.c: 254: break;
  1844  067E  2EFF               	goto	l2014
  1845  067F                     l1980:	
  1846                           
  1847                           ;main.c: 256: if ((chn == 0) || (chn == 2)) {
  1848  067F  085F               	movf	main@chn_252,w
  1849  0680  1903               	btfsc	3,2
  1850  0681  2E86               	goto	l1984
  1851  0682  3002               	movlw	2
  1852  0683  065F               	xorwf	main@chn_252,w
  1853  0684  1D03               	btfss	3,2
  1854  0685  2E91               	goto	l1986
  1855  0686                     l1984:	
  1856                           
  1857                           ;main.c: 257: KeyOffHandler(&Keys[chn], chn, CMD_OFF, &noo_send_data[0]);
  1858  0686  085F               	movf	main@chn_252,w
  1859  0687  00FB               	movwf	KeyOffHandler@chn
  1860  0688  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1861  0689  01FC               	clrf	KeyOffHandler@cmd
  1862  068A  00FD               	movwf	KeyOffHandler@nooData
  1863  068B  085F               	movf	main@chn_252,w
  1864  068C  0709               	addwf	9,w
  1865  068D  0709               	addwf	9,w
  1866  068E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1867  068F  2190               	fcall	_KeyOffHandler
  1868                           
  1869                           ;main.c: 258: } else {
  1870  0690  2EFF               	goto	l2014
  1871  0691                     l1986:	
  1872                           
  1873                           ;main.c: 259: KeyOffHandler(&Keys[chn], chn, CMD_ON, &noo_send_data[0]);
  1874  0691  085F               	movf	main@chn_252,w
  1875  0692  00FB               	movwf	KeyOffHandler@chn
  1876  0693  3002               	movlw	2
  1877  0694  00FC               	movwf	KeyOffHandler@cmd
  1878  0695  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1879  0696  00FD               	movwf	KeyOffHandler@nooData
  1880  0697  085F               	movf	main@chn_252,w
  1881  0698  0709               	addwf	9,w
  1882  0699  0709               	addwf	9,w
  1883  069A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1884  069B  2190               	fcall	_KeyOffHandler
  1885                           
  1886                           ;main.c: 260: }
  1887                           ;main.c: 261: break;
  1888  069C  2EFF               	goto	l2014
  1889  069D                     l1988:	
  1890                           
  1891                           ;main.c: 263: if (chn > 1) {
  1892  069D  3002               	movlw	2
  1893  069E  025F               	subwf	main@chn_252,w
  1894                           
  1895                           ;main.c: 264: if (Keys[chn].State == 0) {
  1896  069F  085F               	movf	main@chn_252,w
  1897  06A0  1C03               	skipc
  1898  06A1  2EBF               	goto	L2
  1899  06A2  0709               	addwf	9,w
  1900  06A3  0709               	addwf	9,w
  1901  06A4  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1902  06A5  0086               	movwf	6
  1903  06A6  0187               	clrf	7
  1904  06A7  0801               	movf	1,w
  1905  06A8  1D03               	btfss	3,2
  1906  06A9  2EFF               	goto	l2014
  1907                           
  1908                           ;main.c: 265: if (Keys[chn].Tick100ms < 10) {
  1909  06AA  085F               	movf	main@chn_252,w
  1910  06AB  0709               	addwf	9,w
  1911  06AC  0709               	addwf	9,w
  1912  06AD  3E2E               	addlw	(low ((_Keys| 0+2)))& (0+255)
  1913  06AE  0086               	movwf	6
  1914  06AF  300A               	movlw	10
  1915  06B0  0201               	subwf	1,w
  1916  06B1  1803               	skipnc
  1917  06B2  2EFF               	goto	l2014
  1918                           
  1919                           ;main.c: 266: if (chn > 1) {
  1920  06B3  3002               	movlw	2
  1921  06B4  025F               	subwf	main@chn_252,w
  1922  06B5  1C03               	skipc
  1923  06B6  2EFF               	goto	l2014
  1924                           
  1925                           ;main.c: 267: noolite_send(chn, CMD_Load_Preset, 0, &noo_send_data[0]);
  1926  06B7  3007               	movlw	7
  1927  06B8  00F0               	movwf	noolite_send@noo_send_command
  1928  06B9  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1929  06BA  01F1               	clrf	noolite_send@noo_send_format
  1930  06BB  00F2               	movwf	noolite_send@data
  1931  06BC  085F               	movf	main@chn_252,w
  1932  06BD  234B               	fcall	_noolite_send
  1933  06BE  2EFF               	goto	l2014
  1934  06BF                     L2:	
  1935                           ;main.c: 272: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1936                           
  1937  06BF  00FB               	movwf	KeyOffHandler@chn
  1938  06C0  3004               	movlw	4
  1939  06C1  00FC               	movwf	KeyOffHandler@cmd
  1940  06C2  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1941  06C3  00FD               	movwf	KeyOffHandler@nooData
  1942  06C4  085F               	movf	main@chn_252,w
  1943  06C5  0709               	addwf	9,w
  1944  06C6  0709               	addwf	9,w
  1945  06C7  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1946  06C8  2190               	fcall	_KeyOffHandler
  1947  06C9  2EFF               	goto	l2014
  1948  06CA                     l2000:	
  1949                           
  1950                           ;main.c: 276: if (chn > 1) {
  1951  06CA  3002               	movlw	2
  1952  06CB  025F               	subwf	main@chn_252,w
  1953                           
  1954                           ;main.c: 277: if (Keys[chn].State) {
  1955  06CC  085F               	movf	main@chn_252,w
  1956  06CD  1C03               	skipc
  1957  06CE  2EE6               	goto	L3
  1958  06CF  0709               	addwf	9,w
  1959  06D0  0709               	addwf	9,w
  1960  06D1  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1961  06D2  0086               	movwf	6
  1962  06D3  0187               	clrf	7
  1963  06D4  0801               	movf	1,w
  1964  06D5  1903               	btfsc	3,2
  1965  06D6  2EDF               	goto	l2006
  1966                           
  1967                           ;main.c: 278: noolite_send(chn, CMD_ON, 0, &noo_send_data[0]);
  1968  06D7  3002               	movlw	2
  1969  06D8  00F0               	movwf	noolite_send@noo_send_command
  1970  06D9  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1971  06DA  01F1               	clrf	noolite_send@noo_send_format
  1972  06DB  00F2               	movwf	noolite_send@data
  1973  06DC  085F               	movf	main@chn_252,w
  1974  06DD  234B               	fcall	_noolite_send
  1975                           
  1976                           ;main.c: 279: } else {
  1977  06DE  2EFF               	goto	l2014
  1978  06DF                     l2006:	
  1979  06DF  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1980                           
  1981                           ;main.c: 280: noolite_send(chn, CMD_OFF, 0, &noo_send_data[0]);
  1982  06E0  01F0               	clrf	noolite_send@noo_send_command
  1983  06E1  01F1               	clrf	noolite_send@noo_send_format
  1984  06E2  00F2               	movwf	noolite_send@data
  1985  06E3  085F               	movf	main@chn_252,w
  1986  06E4  234B               	fcall	_noolite_send
  1987  06E5  2EFF               	goto	l2014
  1988  06E6                     L3:	
  1989                           ;main.c: 283: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1990                           
  1991  06E6  00FB               	movwf	KeyOffHandler@chn
  1992  06E7  3004               	movlw	4
  1993  06E8  00FC               	movwf	KeyOffHandler@cmd
  1994  06E9  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1995  06EA  00FD               	movwf	KeyOffHandler@nooData
  1996  06EB  085F               	movf	main@chn_252,w
  1997  06EC  0709               	addwf	9,w
  1998  06ED  0709               	addwf	9,w
  1999  06EE  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2000  06EF  2190               	fcall	_KeyOffHandler
  2001  06F0  2EFF               	goto	l2014
  2002  06F1                     l2012:	
  2003  06F1  0828               	movf	_DevType,w
  2004                           
  2005                           ; Switch size 1, requested type "space"
  2006                           ; Number of cases is 4, Range of values is 0 to 3
  2007                           ; switch strategies available:
  2008                           ; Name         Instructions Cycles
  2009                           ; simple_byte           13     7 (average)
  2010                           ; direct_byte           14     6 (fixed)
  2011                           ; jumptable            260     6 (fixed)
  2012                           ;	Chosen strategy is simple_byte
  2013  06F2  3A00               	xorlw	0	; case 0
  2014  06F3  1903               	skipnz
  2015  06F4  2E73               	goto	l1978
  2016  06F5  3A01               	xorlw	1	; case 1
  2017  06F6  1903               	skipnz
  2018  06F7  2E7F               	goto	l1980
  2019  06F8  3A03               	xorlw	3	; case 2
  2020  06F9  1903               	skipnz
  2021  06FA  2E9D               	goto	l1988
  2022  06FB  3A01               	xorlw	1	; case 3
  2023  06FC  1903               	skipnz
  2024  06FD  2ECA               	goto	l2000
  2025  06FE  2EFF               	goto	l2014
  2026  06FF                     l2014:	
  2027                           
  2028                           ;main.c: 287: OffDelayTicks_100ms = 3;
  2029  06FF  3003               	movlw	3
  2030  0700  0020               	movlb	0	; select bank0
  2031  0701  00A5               	movwf	_OffDelayTicks_100ms
  2032                           
  2033                           ;main.c: 288: Keys[chn].StateTemp = Keys[chn].State;
  2034  0702  085F               	movf	main@chn_252,w
  2035  0703  0709               	addwf	9,w
  2036  0704  0709               	addwf	9,w
  2037  0705  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  2038  0706  0086               	movwf	6
  2039  0707  0187               	clrf	7
  2040  0708  085F               	movf	main@chn_252,w
  2041  0709  0709               	addwf	9,w
  2042  070A  0709               	addwf	9,w
  2043  070B  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2044  070C  0084               	movwf	4
  2045  070D  0185               	clrf	5
  2046  070E  0800               	movf	0,w
  2047  070F  0081               	movwf	1
  2048  0710  2F72               	goto	l2040
  2049  0711                     l2018:	
  2050                           
  2051                           ;main.c: 293: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2052  0711  085F               	movf	main@chn_252,w
  2053  0712  00D6               	movwf	KeyLongHandler@chn
  2054  0713  3005               	movlw	5
  2055  0714  00D7               	movwf	KeyLongHandler@cmd
  2056  0715  3009               	movlw	9
  2057  0716  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2058  0717  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2059  0718  00D9               	movwf	KeyLongHandler@nooData
  2060  0719  085F               	movf	main@chn_252,w
  2061  071A  0709               	addwf	9,w
  2062  071B  0709               	addwf	9,w
  2063  071C  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2064  071D  2164               	fcall	_KeyLongHandler
  2065                           
  2066                           ;main.c: 294: break;
  2067  071E  2F80               	goto	l2042
  2068  071F                     l2020:	
  2069                           
  2070                           ;main.c: 296: if (chn == 0 || chn == 2) {
  2071  071F  085F               	movf	main@chn_252,w
  2072  0720  1903               	btfsc	3,2
  2073  0721  2F26               	goto	l2024
  2074  0722  3002               	movlw	2
  2075  0723  065F               	xorwf	main@chn_252,w
  2076  0724  1D03               	btfss	3,2
  2077  0725  2F34               	goto	l2026
  2078  0726                     l2024:	
  2079                           
  2080                           ;main.c: 297: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Down, 9, &noo_send_data[0]);
  2081  0726  085F               	movf	main@chn_252,w
  2082  0727  00D6               	movwf	KeyLongHandler@chn
  2083  0728  3009               	movlw	9
  2084  0729  01D7               	clrf	KeyLongHandler@cmd
  2085  072A  0AD7               	incf	KeyLongHandler@cmd,f
  2086  072B  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2087  072C  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2088  072D  00D9               	movwf	KeyLongHandler@nooData
  2089  072E  085F               	movf	main@chn_252,w
  2090  072F  0709               	addwf	9,w
  2091  0730  0709               	addwf	9,w
  2092  0731  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2093  0732  2164               	fcall	_KeyLongHandler
  2094                           
  2095                           ;main.c: 298: } else {
  2096  0733  2F80               	goto	l2042
  2097  0734                     l2026:	
  2098                           
  2099                           ;main.c: 299: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Up, 9, &noo_send_data[0]);
  2100  0734  085F               	movf	main@chn_252,w
  2101  0735  00D6               	movwf	KeyLongHandler@chn
  2102  0736  3003               	movlw	3
  2103  0737  00D7               	movwf	KeyLongHandler@cmd
  2104  0738  3009               	movlw	9
  2105  0739  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2106  073A  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2107  073B  00D9               	movwf	KeyLongHandler@nooData
  2108  073C  085F               	movf	main@chn_252,w
  2109  073D  0709               	addwf	9,w
  2110  073E  0709               	addwf	9,w
  2111  073F  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2112  0740  2164               	fcall	_KeyLongHandler
  2113  0741  2F80               	goto	l2042
  2114  0742                     l2028:	
  2115                           
  2116                           ;main.c: 303: if (chn < 2) {
  2117  0742  3002               	movlw	2
  2118  0743  025F               	subwf	main@chn_252,w
  2119                           
  2120                           ;main.c: 304: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2121  0744  085F               	movf	main@chn_252,w
  2122  0745  00D6               	movwf	KeyLongHandler@chn
  2123  0746  1803               	skipnc
  2124  0747  2F54               	goto	L4
  2125  0748  3005               	movlw	5
  2126  0749  00D7               	movwf	KeyLongHandler@cmd
  2127  074A  3009               	movlw	9
  2128  074B  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2129  074C  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2130  074D  00D9               	movwf	KeyLongHandler@nooData
  2131  074E  085F               	movf	main@chn_252,w
  2132  074F  0709               	addwf	9,w
  2133  0750  0709               	addwf	9,w
  2134  0751  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2135  0752  2164               	fcall	_KeyLongHandler
  2136                           
  2137                           ;main.c: 305: } else {
  2138  0753  2F80               	goto	l2042
  2139  0754                     L4:	
  2140                           ;main.c: 306: KeyLongHandler(&Keys[chn], chn, CMD_Save_Preset, 49, &noo_send_data[0]);
  2141                           
  2142  0754  3008               	movlw	8
  2143  0755  00D7               	movwf	KeyLongHandler@cmd
  2144  0756  3031               	movlw	49
  2145  0757  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2146  0758  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2147  0759  00D9               	movwf	KeyLongHandler@nooData
  2148  075A  085F               	movf	main@chn_252,w
  2149  075B  0709               	addwf	9,w
  2150  075C  0709               	addwf	9,w
  2151  075D  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2152  075E  2164               	fcall	_KeyLongHandler
  2153  075F  2F80               	goto	l2042
  2154  0760                     l2034:	
  2155                           
  2156                           ;main.c: 310: if (chn < 2) {
  2157  0760  3002               	movlw	2
  2158  0761  025F               	subwf	main@chn_252,w
  2159  0762  1803               	skipnc
  2160  0763  2F80               	goto	l2042
  2161                           
  2162                           ;main.c: 311: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2163  0764  085F               	movf	main@chn_252,w
  2164  0765  00D6               	movwf	KeyLongHandler@chn
  2165  0766  3005               	movlw	5
  2166  0767  00D7               	movwf	KeyLongHandler@cmd
  2167  0768  3009               	movlw	9
  2168  0769  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2169  076A  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2170  076B  00D9               	movwf	KeyLongHandler@nooData
  2171  076C  085F               	movf	main@chn_252,w
  2172  076D  0709               	addwf	9,w
  2173  076E  0709               	addwf	9,w
  2174  076F  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2175  0770  2164               	fcall	_KeyLongHandler
  2176  0771  2F80               	goto	l2042
  2177  0772                     l2040:	
  2178  0772  0828               	movf	_DevType,w
  2179                           
  2180                           ; Switch size 1, requested type "space"
  2181                           ; Number of cases is 4, Range of values is 0 to 3
  2182                           ; switch strategies available:
  2183                           ; Name         Instructions Cycles
  2184                           ; simple_byte           13     7 (average)
  2185                           ; direct_byte           14     6 (fixed)
  2186                           ; jumptable            260     6 (fixed)
  2187                           ;	Chosen strategy is simple_byte
  2188  0773  3A00               	xorlw	0	; case 0
  2189  0774  1903               	skipnz
  2190  0775  2F11               	goto	l2018
  2191  0776  3A01               	xorlw	1	; case 1
  2192  0777  1903               	skipnz
  2193  0778  2F1F               	goto	l2020
  2194  0779  3A03               	xorlw	3	; case 2
  2195  077A  1903               	skipnz
  2196  077B  2F42               	goto	l2028
  2197  077C  3A01               	xorlw	1	; case 3
  2198  077D  1903               	skipnz
  2199  077E  2F60               	goto	l2034
  2200  077F  2F80               	goto	l2042
  2201  0780                     l2042:	
  2202  0780  0020               	movlb	0	; select bank0
  2203  0781  0ADF               	incf	main@chn_252,f
  2204  0782  2E5E               	goto	l1970
  2205  0783                     l2046:	
  2206                           
  2207                           ;main.c: 315: }
  2208                           ;main.c: 316: }
  2209                           ;main.c: 317: }
  2210                           ;main.c: 318: if (OffDelayTicks_100ms != 0) {
  2211  0783  0825               	movf	_OffDelayTicks_100ms,w
  2212  0784  1903               	btfsc	3,2
  2213  0785  2F88               	goto	l143
  2214                           
  2215                           ;main.c: 319: OffDelayTicks_100ms--;
  2216  0786  03A5               	decf	_OffDelayTicks_100ms,f
  2217                           
  2218                           ;main.c: 320: } else {
  2219  0787  2F89               	goto	l2050
  2220  0788                     l143:	
  2221                           
  2222                           ;main.c: 321: DevMode |= GO_OFF;
  2223  0788  15A7               	bsf	_DevMode,3
  2224  0789                     l2050:	
  2225                           
  2226                           ;main.c: 322: }
  2227                           ;main.c: 324: if (((DevMode & 0x07) == 0) && ((PORTA & All_Pressed) == 0) && ((DevMode &
      +                           GO_OFF) != 0)) {
  2228  0789  0827               	movf	_DevMode,w
  2229  078A  3907               	andlw	7
  2230  078B  1D03               	btfss	3,2
  2231  078C  2FA8               	goto	l2062
  2232  078D  080C               	movf	12,w	;volatile
  2233  078E  3917               	andlw	23
  2234  078F  1903               	btfsc	3,2
  2235  0790  1DA7               	btfss	_DevMode,3
  2236  0791  2FA8               	goto	l2062
  2237                           
  2238                           ;main.c: 325: SaveTxStatusToFlash(&TxStatus[0], TX_STATUS_ADR, tx_status);
  2239  0792  30D0               	movlw	208
  2240  0793  00F4               	movwf	SaveTxStatusToFlash@txStatusArray
  2241  0794  3087               	movlw	135
  2242  0795  00F5               	movwf	SaveTxStatusToFlash@txStatusArray+1
  2243  0796  30D0               	movlw	208
  2244  0797  00F6               	movwf	SaveTxStatusToFlash@txStatusAdr
  2245  0798  3007               	movlw	7
  2246  0799  00F7               	movwf	SaveTxStatusToFlash@txStatusAdr+1
  2247  079A  082B               	movf	_tx_status,w
  2248  079B  00F8               	movwf	SaveTxStatusToFlash@txStatusVal
  2249  079C  21D0               	fcall	_SaveTxStatusToFlash
  2250                           
  2251                           ;main.c: 326: LATCbits.LATC5 = 0;
  2252  079D  0022               	movlb	2	; select bank2
  2253  079E  128E               	bcf	14,5	;volatile
  2254                           
  2255                           ;main.c: 327: _delay((unsigned long)((15)*(8000000/4000.0)));
  2256  079F  3027               	movlw	39
  2257  07A0  0020               	movlb	0	; select bank0
  2258  07A1  00DA               	movwf	??_main
  2259  07A2  30F5               	movlw	245
  2260  07A3                     u1657:	
  2261  07A3  0B89               	decfsz	9,f
  2262  07A4  2FA3               	goto	u1657
  2263  07A5  0BDA               	decfsz	??_main,f
  2264  07A6  2FA3               	goto	u1657
  2265                           
  2266                           ;main.c: 328: } else {
  2267  07A7  2CFA               	goto	l1804
  2268  07A8                     l2062:	
  2269                           
  2270                           ;main.c: 329: WDTCONbits.WDTPS = 0b00110;
  2271  07A8  0021               	movlb	1	; select bank1
  2272  07A9  0817               	movf	23,w	;volatile
  2273  07AA  39C1               	andlw	-63
  2274  07AB  380C               	iorlw	12
  2275  07AC  0097               	movwf	23	;volatile
  2276                           
  2277                           ;main.c: 330: __nop();
  2278  07AD  0000               	nop
  2279  07AE  0063               	sleep	;# 
  2280                           
  2281                           ;main.c: 332: __nop();
  2282  07AF  0000               	nop
  2283                           
  2284                           ;main.c: 333: WDTCONbits.WDTPS = 0b00101;
  2285  07B0  0021               	movlb	1	; select bank1
  2286  07B1  0817               	movf	23,w	;volatile
  2287  07B2  39C1               	andlw	-63
  2288  07B3  380A               	iorlw	10
  2289  07B4  0097               	movwf	23	;volatile
  2290                           
  2291                           ;main.c: 334: __nop();
  2292  07B5  0000               	nop
  2293  07B6  0063               	sleep	;# 
  2294                           
  2295                           ;main.c: 336: __nop();
  2296  07B7  0000               	nop
  2297                           
  2298                           ;main.c: 337: WDTCONbits.WDTPS = 0b01011;
  2299  07B8  0021               	movlb	1	; select bank1
  2300  07B9  0817               	movf	23,w	;volatile
  2301  07BA  39C1               	andlw	-63
  2302  07BB  3816               	iorlw	22
  2303  07BC  0097               	movwf	23	;volatile
  2304                           
  2305                           ;main.c: 338: __nop();
  2306  07BD  0000               	nop
  2307  07BE  0064               	clrwdt	;# 
  2308  07BF  2CFA               	goto	l1804
  2309  07C0                     __end_of_main:	
  2310                           
  2311                           	psect	text1
  2312  01D0                     __ptext1:	
  2313 ;; *************** function _SaveTxStatusToFlash *****************
  2314 ;; Defined at:
  2315 ;;		line 56 in file "user_functions.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  txStatusArra    2    4[COMMON] PTR const unsigned int 
  2318 ;;		 -> TxStatus(16), 
  2319 ;;  txStatusAdr     2    6[COMMON] unsigned int 
  2320 ;;  txStatusVal     1    8[COMMON] unsigned char 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  adrToWrite      2    0[BANK0 ] unsigned int 
  2323 ;;  cellNum         1    2[BANK0 ] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 1F/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMMON   BANK0   BANK1
  2333 ;;      Params:         5       0       0
  2334 ;;      Locals:         0       3       0
  2335 ;;      Temps:          4       0       0
  2336 ;;      Totals:         9       3       0
  2337 ;;Total ram usage:       12 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    2
  2340 ;; This function calls:
  2341 ;;		_FlashEraseRow
  2342 ;;		_FlashWrite
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           
  2349                           ;psect for function _SaveTxStatusToFlash
  2350  01D0                     _SaveTxStatusToFlash:	
  2351                           
  2352                           ;user_functions.c: 57: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  2353                           
  2354                           ;incstack = 0
  2355                           ; Regs used in _SaveTxStatusToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2356  01D0  01C6               	clrf	SaveTxStatusToFlash@cellNum
  2357  01D1                     l1768:	
  2358                           
  2359                           ;user_functions.c: 58: uint16_t adrToWrite = (txStatusAdr + (cellNum * 2));
  2360  01D1  0846               	movf	SaveTxStatusToFlash@cellNum,w
  2361  01D2  00C4               	movwf	SaveTxStatusToFlash@adrToWrite
  2362  01D3  01C5               	clrf	SaveTxStatusToFlash@adrToWrite+1
  2363  01D4  35C4               	lslf	SaveTxStatusToFlash@adrToWrite,f
  2364  01D5  0DC5               	rlf	SaveTxStatusToFlash@adrToWrite+1,f
  2365  01D6  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2366  01D7  07C4               	addwf	SaveTxStatusToFlash@adrToWrite,f
  2367  01D8  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2368  01D9  3DC5               	addwfc	SaveTxStatusToFlash@adrToWrite+1,f
  2369                           
  2370                           ;user_functions.c: 59: if (txStatusArray[cellNum] == 0xFFFF) {
  2371  01DA  0846               	movf	SaveTxStatusToFlash@cellNum,w
  2372  01DB  00F9               	movwf	??_SaveTxStatusToFlash
  2373  01DC  01FA               	clrf	??_SaveTxStatusToFlash+1
  2374  01DD  35F9               	lslf	??_SaveTxStatusToFlash,f
  2375  01DE  0DFA               	rlf	??_SaveTxStatusToFlash+1,f
  2376  01DF  0874               	movf	SaveTxStatusToFlash@txStatusArray,w
  2377  01E0  0779               	addwf	??_SaveTxStatusToFlash,w
  2378  01E1  0084               	movwf	4
  2379  01E2  0875               	movf	SaveTxStatusToFlash@txStatusArray+1,w
  2380  01E3  3D7A               	addwfc	??_SaveTxStatusToFlash+1,w
  2381  01E4  0085               	movwf	5
  2382  01E5  0012               	moviw fsr0++
  2383  01E6  3AFF               	xorlw	255
  2384  01E7  00FB               	movwf	??_SaveTxStatusToFlash+2
  2385  01E8  0012               	moviw fsr0++
  2386  01E9  3AFF               	xorlw	255
  2387  01EA  04FB               	iorwf	??_SaveTxStatusToFlash+2,f
  2388  01EB  1D03               	btfss	3,2
  2389  01EC  2A04               	goto	l1782
  2390                           
  2391                           ;user_functions.c: 60: FlashWrite(adrToWrite, txStatusVal & 0x02);
  2392  01ED  0845               	movf	SaveTxStatusToFlash@adrToWrite+1,w
  2393  01EE  00F1               	movwf	FlashWrite@addr+1
  2394  01EF  0844               	movf	SaveTxStatusToFlash@adrToWrite,w
  2395  01F0  00F0               	movwf	FlashWrite@addr
  2396  01F1  0878               	movf	SaveTxStatusToFlash@txStatusVal,w
  2397  01F2  3902               	andlw	2
  2398  01F3  00F2               	movwf	FlashWrite@flash_data
  2399  01F4  01F3               	clrf	FlashWrite@flash_data+1
  2400  01F5  2133               	fcall	_FlashWrite
  2401                           
  2402                           ;user_functions.c: 61: FlashWrite((adrToWrite + 1), 0x5A);
  2403  01F6  0020               	movlb	0	; select bank0
  2404  01F7  0844               	movf	SaveTxStatusToFlash@adrToWrite,w
  2405  01F8  3E01               	addlw	1
  2406  01F9  00F0               	movwf	FlashWrite@addr
  2407  01FA  3000               	movlw	0
  2408  01FB  3D45               	addwfc	SaveTxStatusToFlash@adrToWrite+1,w
  2409  01FC  00F1               	movwf	FlashWrite@addr+1
  2410  01FD  305A               	movlw	90
  2411  01FE  00F2               	movwf	FlashWrite@flash_data
  2412  01FF  01F3               	clrf	FlashWrite@flash_data+1
  2413  0200  2133               	fcall	_FlashWrite
  2414                           
  2415                           ;user_functions.c: 62: __nop();
  2416  0201  0000               	nop
  2417  0202  0064               	clrwdt	;# 
  2418                           
  2419                           ;user_functions.c: 64: break;
  2420  0203  0008               	return
  2421  0204                     l1782:	
  2422                           
  2423                           ;user_functions.c: 66: if (cellNum == 7) {
  2424  0204  3007               	movlw	7
  2425  0205  0646               	xorwf	SaveTxStatusToFlash@cellNum,w
  2426  0206  1D03               	btfss	3,2
  2427  0207  2A20               	goto	l1786
  2428                           
  2429                           ;user_functions.c: 67: FlashEraseRow(txStatusAdr);
  2430  0208  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2431  0209  00F1               	movwf	FlashEraseRow@rowAddr+1
  2432  020A  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2433  020B  00F0               	movwf	FlashEraseRow@rowAddr
  2434  020C  2116               	fcall	_FlashEraseRow
  2435                           
  2436                           ;user_functions.c: 68: FlashWrite(txStatusAdr, txStatusVal & 0x02);
  2437  020D  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2438  020E  00F1               	movwf	FlashWrite@addr+1
  2439  020F  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2440  0210  00F0               	movwf	FlashWrite@addr
  2441  0211  0878               	movf	SaveTxStatusToFlash@txStatusVal,w
  2442  0212  3902               	andlw	2
  2443  0213  00F2               	movwf	FlashWrite@flash_data
  2444  0214  01F3               	clrf	FlashWrite@flash_data+1
  2445  0215  2133               	fcall	_FlashWrite
  2446                           
  2447                           ;user_functions.c: 69: FlashWrite(txStatusAdr + 1, 0x5A);
  2448  0216  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2449  0217  3E01               	addlw	1
  2450  0218  00F0               	movwf	FlashWrite@addr
  2451  0219  3000               	movlw	0
  2452  021A  3D77               	addwfc	SaveTxStatusToFlash@txStatusAdr+1,w
  2453  021B  00F1               	movwf	FlashWrite@addr+1
  2454  021C  305A               	movlw	90
  2455  021D  00F2               	movwf	FlashWrite@flash_data
  2456  021E  01F3               	clrf	FlashWrite@flash_data+1
  2457  021F  2133               	fcall	_FlashWrite
  2458  0220                     l1786:	
  2459  0220  0020               	movlb	0	; select bank0
  2460  0221  3008               	movlw	8
  2461  0222  0AC6               	incf	SaveTxStatusToFlash@cellNum,f
  2462  0223  0246               	subwf	SaveTxStatusToFlash@cellNum,w
  2463  0224  1803               	btfsc	3,0
  2464  0225  0008               	return
  2465  0226  29D1               	goto	l1768
  2466  0227                     __end_of_SaveTxStatusToFlash:	
  2467                           
  2468                           	psect	text2
  2469  0133                     __ptext2:	
  2470 ;; *************** function _FlashWrite *****************
  2471 ;; Defined at:
  2472 ;;		line 43 in file "FLASH.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  addr            2    0[COMMON] unsigned int 
  2475 ;;  flash_data      2    2[COMMON] unsigned int 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2, status,0, pclath, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 1F/3
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1
  2487 ;;      Params:         4       0       0
  2488 ;;      Locals:         0       0       0
  2489 ;;      Temps:          0       0       0
  2490 ;;      Totals:         4       0       0
  2491 ;;Total ram usage:        4 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    1
  2494 ;; This function calls:
  2495 ;;		_FlashUnlock
  2496 ;; This function is called by:
  2497 ;;		_main
  2498 ;;		_SaveTxStatusToFlash
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           
  2503                           ;psect for function _FlashWrite
  2504  0133                     _FlashWrite:	
  2505                           
  2506                           ;FLASH.c: 44: PMCON1bits.CFGS = 0;
  2507                           
  2508                           ;incstack = 0
  2509                           ; Regs used in _FlashWrite: [wreg+status,2+status,0+pclath+cstack]
  2510  0133  0023               	movlb	3	; select bank3
  2511  0134  1315               	bcf	21,6	;volatile
  2512                           
  2513                           ;FLASH.c: 45: PMADRH = (unsigned char) (addr >> 8);
  2514  0135  0871               	movf	FlashWrite@addr+1,w
  2515  0136  0092               	movwf	18	;volatile
  2516                           
  2517                           ;FLASH.c: 46: PMADRL = (unsigned char) (addr);
  2518  0137  0870               	movf	FlashWrite@addr,w
  2519  0138  0091               	movwf	17	;volatile
  2520                           
  2521                           ;FLASH.c: 47: PMCON1bits.FREE = 0;
  2522  0139  1215               	bcf	21,4	;volatile
  2523                           
  2524                           ;FLASH.c: 48: PMCON1bits.LWLO = 1;
  2525  013A  1695               	bsf	21,5	;volatile
  2526                           
  2527                           ;FLASH.c: 49: PMCON1bits.WREN = 1;
  2528  013B  1515               	bsf	21,2	;volatile
  2529                           
  2530                           ;FLASH.c: 50: PMDATH = (unsigned char) (flash_data >> 8);
  2531  013C  0873               	movf	FlashWrite@flash_data+1,w
  2532  013D  0094               	movwf	20	;volatile
  2533                           
  2534                           ;FLASH.c: 51: PMDATL = (unsigned char) flash_data;
  2535  013E  0872               	movf	FlashWrite@flash_data,w
  2536  013F  0093               	movwf	19	;volatile
  2537                           
  2538                           ;FLASH.c: 52: PMCON1bits.LWLO = 0;
  2539  0140  1295               	bcf	21,5	;volatile
  2540                           
  2541                           ;FLASH.c: 53: INTCONbits.GIE = 0;
  2542  0141  138B               	bcf	11,7	;volatile
  2543                           
  2544                           ;FLASH.c: 54: FlashUnlock();
  2545  0142  20F7               	fcall	_FlashUnlock
  2546                           
  2547                           ;FLASH.c: 55: INTCONbits.GIE = 1;
  2548  0143  178B               	bsf	11,7	;volatile
  2549                           
  2550                           ;FLASH.c: 56: PMCON1bits.WREN = 0;
  2551  0144  1115               	bcf	21,2	;volatile
  2552  0145  0008               	return
  2553  0146                     __end_of_FlashWrite:	
  2554                           
  2555                           	psect	text3
  2556  0116                     __ptext3:	
  2557 ;; *************** function _FlashEraseRow *****************
  2558 ;; Defined at:
  2559 ;;		line 31 in file "FLASH.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;  rowAddr         2    0[COMMON] unsigned int 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;		None
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  1    wreg      void 
  2566 ;; Registers used:
  2567 ;;		wreg, status,2, status,0, pclath, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 1D/2
  2570 ;;		On exit  : 1F/3
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMMON   BANK0   BANK1
  2573 ;;      Params:         2       0       0
  2574 ;;      Locals:         0       0       0
  2575 ;;      Temps:          0       0       0
  2576 ;;      Totals:         2       0       0
  2577 ;;Total ram usage:        2 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    1
  2580 ;; This function calls:
  2581 ;;		_FlashUnlock
  2582 ;; This function is called by:
  2583 ;;		_main
  2584 ;;		_SaveTxStatusToFlash
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           
  2589                           ;psect for function _FlashEraseRow
  2590  0116                     _FlashEraseRow:	
  2591                           
  2592                           ;FLASH.c: 32: PMCON1bits.CFGS = 0;
  2593                           
  2594                           ;incstack = 0
  2595                           ; Regs used in _FlashEraseRow: [wreg+status,2+status,0+pclath+cstack]
  2596  0116  0023               	movlb	3	; select bank3
  2597  0117  1315               	bcf	21,6	;volatile
  2598                           
  2599                           ;FLASH.c: 33: PMADRH = (uint8_t) (rowAddr >> 8);
  2600  0118  0871               	movf	FlashEraseRow@rowAddr+1,w
  2601  0119  0092               	movwf	18	;volatile
  2602                           
  2603                           ;FLASH.c: 34: PMADRL = (uint8_t) (rowAddr);
  2604  011A  0870               	movf	FlashEraseRow@rowAddr,w
  2605  011B  0091               	movwf	17	;volatile
  2606                           
  2607                           ;FLASH.c: 35: PMCON1bits.FREE = 1;
  2608  011C  1615               	bsf	21,4	;volatile
  2609                           
  2610                           ;FLASH.c: 36: PMCON1bits.WREN = 1;
  2611  011D  1515               	bsf	21,2	;volatile
  2612                           
  2613                           ;FLASH.c: 37: INTCONbits.GIE = 0;
  2614  011E  138B               	bcf	11,7	;volatile
  2615                           
  2616                           ;FLASH.c: 38: FlashUnlock();
  2617  011F  20F7               	fcall	_FlashUnlock
  2618                           
  2619                           ;FLASH.c: 39: INTCONbits.GIE = 1;
  2620  0120  178B               	bsf	11,7	;volatile
  2621                           
  2622                           ;FLASH.c: 40: PMCON1bits.WREN = 0;
  2623  0121  1115               	bcf	21,2	;volatile
  2624  0122  0008               	return
  2625  0123                     __end_of_FlashEraseRow:	
  2626                           
  2627                           	psect	text4
  2628  00F7                     __ptext4:	
  2629 ;; *************** function _FlashUnlock *****************
  2630 ;; Defined at:
  2631 ;;		line 25 in file "FLASH.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;		None
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg
  2640 ;; Tracked objects:
  2641 ;;		On entry : 1F/3
  2642 ;;		On exit  : 1F/3
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1
  2645 ;;      Params:         0       0       0
  2646 ;;      Locals:         0       0       0
  2647 ;;      Temps:          0       0       0
  2648 ;;      Totals:         0       0       0
  2649 ;;Total ram usage:        0 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		_FlashEraseRow
  2655 ;;		_FlashWrite
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _FlashUnlock
  2661  00F7                     _FlashUnlock:	
  2662                           
  2663                           ;FLASH.c: 26: PMCON2 = 0x55;
  2664                           
  2665                           ;incstack = 0
  2666                           ; Regs used in _FlashUnlock: [wreg]
  2667  00F7  3055               	movlw	85
  2668  00F8  0096               	movwf	22	;volsfr
  2669                           
  2670                           ;FLASH.c: 27: PMCON2 = 0xAA;
  2671  00F9  30AA               	movlw	170
  2672  00FA  0096               	movwf	22	;volsfr
  2673                           
  2674                           ;FLASH.c: 28: PMCON1bits.WR = 1;
  2675  00FB  1495               	bsf	21,1	;volatile
  2676  00FC  0008               	return
  2677  00FD                     __end_of_FlashUnlock:	
  2678                           
  2679                           	psect	text5
  2680  0227                     __ptext5:	
  2681 ;; *************** function _RF_Init *****************
  2682 ;; Defined at:
  2683 ;;		line 25 in file "noolite.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;		None
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;		None
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2692 ;; Tracked objects:
  2693 ;;		On entry : B1F/1
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMMON   BANK0   BANK1
  2697 ;;      Params:         0       0       0
  2698 ;;      Locals:         0       0       0
  2699 ;;      Temps:          7       0       0
  2700 ;;      Totals:         7       0       0
  2701 ;;Total ram usage:        7 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           
  2711                           ;psect for function _RF_Init
  2712  0227                     _RF_Init:	
  2713                           
  2714                           ;noolite.c: 27: startaddress = 0;
  2715                           
  2716                           ;incstack = 0
  2717                           ; Regs used in _RF_Init: [wreg-fsr0h+status,2+status,0+pclath]
  2718  0227  0020               	movlb	0	; select bank0
  2719  0228  30F3               	movlw	243
  2720  0229  01A0               	clrf	_startaddress
  2721  022A  01A1               	clrf	_startaddress+1
  2722  022B  01A2               	clrf	_startaddress+2
  2723  022C  01A3               	clrf	_startaddress+3
  2724                           
  2725                           ;noolite.c: 28: startaddress |= ((unsigned int) system_settings[5]) << 8;
  2726  022D  0084               	movwf	4
  2727  022E  3087               	movlw	135
  2728  022F  0085               	movwf	5
  2729  0230  0800               	movf	0,w	;code access
  2730  0231  00F0               	movwf	??_RF_Init
  2731  0232  01F1               	clrf	??_RF_Init+1
  2732  0233  00F1               	movwf	??_RF_Init+1
  2733  0234  01F0               	clrf	??_RF_Init
  2734  0235  0870               	movf	??_RF_Init,w
  2735  0236  00F3               	movwf	??_RF_Init+3
  2736  0237  0871               	movf	??_RF_Init+1,w
  2737  0238  00F4               	movwf	??_RF_Init+4
  2738  0239  01F5               	clrf	??_RF_Init+5
  2739  023A  01F6               	clrf	??_RF_Init+6
  2740  023B  0873               	movf	??_RF_Init+3,w
  2741  023C  04A0               	iorwf	_startaddress,f
  2742  023D  0874               	movf	??_RF_Init+4,w
  2743  023E  04A1               	iorwf	_startaddress+1,f
  2744  023F  0875               	movf	??_RF_Init+5,w
  2745  0240  04A2               	iorwf	_startaddress+2,f
  2746  0241  0876               	movf	??_RF_Init+6,w
  2747  0242  04A3               	iorwf	_startaddress+3,f
  2748                           
  2749                           ;noolite.c: 29: startaddress |= system_settings[4];
  2750  0243  30F2               	movlw	242
  2751  0244  0084               	movwf	4
  2752  0245  0800               	movf	0,w	;code access
  2753  0246  00F0               	movwf	??_RF_Init
  2754  0247  01F1               	clrf	??_RF_Init+1
  2755  0248  01F2               	clrf	??_RF_Init+2
  2756  0249  01F3               	clrf	??_RF_Init+3
  2757  024A  04A0               	iorwf	_startaddress,f
  2758  024B  0871               	movf	??_RF_Init+1,w
  2759  024C  04A1               	iorwf	_startaddress+1,f
  2760  024D  0872               	movf	??_RF_Init+2,w
  2761  024E  04A2               	iorwf	_startaddress+2,f
  2762  024F  0873               	movf	??_RF_Init+3,w
  2763  0250  04A3               	iorwf	_startaddress+3,f
  2764                           
  2765                           ;noolite.c: 30: if ((startaddress != 0) && (startaddress != 0xFFFF)) {
  2766  0251  0823               	movf	_startaddress+3,w
  2767  0252  0422               	iorwf	_startaddress+2,w
  2768  0253  0421               	iorwf	_startaddress+1,w
  2769  0254  0420               	iorwf	_startaddress,w
  2770  0255  1903               	skipnz
  2771  0256  2A60               	goto	l178
  2772  0257  0F20               	incfsz	_startaddress,w
  2773  0258  2A5E               	goto	l1660
  2774  0259  0A21               	incf	_startaddress+1,w
  2775  025A  0422               	iorwf	_startaddress+2,w
  2776  025B  0423               	iorwf	_startaddress+3,w
  2777  025C  1903               	btfsc	3,2
  2778  025D  2A60               	goto	l178
  2779  025E                     l1660:	
  2780                           
  2781                           ;noolite.c: 31: noo_address_type = 0;
  2782  025E  01A4               	clrf	_noo_address_type
  2783                           
  2784                           ;noolite.c: 32: } else {
  2785  025F  2AB0               	goto	l179
  2786  0260                     l178:	
  2787  0260  30F9               	movlw	249
  2788                           
  2789                           ;noolite.c: 33: startaddress = 0;
  2790  0261  01A0               	clrf	_startaddress
  2791  0262  01A1               	clrf	_startaddress+1
  2792  0263  01A2               	clrf	_startaddress+2
  2793  0264  01A3               	clrf	_startaddress+3
  2794                           
  2795                           ;noolite.c: 34: startaddress |= ((unsigned long) system_settings[11]) << 24;
  2796  0265  0084               	movwf	4
  2797  0266  3087               	movlw	135
  2798  0267  0085               	movwf	5
  2799  0268  0800               	movf	0,w	;code access
  2800  0269  00F3               	movwf	??_RF_Init+3
  2801  026A  01F2               	clrf	??_RF_Init+2
  2802  026B  01F1               	clrf	??_RF_Init+1
  2803  026C  01F0               	clrf	??_RF_Init
  2804  026D  0870               	movf	??_RF_Init,w
  2805  026E  04A0               	iorwf	_startaddress,f
  2806  026F  0871               	movf	??_RF_Init+1,w
  2807  0270  04A1               	iorwf	_startaddress+1,f
  2808  0271  0872               	movf	??_RF_Init+2,w
  2809  0272  04A2               	iorwf	_startaddress+2,f
  2810  0273  0873               	movf	??_RF_Init+3,w
  2811  0274  04A3               	iorwf	_startaddress+3,f
  2812                           
  2813                           ;noolite.c: 35: startaddress |= ((unsigned long) system_settings[10]) << 16;
  2814  0275  30F8               	movlw	248
  2815  0276  0084               	movwf	4
  2816  0277  0800               	movf	0,w	;code access
  2817  0278  00F0               	movwf	??_RF_Init
  2818  0279  01F1               	clrf	??_RF_Init+1
  2819  027A  01F2               	clrf	??_RF_Init+2
  2820  027B  01F3               	clrf	??_RF_Init+3
  2821  027C  0871               	movf	??_RF_Init+1,w
  2822  027D  00F3               	movwf	??_RF_Init+3
  2823  027E  0870               	movf	??_RF_Init,w
  2824  027F  00F2               	movwf	??_RF_Init+2
  2825  0280  01F1               	clrf	??_RF_Init+1
  2826  0281  01F0               	clrf	??_RF_Init
  2827  0282  0870               	movf	??_RF_Init,w
  2828  0283  04A0               	iorwf	_startaddress,f
  2829  0284  0871               	movf	??_RF_Init+1,w
  2830  0285  04A1               	iorwf	_startaddress+1,f
  2831  0286  0872               	movf	??_RF_Init+2,w
  2832  0287  04A2               	iorwf	_startaddress+2,f
  2833  0288  0873               	movf	??_RF_Init+3,w
  2834  0289  04A3               	iorwf	_startaddress+3,f
  2835                           
  2836                           ;noolite.c: 36: startaddress |= ((unsigned long) system_settings[9]) << 8;
  2837  028A  30F7               	movlw	247
  2838  028B  0084               	movwf	4
  2839  028C  0800               	movf	0,w	;code access
  2840  028D  00F0               	movwf	??_RF_Init
  2841  028E  01F1               	clrf	??_RF_Init+1
  2842  028F  01F2               	clrf	??_RF_Init+2
  2843  0290  01F3               	clrf	??_RF_Init+3
  2844  0291  0872               	movf	??_RF_Init+2,w
  2845  0292  00F3               	movwf	??_RF_Init+3
  2846  0293  0871               	movf	??_RF_Init+1,w
  2847  0294  00F2               	movwf	??_RF_Init+2
  2848  0295  0870               	movf	??_RF_Init,w
  2849  0296  00F1               	movwf	??_RF_Init+1
  2850  0297  01F0               	clrf	??_RF_Init
  2851  0298  0870               	movf	??_RF_Init,w
  2852  0299  04A0               	iorwf	_startaddress,f
  2853  029A  0871               	movf	??_RF_Init+1,w
  2854  029B  04A1               	iorwf	_startaddress+1,f
  2855  029C  0872               	movf	??_RF_Init+2,w
  2856  029D  04A2               	iorwf	_startaddress+2,f
  2857  029E  0873               	movf	??_RF_Init+3,w
  2858  029F  04A3               	iorwf	_startaddress+3,f
  2859                           
  2860                           ;noolite.c: 37: startaddress |= system_settings[8];
  2861  02A0  30F6               	movlw	246
  2862  02A1  0084               	movwf	4
  2863  02A2  0800               	movf	0,w	;code access
  2864  02A3  00F0               	movwf	??_RF_Init
  2865  02A4  01F1               	clrf	??_RF_Init+1
  2866  02A5  01F2               	clrf	??_RF_Init+2
  2867  02A6  01F3               	clrf	??_RF_Init+3
  2868  02A7  04A0               	iorwf	_startaddress,f
  2869  02A8  0871               	movf	??_RF_Init+1,w
  2870  02A9  04A1               	iorwf	_startaddress+1,f
  2871  02AA  0872               	movf	??_RF_Init+2,w
  2872  02AB  04A2               	iorwf	_startaddress+2,f
  2873  02AC  0873               	movf	??_RF_Init+3,w
  2874  02AD  04A3               	iorwf	_startaddress+3,f
  2875                           
  2876                           ;noolite.c: 38: noo_address_type = 1;
  2877  02AE  01A4               	clrf	_noo_address_type
  2878  02AF  0AA4               	incf	_noo_address_type,f
  2879  02B0                     l179:	
  2880  02B0  0064               	clrwdt	;# 
  2881  02B1  0008               	return
  2882  02B2                     __end_of_RF_Init:	
  2883                           
  2884                           	psect	text6
  2885  0190                     __ptext6:	
  2886 ;; *************** function _KeyOffHandler *****************
  2887 ;; Defined at:
  2888 ;;		line 75 in file "user_functions.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  key             1    wreg     PTR struct .
  2891 ;;		 -> Keys(20), 
  2892 ;;  chn             1   11[COMMON] unsigned char 
  2893 ;;  cmd             1   12[COMMON] unsigned char 
  2894 ;;  nooData         1   13[COMMON] PTR unsigned char 
  2895 ;;		 -> noo_send_data(4), 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  key             1   19[BANK0 ] PTR struct .
  2898 ;;		 -> Keys(20), 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 1F/0
  2905 ;;		On exit  : 1D/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1
  2908 ;;      Params:         3       0       0
  2909 ;;      Locals:         0       1       0
  2910 ;;      Temps:          0       1       0
  2911 ;;      Totals:         3       2       0
  2912 ;;Total ram usage:        5 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    1
  2915 ;; This function calls:
  2916 ;;		_noolite_send
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _KeyOffHandler
  2924  0190                     _KeyOffHandler:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in _KeyOffHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2928                           ;KeyOffHandler@key stored from wreg
  2929  0190  00D7               	movwf	KeyOffHandler@key
  2930                           
  2931                           ;user_functions.c: 76: if (key->State == 0) {
  2932  0191  0086               	movwf	6
  2933  0192  0187               	clrf	7
  2934  0193  0801               	movf	1,w
  2935  0194  1D03               	btfss	3,2
  2936  0195  0008               	return
  2937                           
  2938                           ;user_functions.c: 77: if (key->Tick100ms < 10) {
  2939  0196  0857               	movf	KeyOffHandler@key,w
  2940  0197  3E02               	addlw	2
  2941  0198  0086               	movwf	6
  2942  0199  300A               	movlw	10
  2943  019A  0201               	subwf	1,w
  2944  019B  1803               	skipnc
  2945  019C  29A4               	goto	l1738
  2946                           
  2947                           ;user_functions.c: 78: noolite_send(chn, cmd, 0, &nooData[0]);
  2948  019D  087C               	movf	KeyOffHandler@cmd,w
  2949  019E  00F0               	movwf	noolite_send@noo_send_command
  2950  019F  01F1               	clrf	noolite_send@noo_send_format
  2951  01A0  087D               	movf	KeyOffHandler@nooData,w
  2952  01A1  00F2               	movwf	noolite_send@data
  2953  01A2  087B               	movf	KeyOffHandler@chn,w
  2954  01A3  2B4B               	ljmp	_noolite_send
  2955  01A4                     l1738:	
  2956                           ;user_functions.c: 79: } else {
  2957                           
  2958                           
  2959                           ;user_functions.c: 80: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2960  01A4  300A               	movlw	10
  2961  01A5  00F0               	movwf	noolite_send@noo_send_command
  2962  01A6  01F1               	clrf	noolite_send@noo_send_format
  2963  01A7  087D               	movf	KeyOffHandler@nooData,w
  2964  01A8  00F2               	movwf	noolite_send@data
  2965  01A9  087B               	movf	KeyOffHandler@chn,w
  2966  01AA  234B               	fcall	_noolite_send
  2967                           
  2968                           ;user_functions.c: 81: _delay((unsigned long)((15)*(8000000/4000.0)));
  2969  01AB  3027               	movlw	39
  2970  01AC  0020               	movlb	0	; select bank0
  2971  01AD  00D6               	movwf	??_KeyOffHandler
  2972  01AE  30F5               	movlw	245
  2973  01AF                     u1667:	
  2974  01AF  0B89               	decfsz	9,f
  2975  01B0  29AF               	goto	u1667
  2976  01B1  0BD6               	decfsz	??_KeyOffHandler,f
  2977  01B2  29AF               	goto	u1667
  2978                           
  2979                           ;user_functions.c: 82: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2980  01B3  300A               	movlw	10
  2981  01B4  00F0               	movwf	noolite_send@noo_send_command
  2982  01B5  01F1               	clrf	noolite_send@noo_send_format
  2983  01B6  087D               	movf	KeyOffHandler@nooData,w
  2984  01B7  00F2               	movwf	noolite_send@data
  2985  01B8  087B               	movf	KeyOffHandler@chn,w
  2986  01B9  234B               	fcall	_noolite_send
  2987                           
  2988                           ;user_functions.c: 83: _delay((unsigned long)((15)*(8000000/4000.0)));
  2989  01BA  3027               	movlw	39
  2990  01BB  0020               	movlb	0	; select bank0
  2991  01BC  00D6               	movwf	??_KeyOffHandler
  2992  01BD  30F5               	movlw	245
  2993  01BE                     u1677:	
  2994  01BE  0B89               	decfsz	9,f
  2995  01BF  29BE               	goto	u1677
  2996  01C0  0BD6               	decfsz	??_KeyOffHandler,f
  2997  01C1  29BE               	goto	u1677
  2998                           
  2999                           ;user_functions.c: 84: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  3000  01C2  300A               	movlw	10
  3001  01C3  00F0               	movwf	noolite_send@noo_send_command
  3002  01C4  01F1               	clrf	noolite_send@noo_send_format
  3003  01C5  087D               	movf	KeyOffHandler@nooData,w
  3004  01C6  00F2               	movwf	noolite_send@data
  3005  01C7  087B               	movf	KeyOffHandler@chn,w
  3006  01C8  234B               	fcall	_noolite_send
  3007                           
  3008                           ;user_functions.c: 85: key->FirstCmdSent = 0;
  3009  01C9  0020               	movlb	0	; select bank0
  3010  01CA  0857               	movf	KeyOffHandler@key,w
  3011  01CB  3E03               	addlw	3
  3012  01CC  0086               	movwf	6
  3013  01CD  0187               	clrf	7
  3014  01CE  0181               	clrf	1
  3015  01CF  0008               	return
  3016  01D0                     __end_of_KeyOffHandler:	
  3017                           
  3018                           	psect	text7
  3019  0164                     __ptext7:	
  3020 ;; *************** function _KeyLongHandler *****************
  3021 ;; Defined at:
  3022 ;;		line 90 in file "user_functions.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  key             1    wreg     PTR struct .
  3025 ;;		 -> Keys(20), 
  3026 ;;  chn             1   18[BANK0 ] unsigned char 
  3027 ;;  cmd             1   19[BANK0 ] unsigned char 
  3028 ;;  ticksToTrigg    1   20[BANK0 ] unsigned char 
  3029 ;;  nooData         1   21[BANK0 ] PTR unsigned char 
  3030 ;;		 -> noo_send_data(4), 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  key             1   11[COMMON] PTR struct .
  3033 ;;		 -> Keys(20), 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 1F/0
  3040 ;;		On exit  : 1D/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1
  3043 ;;      Params:         0       4       0
  3044 ;;      Locals:         1       0       0
  3045 ;;      Temps:          0       0       0
  3046 ;;      Totals:         1       4       0
  3047 ;;Total ram usage:        5 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    1
  3050 ;; This function calls:
  3051 ;;		_noolite_send
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           
  3058                           ;psect for function _KeyLongHandler
  3059  0164                     _KeyLongHandler:	
  3060                           
  3061                           ;incstack = 0
  3062                           ; Regs used in _KeyLongHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3063                           ;KeyLongHandler@key stored from wreg
  3064  0164  00FB               	movwf	KeyLongHandler@key
  3065                           
  3066                           ;user_functions.c: 91: if (key->State != 0) {
  3067  0165  0086               	movwf	6
  3068  0166  0187               	clrf	7
  3069  0167  0801               	movf	1,w
  3070  0168  1903               	btfsc	3,2
  3071  0169  298A               	goto	l1760
  3072                           
  3073                           ;user_functions.c: 92: if (key->Tick100ms > ticksToTrigger) {
  3074  016A  087B               	movf	KeyLongHandler@key,w
  3075  016B  3E02               	addlw	2
  3076  016C  0086               	movwf	6
  3077  016D  0801               	movf	1,w
  3078  016E  0258               	subwf	KeyLongHandler@ticksToTrigger,w
  3079                           
  3080                           ;user_functions.c: 93: if (key->FirstCmdSent == 0) {
  3081  016F  087B               	movf	KeyLongHandler@key,w
  3082  0170  1803               	skipnc
  3083  0171  2985               	goto	L5
  3084  0172  3E03               	addlw	3
  3085  0173  0086               	movwf	6
  3086  0174  0801               	movf	1,w
  3087  0175  1D03               	btfss	3,2
  3088  0176  2984               	goto	l1758
  3089                           
  3090                           ;user_functions.c: 94: noolite_send(chn, cmd, 0, &nooData[0]);
  3091  0177  0857               	movf	KeyLongHandler@cmd,w
  3092  0178  00F0               	movwf	noolite_send@noo_send_command
  3093  0179  01F1               	clrf	noolite_send@noo_send_format
  3094  017A  0859               	movf	KeyLongHandler@nooData,w
  3095  017B  00F2               	movwf	noolite_send@data
  3096  017C  0856               	movf	KeyLongHandler@chn,w
  3097  017D  234B               	fcall	_noolite_send
  3098                           
  3099                           ;user_functions.c: 95: key->FirstCmdSent = 1;
  3100  017E  087B               	movf	KeyLongHandler@key,w
  3101  017F  3E03               	addlw	3
  3102  0180  0086               	movwf	6
  3103  0181  0187               	clrf	7
  3104  0182  0181               	clrf	1
  3105  0183  0A81               	incf	1,f
  3106  0184                     l1758:	
  3107                           
  3108                           ;user_functions.c: 96: }
  3109                           ;user_functions.c: 97: }
  3110                           ;user_functions.c: 98: key->Tick100ms++;
  3111  0184  087B               	movf	KeyLongHandler@key,w
  3112  0185                     L5:	
  3113  0185  3E02               	addlw	2
  3114  0186  0086               	movwf	6
  3115  0187  0187               	clrf	7
  3116  0188  0A81               	incf	1,f
  3117                           
  3118                           ;user_functions.c: 99: } else {
  3119  0189  0008               	return
  3120  018A                     l1760:	
  3121                           
  3122                           ;user_functions.c: 100: key->Tick100ms = 0;
  3123  018A  087B               	movf	KeyLongHandler@key,w
  3124  018B  3E02               	addlw	2
  3125  018C  0086               	movwf	6
  3126  018D  0187               	clrf	7
  3127  018E  0181               	clrf	1
  3128  018F  0008               	return
  3129  0190                     __end_of_KeyLongHandler:	
  3130                           
  3131                           	psect	text8
  3132  034B                     __ptext8:	
  3133 ;; *************** function _noolite_send *****************
  3134 ;; Defined at:
  3135 ;;		line 174 in file "noolite.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  chn             1    wreg     unsigned char 
  3138 ;;  noo_send_com    1    0[COMMON] unsigned char 
  3139 ;;  noo_send_for    1    1[COMMON] unsigned char 
  3140 ;;  data            1    2[COMMON] PTR unsigned char 
  3141 ;;		 -> noo_send_data(4), 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  chn             1   14[BANK0 ] unsigned char 
  3144 ;;  noo_send_buf   12    0[BANK0 ] unsigned char [12]
  3145 ;;  endpos          1   17[BANK0 ] unsigned char 
  3146 ;;  temp_send       1   16[BANK0 ] unsigned char 
  3147 ;;  countsend       1   15[BANK0 ] unsigned char 
  3148 ;;  countbit        1   13[BANK0 ] unsigned char 
  3149 ;;  startpos        1   12[BANK0 ] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 1F/2
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMMON   BANK0   BANK1
  3159 ;;      Params:         3       0       0
  3160 ;;      Locals:         0      18       0
  3161 ;;      Temps:          8       0       0
  3162 ;;      Totals:        11      18       0
  3163 ;;Total ram usage:       29 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_main
  3169 ;;		_KeyOffHandler
  3170 ;;		_KeyLongHandler
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function _noolite_send
  3176  034B                     _noolite_send:	
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in _noolite_send: [wreg+fsr1l+fsr1h+status,2+status,0]
  3180                           ;noolite_send@chn stored from wreg
  3181  034B  0020               	movlb	0	; select bank0
  3182  034C  00D2               	movwf	noolite_send@chn
  3183  034D  0064               	clrwdt	;# 
  3184                           
  3185                           ;noolite.c: 185: tx_status ^= (1<<1);
  3186  034E  3002               	movlw	2
  3187  034F  0020               	movlb	0	; select bank0
  3188  0350  06AB               	xorwf	_tx_status,f
  3189                           
  3190                           ;noolite.c: 188: if (noo_send_command < 16) {
  3191  0351  3010               	movlw	16
  3192  0352  0270               	subwf	noolite_send@noo_send_command,w
  3193  0353  1803               	skipnc
  3194  0354  2B61               	goto	l1442
  3195                           
  3196                           ;noolite.c: 189: startpos = 10;
  3197  0355  300A               	movlw	10
  3198  0356  00D0               	movwf	noolite_send@startpos
  3199                           
  3200                           ;noolite.c: 190: noo_send_buffer[1] = (uint8_t) ((noo_send_command << 4) | (1 << 2));
  3201  0357  0E70               	swapf	noolite_send@noo_send_command,w
  3202  0358  39F0               	andlw	240
  3203  0359  3804               	iorlw	4
  3204  035A  00C5               	movwf	noolite_send@noo_send_buffer+1
  3205                           
  3206                           ;noolite.c: 191: if (((tx_status & (1<<1)) != 0)) {
  3207  035B  1CAB               	btfss	_tx_status,1
  3208  035C  2B5F               	goto	l184
  3209                           
  3210                           ;noolite.c: 192: noo_send_buffer[1] |= (1<<3);
  3211  035D  15C5               	bsf	noolite_send@noo_send_buffer+1,3
  3212                           
  3213                           ;noolite.c: 193: } else {
  3214  035E  2B6D               	goto	l186
  3215  035F                     l184:	
  3216                           
  3217                           ;noolite.c: 194: noo_send_buffer[1] &= (~(1<<3));
  3218  035F  11C5               	bcf	noolite_send@noo_send_buffer+1,3
  3219  0360  2B6D               	goto	l186
  3220  0361                     l1442:	
  3221                           
  3222                           ;noolite.c: 197: startpos = 6;
  3223  0361  3006               	movlw	6
  3224  0362  00D0               	movwf	noolite_send@startpos
  3225                           
  3226                           ;noolite.c: 198: noo_send_buffer[0] = (1 << 6);
  3227  0363  3040               	movlw	64
  3228  0364  00C4               	movwf	noolite_send@noo_send_buffer
  3229                           
  3230                           ;noolite.c: 199: if (((tx_status & (1<<1)) != 0)) {
  3231  0365  1CAB               	btfss	_tx_status,1
  3232  0366  2B69               	goto	l187
  3233                           
  3234                           ;noolite.c: 200: noo_send_buffer[0] |= (1<<7);
  3235  0367  17C4               	bsf	noolite_send@noo_send_buffer,7
  3236                           
  3237                           ;noolite.c: 201: } else {
  3238  0368  2B6A               	goto	l1448
  3239  0369                     l187:	
  3240                           
  3241                           ;noolite.c: 202: noo_send_buffer[0] &= (~(1<<7));
  3242  0369  13C4               	bcf	noolite_send@noo_send_buffer,7
  3243  036A                     l1448:	
  3244                           
  3245                           ;noolite.c: 203: };
  3246                           ;noolite.c: 204: noo_send_buffer[1] = noo_send_command;
  3247  036A  0870               	movf	noolite_send@noo_send_command,w
  3248  036B  00C5               	movwf	noolite_send@noo_send_buffer+1
  3249                           
  3250                           ;noolite.c: 205: noo_send_format = (uint8_t) (noo_send_format | 4);
  3251  036C  1571               	bsf	noolite_send@noo_send_format,2
  3252  036D                     l186:	
  3253                           
  3254                           ;noolite.c: 206: }
  3255                           ;noolite.c: 207: endpos = 2;
  3256  036D  3002               	movlw	2
  3257  036E  00D5               	movwf	noolite_send@endpos
  3258                           
  3259                           ;noolite.c: 208: temp_send = (uint8_t) (noo_send_format & 3);
  3260  036F  0871               	movf	noolite_send@noo_send_format,w
  3261  0370  00D4               	movwf	noolite_send@temp_send
  3262  0371  3003               	movlw	3
  3263  0372  05D4               	andwf	noolite_send@temp_send,f
  3264                           
  3265                           ;noolite.c: 209: if (temp_send == 1) {
  3266  0373  0B54               	decfsz	noolite_send@temp_send,w
  3267  0374  2B7C               	goto	l1460
  3268                           
  3269                           ;noolite.c: 211: noo_send_buffer[2] = data[0];
  3270  0375  0872               	movf	noolite_send@data,w
  3271  0376  0086               	movwf	6
  3272  0377  0187               	clrf	7
  3273  0378  0801               	movf	1,w
  3274  0379  00C6               	movwf	noolite_send@noo_send_buffer+2
  3275                           
  3276                           ;noolite.c: 212: endpos++;
  3277  037A  0AD5               	incf	noolite_send@endpos,f
  3278                           
  3279                           ;noolite.c: 213: } else if (temp_send == 3) {
  3280  037B  2B93               	goto	l1466
  3281  037C                     l1460:	
  3282  037C  3003               	movlw	3
  3283  037D  0654               	xorwf	noolite_send@temp_send,w
  3284  037E  1D03               	btfss	3,2
  3285  037F  2B93               	goto	l1466
  3286                           
  3287                           ;noolite.c: 218: noo_send_buffer[2] = data[0];
  3288  0380  0872               	movf	noolite_send@data,w
  3289  0381  0086               	movwf	6
  3290  0382  0187               	clrf	7
  3291  0383  0801               	movf	1,w
  3292  0384  00C6               	movwf	noolite_send@noo_send_buffer+2
  3293                           
  3294                           ;noolite.c: 219: noo_send_buffer[3] = data[1];
  3295  0385  0872               	movf	noolite_send@data,w
  3296  0386  0086               	movwf	6
  3297  0387  3F41               	moviw [1]fsr1
  3298  0388  00C7               	movwf	noolite_send@noo_send_buffer+3
  3299                           
  3300                           ;noolite.c: 220: noo_send_buffer[4] = data[2];
  3301  0389  0872               	movf	noolite_send@data,w
  3302  038A  0086               	movwf	6
  3303  038B  3F42               	moviw [2]fsr1
  3304  038C  00C8               	movwf	noolite_send@noo_send_buffer+4
  3305                           
  3306                           ;noolite.c: 221: noo_send_buffer[5] = data[3];
  3307  038D  0872               	movf	noolite_send@data,w
  3308  038E  0086               	movwf	6
  3309  038F  3F43               	moviw [3]fsr1
  3310  0390  00C9               	movwf	noolite_send@noo_send_buffer+5
  3311                           
  3312                           ;noolite.c: 222: endpos += 4;
  3313  0391  3004               	movlw	4
  3314  0392  07D5               	addwf	noolite_send@endpos,f
  3315  0393                     l1466:	
  3316                           
  3317                           ;noolite.c: 223: }
  3318                           ;noolite.c: 224: if (noo_address_type != 0) {
  3319  0393  0824               	movf	_noo_address_type,w
  3320  0394  1903               	btfsc	3,2
  3321  0395  2BFD               	goto	l1482
  3322                           
  3323                           ;noolite.c: 225: noo_send_format = (uint8_t) (noo_send_format | 0x10);
  3324  0396  1671               	bsf	noolite_send@noo_send_format,4
  3325                           
  3326                           ;noolite.c: 226: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3327  0397  0855               	movf	noolite_send@endpos,w
  3328  0398  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3329  0399  0086               	movwf	6
  3330  039A  0187               	clrf	7
  3331  039B  0852               	movf	noolite_send@chn,w
  3332  039C  0720               	addwf	_startaddress,w
  3333  039D  0081               	movwf	1
  3334                           
  3335                           ;noolite.c: 227: endpos++;
  3336  039E  0AD5               	incf	noolite_send@endpos,f
  3337                           
  3338                           ;noolite.c: 228: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3339  039F  0855               	movf	noolite_send@endpos,w
  3340  03A0  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3341  03A1  0086               	movwf	6
  3342  03A2  0820               	movf	_startaddress,w
  3343  03A3  00F3               	movwf	??_noolite_send
  3344  03A4  0821               	movf	_startaddress+1,w
  3345  03A5  00F4               	movwf	??_noolite_send+1
  3346  03A6  0822               	movf	_startaddress+2,w
  3347  03A7  00F5               	movwf	??_noolite_send+2
  3348  03A8  0823               	movf	_startaddress+3,w
  3349  03A9  00F6               	movwf	??_noolite_send+3
  3350  03AA  0852               	movf	noolite_send@chn,w
  3351  03AB  00F7               	movwf	??_noolite_send+4
  3352  03AC  01F8               	clrf	??_noolite_send+5
  3353  03AD  01F9               	clrf	??_noolite_send+6
  3354  03AE  01FA               	clrf	??_noolite_send+7
  3355  03AF  07F3               	addwf	??_noolite_send,f
  3356  03B0  0878               	movf	??_noolite_send+5,w
  3357  03B1  3DF4               	addwfc	??_noolite_send+1,f
  3358  03B2  0879               	movf	??_noolite_send+6,w
  3359  03B3  3DF5               	addwfc	??_noolite_send+2,f
  3360  03B4  087A               	movf	??_noolite_send+7,w
  3361  03B5  3DF6               	addwfc	??_noolite_send+3,f
  3362  03B6  0874               	movf	??_noolite_send+1,w
  3363  03B7  00F3               	movwf	??_noolite_send
  3364  03B8  0875               	movf	??_noolite_send+2,w
  3365  03B9  00F4               	movwf	??_noolite_send+1
  3366  03BA  0876               	movf	??_noolite_send+3,w
  3367  03BB  00F5               	movwf	??_noolite_send+2
  3368  03BC  01F6               	clrf	??_noolite_send+3
  3369  03BD  0873               	movf	??_noolite_send,w
  3370  03BE  0081               	movwf	1
  3371                           
  3372                           ;noolite.c: 229: endpos++;
  3373  03BF  0AD5               	incf	noolite_send@endpos,f
  3374                           
  3375                           ;noolite.c: 230: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 16);
  3376  03C0  0855               	movf	noolite_send@endpos,w
  3377  03C1  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3378  03C2  0086               	movwf	6
  3379  03C3  0820               	movf	_startaddress,w
  3380  03C4  00F3               	movwf	??_noolite_send
  3381  03C5  0821               	movf	_startaddress+1,w
  3382  03C6  00F4               	movwf	??_noolite_send+1
  3383  03C7  0822               	movf	_startaddress+2,w
  3384  03C8  00F5               	movwf	??_noolite_send+2
  3385  03C9  0823               	movf	_startaddress+3,w
  3386  03CA  00F6               	movwf	??_noolite_send+3
  3387  03CB  0852               	movf	noolite_send@chn,w
  3388  03CC  00F7               	movwf	??_noolite_send+4
  3389  03CD  01F8               	clrf	??_noolite_send+5
  3390  03CE  01F9               	clrf	??_noolite_send+6
  3391  03CF  01FA               	clrf	??_noolite_send+7
  3392  03D0  07F3               	addwf	??_noolite_send,f
  3393  03D1  0878               	movf	??_noolite_send+5,w
  3394  03D2  3DF4               	addwfc	??_noolite_send+1,f
  3395  03D3  0879               	movf	??_noolite_send+6,w
  3396  03D4  3DF5               	addwfc	??_noolite_send+2,f
  3397  03D5  087A               	movf	??_noolite_send+7,w
  3398  03D6  3DF6               	addwfc	??_noolite_send+3,f
  3399  03D7  0875               	movf	??_noolite_send+2,w
  3400  03D8  00F3               	movwf	??_noolite_send
  3401  03D9  0876               	movf	??_noolite_send+3,w
  3402  03DA  00F4               	movwf	??_noolite_send+1
  3403  03DB  01F5               	clrf	??_noolite_send+2
  3404  03DC  01F6               	clrf	??_noolite_send+3
  3405  03DD  0873               	movf	??_noolite_send,w
  3406  03DE  0081               	movwf	1
  3407                           
  3408                           ;noolite.c: 231: endpos++;
  3409  03DF  0AD5               	incf	noolite_send@endpos,f
  3410                           
  3411                           ;noolite.c: 232: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 24);
  3412  03E0  0855               	movf	noolite_send@endpos,w
  3413  03E1  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3414  03E2  0086               	movwf	6
  3415  03E3  0820               	movf	_startaddress,w
  3416  03E4  00F3               	movwf	??_noolite_send
  3417  03E5  0821               	movf	_startaddress+1,w
  3418  03E6  00F4               	movwf	??_noolite_send+1
  3419  03E7  0822               	movf	_startaddress+2,w
  3420  03E8  00F5               	movwf	??_noolite_send+2
  3421  03E9  0823               	movf	_startaddress+3,w
  3422  03EA  00F6               	movwf	??_noolite_send+3
  3423  03EB  0852               	movf	noolite_send@chn,w
  3424  03EC  00F7               	movwf	??_noolite_send+4
  3425  03ED  01F8               	clrf	??_noolite_send+5
  3426  03EE  01F9               	clrf	??_noolite_send+6
  3427  03EF  01FA               	clrf	??_noolite_send+7
  3428  03F0  07F3               	addwf	??_noolite_send,f
  3429  03F1  0878               	movf	??_noolite_send+5,w
  3430  03F2  3DF4               	addwfc	??_noolite_send+1,f
  3431  03F3  0879               	movf	??_noolite_send+6,w
  3432  03F4  3DF5               	addwfc	??_noolite_send+2,f
  3433  03F5  087A               	movf	??_noolite_send+7,w
  3434  03F6  3DF6               	addwfc	??_noolite_send+3,f
  3435  03F7  0876               	movf	??_noolite_send+3,w
  3436  03F8  00F3               	movwf	??_noolite_send
  3437  03F9  01F4               	clrf	??_noolite_send+1
  3438  03FA  01F5               	clrf	??_noolite_send+2
  3439  03FB  01F6               	clrf	??_noolite_send+3
  3440  03FC  2C24               	goto	L6
  3441  03FD                     l1482:	
  3442                           ;noolite.c: 234: } else {
  3443                           
  3444                           ;noolite.c: 233: endpos++;
  3445                           
  3446                           
  3447                           ;noolite.c: 235: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3448  03FD  0855               	movf	noolite_send@endpos,w
  3449  03FE  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3450  03FF  0086               	movwf	6
  3451  0400  0187               	clrf	7
  3452  0401  0852               	movf	noolite_send@chn,w
  3453  0402  0720               	addwf	_startaddress,w
  3454  0403  0081               	movwf	1
  3455                           
  3456                           ;noolite.c: 236: endpos++;
  3457  0404  0AD5               	incf	noolite_send@endpos,f
  3458                           
  3459                           ;noolite.c: 237: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3460  0405  0855               	movf	noolite_send@endpos,w
  3461  0406  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3462  0407  0086               	movwf	6
  3463  0408  0820               	movf	_startaddress,w
  3464  0409  00F3               	movwf	??_noolite_send
  3465  040A  0821               	movf	_startaddress+1,w
  3466  040B  00F4               	movwf	??_noolite_send+1
  3467  040C  0822               	movf	_startaddress+2,w
  3468  040D  00F5               	movwf	??_noolite_send+2
  3469  040E  0823               	movf	_startaddress+3,w
  3470  040F  00F6               	movwf	??_noolite_send+3
  3471  0410  0852               	movf	noolite_send@chn,w
  3472  0411  00F7               	movwf	??_noolite_send+4
  3473  0412  01F8               	clrf	??_noolite_send+5
  3474  0413  01F9               	clrf	??_noolite_send+6
  3475  0414  01FA               	clrf	??_noolite_send+7
  3476  0415  07F3               	addwf	??_noolite_send,f
  3477  0416  0878               	movf	??_noolite_send+5,w
  3478  0417  3DF4               	addwfc	??_noolite_send+1,f
  3479  0418  0879               	movf	??_noolite_send+6,w
  3480  0419  3DF5               	addwfc	??_noolite_send+2,f
  3481  041A  087A               	movf	??_noolite_send+7,w
  3482  041B  3DF6               	addwfc	??_noolite_send+3,f
  3483  041C  0874               	movf	??_noolite_send+1,w
  3484  041D  00F3               	movwf	??_noolite_send
  3485  041E  0875               	movf	??_noolite_send+2,w
  3486  041F  00F4               	movwf	??_noolite_send+1
  3487  0420  0876               	movf	??_noolite_send+3,w
  3488  0421  00F5               	movwf	??_noolite_send+2
  3489  0422  01F6               	clrf	??_noolite_send+3
  3490  0423  0873               	movf	??_noolite_send,w
  3491  0424                     L6:	
  3492  0424  0081               	movwf	1
  3493                           
  3494                           ;noolite.c: 238: endpos++;
  3495  0425  0AD5               	incf	noolite_send@endpos,f
  3496                           
  3497                           ;noolite.c: 239: }
  3498                           ;noolite.c: 240: noo_send_buffer[endpos] = noo_send_format;
  3499  0426  0855               	movf	noolite_send@endpos,w
  3500  0427  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3501  0428  0086               	movwf	6
  3502  0429  0187               	clrf	7
  3503  042A  0871               	movf	noolite_send@noo_send_format,w
  3504  042B  0081               	movwf	1
  3505                           
  3506                           ;noolite.c: 241: endpos++;
  3507  042C  0AD5               	incf	noolite_send@endpos,f
  3508                           
  3509                           ;noolite.c: 242: temp_send = 0;
  3510  042D  01D4               	clrf	noolite_send@temp_send
  3511                           
  3512                           ;noolite.c: 243: countbit = (unsigned char) (endpos * 8);
  3513  042E  0855               	movf	noolite_send@endpos,w
  3514  042F  0709               	addwf	9,w
  3515  0430  0709               	addwf	9,w
  3516  0431  0709               	addwf	9,w
  3517  0432  00D1               	movwf	noolite_send@countbit
  3518                           
  3519                           ;noolite.c: 244: countsend = (uint8_t) (startpos + 1);
  3520  0433  0850               	movf	noolite_send@startpos,w
  3521  0434  3E01               	addlw	1
  3522  0435  00D3               	movwf	noolite_send@countsend
  3523  0436                     l1520:	
  3524                           ;noolite.c: 245: while (countsend < countbit) {
  3525                           
  3526  0436  0020               	movlb	0	; select bank0
  3527  0437  0851               	movf	noolite_send@countbit,w
  3528  0438  0253               	subwf	noolite_send@countsend,w
  3529  0439  1803               	btfsc	3,0
  3530  043A  2C60               	goto	l1522
  3531                           
  3532                           ;noolite.c: 246: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3533  043B  0853               	movf	noolite_send@countsend,w
  3534  043C  00F3               	movwf	??_noolite_send
  3535  043D  36F3               	lsrf	??_noolite_send,f
  3536  043E  36F3               	lsrf	??_noolite_send,f
  3537  043F  36F3               	lsrf	??_noolite_send,f
  3538  0440  0873               	movf	??_noolite_send,w
  3539  0441  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3540  0442  0086               	movwf	6
  3541  0443  3001               	movlw	1
  3542  0444  0187               	clrf	7
  3543  0445  00F4               	movwf	??_noolite_send+1
  3544  0446  0853               	movf	noolite_send@countsend,w
  3545  0447  3907               	andlw	7
  3546  0448  0A89               	incf	9,f
  3547  0449  2C4B               	goto	u854
  3548  044A                     u855:	
  3549  044A  35F4               	lslf	??_noolite_send+1,f
  3550  044B                     u854:	
  3551  044B  0B89               	decfsz	9,f
  3552  044C  2C4A               	goto	u855
  3553  044D  0874               	movf	??_noolite_send+1,w
  3554  044E  0501               	andwf	1,w
  3555  044F  1903               	btfsc	3,2
  3556  0450  2C53               	goto	l1502
  3557                           
  3558                           ;noolite.c: 247: temp_send = (uint8_t) (temp_send^0x01);
  3559  0451  3001               	movlw	1
  3560  0452  06D4               	xorwf	noolite_send@temp_send,f
  3561  0453                     l1502:	
  3562                           
  3563                           ;noolite.c: 248: }
  3564                           ;noolite.c: 249: tx_status &= (~(1<<4));
  3565  0453  122B               	bcf	_tx_status,4
  3566                           
  3567                           ;noolite.c: 250: if (((temp_send & (1<<0)) != 0)) {
  3568  0454  1C54               	btfss	noolite_send@temp_send,0
  3569  0455  2C59               	goto	l1510
  3570                           
  3571                           ;noolite.c: 251: temp_send = (uint8_t) (temp_send^0x18);
  3572  0456  3018               	movlw	24
  3573  0457  06D4               	xorwf	noolite_send@temp_send,f
  3574                           
  3575                           ;noolite.c: 252: tx_status |= (1<<4);
  3576  0458  162B               	bsf	_tx_status,4
  3577  0459                     l1510:	
  3578                           
  3579                           ;noolite.c: 253: }
  3580                           ;noolite.c: 254: temp_send = (uint8_t) (temp_send >> 1);
  3581  0459  36D4               	lsrf	noolite_send@temp_send,f
  3582                           
  3583                           ;noolite.c: 255: temp_send &= (~(1<<7));
  3584  045A  13D4               	bcf	noolite_send@temp_send,7
  3585                           
  3586                           ;noolite.c: 256: if (((tx_status & (1<<4)) != 0)) {
  3587  045B  1A2B               	btfsc	_tx_status,4
  3588                           
  3589                           ;noolite.c: 257: temp_send |= (1<<7);
  3590  045C  17D4               	bsf	noolite_send@temp_send,7
  3591                           
  3592                           ;noolite.c: 258: }
  3593                           ;noolite.c: 259: countsend++;
  3594  045D  0AD3               	incf	noolite_send@countsend,f
  3595  045E  0064               	clrwdt	;# 
  3596  045F  2C36               	goto	l1520
  3597  0460                     l1522:	
  3598                           
  3599                           ;noolite.c: 261: }
  3600                           ;noolite.c: 262: noo_send_buffer[endpos] = temp_send;
  3601  0460  0855               	movf	noolite_send@endpos,w
  3602  0461  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3603  0462  0086               	movwf	6
  3604  0463  0187               	clrf	7
  3605  0464  0854               	movf	noolite_send@temp_send,w
  3606  0465  0081               	movwf	1
  3607  0466  30C0               	movlw	192
  3608                           
  3609                           ;noolite.c: 263: endpos++;
  3610  0467  0AD5               	incf	noolite_send@endpos,f
  3611                           
  3612                           ;noolite.c: 264: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3613  0468  0021               	movlb	1	; select bank1
  3614  0469  0595               	andwf	21,f	;volatile
  3615  046A  3003               	movlw	3
  3616  046B  0495               	iorwf	21,f	;volatile
  3617                           
  3618                           ;noolite.c: 265: temp_send = 3;
  3619  046C  0020               	movlb	0	; select bank0
  3620  046D  00D4               	movwf	noolite_send@temp_send
  3621  046E  3026               	movlw	38
  3622                           
  3623                           ;noolite.c: 266: tx_status &= (~(1<<2));
  3624  046F  112B               	bcf	_tx_status,2
  3625                           
  3626                           ;noolite.c: 267: tx_status &= (~(1<<3));
  3627  0470  11AB               	bcf	_tx_status,3
  3628                           
  3629                           ;noolite.c: 268: tx_status |= (1<<0);
  3630  0471  142B               	bsf	_tx_status,0
  3631                           
  3632                           ;noolite.c: 269: tx_status |= (1<<5);
  3633  0472  16AB               	bsf	_tx_status,5
  3634                           
  3635                           ;noolite.c: 270: countsend = 0;
  3636  0473  01D3               	clrf	noolite_send@countsend
  3637                           
  3638                           ;noolite.c: 271: countbit = 38;
  3639  0474  00D1               	movwf	noolite_send@countbit
  3640  0475  0064               	clrwdt	;# 
  3641                           
  3642                           ;noolite.c: 273: LATCbits.LATC3 = 1;
  3643  0476  0022               	movlb	2	; select bank2
  3644  0477  158E               	bsf	14,3	;volatile
  3645                           
  3646                           ;noolite.c: 274: _delay((unsigned long)((15)*(8000000/4000.0)));
  3647  0478  3027               	movlw	39
  3648  0479  00F3               	movwf	??_noolite_send
  3649  047A  30F5               	movlw	245
  3650  047B                     u1687:	
  3651  047B  0B89               	decfsz	9,f
  3652  047C  2C7B               	goto	u1687
  3653  047D  0BF3               	decfsz	??_noolite_send,f
  3654  047E  2C7B               	goto	u1687
  3655  047F  0000               	nop
  3656                           
  3657                           ;noolite.c: 275: LATCbits.LATC3 = 0;
  3658  0480  0022               	movlb	2	; select bank2
  3659  0481  118E               	bcf	14,3	;volatile
  3660                           
  3661                           ;noolite.c: 276: TMR0 = 196;
  3662  0482  30C4               	movlw	196
  3663  0483  0020               	movlb	0	; select bank0
  3664  0484  0095               	movwf	21	;volatile
  3665                           
  3666                           ;noolite.c: 277: TMR0IF = 0;
  3667  0485  110B               	bcf	11,2	;volatile
  3668                           
  3669                           ;noolite.c: 278: TMR0IE = 0;
  3670  0486  128B               	bcf	11,5	;volatile
  3671  0487                     l200:	
  3672                           ;noolite.c: 279: while (((tx_status & (1<<3)) == 0)) {
  3673                           
  3674  0487  19AB               	btfsc	_tx_status,3
  3675  0488  2CE1               	goto	l211
  3676                           
  3677                           ;noolite.c: 280: if (TMR0IF) {
  3678  0489  1D0B               	btfss	11,2	;volatile
  3679  048A  2C87               	goto	l200
  3680                           
  3681                           ;noolite.c: 281: __nop();
  3682  048B  0000               	nop
  3683                           
  3684                           ;noolite.c: 282: if (countsend < countbit) {
  3685  048C  0020               	movlb	0	; select bank0
  3686  048D  0851               	movf	noolite_send@countbit,w
  3687  048E  0253               	subwf	noolite_send@countsend,w
  3688  048F  1803               	skipnc
  3689  0490  2CA8               	goto	l203
  3690                           
  3691                           ;noolite.c: 283: if (((tx_status & (1<<2)) == 0)) {
  3692  0491  192B               	btfsc	_tx_status,2
  3693  0492  2C9F               	goto	l1570
  3694                           
  3695                           ;noolite.c: 284: if (((tx_status & (1<<0)) == 0)) {
  3696  0493  182B               	btfsc	_tx_status,0
  3697  0494  2C98               	goto	l205
  3698                           
  3699                           ;noolite.c: 285: LATAbits.LATA5 = 1;
  3700  0495  0022               	movlb	2	; select bank2
  3701  0496  168C               	bsf	12,5	;volatile
  3702                           
  3703                           ;noolite.c: 286: } else {
  3704  0497  2C9A               	goto	l1566
  3705  0498                     l205:	
  3706                           
  3707                           ;noolite.c: 287: LATAbits.LATA5 = 0;
  3708  0498  0022               	movlb	2	; select bank2
  3709  0499  128C               	bcf	12,5	;volatile
  3710  049A                     l1566:	
  3711                           
  3712                           ;noolite.c: 288: }
  3713                           ;noolite.c: 289: TMR0 = 196;
  3714  049A  30C4               	movlw	196
  3715  049B  0020               	movlb	0	; select bank0
  3716  049C  0095               	movwf	21	;volatile
  3717                           
  3718                           ;noolite.c: 290: tx_status |= (1<<2);
  3719  049D  152B               	bsf	_tx_status,2
  3720                           
  3721                           ;noolite.c: 291: } else {
  3722  049E  2CC4               	goto	l208
  3723  049F                     l1570:	
  3724                           
  3725                           ;noolite.c: 292: LATA ^= (1<<5);
  3726  049F  3020               	movlw	32
  3727  04A0  0022               	movlb	2	; select bank2
  3728  04A1  068C               	xorwf	12,f	;volatile
  3729                           
  3730                           ;noolite.c: 293: TMR0 = 196;
  3731  04A2  30C4               	movlw	196
  3732  04A3  0020               	movlb	0	; select bank0
  3733  04A4  0095               	movwf	21	;volatile
  3734                           
  3735                           ;noolite.c: 294: tx_status &= (~(1<<2));
  3736  04A5  112B               	bcf	_tx_status,2
  3737                           
  3738                           ;noolite.c: 295: countsend++;
  3739  04A6  0AD3               	incf	noolite_send@countsend,f
  3740  04A7  2CC4               	goto	l208
  3741  04A8                     l203:	
  3742                           
  3743                           ;noolite.c: 298: LATAbits.LATA5 = 0;
  3744  04A8  0022               	movlb	2	; select bank2
  3745  04A9  128C               	bcf	12,5	;volatile
  3746                           
  3747                           ;noolite.c: 299: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3748  04AA  30C0               	movlw	192
  3749  04AB  0021               	movlb	1	; select bank1
  3750  04AC  0595               	andwf	21,f	;volatile
  3751  04AD  3003               	movlw	3
  3752  04AE  0495               	iorwf	21,f	;volatile
  3753                           
  3754                           ;noolite.c: 300: TMR0 = 67;
  3755  04AF  3043               	movlw	67
  3756  04B0  0020               	movlb	0	; select bank0
  3757  04B1  0095               	movwf	21	;volatile
  3758  04B2  0064               	clrwdt	;# 
  3759                           
  3760                           ;noolite.c: 302: tx_status &= (~(1<<5));
  3761  04B3  0020               	movlb	0	; select bank0
  3762  04B4  12AB               	bcf	_tx_status,5
  3763                           
  3764                           ;noolite.c: 303: countsend = startpos;
  3765  04B5  0850               	movf	noolite_send@startpos,w
  3766  04B6  00D3               	movwf	noolite_send@countsend
  3767                           
  3768                           ;noolite.c: 304: countbit = (uint8_t) (endpos * 8);
  3769  04B7  0855               	movf	noolite_send@endpos,w
  3770  04B8  0709               	addwf	9,w
  3771  04B9  0709               	addwf	9,w
  3772  04BA  0709               	addwf	9,w
  3773  04BB  00D1               	movwf	noolite_send@countbit
  3774                           
  3775                           ;noolite.c: 305: if (temp_send != 0) {
  3776  04BC  0854               	movf	noolite_send@temp_send,w
  3777  04BD  1903               	btfsc	3,2
  3778  04BE  2CC1               	goto	l1586
  3779                           
  3780                           ;noolite.c: 306: temp_send--;
  3781  04BF  03D4               	decf	noolite_send@temp_send,f
  3782                           
  3783                           ;noolite.c: 307: } else {
  3784  04C0  2CC4               	goto	l208
  3785  04C1                     l1586:	
  3786                           
  3787                           ;noolite.c: 308: TMR0 = 0;
  3788  04C1  0195               	clrf	21	;volatile
  3789                           
  3790                           ;noolite.c: 309: tx_status |= (1<<3);
  3791  04C2  15AB               	bsf	_tx_status,3
  3792                           
  3793                           ;noolite.c: 310: break;
  3794  04C3  2CE1               	goto	l211
  3795  04C4                     l208:	
  3796                           
  3797                           ;noolite.c: 311: }
  3798                           ;noolite.c: 312: }
  3799                           ;noolite.c: 313: if (((tx_status & (1<<5)) == 0)) {
  3800  04C4  1AAB               	btfsc	_tx_status,5
  3801  04C5  2CDF               	goto	l212
  3802                           
  3803                           ;noolite.c: 314: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3804  04C6  0853               	movf	noolite_send@countsend,w
  3805  04C7  00F3               	movwf	??_noolite_send
  3806  04C8  36F3               	lsrf	??_noolite_send,f
  3807  04C9  36F3               	lsrf	??_noolite_send,f
  3808  04CA  36F3               	lsrf	??_noolite_send,f
  3809  04CB  0873               	movf	??_noolite_send,w
  3810  04CC  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3811  04CD  0086               	movwf	6
  3812  04CE  3001               	movlw	1
  3813  04CF  0187               	clrf	7
  3814  04D0  00F4               	movwf	??_noolite_send+1
  3815  04D1  0853               	movf	noolite_send@countsend,w
  3816  04D2  3907               	andlw	7
  3817  04D3  0A89               	incf	9,f
  3818  04D4  2CD6               	goto	u964
  3819  04D5                     u965:	
  3820  04D5  35F4               	lslf	??_noolite_send+1,f
  3821  04D6                     u964:	
  3822  04D6  0B89               	decfsz	9,f
  3823  04D7  2CD5               	goto	u965
  3824  04D8  0874               	movf	??_noolite_send+1,w
  3825  04D9  0501               	andwf	1,w
  3826  04DA  1903               	btfsc	3,2
  3827  04DB  2CDE               	goto	l213
  3828                           
  3829                           ;noolite.c: 315: tx_status |= (1<<0);
  3830  04DC  142B               	bsf	_tx_status,0
  3831                           
  3832                           ;noolite.c: 316: } else {
  3833  04DD  2CDF               	goto	l212
  3834  04DE                     l213:	
  3835                           
  3836                           ;noolite.c: 317: tx_status &= (~(1<<0));
  3837  04DE  102B               	bcf	_tx_status,0
  3838  04DF                     l212:	
  3839                           
  3840                           ;noolite.c: 318: }
  3841                           ;noolite.c: 319: }
  3842                           ;noolite.c: 320: TMR0IF = 0;
  3843  04DF  110B               	bcf	11,2	;volatile
  3844  04E0  2C87               	goto	l200
  3845  04E1                     l211:	
  3846                           
  3847                           ;noolite.c: 321: }
  3848                           ;noolite.c: 322: }
  3849                           ;noolite.c: 323: TMR0IF = 0;
  3850  04E1  110B               	bcf	11,2	;volatile
  3851                           
  3852                           ;noolite.c: 324: LATAbits.LATA5 = 0;
  3853  04E2  0022               	movlb	2	; select bank2
  3854  04E3  128C               	bcf	12,5	;volatile
  3855  04E4  0008               	return
  3856  04E5                     __end_of_noolite_send:	
  3857                           
  3858                           	psect	text9
  3859  0146                     __ptext9:	
  3860 ;; *************** function _Init_TypeFromFlash *****************
  3861 ;; Defined at:
  3862 ;;		line 23 in file "user_functions.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  type            2    0[COMMON] PTR const unsigned int 
  3865 ;;		 -> Type(16), 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      unsigned char 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/2
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1
  3877 ;;      Params:         2       0       0
  3878 ;;      Locals:         0       0       0
  3879 ;;      Temps:          2       0       0
  3880 ;;      Totals:         4       0       0
  3881 ;;Total ram usage:        4 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; This function calls:
  3884 ;;		Nothing
  3885 ;; This function is called by:
  3886 ;;		_main
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _Init_TypeFromFlash
  3892  0146                     _Init_TypeFromFlash:	
  3893                           
  3894                           ;user_functions.c: 24: if (((type[0] >> 8) == 0x5A) && ((type[0] & 0xFF) < 4)) {
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _Init_TypeFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3898  0146  0870               	movf	Init_TypeFromFlash@type,w
  3899  0147  0084               	movwf	4
  3900  0148  0871               	movf	Init_TypeFromFlash@type+1,w
  3901  0149  0085               	movwf	5
  3902  014A  3F00               	moviw [0]fsr0
  3903  014B  00F2               	movwf	??_Init_TypeFromFlash
  3904  014C  3F01               	moviw [1]fsr0
  3905  014D  00F3               	movwf	??_Init_TypeFromFlash+1
  3906  014E  00F2               	movwf	??_Init_TypeFromFlash
  3907  014F  305A               	movlw	90
  3908  0150  01F3               	clrf	??_Init_TypeFromFlash+1
  3909  0151  0672               	xorwf	??_Init_TypeFromFlash,w
  3910  0152  1D03               	btfss	3,2
  3911  0153  3400               	retlw	0
  3912  0154  0870               	movf	Init_TypeFromFlash@type,w
  3913  0155  0084               	movwf	4
  3914  0156  0871               	movf	Init_TypeFromFlash@type+1,w
  3915  0157  0085               	movwf	5
  3916  0158  0800               	movf	0,w	;code access
  3917  0159  00F2               	movwf	??_Init_TypeFromFlash
  3918  015A  3004               	movlw	4
  3919  015B  0272               	subwf	??_Init_TypeFromFlash,w
  3920  015C  1803               	skipnc
  3921  015D  3400               	retlw	0
  3922                           
  3923                           ;user_functions.c: 25: return (type[0] & 0xFF);
  3924  015E  0870               	movf	Init_TypeFromFlash@type,w
  3925  015F  0084               	movwf	4
  3926  0160  0871               	movf	Init_TypeFromFlash@type+1,w
  3927  0161  0085               	movwf	5
  3928  0162  0800               	movf	0,w	;code access
  3929  0163  0008               	return
  3930  0164                     __end_of_Init_TypeFromFlash:	
  3931                           ;user_functions.c: 27: return 0;
  3932                           
  3933                           
  3934                           	psect	text10
  3935  02B2                     __ptext10:	
  3936 ;; *************** function _Init_TxStatusFromFlash *****************
  3937 ;; Defined at:
  3938 ;;		line 31 in file "user_functions.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  txStatus        2    0[COMMON] PTR const unsigned int 
  3941 ;;		 -> TxStatus(16), 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  cellNum         1    8[COMMON] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      unsigned char 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3948 ;; Tracked objects:
  3949 ;;		On entry : 1F/0
  3950 ;;		On exit  : 1F/0
  3951 ;;		Unchanged: 1F/0
  3952 ;; Data sizes:     COMMON   BANK0   BANK1
  3953 ;;      Params:         2       0       0
  3954 ;;      Locals:         1       0       0
  3955 ;;      Temps:          6       0       0
  3956 ;;      Totals:         9       0       0
  3957 ;;Total ram usage:        9 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _Init_TxStatusFromFlash
  3968  02B2                     _Init_TxStatusFromFlash:	
  3969                           
  3970                           ;user_functions.c: 32: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  3971                           
  3972                           ;incstack = 0
  3973                           ; Regs used in _Init_TxStatusFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3974  02B2  01F8               	clrf	Init_TxStatusFromFlash@cellNum
  3975  02B3                     l1686:	
  3976                           
  3977                           ;user_functions.c: 33: if (txStatus[cellNum] == 0xFFFF) {
  3978  02B3  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3979  02B4  00F2               	movwf	??_Init_TxStatusFromFlash
  3980  02B5  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3981  02B6  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3982  02B7  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3983  02B8  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3984  02B9  0772               	addwf	??_Init_TxStatusFromFlash,w
  3985  02BA  0084               	movwf	4
  3986  02BB  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3987  02BC  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3988  02BD  0085               	movwf	5
  3989  02BE  0012               	moviw fsr0++
  3990  02BF  3AFF               	xorlw	255
  3991  02C0  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3992  02C1  0012               	moviw fsr0++
  3993  02C2  3AFF               	xorlw	255
  3994  02C3  04F4               	iorwf	??_Init_TxStatusFromFlash+2,f
  3995  02C4  1D03               	btfss	3,2
  3996  02C5  2B0E               	goto	l1708
  3997                           
  3998                           ;user_functions.c: 34: if (cellNum > 0) {
  3999  02C6  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4000  02C7  1903               	btfsc	3,2
  4001  02C8  3400               	retlw	0
  4002                           
  4003                           ;user_functions.c: 35: if (((txStatus[cellNum - 1] >> 8) == 0x5A) && ((txStatus[cellNum 
      +                          - 1] & 0xFF) < 3)) {
  4004  02C9  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4005  02CA  00F2               	movwf	??_Init_TxStatusFromFlash
  4006  02CB  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4007  02CC  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4008  02CD  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4009  02CE  0872               	movf	??_Init_TxStatusFromFlash,w
  4010  02CF  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4011  02D0  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4012  02D1  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4013  02D2  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4014  02D3  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4015  02D4  30FE               	movlw	254
  4016  02D5  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4017  02D6  0084               	movwf	4
  4018  02D7  30FF               	movlw	255
  4019  02D8  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4020  02D9  0085               	movwf	5
  4021  02DA  3F00               	moviw [0]fsr0
  4022  02DB  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4023  02DC  3F01               	moviw [1]fsr0
  4024  02DD  00F7               	movwf	??_Init_TxStatusFromFlash+5
  4025  02DE  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4026  02DF  305A               	movlw	90
  4027  02E0  01F7               	clrf	??_Init_TxStatusFromFlash+5
  4028  02E1  0676               	xorwf	??_Init_TxStatusFromFlash+4,w
  4029  02E2  1D03               	btfss	3,2
  4030  02E3  3400               	retlw	0
  4031  02E4  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4032  02E5  00F2               	movwf	??_Init_TxStatusFromFlash
  4033  02E6  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4034  02E7  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4035  02E8  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4036  02E9  0872               	movf	??_Init_TxStatusFromFlash,w
  4037  02EA  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4038  02EB  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4039  02EC  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4040  02ED  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4041  02EE  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4042  02EF  30FE               	movlw	254
  4043  02F0  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4044  02F1  0084               	movwf	4
  4045  02F2  30FF               	movlw	255
  4046  02F3  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4047  02F4  0085               	movwf	5
  4048  02F5  0800               	movf	0,w	;code access
  4049  02F6  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4050  02F7  3003               	movlw	3
  4051  02F8  0276               	subwf	??_Init_TxStatusFromFlash+4,w
  4052  02F9  1803               	skipnc
  4053  02FA  3400               	retlw	0
  4054                           
  4055                           ;user_functions.c: 36: return txStatus[cellNum - 1];
  4056  02FB  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4057  02FC  00F2               	movwf	??_Init_TxStatusFromFlash
  4058  02FD  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4059  02FE  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4060  02FF  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4061  0300  0872               	movf	??_Init_TxStatusFromFlash,w
  4062  0301  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4063  0302  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4064  0303  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4065  0304  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4066  0305  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4067  0306  30FE               	movlw	254
  4068  0307  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4069  0308  0084               	movwf	4
  4070  0309  30FF               	movlw	255
  4071  030A  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4072  030B  0085               	movwf	5
  4073  030C  0800               	movf	0,w	;code access
  4074  030D  0008               	return
  4075  030E                     l1708:	
  4076                           ;user_functions.c: 38: return 0;
  4077                           
  4078                           
  4079                           ;user_functions.c: 44: if (cellNum == 7) {
  4080  030E  3007               	movlw	7
  4081  030F  0678               	xorwf	Init_TxStatusFromFlash@cellNum,w
  4082  0310  1D03               	btfss	3,2
  4083  0311  2B45               	goto	l1724
  4084                           
  4085                           ;user_functions.c: 45: if (((txStatus[cellNum] >> 8) == 0x5A) && ((txStatus[cellNum] & 0
      +                          xFF) < 3)) {
  4086  0312  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4087  0313  00F2               	movwf	??_Init_TxStatusFromFlash
  4088  0314  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4089  0315  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4090  0316  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4091  0317  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4092  0318  0772               	addwf	??_Init_TxStatusFromFlash,w
  4093  0319  0084               	movwf	4
  4094  031A  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4095  031B  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4096  031C  0085               	movwf	5
  4097  031D  3F00               	moviw [0]fsr0
  4098  031E  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4099  031F  3F01               	moviw [1]fsr0
  4100  0320  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4101  0321  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4102  0322  305A               	movlw	90
  4103  0323  01F5               	clrf	??_Init_TxStatusFromFlash+3
  4104  0324  0674               	xorwf	??_Init_TxStatusFromFlash+2,w
  4105  0325  1D03               	btfss	3,2
  4106  0326  3400               	retlw	0
  4107  0327  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4108  0328  00F2               	movwf	??_Init_TxStatusFromFlash
  4109  0329  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4110  032A  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4111  032B  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4112  032C  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4113  032D  0772               	addwf	??_Init_TxStatusFromFlash,w
  4114  032E  0084               	movwf	4
  4115  032F  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4116  0330  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4117  0331  0085               	movwf	5
  4118  0332  0800               	movf	0,w	;code access
  4119  0333  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4120  0334  3003               	movlw	3
  4121  0335  0274               	subwf	??_Init_TxStatusFromFlash+2,w
  4122  0336  1803               	skipnc
  4123  0337  3400               	retlw	0
  4124                           
  4125                           ;user_functions.c: 46: return txStatus[cellNum];
  4126  0338  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4127  0339  00F2               	movwf	??_Init_TxStatusFromFlash
  4128  033A  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4129  033B  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4130  033C  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4131  033D  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4132  033E  0772               	addwf	??_Init_TxStatusFromFlash,w
  4133  033F  0084               	movwf	4
  4134  0340  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4135  0341  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4136  0342  0085               	movwf	5
  4137  0343  0800               	movf	0,w	;code access
  4138  0344  0008               	return
  4139  0345                     l1724:	
  4140  0345  3008               	movlw	8
  4141  0346  0AF8               	incf	Init_TxStatusFromFlash@cellNum,f
  4142  0347  0278               	subwf	Init_TxStatusFromFlash@cellNum,w
  4143  0348  1803               	btfsc	3,0
  4144  0349  3400               	retlw	0
  4145  034A  2AB3               	goto	l1686
  4146  034B                     __end_of_Init_TxStatusFromFlash:	
  4147                           
  4148                           	psect	text11
  4149  0123                     __ptext11:	
  4150 ;; *************** function _Init_IO *****************
  4151 ;; Defined at:
  4152 ;;		line 46 in file "periph_config.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;		None
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2
  4161 ;; Tracked objects:
  4162 ;;		On entry : B1F/0
  4163 ;;		On exit  : B1F/2
  4164 ;;		Unchanged: B00/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1
  4166 ;;      Params:         0       0       0
  4167 ;;      Locals:         0       0       0
  4168 ;;      Temps:          0       0       0
  4169 ;;      Totals:         0       0       0
  4170 ;;Total ram usage:        0 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_main
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _Init_IO
  4181  0123                     _Init_IO:	
  4182                           
  4183                           ;periph_config.c: 47: OPTION_REGbits.nWPUEN = 0;
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in _Init_IO: [wreg+status,2]
  4187  0123  0021               	movlb	1	; select bank1
  4188  0124  1395               	bcf	21,7	;volatile
  4189                           
  4190                           ;periph_config.c: 48: TRISA = 0x1F;
  4191  0125  301F               	movlw	31
  4192  0126  008C               	movwf	12	;volatile
  4193                           
  4194                           ;periph_config.c: 49: ANSELA = 0;
  4195  0127  0023               	movlb	3	; select bank3
  4196  0128  018C               	clrf	12	;volatile
  4197                           
  4198                           ;periph_config.c: 50: WPUA = 0x08;
  4199  0129  3008               	movlw	8
  4200  012A  0024               	movlb	4	; select bank4
  4201  012B  008C               	movwf	12	;volatile
  4202                           
  4203                           ;periph_config.c: 52: TRISC = 0x00;
  4204  012C  0021               	movlb	1	; select bank1
  4205  012D  018E               	clrf	14	;volatile
  4206                           
  4207                           ;periph_config.c: 53: ANSELC = 0;
  4208  012E  0023               	movlb	3	; select bank3
  4209  012F  018E               	clrf	14	;volatile
  4210                           
  4211                           ;periph_config.c: 54: LATC = 0x00;
  4212  0130  0022               	movlb	2	; select bank2
  4213  0131  018E               	clrf	14	;volatile
  4214  0132  0008               	return
  4215  0133                     __end_of_Init_IO:	
  4216                           
  4217                           	psect	text12
  4218  0109                     __ptext12:	
  4219 ;; *************** function _Init_CLK *****************
  4220 ;; Defined at:
  4221 ;;		line 15 in file "periph_config.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;		None
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      void 
  4228 ;; Registers used:
  4229 ;;		wreg, status,2, status,0
  4230 ;; Tracked objects:
  4231 ;;		On entry : B1F/2
  4232 ;;		On exit  : B1F/1
  4233 ;;		Unchanged: B00/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1
  4235 ;;      Params:         0       0       0
  4236 ;;      Locals:         0       0       0
  4237 ;;      Temps:          0       0       0
  4238 ;;      Totals:         0       0       0
  4239 ;;Total ram usage:        0 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _Init_CLK
  4250  0109                     _Init_CLK:	
  4251                           
  4252                           ;periph_config.c: 18: OSCCONbits.IRCF = 0b1110;
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _Init_CLK: [wreg+status,2+status,0]
  4256  0109  0021               	movlb	1	; select bank1
  4257  010A  0819               	movf	25,w	;volatile
  4258  010B  3987               	andlw	-121
  4259  010C  3870               	iorlw	112
  4260  010D  0099               	movwf	25	;volatile
  4261                           
  4262                           ;periph_config.c: 34: WDTCONbits.WDTPS = 0b01011;
  4263  010E  0817               	movf	23,w	;volatile
  4264  010F  39C1               	andlw	-63
  4265  0110  3816               	iorlw	22
  4266  0111  0097               	movwf	23	;volatile
  4267                           
  4268                           ;periph_config.c: 41: WDTCONbits.SWDTEN = 1;
  4269  0112  1417               	bsf	23,0	;volatile
  4270  0113                     l270:	
  4271                           ;periph_config.c: 42: while (!OSCSTATbits.HFIOFR) {
  4272                           
  4273  0113  1A1A               	btfsc	26,4	;volatile
  4274  0114  0008               	return
  4275  0115  2913               	goto	l270
  4276  0116                     __end_of_Init_CLK:	
  4277                           
  4278                           	psect	text13
  4279  00FD                     __ptext13:	
  4280 ;; *************** function _Init_ADC *****************
  4281 ;; Defined at:
  4282 ;;		line 57 in file "periph_config.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;		None
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, status,2, status,0
  4291 ;; Tracked objects:
  4292 ;;		On entry : B1F/1
  4293 ;;		On exit  : B1F/1
  4294 ;;		Unchanged: B00/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1
  4296 ;;      Params:         0       0       0
  4297 ;;      Locals:         0       0       0
  4298 ;;      Temps:          0       0       0
  4299 ;;      Totals:         0       0       0
  4300 ;;Total ram usage:        0 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; This function calls:
  4303 ;;		Nothing
  4304 ;; This function is called by:
  4305 ;;		_main
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _Init_ADC
  4311  00FD                     _Init_ADC:	
  4312                           
  4313                           ;periph_config.c: 58: FVRCON = 0;
  4314                           
  4315                           ;incstack = 0
  4316                           ; Regs used in _Init_ADC: [wreg+status,2+status,0]
  4317  00FD  0022               	movlb	2	; select bank2
  4318  00FE  0197               	clrf	23	;volatile
  4319                           
  4320                           ;periph_config.c: 60: ADCON1bits.ADFM = 1;
  4321  00FF  0021               	movlb	1	; select bank1
  4322  0100  179E               	bsf	30,7	;volatile
  4323                           
  4324                           ;periph_config.c: 61: ADCON1bits.ADCS = 0b001;
  4325  0101  081E               	movf	30,w	;volatile
  4326  0102  398F               	andlw	-113
  4327  0103  3810               	iorlw	16
  4328  0104  009E               	movwf	30	;volatile
  4329                           
  4330                           ;periph_config.c: 64: ADCON1bits.ADPREF = 0b00;
  4331  0105  30FC               	movlw	-4
  4332  0106  059E               	andwf	30,f	;volatile
  4333                           
  4334                           ;periph_config.c: 66: ADCON0bits.ADON = 0;
  4335  0107  101D               	bcf	29,0	;volatile
  4336  0108  0008               	return
  4337  0109                     __end_of_Init_ADC:	
  4338  007E                     btemp	set	126	;btemp
  4339  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      64
    BANK1            32      0       0

Pointer List with Targets:

    KeyLongHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyLongHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    KeyOffHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyOffHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    SaveTxStatusToFlash@txStatusArray	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TxStatusFromFlash@txStatus	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TypeFromFlash@type	PTR const unsigned int  size(2) Largest target is 16
		 -> Type(CODE[16]), 

    noolite_send@data	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_KeyOffHandler
    _SaveTxStatusToFlash->_FlashWrite
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK0

    _main->_KeyLongHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   17951
                                             22 BANK0      6     6      0
                      _FlashEraseRow
                         _FlashWrite
                           _Init_ADC
                           _Init_CLK
                            _Init_IO
             _Init_TxStatusFromFlash
                 _Init_TypeFromFlash
                     _KeyLongHandler
                      _KeyOffHandler
                            _RF_Init
                _SaveTxStatusToFlash
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _SaveTxStatusToFlash                                 12     7      5    1536
                                              4 COMMON     9     4      5
                                              0 BANK0      3     3      0
                      _FlashEraseRow
                         _FlashWrite
 ---------------------------------------------------------------------------------
 (2) _FlashWrite                                           4     0      4     858
                                              0 COMMON     4     0      4
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (2) _FlashEraseRow                                        2     0      2     173
                                              0 COMMON     2     0      2
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (3) _FlashUnlock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Init                                              7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _KeyOffHandler                                        5     2      3    4686
                                             11 COMMON     3     0      3
                                             18 BANK0      2     2      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _KeyLongHandler                                       5     1      4    5248
                                             11 COMMON     1     1      0
                                             18 BANK0      4     0      4
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _noolite_send                                        29    26      3    3312
                                              0 COMMON    11     8      3
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _Init_TypeFromFlash                                   4     2      2     194
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_TxStatusFromFlash                               9     7      2     462
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_CLK                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashEraseRow
     _FlashUnlock
   _FlashWrite
     _FlashUnlock
   _Init_ADC
   _Init_CLK
   _Init_IO
   _Init_TxStatusFromFlash
   _Init_TypeFromFlash
   _KeyLongHandler
     _noolite_send
   _KeyOffHandler
     _noolite_send
   _RF_Init
   _SaveTxStatusToFlash
     _FlashEraseRow
       _FlashUnlock
     _FlashWrite
       _FlashUnlock
   _noolite_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Sep 10 21:59:47 2018

                      __CFG_CP$ON 0000                                l90 05BE                                l68 0545  
                              l85 0564                                l86 057D                                l87 0586  
                              l79 054F                                l96 05F9                               l200 0487  
                             l211 04E1                               l203 04A8                               l212 04DF  
                             l213 04DE                               l205 0498                               l143 0788  
                             l208 04C4                               l270 0113                               l184 035F  
                             l186 036D                               l178 0260                               l187 0369  
                             l179 02B0                               u854 044B                               u855 044A  
                             u964 04D6                               u965 04D5                      __CFG_IDLOC0$ 0000  
                    __CFG_IDLOC1$ 0007                      __CFG_IDLOC2$ 0000                      __CFG_IDLOC3$ 0007  
                    __CFG_BORV$LO 0000                               wreg 0009                       main@chn_250 005D  
                     main@chn_251 005E                       main@chn_252 005F          ??_Init_TxStatusFromFlash 0072  
                    __CFG_LVP$OFF 0000                   ?_KeyLongHandler 0056                              l2000 06CA  
                            l2020 071F                              l2012 06F1                              l2006 06DF  
                            l2014 06FF                              l2024 0726                              l2040 0772  
                            l2050 0789                              l2034 0760                              l2026 0734  
                            l2042 0780                              l2018 0711                              l2122 056E  
                            l2028 0742                              l1510 0459                              l1502 0453  
                            l2062 07A8                              l2046 0783                              l1520 0436  
                            l1522 0460                              l1442 0361                              l1460 037C  
                            l1448 036A                              l1570 049F                              l1482 03FD  
                            l1466 0393                              l1724 0345                              l1708 030E  
                            l1660 025E                              l1804 04FA                              l1566 049A  
                            l1760 018A                              l1920 05C1                              l1912 05AA  
                            l1904 0589                              l1840 0526                              l1832 0543  
                            l1586 04C1                              l1738 01A4                              l1914 05B8  
                            l1850 0532                              l1834 051C                              l1686 02B3  
                            l1758 0184                              l1782 0204                              l1942 05FC  
                            l1934 05E8                              l1870 054A                              l1768 01D1  
                            l1936 05F7                              l1880 055F                              l1856 053C  
                            l1786 0220                              l1970 065E                              l1962 064C  
                            l1874 0552                              l1890 0579                              l1980 067F  
                            l1964 065B                              l1892 057B                              l1876 0559  
                            l1868 0549                              l1984 0686                              l1968 065D  
                            l1888 0565                              l1986 0691                              l1978 0673  
                            l1988 069D                              _LATA 010C                              _LATC 010E  
                            u1647 063A                              u1657 07A3                              u1667 01AF  
                            u1677 01BE                              u1687 047B                              _TMR0 0015  
                            _WPUA 020C                              _Keys 002C                      _startaddress 0020  
                    __CFG_WRT$OFF 0000                              _Type 07C0                              _main 04E5  
                 __end_of_RF_Init 02B2                              fsr0h 0005                              fsr1h 0007  
                            indf0 0000                              fsr0l 0004                              indf1 0001  
                            fsr1l 0006                              btemp 007E     SaveTxStatusToFlash@adrToWrite 0044  
    noolite_send@noo_send_command 0070                              start 0001               __end_of_FlashUnlock 00FD  
                   __CFG_MCLRE$ON 0000                   __end_of_Init_IO 0133                     __CFG_LPBOR$ON 0000  
                           ?_main 0070                        _FlashWrite 0133                             _PORTA 000C  
                           _TRISA 008C                             _TRISC 008E                     __CFG_PWRTE$ON 0000  
                 ??_KeyOffHandler 0056           __p_system_settings_text 07EE                      _Type_absaddr 07C0  
                           status 0003                             wtemp0 007E                   __initialization 07E0  
                    __end_of_Type 07D0                      __end_of_main 07C0                  __end_of_Init_ADC 0109  
                __end_of_Init_CLK 0116                            ??_main 005A                  _TxStatus_absaddr 07D0  
  Init_TxStatusFromFlash@txStatus 0070                  __end_of_TxStatus 07E0   __size_of_Init_TxStatusFromFlash 0099  
                       ??_RF_Init 0070                            _ANSELA 018C                            _ANSELC 018E  
      __end_of_Init_TypeFromFlash 0164                            _FVRCON 0117                       _FlashUnlock 00F7  
                          _PMADRH 0192                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON2 0196                            _TMR0IE 005D  
                          _TMR0IF 005A                      __p_Type_text 07C0                         ??_Init_IO 0070  
                  __CFG_STVREN$ON 0000                   _system_settings 07EE              noolite_send@countbit 0051  
           __end_of_FlashEraseRow 0123                       ?_FlashWrite 0070                   noolite_send@chn 0052  
            noolite_send@startpos 0050           __end_of__initialization 07E6     Init_TxStatusFromFlash@cellNum 0078  
                  __pcstackCOMMON 0070            _Init_TxStatusFromFlash 02B2       __end_of_SaveTxStatusToFlash 0227  
                ??_KeyLongHandler 007B                    _OPTION_REGbits 0095             KeyLongHandler@nooData 0059  
                      __pbssBANK0 0020                         ?_Init_ADC 0070                         ?_Init_CLK 0070  
         __end_of_system_settings 07FF               __size_of_FlashWrite 0013                        __pmaintext 04E5  
                         _RF_Init 0227              FlashEraseRow@rowAddr 0070                        ??_Init_ADC 0070  
                      ??_Init_CLK 0070                           _DevMode 0027                           _DevType 0028  
                         _Init_IO 0123                     ?_noolite_send 0070            Init_TypeFromFlash@type 0070  
                         __ptext1 01D0                           __ptext2 0133                           __ptext3 0116  
                         __ptext4 00F7                           __ptext5 0227                           __ptext6 0190  
                         __ptext7 0164                           __ptext8 034B                           __ptext9 0146  
           noolite_send@countsend 0053                           main@chn 005C             __end_of_KeyOffHandler 01D0  
                         clrloop0 07E9              end_of_initialization 07E6                      ?_FlashUnlock 0070  
                noolite_send@data 0072             noolite_send@temp_send 0054                    FlashWrite@addr 0070  
              _Init_TypeFromFlash 0146                    ??_noolite_send 0073               ?_Init_TypeFromFlash 0070  
                    ??_FlashWrite 0074        SaveTxStatusToFlash@cellNum 0046                  __CFG_FOSC$INTOSC 0000  
            ??_Init_TypeFromFlash 0072           ?_Init_TxStatusFromFlash 0070                __end_of_FlashWrite 0146  
  SaveTxStatusToFlash@txStatusAdr 0076    SaveTxStatusToFlash@txStatusVal 0078               start_initialization 07E0  
  __end_of_Init_TxStatusFromFlash 034B                 __size_of_Init_ADC 000C                 __size_of_Init_CLK 000D  
          __size_of_FlashEraseRow 000D                  __p_TxStatus_text 07D0      __size_of_SaveTxStatusToFlash 0057  
                       ___latbits 0000                     __pcstackBANK0 0044                          ?_RF_Init 0070  
            __end_of_noolite_send 04E5              __size_of_FlashUnlock 0006                          ?_Init_IO 0070  
            KeyOffHandler@nooData 007D                     _noo_send_data 0040                     _FlashEraseRow 0116  
                __CFG_WDTE$SWDTEN 0000           __size_of_KeyLongHandler 002C                          _LATAbits 010C  
                        _LATCbits 010E                         clear_ram0 07E8                  KeyOffHandler@cmd 007C  
                KeyOffHandler@chn 007B                  KeyOffHandler@key 0057       noolite_send@noo_send_buffer 0044  
     noolite_send@noo_send_format 0071  SaveTxStatusToFlash@txStatusArray 0074                        _ADCON0bits 009D  
                      _ADCON1bits 009E                    ?_FlashEraseRow 0070                         _tx_status 002B  
                __size_of_RF_Init 008B                          _Init_ADC 00FD                          _Init_CLK 0109  
                    _SkipHandling 0026                  _noo_address_type 0024                  __size_of_Init_IO 0010  
              noolite_send@endpos 0055                          _TxStatus 07D0            __size_of_KeyOffHandler 0040  
           __size_of_noolite_send 019A                          __ptext10 02B2                          __ptext11 0123  
                        __ptext12 0109                          __ptext13 00FD               _OffDelayTicks_100ms 0025  
                     _tick3_100ms 0029                     __size_of_main 02DB       __size_of_Init_TypeFromFlash 001E  
             _SaveTxStatusToFlash 01D0                   ??_FlashEraseRow 0072                      _noolite_send 034B  
                     _OSCSTATbits 009A              ?_SaveTxStatusToFlash 0074                        _INTCONbits 000B  
               __CFG_BOREN$NSLEEP 0000                     _KeyOffHandler 0190                    _KeyLongHandler 0164  
    KeyLongHandler@ticksToTrigger 0058                        _PMCON1bits 0195              FlashWrite@flash_data 0072  
               __CFG_CLKOUTEN$OFF 0000                _LedPulseTick_100ms 002A                        _OSCCONbits 0099  
           ??_SaveTxStatusToFlash 0079                 KeyLongHandler@cmd 0057                 KeyLongHandler@chn 0056  
                      _OPTION_REG 0095                 KeyLongHandler@key 007B                        _WDTCONbits 0097  
          __end_of_KeyLongHandler 0190                    ?_KeyOffHandler 007B                     ??_FlashUnlock 0070  
         _system_settings_absaddr 07EE  
