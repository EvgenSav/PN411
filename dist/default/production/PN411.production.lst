

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Sep 08 11:21:55 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	_system_settings_text,global,class=CODE,delta=2
     5                           	psect	_TxStatus_text,global,class=CODE,delta=2
     6                           	psect	_Type_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16LF1503 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000E                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0097                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  010C                     	;# 
   104  010E                     	;# 
   105  0111                     	;# 
   106  0112                     	;# 
   107  0113                     	;# 
   108  0114                     	;# 
   109  0115                     	;# 
   110  0116                     	;# 
   111  0117                     	;# 
   112  0118                     	;# 
   113  0119                     	;# 
   114  011D                     	;# 
   115  018C                     	;# 
   116  018E                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  020C                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0391                     	;# 
   142  0392                     	;# 
   143  0393                     	;# 
   144  0498                     	;# 
   145  0498                     	;# 
   146  0499                     	;# 
   147  049A                     	;# 
   148  049B                     	;# 
   149  049B                     	;# 
   150  049C                     	;# 
   151  049D                     	;# 
   152  049E                     	;# 
   153  049F                     	;# 
   154  0611                     	;# 
   155  0612                     	;# 
   156  0613                     	;# 
   157  0613                     	;# 
   158  0614                     	;# 
   159  0615                     	;# 
   160  0616                     	;# 
   161  0616                     	;# 
   162  0617                     	;# 
   163  0618                     	;# 
   164  0619                     	;# 
   165  0619                     	;# 
   166  061A                     	;# 
   167  061B                     	;# 
   168  061C                     	;# 
   169  061C                     	;# 
   170  0691                     	;# 
   171  0692                     	;# 
   172  0693                     	;# 
   173  0694                     	;# 
   174  0695                     	;# 
   175  0F0F                     	;# 
   176  0F10                     	;# 
   177  0F11                     	;# 
   178  0F12                     	;# 
   179  0F13                     	;# 
   180  0F14                     	;# 
   181  0F15                     	;# 
   182  0F16                     	;# 
   183  0F17                     	;# 
   184  0F18                     	;# 
   185  0F19                     	;# 
   186  0F1A                     	;# 
   187  0F1B                     	;# 
   188  0F1C                     	;# 
   189  0F1D                     	;# 
   190  0F1E                     	;# 
   191  0F1F                     	;# 
   192  0FE3                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000E                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  008C                     	;# 
   231  008E                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010E                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011D                     	;# 
   258  018C                     	;# 
   259  018E                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  020C                     	;# 
   269  0211                     	;# 
   270  0211                     	;# 
   271  0212                     	;# 
   272  0212                     	;# 
   273  0213                     	;# 
   274  0213                     	;# 
   275  0214                     	;# 
   276  0214                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0216                     	;# 
   281  0216                     	;# 
   282  0217                     	;# 
   283  0217                     	;# 
   284  0391                     	;# 
   285  0392                     	;# 
   286  0393                     	;# 
   287  0498                     	;# 
   288  0498                     	;# 
   289  0499                     	;# 
   290  049A                     	;# 
   291  049B                     	;# 
   292  049B                     	;# 
   293  049C                     	;# 
   294  049D                     	;# 
   295  049E                     	;# 
   296  049F                     	;# 
   297  0611                     	;# 
   298  0612                     	;# 
   299  0613                     	;# 
   300  0613                     	;# 
   301  0614                     	;# 
   302  0615                     	;# 
   303  0616                     	;# 
   304  0616                     	;# 
   305  0617                     	;# 
   306  0618                     	;# 
   307  0619                     	;# 
   308  0619                     	;# 
   309  061A                     	;# 
   310  061B                     	;# 
   311  061C                     	;# 
   312  061C                     	;# 
   313  0691                     	;# 
   314  0692                     	;# 
   315  0693                     	;# 
   316  0694                     	;# 
   317  0695                     	;# 
   318  0F0F                     	;# 
   319  0F10                     	;# 
   320  0F11                     	;# 
   321  0F12                     	;# 
   322  0F13                     	;# 
   323  0F14                     	;# 
   324  0F15                     	;# 
   325  0F16                     	;# 
   326  0F17                     	;# 
   327  0F18                     	;# 
   328  0F19                     	;# 
   329  0F1A                     	;# 
   330  0F1B                     	;# 
   331  0F1C                     	;# 
   332  0F1D                     	;# 
   333  0F1E                     	;# 
   334  0F1F                     	;# 
   335  0FE3                     	;# 
   336  0FE4                     	;# 
   337  0FE5                     	;# 
   338  0FE6                     	;# 
   339  0FE7                     	;# 
   340  0FE8                     	;# 
   341  0FE9                     	;# 
   342  0FEA                     	;# 
   343  0FEB                     	;# 
   344  0FED                     	;# 
   345  0FEE                     	;# 
   346  0FEF                     	;# 
   347  0000                     	;# 
   348  0001                     	;# 
   349  0002                     	;# 
   350  0003                     	;# 
   351  0004                     	;# 
   352  0005                     	;# 
   353  0006                     	;# 
   354  0007                     	;# 
   355  0008                     	;# 
   356  0009                     	;# 
   357  000A                     	;# 
   358  000B                     	;# 
   359  000C                     	;# 
   360  000E                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  008C                     	;# 
   374  008E                     	;# 
   375  0091                     	;# 
   376  0092                     	;# 
   377  0093                     	;# 
   378  0095                     	;# 
   379  0096                     	;# 
   380  0097                     	;# 
   381  0099                     	;# 
   382  009A                     	;# 
   383  009B                     	;# 
   384  009B                     	;# 
   385  009C                     	;# 
   386  009D                     	;# 
   387  009E                     	;# 
   388  009F                     	;# 
   389  010C                     	;# 
   390  010E                     	;# 
   391  0111                     	;# 
   392  0112                     	;# 
   393  0113                     	;# 
   394  0114                     	;# 
   395  0115                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  0118                     	;# 
   399  0119                     	;# 
   400  011D                     	;# 
   401  018C                     	;# 
   402  018E                     	;# 
   403  0191                     	;# 
   404  0191                     	;# 
   405  0192                     	;# 
   406  0193                     	;# 
   407  0193                     	;# 
   408  0194                     	;# 
   409  0195                     	;# 
   410  0196                     	;# 
   411  020C                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  0391                     	;# 
   428  0392                     	;# 
   429  0393                     	;# 
   430  0498                     	;# 
   431  0498                     	;# 
   432  0499                     	;# 
   433  049A                     	;# 
   434  049B                     	;# 
   435  049B                     	;# 
   436  049C                     	;# 
   437  049D                     	;# 
   438  049E                     	;# 
   439  049F                     	;# 
   440  0611                     	;# 
   441  0612                     	;# 
   442  0613                     	;# 
   443  0613                     	;# 
   444  0614                     	;# 
   445  0615                     	;# 
   446  0616                     	;# 
   447  0616                     	;# 
   448  0617                     	;# 
   449  0618                     	;# 
   450  0619                     	;# 
   451  0619                     	;# 
   452  061A                     	;# 
   453  061B                     	;# 
   454  061C                     	;# 
   455  061C                     	;# 
   456  0691                     	;# 
   457  0692                     	;# 
   458  0693                     	;# 
   459  0694                     	;# 
   460  0695                     	;# 
   461  0F0F                     	;# 
   462  0F10                     	;# 
   463  0F11                     	;# 
   464  0F12                     	;# 
   465  0F13                     	;# 
   466  0F14                     	;# 
   467  0F15                     	;# 
   468  0F16                     	;# 
   469  0F17                     	;# 
   470  0F18                     	;# 
   471  0F19                     	;# 
   472  0F1A                     	;# 
   473  0F1B                     	;# 
   474  0F1C                     	;# 
   475  0F1D                     	;# 
   476  0F1E                     	;# 
   477  0F1F                     	;# 
   478  0FE3                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000E                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0013                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008E                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0093                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  009F                     	;# 
   532  010C                     	;# 
   533  010E                     	;# 
   534  0111                     	;# 
   535  0112                     	;# 
   536  0113                     	;# 
   537  0114                     	;# 
   538  0115                     	;# 
   539  0116                     	;# 
   540  0117                     	;# 
   541  0118                     	;# 
   542  0119                     	;# 
   543  011D                     	;# 
   544  018C                     	;# 
   545  018E                     	;# 
   546  0191                     	;# 
   547  0191                     	;# 
   548  0192                     	;# 
   549  0193                     	;# 
   550  0193                     	;# 
   551  0194                     	;# 
   552  0195                     	;# 
   553  0196                     	;# 
   554  020C                     	;# 
   555  0211                     	;# 
   556  0211                     	;# 
   557  0212                     	;# 
   558  0212                     	;# 
   559  0213                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0214                     	;# 
   563  0215                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0216                     	;# 
   567  0216                     	;# 
   568  0217                     	;# 
   569  0217                     	;# 
   570  0391                     	;# 
   571  0392                     	;# 
   572  0393                     	;# 
   573  0498                     	;# 
   574  0498                     	;# 
   575  0499                     	;# 
   576  049A                     	;# 
   577  049B                     	;# 
   578  049B                     	;# 
   579  049C                     	;# 
   580  049D                     	;# 
   581  049E                     	;# 
   582  049F                     	;# 
   583  0611                     	;# 
   584  0612                     	;# 
   585  0613                     	;# 
   586  0613                     	;# 
   587  0614                     	;# 
   588  0615                     	;# 
   589  0616                     	;# 
   590  0616                     	;# 
   591  0617                     	;# 
   592  0618                     	;# 
   593  0619                     	;# 
   594  0619                     	;# 
   595  061A                     	;# 
   596  061B                     	;# 
   597  061C                     	;# 
   598  061C                     	;# 
   599  0691                     	;# 
   600  0692                     	;# 
   601  0693                     	;# 
   602  0694                     	;# 
   603  0695                     	;# 
   604  0F0F                     	;# 
   605  0F10                     	;# 
   606  0F11                     	;# 
   607  0F12                     	;# 
   608  0F13                     	;# 
   609  0F14                     	;# 
   610  0F15                     	;# 
   611  0F16                     	;# 
   612  0F17                     	;# 
   613  0F18                     	;# 
   614  0F19                     	;# 
   615  0F1A                     	;# 
   616  0F1B                     	;# 
   617  0F1C                     	;# 
   618  0F1D                     	;# 
   619  0F1E                     	;# 
   620  0F1F                     	;# 
   621  0FE3                     	;# 
   622  0FE4                     	;# 
   623  0FE5                     	;# 
   624  0FE6                     	;# 
   625  0FE7                     	;# 
   626  0FE8                     	;# 
   627  0FE9                     	;# 
   628  0FEA                     	;# 
   629  0FEB                     	;# 
   630  0FED                     	;# 
   631  0FEE                     	;# 
   632  0FEF                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0008                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000E                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0016                     	;# 
   653  0017                     	;# 
   654  0018                     	;# 
   655  0019                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  008C                     	;# 
   660  008E                     	;# 
   661  0091                     	;# 
   662  0092                     	;# 
   663  0093                     	;# 
   664  0095                     	;# 
   665  0096                     	;# 
   666  0097                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010E                     	;# 
   677  0111                     	;# 
   678  0112                     	;# 
   679  0113                     	;# 
   680  0114                     	;# 
   681  0115                     	;# 
   682  0116                     	;# 
   683  0117                     	;# 
   684  0118                     	;# 
   685  0119                     	;# 
   686  011D                     	;# 
   687  018C                     	;# 
   688  018E                     	;# 
   689  0191                     	;# 
   690  0191                     	;# 
   691  0192                     	;# 
   692  0193                     	;# 
   693  0193                     	;# 
   694  0194                     	;# 
   695  0195                     	;# 
   696  0196                     	;# 
   697  020C                     	;# 
   698  0211                     	;# 
   699  0211                     	;# 
   700  0212                     	;# 
   701  0212                     	;# 
   702  0213                     	;# 
   703  0213                     	;# 
   704  0214                     	;# 
   705  0214                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0216                     	;# 
   710  0216                     	;# 
   711  0217                     	;# 
   712  0217                     	;# 
   713  0391                     	;# 
   714  0392                     	;# 
   715  0393                     	;# 
   716  0498                     	;# 
   717  0498                     	;# 
   718  0499                     	;# 
   719  049A                     	;# 
   720  049B                     	;# 
   721  049B                     	;# 
   722  049C                     	;# 
   723  049D                     	;# 
   724  049E                     	;# 
   725  049F                     	;# 
   726  0611                     	;# 
   727  0612                     	;# 
   728  0613                     	;# 
   729  0613                     	;# 
   730  0614                     	;# 
   731  0615                     	;# 
   732  0616                     	;# 
   733  0616                     	;# 
   734  0617                     	;# 
   735  0618                     	;# 
   736  0619                     	;# 
   737  0619                     	;# 
   738  061A                     	;# 
   739  061B                     	;# 
   740  061C                     	;# 
   741  061C                     	;# 
   742  0691                     	;# 
   743  0692                     	;# 
   744  0693                     	;# 
   745  0694                     	;# 
   746  0695                     	;# 
   747  0F0F                     	;# 
   748  0F10                     	;# 
   749  0F11                     	;# 
   750  0F12                     	;# 
   751  0F13                     	;# 
   752  0F14                     	;# 
   753  0F15                     	;# 
   754  0F16                     	;# 
   755  0F17                     	;# 
   756  0F18                     	;# 
   757  0F19                     	;# 
   758  0F1A                     	;# 
   759  0F1B                     	;# 
   760  0F1C                     	;# 
   761  0F1D                     	;# 
   762  0F1E                     	;# 
   763  0F1F                     	;# 
   764  0FE3                     	;# 
   765  0FE4                     	;# 
   766  0FE5                     	;# 
   767  0FE6                     	;# 
   768  0FE7                     	;# 
   769  0FE8                     	;# 
   770  0FE9                     	;# 
   771  0FEA                     	;# 
   772  0FEB                     	;# 
   773  0FED                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  07EE                     _system_settings_absaddr	set	2030
   777  07D0                     _TxStatus_absaddr	set	2000
   778  07C0                     _Type_absaddr	set	1984
   779  07EE                     _system_settings_absaddr	set	2030
   780                           
   781                           	psect	_system_settings_text
   782  07EE                     __p_system_settings_text:	
   783  07EE                     _system_settings:	
   784  07EE  3443               	retlw	67
   785  07EF  3404               	retlw	4
   786  07F0  345F               	retlw	95
   787  07F1  3441               	retlw	65
   788  07F2  341F               	retlw	31
   789  07F3  34FB               	retlw	251
   790  07F4  345F               	retlw	95
   791  07F5  3441               	retlw	65
   792  07F6  3478               	retlw	120
   793  07F7  3456               	retlw	86
   794  07F8  3434               	retlw	52
   795  07F9  3412               	retlw	18
   796  07FA  345F               	retlw	95
   797  07FB  3442               	retlw	66
   798  07FC  3410               	retlw	16
   799  07FD  3400               	retlw	0
   800  07FE  345F               	retlw	95
   801  07FF                     __end_of_system_settings:	
   802  07D0                     _TxStatus_absaddr	set	2000
   803                           
   804                           	psect	_TxStatus_text
   805  07D0                     __p_TxStatus_text:	
   806  07D0                     _TxStatus:	
   807  07D0  34FF               	retlw	255
   808  07D1  34FF               	retlw	255
   809  07D2  34FF               	retlw	255
   810  07D3  34FF               	retlw	255
   811  07D4  34FF               	retlw	255
   812  07D5  34FF               	retlw	255
   813  07D6  34FF               	retlw	255
   814  07D7  34FF               	retlw	255
   815  07D8  34FF               	retlw	255
   816  07D9  34FF               	retlw	255
   817  07DA  34FF               	retlw	255
   818  07DB  34FF               	retlw	255
   819  07DC  34FF               	retlw	255
   820  07DD  34FF               	retlw	255
   821  07DE  34FF               	retlw	255
   822  07DF  34FF               	retlw	255
   823  07E0                     __end_of_TxStatus:	
   824  07C0                     _Type_absaddr	set	1984
   825                           
   826                           	psect	_Type_text
   827  07C0                     __p_Type_text:	
   828  07C0                     _Type:	
   829  07C0  34FF               	retlw	255
   830  07C1  34FF               	retlw	255
   831  07C2  34FF               	retlw	255
   832  07C3  34FF               	retlw	255
   833  07C4  34FF               	retlw	255
   834  07C5  34FF               	retlw	255
   835  07C6  34FF               	retlw	255
   836  07C7  34FF               	retlw	255
   837  07C8  34FF               	retlw	255
   838  07C9  34FF               	retlw	255
   839  07CA  34FF               	retlw	255
   840  07CB  34FF               	retlw	255
   841  07CC  34FF               	retlw	255
   842  07CD  34FF               	retlw	255
   843  07CE  34FF               	retlw	255
   844  07CF  34FF               	retlw	255
   845  07D0                     __end_of_Type:	
   846  0015                     _TMR0	set	21
   847  000C                     _PORTA	set	12
   848  000B                     _INTCONbits	set	11
   849  005D                     _TMR0IE	set	93
   850  005A                     _TMR0IF	set	90
   851  009D                     _ADCON0bits	set	157
   852  009E                     _ADCON1bits	set	158
   853  008E                     _TRISC	set	142
   854  008C                     _TRISA	set	140
   855  0095                     _OPTION_REGbits	set	149
   856  009A                     _OSCSTATbits	set	154
   857  0099                     _OSCCONbits	set	153
   858  0095                     _OPTION_REG	set	149
   859  0097                     _WDTCONbits	set	151
   860  0117                     _FVRCON	set	279
   861  010E                     _LATC	set	270
   862  010C                     _LATA	set	268
   863  010C                     _LATAbits	set	268
   864  010E                     _LATCbits	set	270
   865  018E                     _ANSELC	set	398
   866  018C                     _ANSELA	set	396
   867  0196                     _PMCON2	set	406
   868  0193                     _PMDATL	set	403
   869  0194                     _PMDATH	set	404
   870  0191                     _PMADRL	set	401
   871  0192                     _PMADRH	set	402
   872  0195                     _PMCON1bits	set	405
   873  020C                     _WPUA	set	524
   874                           
   875                           ; #config settings
   876  0007                     
   877                           	psect	cinit
   878  07E0                     start_initialization:	
   879  07E0                     __initialization:	
   880                           
   881                           ; Clear objects allocated to BANK0
   882  07E0  3020               	movlw	low __pbssBANK0
   883  07E1  0084               	movwf	4
   884  07E2  3000               	movlw	high __pbssBANK0
   885  07E3  0085               	movwf	5
   886  07E4  3023               	movlw	35
   887  07E5  27E8               	fcall	clear_ram0
   888  07E6                     end_of_initialization:	
   889                           ;End of C runtime variable initialization code
   890                           
   891  07E6                     __end_of__initialization:	
   892  07E6  0020               	movlb	0
   893  07E7  2C9F               	ljmp	_main	;jump to C main() function
   894                           
   895                           	psect	bssBANK0
   896  0020                     __pbssBANK0:	
   897  0020                     _startaddress:	
   898  0020                     	ds	4
   899  0024                     _noo_address_type:	
   900  0024                     	ds	1
   901  0025                     _SkipHandling:	
   902  0025                     	ds	1
   903  0026                     _DevMode:	
   904  0026                     	ds	1
   905  0027                     _DevType:	
   906  0027                     	ds	1
   907  0028                     _tick3_100ms:	
   908  0028                     	ds	1
   909  0029                     _LedPulseTick_100ms:	
   910  0029                     	ds	1
   911  002A                     _tx_status:	
   912  002A                     	ds	1
   913  002B                     _Keys:	
   914  002B                     	ds	20
   915  003F                     _noo_send_data:	
   916  003F                     	ds	4
   917                           
   918                           	psect	clrtext
   919  07E8                     clear_ram0:	
   920                           ;	Called with FSR0 containing the base address, and
   921                           ;	WREG with the size to clear
   922                           
   923  07E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   924  07E9                     clrloop0:	
   925  07E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   926  07EA  3101               	addfsr 0,1
   927  07EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   928  07EC  2FE9               	goto	clrloop0	;have we reached the end yet?
   929  07ED  3400               	retlw	0	;all done for this memory range, return
   930                           
   931                           	psect	cstackCOMMON
   932  0070                     __pcstackCOMMON:	
   933  0070                     ?_Init_IO:	
   934  0070                     ??_Init_IO:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_Init_CLK:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ??_Init_CLK:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_Init_ADC:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ??_Init_ADC:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ?_RF_Init:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ??_RF_Init:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_Init_TypeFromFlash:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_Init_TxStatusFromFlash:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_noolite_send:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_FlashEraseRow:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_FlashWrite:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_main:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_FlashUnlock:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ??_FlashUnlock:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     noolite_send@noo_send_command:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     FlashEraseRow@rowAddr:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     FlashWrite@addr:	
   986                           ; 2 bytes @ 0x0
   987                           
   988  0070                     Init_TypeFromFlash@type:	
   989                           ; 2 bytes @ 0x0
   990                           
   991  0070                     Init_TxStatusFromFlash@txStatus:	
   992                           ; 2 bytes @ 0x0
   993                           
   994                           
   995                           ; 2 bytes @ 0x0
   996  0070                     	ds	1
   997  0071                     noolite_send@noo_send_format:	
   998                           
   999                           ; 1 bytes @ 0x1
  1000  0071                     	ds	1
  1001  0072                     ??_Init_TypeFromFlash:	
  1002  0072                     ??_Init_TxStatusFromFlash:	
  1003                           ; 1 bytes @ 0x2
  1004                           
  1005  0072                     ??_FlashEraseRow:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  0072                     noolite_send@data:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  0072                     FlashWrite@flash_data:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014                           
  1015                           ; 2 bytes @ 0x2
  1016  0072                     	ds	1
  1017  0073                     ??_noolite_send:	
  1018                           
  1019                           ; 1 bytes @ 0x3
  1020  0073                     	ds	1
  1021  0074                     ??_FlashWrite:	
  1022                           
  1023                           ; 1 bytes @ 0x4
  1024  0074                     	ds	4
  1025  0078                     Init_TxStatusFromFlash@cellNum:	
  1026                           
  1027                           ; 1 bytes @ 0x8
  1028  0078                     	ds	3
  1029  007B                     ?_KeyOffHandler:	
  1030  007B                     ??_KeyLongHandler:	
  1031                           ; 1 bytes @ 0xB
  1032                           
  1033  007B                     KeyOffHandler@chn:	
  1034                           ; 1 bytes @ 0xB
  1035                           
  1036  007B                     KeyLongHandler@key:	
  1037                           ; 1 bytes @ 0xB
  1038                           
  1039                           
  1040                           ; 1 bytes @ 0xB
  1041  007B                     	ds	1
  1042  007C                     KeyOffHandler@cmd:	
  1043                           
  1044                           ; 1 bytes @ 0xC
  1045  007C                     	ds	1
  1046  007D                     KeyOffHandler@nooData:	
  1047                           
  1048                           ; 1 bytes @ 0xD
  1049  007D                     	ds	1
  1050                           
  1051                           	psect	cstackBANK0
  1052  0043                     __pcstackBANK0:	
  1053  0043                     noolite_send@noo_send_buffer:	
  1054                           
  1055                           ; 12 bytes @ 0x0
  1056  0043                     	ds	12
  1057  004F                     noolite_send@startpos:	
  1058                           
  1059                           ; 1 bytes @ 0xC
  1060  004F                     	ds	1
  1061  0050                     noolite_send@countbit:	
  1062                           
  1063                           ; 1 bytes @ 0xD
  1064  0050                     	ds	1
  1065  0051                     noolite_send@chn:	
  1066                           
  1067                           ; 1 bytes @ 0xE
  1068  0051                     	ds	1
  1069  0052                     noolite_send@countsend:	
  1070                           
  1071                           ; 1 bytes @ 0xF
  1072  0052                     	ds	1
  1073  0053                     noolite_send@temp_send:	
  1074                           
  1075                           ; 1 bytes @ 0x10
  1076  0053                     	ds	1
  1077  0054                     noolite_send@endpos:	
  1078                           
  1079                           ; 1 bytes @ 0x11
  1080  0054                     	ds	1
  1081  0055                     ??_KeyOffHandler:	
  1082  0055                     ?_KeyLongHandler:	
  1083                           ; 1 bytes @ 0x12
  1084                           
  1085  0055                     KeyLongHandler@chn:	
  1086                           ; 1 bytes @ 0x12
  1087                           
  1088                           
  1089                           ; 1 bytes @ 0x12
  1090  0055                     	ds	1
  1091  0056                     KeyOffHandler@key:	
  1092  0056                     KeyLongHandler@cmd:	
  1093                           ; 1 bytes @ 0x13
  1094                           
  1095                           
  1096                           ; 1 bytes @ 0x13
  1097  0056                     	ds	1
  1098  0057                     KeyLongHandler@ticksToTrigger:	
  1099                           
  1100                           ; 1 bytes @ 0x14
  1101  0057                     	ds	1
  1102  0058                     KeyLongHandler@nooData:	
  1103                           
  1104                           ; 1 bytes @ 0x15
  1105  0058                     	ds	1
  1106  0059                     ??_main:	
  1107                           
  1108                           ; 1 bytes @ 0x16
  1109  0059                     	ds	4
  1110  005D                     main@adrToWrite:	
  1111                           
  1112                           ; 2 bytes @ 0x1A
  1113  005D                     	ds	2
  1114  005F                     main@cellNum:	
  1115                           
  1116                           ; 1 bytes @ 0x1C
  1117  005F                     	ds	1
  1118  0060                     main@chn:	
  1119                           
  1120                           ; 1 bytes @ 0x1D
  1121  0060                     	ds	1
  1122  0061                     main@chn_242:	
  1123                           
  1124                           ; 1 bytes @ 0x1E
  1125  0061                     	ds	1
  1126  0062                     main@chn_243:	
  1127                           
  1128                           ; 1 bytes @ 0x1F
  1129  0062                     	ds	1
  1130  0063                     main@chn_244:	
  1131                           
  1132                           ; 1 bytes @ 0x20
  1133  0063                     	ds	1
  1134                           
  1135                           	psect	maintext
  1136  049F                     __pmaintext:	
  1137 ;;
  1138 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1139 ;;
  1140 ;; *************** function _main *****************
  1141 ;; Defined at:
  1142 ;;		line 127 in file "main.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;		None
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  adrToWrite      2   26[BANK0 ] unsigned int 
  1147 ;;  chn             1   32[BANK0 ] unsigned char 
  1148 ;;  chn             1   31[BANK0 ] unsigned char 
  1149 ;;  chn             1   30[BANK0 ] unsigned char 
  1150 ;;  chn             1   29[BANK0 ] unsigned char 
  1151 ;;  cellNum         1   28[BANK0 ] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : B1F/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMMON   BANK0   BANK1
  1161 ;;      Params:         0       0       0
  1162 ;;      Locals:         0       7       0
  1163 ;;      Temps:          0       4       0
  1164 ;;      Totals:         0      11       0
  1165 ;;Total ram usage:       11 bytes
  1166 ;; Hardware stack levels required when called:    2
  1167 ;; This function calls:
  1168 ;;		_FlashEraseRow
  1169 ;;		_FlashWrite
  1170 ;;		_Init_ADC
  1171 ;;		_Init_CLK
  1172 ;;		_Init_IO
  1173 ;;		_Init_TxStatusFromFlash
  1174 ;;		_Init_TypeFromFlash
  1175 ;;		_KeyLongHandler
  1176 ;;		_KeyOffHandler
  1177 ;;		_RF_Init
  1178 ;;		_noolite_send
  1179 ;; This function is called by:
  1180 ;;		Startup code after reset
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function _main
  1186  049F                     _main:	
  1187                           
  1188                           ;main.c: 128: Init_IO();
  1189                           
  1190                           ;incstack = 0
  1191                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1192  049F  2134               	fcall	_Init_IO
  1193                           
  1194                           ;main.c: 129: Init_CLK();
  1195  04A0  2127               	fcall	_Init_CLK
  1196                           
  1197                           ;main.c: 130: Init_ADC();
  1198  04A1  210E               	fcall	_Init_ADC
  1199                           
  1200                           ;main.c: 131: RF_Init();
  1201  04A2  21E1               	fcall	_RF_Init
  1202                           
  1203                           ;main.c: 133: LATCbits.LATC5 = 1;
  1204  04A3  0022               	movlb	2	; select bank2
  1205  04A4  168E               	bsf	14,5	;volatile
  1206                           
  1207                           ;main.c: 134: DevType = Init_TypeFromFlash(&Type[0]);
  1208  04A5  30C0               	movlw	192
  1209  04A6  00F0               	movwf	Init_TypeFromFlash@type
  1210  04A7  3087               	movlw	135
  1211  04A8  00F1               	movwf	Init_TypeFromFlash@type+1
  1212  04A9  2157               	fcall	_Init_TypeFromFlash
  1213  04AA  0020               	movlb	0	; select bank0
  1214  04AB  00A7               	movwf	_DevType
  1215                           
  1216                           ;main.c: 135: tx_status = Init_TxStatusFromFlash(&TxStatus[0]);
  1217  04AC  30D0               	movlw	208
  1218  04AD  00F0               	movwf	Init_TxStatusFromFlash@txStatus
  1219  04AE  3087               	movlw	135
  1220  04AF  00F1               	movwf	Init_TxStatusFromFlash@txStatus+1
  1221  04B0  226C               	fcall	_Init_TxStatusFromFlash
  1222  04B1  00AA               	movwf	_tx_status
  1223                           
  1224                           ;main.c: 137: INTCONbits.PEIE = 1;
  1225  04B2  170B               	bsf	11,6	;volatile
  1226                           
  1227                           ;main.c: 138: INTCONbits.GIE = 1;
  1228  04B3  178B               	bsf	11,7	;volatile
  1229  04B4                     l1755:	
  1230                           
  1231                           ;main.c: 141: Keys[A].State = (uint8_t) (PORTA & A_Pressed);
  1232  04B4  0020               	movlb	0	; select bank0
  1233  04B5  080C               	movf	12,w	;volatile
  1234  04B6  00AB               	movwf	_Keys
  1235  04B7  3002               	movlw	2
  1236  04B8  05AB               	andwf	_Keys,f
  1237                           
  1238                           ;main.c: 142: Keys[B].State = (uint8_t) (PORTA & B_Pressed);
  1239  04B9  080C               	movf	12,w	;volatile
  1240  04BA  00AF               	movwf	_Keys+4
  1241  04BB  3001               	movlw	1
  1242  04BC  05AF               	andwf	_Keys+4,f
  1243                           
  1244                           ;main.c: 143: Keys[C].State = (uint8_t) (PORTA & C_Pressed);
  1245  04BD  080C               	movf	12,w	;volatile
  1246  04BE  00B3               	movwf	_Keys+8
  1247  04BF  3004               	movlw	4
  1248  04C0  05B3               	andwf	_Keys+8,f
  1249                           
  1250                           ;main.c: 144: Keys[D].State = (uint8_t) (PORTA & D_Pressed);
  1251  04C1  080C               	movf	12,w	;volatile
  1252  04C2  00B7               	movwf	_Keys+12
  1253  04C3  3010               	movlw	16
  1254  04C4  05B7               	andwf	_Keys+12,f
  1255                           
  1256                           ;main.c: 145: Keys[CD].State = (uint8_t) (PORTA & (C_Pressed | D_Pressed));
  1257  04C5  080C               	movf	12,w	;volatile
  1258  04C6  00BB               	movwf	_Keys+16
  1259  04C7  3014               	movlw	20
  1260  04C8  05BB               	andwf	_Keys+16,f
  1261                           
  1262                           ;main.c: 146: if (Keys[CD].State == (C_Pressed | D_Pressed)) {
  1263  04C9  063B               	xorwf	_Keys+16,w
  1264  04CA  1D03               	btfss	3,2
  1265  04CB  2D03               	goto	l1819
  1266                           
  1267                           ;main.c: 147: SkipHandling = 5;
  1268  04CC  3005               	movlw	5
  1269  04CD  00A5               	movwf	_SkipHandling
  1270                           
  1271                           ;main.c: 148: if (Keys[CD].Tick100ms < 15) {
  1272  04CE  300F               	movlw	15
  1273  04CF  023D               	subwf	_Keys+18,w
  1274  04D0  1803               	skipnc
  1275  04D1  2CD6               	goto	l1785
  1276                           
  1277                           ;main.c: 149: DevMode &= ~(UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1278  04D2  30F9               	movlw	249
  1279  04D3  05A6               	andwf	_DevMode,f
  1280                           
  1281                           ;main.c: 150: DevMode |= BIND_ACTIVE;
  1282  04D4  1426               	bsf	_DevMode,0
  1283                           
  1284                           ;main.c: 152: } else if ((Keys[CD].Tick100ms >= 35) && (Keys[CD].Tick100ms < 49)) {
  1285  04D5  2CFD               	goto	l1783
  1286  04D6                     l1785:	
  1287  04D6  3023               	movlw	35
  1288  04D7  023D               	subwf	_Keys+18,w
  1289  04D8  1C03               	skipc
  1290  04D9  2CE0               	goto	l1791
  1291  04DA  3031               	movlw	49
  1292  04DB  023D               	subwf	_Keys+18,w
  1293  04DC  1803               	skipnc
  1294  04DD  2CE0               	goto	l1791
  1295                           
  1296                           ;main.c: 153: DevMode &= ~BIND_ACTIVE;
  1297  04DE  1026               	bcf	_DevMode,0
  1298                           
  1299                           ;main.c: 154: } else if ((Keys[CD].Tick100ms >= 50) && (Keys[CD].Tick100ms < 85)) {
  1300  04DF  2CFF               	goto	l64
  1301  04E0                     l1791:	
  1302  04E0  3032               	movlw	50
  1303  04E1  023D               	subwf	_Keys+18,w
  1304  04E2  3055               	movlw	85
  1305  04E3  1C03               	skipc
  1306  04E4  2CED               	goto	L1
  1307  04E5  023D               	subwf	_Keys+18,w
  1308  04E6  1803               	skipnc
  1309  04E7  2CEC               	goto	l1801
  1310                           
  1311                           ;main.c: 155: DevMode &= ~(BIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1312  04E8  30FA               	movlw	250
  1313  04E9  05A6               	andwf	_DevMode,f
  1314                           
  1315                           ;main.c: 156: DevMode |= UNBIND_ACTIVE;
  1316  04EA  14A6               	bsf	_DevMode,1
  1317  04EB  2CFD               	goto	l1783
  1318  04EC                     l1801:	
  1319  04EC  3055               	movlw	85
  1320  04ED                     L1:	
  1321  04ED  023D               	subwf	_Keys+18,w
  1322  04EE  1C03               	skipc
  1323  04EF  2CF6               	goto	l1807
  1324  04F0  3063               	movlw	99
  1325  04F1  023D               	subwf	_Keys+18,w
  1326  04F2  1803               	skipnc
  1327  04F3  2CF6               	goto	l1807
  1328                           
  1329                           ;main.c: 159: DevMode &= ~UNBIND_ACTIVE;
  1330  04F4  10A6               	bcf	_DevMode,1
  1331                           
  1332                           ;main.c: 160: } else if (Keys[CD].Tick100ms >= 100) {
  1333  04F5  2CFF               	goto	l64
  1334  04F6                     l1807:	
  1335  04F6  3064               	movlw	100
  1336  04F7  023D               	subwf	_Keys+18,w
  1337  04F8  1C03               	skipc
  1338  04F9  2CFF               	goto	l64
  1339                           
  1340                           ;main.c: 161: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE);
  1341  04FA  30FC               	movlw	252
  1342  04FB  05A6               	andwf	_DevMode,f
  1343                           
  1344                           ;main.c: 162: DevMode |= MODE_CHANGE_ACTIVE;
  1345  04FC  1526               	bsf	_DevMode,2
  1346  04FD                     l1783:	
  1347                           
  1348                           ;main.c: 151: tick3_100ms = 100;
  1349  04FD  3064               	movlw	100
  1350  04FE  00A8               	movwf	_tick3_100ms
  1351  04FF                     l64:	
  1352                           
  1353                           ;main.c: 164: }
  1354                           ;main.c: 165: Keys[CD].Tick100ms++;
  1355  04FF  0ABD               	incf	_Keys+18,f
  1356                           
  1357                           ;main.c: 167: Keys[C].StateTemp = 0;
  1358  0500  01B4               	clrf	_Keys+9
  1359                           
  1360                           ;main.c: 168: Keys[D].StateTemp = 0;
  1361  0501  01B8               	clrf	_Keys+13
  1362                           
  1363                           ;main.c: 169: } else {
  1364  0502  2D04               	goto	l1821
  1365  0503                     l1819:	
  1366                           
  1367                           ;main.c: 170: Keys[CD].Tick100ms = 0;
  1368  0503  01BD               	clrf	_Keys+18
  1369  0504                     l1821:	
  1370                           
  1371                           ;main.c: 171: }
  1372                           ;main.c: 173: if (tick3_100ms != 0) {
  1373  0504  0828               	movf	_tick3_100ms,w
  1374  0505  1903               	btfsc	3,2
  1375  0506  2D33               	goto	l1841
  1376                           
  1377                           ;main.c: 174: tick3_100ms--;
  1378  0507  03A8               	decf	_tick3_100ms,f
  1379                           
  1380                           ;main.c: 175: switch (DevMode & 0x07) {
  1381  0508  2D1F               	goto	l1839
  1382  0509                     l75:	
  1383                           ;main.c: 176: case BIND_ACTIVE:
  1384                           
  1385                           
  1386                           ;main.c: 177: LATCbits.LATC3 = ON;
  1387  0509  0022               	movlb	2	; select bank2
  1388  050A  158E               	bsf	14,3	;volatile
  1389                           
  1390                           ;main.c: 178: break;
  1391  050B  2D37               	goto	l82
  1392  050C                     l1825:	
  1393                           
  1394                           ;main.c: 180: if (LedPulseTick_100ms++ > 2) {
  1395  050C  0829               	movf	_LedPulseTick_100ms,w
  1396  050D  0AA9               	incf	_LedPulseTick_100ms,f
  1397  050E  00D9               	movwf	??_main
  1398  050F  3003               	movlw	3
  1399  0510  0259               	subwf	??_main,w
  1400  0511  1C03               	skipc
  1401  0512  2D37               	goto	l82
  1402  0513                     l1827:	
  1403                           
  1404                           ;main.c: 181: LATCbits.LATC3 = ~LATCbits.LATC3;
  1405  0513  3008               	movlw	8
  1406  0514  0022               	movlb	2	; select bank2
  1407  0515  068E               	xorwf	14,f	;volatile
  1408                           
  1409                           ;main.c: 182: LedPulseTick_100ms = 0;
  1410  0516  0020               	movlb	0	; select bank0
  1411  0517  01A9               	clrf	_LedPulseTick_100ms
  1412  0518  2D37               	goto	l82
  1413  0519                     l1831:	
  1414                           
  1415                           ;main.c: 186: if (LedPulseTick_100ms++ > 0) {
  1416  0519  0AA9               	incf	_LedPulseTick_100ms,f
  1417  051A  0329               	decf	_LedPulseTick_100ms,w
  1418  051B  1903               	btfsc	3,2
  1419  051C  2D37               	goto	l82
  1420  051D  2D13               	goto	l1827
  1421  051E                     l81:	
  1422                           ;main.c: 191: default:
  1423                           
  1424                           ;main.c: 187: LATCbits.LATC3 = ~LATCbits.LATC3;
  1425                           
  1426  051E  2D35               	goto	l1843
  1427  051F                     l1839:	
  1428                           ;main.c: 193: break;
  1429                           
  1430                           ;main.c: 192: LATCbits.LATC3 = OFF;
  1431                           
  1432  051F  0826               	movf	_DevMode,w
  1433  0520  3907               	andlw	7
  1434  0521  00D9               	movwf	??_main
  1435  0522  01DA               	clrf	??_main+1
  1436                           
  1437                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1438                           ; Switch size 1, requested type "space"
  1439                           ; Number of cases is 1, Range of values is 0 to 0
  1440                           ; switch strategies available:
  1441                           ; Name         Instructions Cycles
  1442                           ; simple_byte            4     3 (average)
  1443                           ; direct_byte            8     6 (fixed)
  1444                           ; jumptable            260     6 (fixed)
  1445                           ;	Chosen strategy is simple_byte
  1446  0523  085A               	movf	??_main+1,w
  1447  0524  3A00               	xorlw	0	; case 0
  1448  0525  1903               	skipnz
  1449  0526  2D28               	goto	l2089
  1450  0527  2D1E               	goto	l81
  1451  0528                     l2089:	
  1452                           
  1453                           ; Switch size 1, requested type "space"
  1454                           ; Number of cases is 3, Range of values is 1 to 4
  1455                           ; switch strategies available:
  1456                           ; Name         Instructions Cycles
  1457                           ; simple_byte           10     6 (average)
  1458                           ; direct_byte           17     9 (fixed)
  1459                           ; jumptable            263     9 (fixed)
  1460                           ;	Chosen strategy is simple_byte
  1461  0528  0859               	movf	??_main,w
  1462  0529  3A01               	xorlw	1	; case 1
  1463  052A  1903               	skipnz
  1464  052B  2D09               	goto	l75
  1465  052C  3A03               	xorlw	3	; case 2
  1466  052D  1903               	skipnz
  1467  052E  2D0C               	goto	l1825
  1468  052F  3A06               	xorlw	6	; case 4
  1469  0530  1903               	skipnz
  1470  0531  2D19               	goto	l1831
  1471  0532  2D1E               	goto	l81
  1472  0533                     l1841:	
  1473                           
  1474                           ;main.c: 196: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1475  0533  30F8               	movlw	248
  1476  0534  05A6               	andwf	_DevMode,f
  1477  0535                     l1843:	
  1478                           
  1479                           ;main.c: 197: LATCbits.LATC3 = OFF;
  1480  0535  0022               	movlb	2	; select bank2
  1481  0536  118E               	bcf	14,3	;volatile
  1482  0537                     l82:	
  1483                           
  1484                           ;main.c: 198: }
  1485                           ;main.c: 200: if (SkipHandling != 0) {
  1486  0537  0020               	movlb	0	; select bank0
  1487  0538  0825               	movf	_SkipHandling,w
  1488  0539  1903               	btfsc	3,2
  1489  053A  2D40               	goto	l83
  1490                           
  1491                           ;main.c: 201: if (Keys[CD].State == 0) {
  1492  053B  083B               	movf	_Keys+16,w
  1493  053C  1D03               	btfss	3,2
  1494  053D  2F3B               	goto	l1995
  1495                           
  1496                           ;main.c: 202: SkipHandling--;
  1497  053E  03A5               	decf	_SkipHandling,f
  1498  053F  2F3B               	goto	l1995
  1499  0540                     l83:	
  1500                           
  1501                           ;main.c: 205: if ((DevMode & BIND_ACTIVE) != 0) {
  1502  0540  1C26               	btfss	_DevMode,0
  1503  0541  2D78               	goto	l86
  1504                           
  1505                           ;main.c: 206: for (uint8_t chn = 0; chn < 4; chn++) {
  1506  0542  01E0               	clrf	main@chn
  1507  0543                     l1855:	
  1508                           
  1509                           ;main.c: 207: if (Keys[chn].State != Keys[chn].StateTemp) {
  1510  0543  0860               	movf	main@chn,w
  1511  0544  0709               	addwf	9,w
  1512  0545  0709               	addwf	9,w
  1513  0546  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1514  0547  0086               	movwf	6
  1515  0548  0187               	clrf	7
  1516  0549  0860               	movf	main@chn,w
  1517  054A  0709               	addwf	9,w
  1518  054B  0709               	addwf	9,w
  1519  054C  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1520  054D  0084               	movwf	4
  1521  054E  0185               	clrf	5
  1522  054F  0800               	movf	0,w
  1523  0550  0601               	xorwf	1,w
  1524  0551  1903               	skipnz
  1525  0552  2D72               	goto	l1865
  1526                           
  1527                           ;main.c: 208: if (Keys[chn].State == 0) {
  1528  0553  0860               	movf	main@chn,w
  1529  0554  0709               	addwf	9,w
  1530  0555  0709               	addwf	9,w
  1531  0556  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1532  0557  0086               	movwf	6
  1533  0558  0801               	movf	1,w
  1534  0559  1D03               	btfss	3,2
  1535  055A  2D64               	goto	l1863
  1536                           
  1537                           ;main.c: 209: noolite_send(chn, CMD_Bind, 0, &noo_send_data[0]);
  1538  055B  300F               	movlw	15
  1539  055C  00F0               	movwf	noolite_send@noo_send_command
  1540  055D  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1541  055E  01F1               	clrf	noolite_send@noo_send_format
  1542  055F  00F2               	movwf	noolite_send@data
  1543  0560  0860               	movf	main@chn,w
  1544  0561  2305               	fcall	_noolite_send
  1545                           
  1546                           ;main.c: 210: DevMode &= ~BIND_ACTIVE;
  1547  0562  0020               	movlb	0	; select bank0
  1548  0563  1026               	bcf	_DevMode,0
  1549  0564                     l1863:	
  1550                           
  1551                           ;main.c: 211: }
  1552                           ;main.c: 212: Keys[chn].StateTemp = Keys[chn].State;
  1553  0564  0860               	movf	main@chn,w
  1554  0565  0709               	addwf	9,w
  1555  0566  0709               	addwf	9,w
  1556  0567  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1557  0568  0086               	movwf	6
  1558  0569  0187               	clrf	7
  1559  056A  0860               	movf	main@chn,w
  1560  056B  0709               	addwf	9,w
  1561  056C  0709               	addwf	9,w
  1562  056D  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1563  056E  0084               	movwf	4
  1564  056F  0185               	clrf	5
  1565  0570  0800               	movf	0,w
  1566  0571  0081               	movwf	1
  1567  0572                     l1865:	
  1568  0572  3004               	movlw	4
  1569  0573  0AE0               	incf	main@chn,f
  1570  0574  0260               	subwf	main@chn,w
  1571  0575  1803               	btfsc	3,0
  1572  0576  2F3B               	goto	l1995
  1573  0577  2D43               	goto	l1855
  1574  0578                     l86:	
  1575  0578  1CA6               	btfss	_DevMode,1
  1576  0579  2DB3               	goto	l92
  1577                           
  1578                           ;main.c: 216: for (uint8_t chn = 0; chn < 4; chn++) {
  1579  057A  01E1               	clrf	main@chn_242
  1580  057B                     l1871:	
  1581  057B  3004               	movlw	4
  1582  057C  0261               	subwf	main@chn_242,w
  1583  057D  1803               	btfsc	3,0
  1584  057E  2F3B               	goto	l1995
  1585                           
  1586                           ;main.c: 217: if (Keys[chn].State != Keys[chn].StateTemp) {
  1587  057F  0861               	movf	main@chn_242,w
  1588  0580  0709               	addwf	9,w
  1589  0581  0709               	addwf	9,w
  1590  0582  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1591  0583  0086               	movwf	6
  1592  0584  0187               	clrf	7
  1593  0585  0861               	movf	main@chn_242,w
  1594  0586  0709               	addwf	9,w
  1595  0587  0709               	addwf	9,w
  1596  0588  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1597  0589  0084               	movwf	4
  1598  058A  0185               	clrf	5
  1599  058B  0800               	movf	0,w
  1600  058C  0601               	xorwf	1,w
  1601  058D  1903               	skipnz
  1602  058E  2DB1               	goto	l1887
  1603                           
  1604                           ;main.c: 218: if (Keys[chn].State == 0) {
  1605  058F  0861               	movf	main@chn_242,w
  1606  0590  0709               	addwf	9,w
  1607  0591  0709               	addwf	9,w
  1608  0592  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1609  0593  0086               	movwf	6
  1610  0594  0801               	movf	1,w
  1611  0595  1D03               	btfss	3,2
  1612  0596  2DA2               	goto	l1885
  1613                           
  1614                           ;main.c: 219: noolite_send(chn, CMD_Unbind, 0, &noo_send_data[0]);
  1615  0597  3009               	movlw	9
  1616  0598  00F0               	movwf	noolite_send@noo_send_command
  1617  0599  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1618  059A  01F1               	clrf	noolite_send@noo_send_format
  1619  059B  00F2               	movwf	noolite_send@data
  1620  059C  0861               	movf	main@chn_242,w
  1621  059D  2305               	fcall	_noolite_send
  1622                           
  1623                           ;main.c: 220: DevMode &= ~UNBIND_ACTIVE;
  1624  059E  0020               	movlb	0	; select bank0
  1625  059F  10A6               	bcf	_DevMode,1
  1626                           
  1627                           ;main.c: 221: LATCbits.LATC3 = OFF;
  1628  05A0  0022               	movlb	2	; select bank2
  1629  05A1  118E               	bcf	14,3	;volatile
  1630  05A2                     l1885:	
  1631                           
  1632                           ;main.c: 222: }
  1633                           ;main.c: 223: Keys[chn].StateTemp = Keys[chn].State;
  1634  05A2  0020               	movlb	0	; select bank0
  1635  05A3  0861               	movf	main@chn_242,w
  1636  05A4  0709               	addwf	9,w
  1637  05A5  0709               	addwf	9,w
  1638  05A6  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1639  05A7  0086               	movwf	6
  1640  05A8  0187               	clrf	7
  1641  05A9  0861               	movf	main@chn_242,w
  1642  05AA  0709               	addwf	9,w
  1643  05AB  0709               	addwf	9,w
  1644  05AC  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1645  05AD  0084               	movwf	4
  1646  05AE  0185               	clrf	5
  1647  05AF  0800               	movf	0,w
  1648  05B0  0081               	movwf	1
  1649  05B1                     l1887:	
  1650  05B1  0AE1               	incf	main@chn_242,f
  1651  05B2  2D7B               	goto	l1871
  1652  05B3                     l92:	
  1653  05B3  1D26               	btfss	_DevMode,2
  1654  05B4  2E17               	goto	l1919
  1655                           
  1656                           ;main.c: 227: for (uint8_t chn = 0; chn < 4; chn++) {
  1657  05B5  01E2               	clrf	main@chn_243
  1658  05B6                     l1893:	
  1659  05B6  3004               	movlw	4
  1660  05B7  0262               	subwf	main@chn_243,w
  1661  05B8  1803               	btfsc	3,0
  1662  05B9  2F3B               	goto	l1995
  1663                           
  1664                           ;main.c: 228: if (Keys[chn].State != Keys[chn].StateTemp) {
  1665  05BA  0862               	movf	main@chn_243,w
  1666  05BB  0709               	addwf	9,w
  1667  05BC  0709               	addwf	9,w
  1668  05BD  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1669  05BE  0086               	movwf	6
  1670  05BF  0187               	clrf	7
  1671  05C0  0862               	movf	main@chn_243,w
  1672  05C1  0709               	addwf	9,w
  1673  05C2  0709               	addwf	9,w
  1674  05C3  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1675  05C4  0084               	movwf	4
  1676  05C5  0185               	clrf	5
  1677  05C6  0800               	movf	0,w
  1678  05C7  0601               	xorwf	1,w
  1679  05C8  1903               	skipnz
  1680  05C9  2E15               	goto	l1915
  1681                           
  1682                           ;main.c: 229: if (Keys[chn].State == 0) {
  1683  05CA  0862               	movf	main@chn_243,w
  1684  05CB  0709               	addwf	9,w
  1685  05CC  0709               	addwf	9,w
  1686  05CD  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1687  05CE  0086               	movwf	6
  1688  05CF  0801               	movf	1,w
  1689  05D0  1D03               	btfss	3,2
  1690  05D1  2E06               	goto	l1913
  1691  05D2  0064               	clrwdt	;# 
  1692                           
  1693                           ;main.c: 231: LATCbits.LATC3 = ON;
  1694  05D3  0022               	movlb	2	; select bank2
  1695  05D4  158E               	bsf	14,3	;volatile
  1696                           
  1697                           ;main.c: 232: FlashEraseRow(TYPE_ADR);
  1698  05D5  30C0               	movlw	192
  1699  05D6  00F0               	movwf	FlashEraseRow@rowAddr
  1700  05D7  3007               	movlw	7
  1701  05D8  00F1               	movwf	FlashEraseRow@rowAddr+1
  1702  05D9  211A               	fcall	_FlashEraseRow
  1703  05DA  0064               	clrwdt	;# 
  1704                           
  1705                           ;main.c: 234: FlashWrite(TYPE_ADR, chn);
  1706  05DB  30C0               	movlw	192
  1707  05DC  00F0               	movwf	FlashWrite@addr
  1708  05DD  3007               	movlw	7
  1709  05DE  00F1               	movwf	FlashWrite@addr+1
  1710  05DF  0020               	movlb	0	; select bank0
  1711  05E0  0862               	movf	main@chn_243,w
  1712  05E1  00F2               	movwf	FlashWrite@flash_data
  1713  05E2  01F3               	clrf	FlashWrite@flash_data+1
  1714  05E3  2144               	fcall	_FlashWrite
  1715  05E4  0064               	clrwdt	;# 
  1716                           
  1717                           ;main.c: 236: FlashWrite(TYPE_ADR + 1, 0x5A);
  1718  05E5  30C1               	movlw	193
  1719  05E6  00F0               	movwf	FlashWrite@addr
  1720  05E7  3007               	movlw	7
  1721  05E8  00F1               	movwf	FlashWrite@addr+1
  1722  05E9  305A               	movlw	90
  1723  05EA  00F2               	movwf	FlashWrite@flash_data
  1724  05EB  01F3               	clrf	FlashWrite@flash_data+1
  1725  05EC  2144               	fcall	_FlashWrite
  1726  05ED  0064               	clrwdt	;# 
  1727                           
  1728                           ;main.c: 238: _delay((unsigned long)((500)*(8000000/4000.0)));
  1729  05EE  3006               	movlw	6
  1730  05EF  0020               	movlb	0	; select bank0
  1731  05F0  00DA               	movwf	??_main+1
  1732  05F1  3013               	movlw	19
  1733  05F2  00D9               	movwf	??_main
  1734  05F3  30AD               	movlw	173
  1735  05F4                     u1607:	
  1736  05F4  0B89               	decfsz	9,f
  1737  05F5  2DF4               	goto	u1607
  1738  05F6  0BD9               	decfsz	??_main,f
  1739  05F7  2DF4               	goto	u1607
  1740  05F8  0BDA               	decfsz	??_main+1,f
  1741  05F9  2DF4               	goto	u1607
  1742  05FA  3200               	nop2
  1743  05FB  0064               	clrwdt	;# 
  1744                           
  1745                           ;main.c: 240: DevType = Init_TypeFromFlash(&Type[0]);
  1746  05FC  30C0               	movlw	192
  1747  05FD  00F0               	movwf	Init_TypeFromFlash@type
  1748  05FE  3087               	movlw	135
  1749  05FF  00F1               	movwf	Init_TypeFromFlash@type+1
  1750  0600  2157               	fcall	_Init_TypeFromFlash
  1751  0601  0020               	movlb	0	; select bank0
  1752  0602  00A7               	movwf	_DevType
  1753                           
  1754                           ;main.c: 241: DevMode &= ~MODE_CHANGE_ACTIVE;
  1755  0603  1126               	bcf	_DevMode,2
  1756                           
  1757                           ;main.c: 242: LATCbits.LATC3 = OFF;
  1758  0604  0022               	movlb	2	; select bank2
  1759  0605  118E               	bcf	14,3	;volatile
  1760  0606                     l1913:	
  1761                           
  1762                           ;main.c: 243: }
  1763                           ;main.c: 244: Keys[chn].StateTemp = Keys[chn].State;
  1764  0606  0020               	movlb	0	; select bank0
  1765  0607  0862               	movf	main@chn_243,w
  1766  0608  0709               	addwf	9,w
  1767  0609  0709               	addwf	9,w
  1768  060A  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1769  060B  0086               	movwf	6
  1770  060C  0187               	clrf	7
  1771  060D  0862               	movf	main@chn_243,w
  1772  060E  0709               	addwf	9,w
  1773  060F  0709               	addwf	9,w
  1774  0610  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1775  0611  0084               	movwf	4
  1776  0612  0185               	clrf	5
  1777  0613  0800               	movf	0,w
  1778  0614  0081               	movwf	1
  1779  0615                     l1915:	
  1780  0615  0AE2               	incf	main@chn_243,f
  1781  0616  2DB6               	goto	l1893
  1782  0617                     l1919:	
  1783                           
  1784                           ;main.c: 249: for (uint8_t chn = 0; chn < 4; chn++) {
  1785  0617  01E3               	clrf	main@chn_244
  1786  0618                     l1921:	
  1787  0618  3004               	movlw	4
  1788  0619  0263               	subwf	main@chn_244,w
  1789  061A  1803               	btfsc	3,0
  1790  061B  2F3B               	goto	l1995
  1791                           
  1792                           ;main.c: 250: if (Keys[chn].State != Keys[chn].StateTemp) {
  1793  061C  0863               	movf	main@chn_244,w
  1794  061D  0709               	addwf	9,w
  1795  061E  0709               	addwf	9,w
  1796  061F  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1797  0620  0086               	movwf	6
  1798  0621  0187               	clrf	7
  1799  0622  0863               	movf	main@chn_244,w
  1800  0623  0709               	addwf	9,w
  1801  0624  0709               	addwf	9,w
  1802  0625  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1803  0626  0084               	movwf	4
  1804  0627  0185               	clrf	5
  1805  0628  0800               	movf	0,w
  1806  0629  0601               	xorwf	1,w
  1807  062A  1D03               	btfss	3,2
  1808  062B  2EAB               	goto	l1963
  1809  062C  2F2A               	goto	l1989
  1810  062D                     l1929:	
  1811                           
  1812                           ;main.c: 253: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1813  062D  0863               	movf	main@chn_244,w
  1814  062E  00FB               	movwf	KeyOffHandler@chn
  1815  062F  3004               	movlw	4
  1816  0630  00FC               	movwf	KeyOffHandler@cmd
  1817  0631  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1818  0632  00FD               	movwf	KeyOffHandler@nooData
  1819  0633  0863               	movf	main@chn_244,w
  1820  0634  0709               	addwf	9,w
  1821  0635  0709               	addwf	9,w
  1822  0636  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1823  0637  21A1               	fcall	_KeyOffHandler
  1824                           
  1825                           ;main.c: 254: break;
  1826  0638  2EB9               	goto	l1965
  1827  0639                     l1931:	
  1828                           
  1829                           ;main.c: 256: if ((chn == 0) || (chn == 2)) {
  1830  0639  0863               	movf	main@chn_244,w
  1831  063A  1903               	btfsc	3,2
  1832  063B  2E40               	goto	l1935
  1833  063C  3002               	movlw	2
  1834  063D  0663               	xorwf	main@chn_244,w
  1835  063E  1D03               	btfss	3,2
  1836  063F  2E4B               	goto	l1937
  1837  0640                     l1935:	
  1838                           
  1839                           ;main.c: 257: KeyOffHandler(&Keys[chn], chn, CMD_OFF, &noo_send_data[0]);
  1840  0640  0863               	movf	main@chn_244,w
  1841  0641  00FB               	movwf	KeyOffHandler@chn
  1842  0642  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1843  0643  01FC               	clrf	KeyOffHandler@cmd
  1844  0644  00FD               	movwf	KeyOffHandler@nooData
  1845  0645  0863               	movf	main@chn_244,w
  1846  0646  0709               	addwf	9,w
  1847  0647  0709               	addwf	9,w
  1848  0648  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1849  0649  21A1               	fcall	_KeyOffHandler
  1850                           
  1851                           ;main.c: 258: } else {
  1852  064A  2EB9               	goto	l1965
  1853  064B                     l1937:	
  1854                           
  1855                           ;main.c: 259: KeyOffHandler(&Keys[chn], chn, CMD_ON, &noo_send_data[0]);
  1856  064B  0863               	movf	main@chn_244,w
  1857  064C  00FB               	movwf	KeyOffHandler@chn
  1858  064D  3002               	movlw	2
  1859  064E  00FC               	movwf	KeyOffHandler@cmd
  1860  064F  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1861  0650  00FD               	movwf	KeyOffHandler@nooData
  1862  0651  0863               	movf	main@chn_244,w
  1863  0652  0709               	addwf	9,w
  1864  0653  0709               	addwf	9,w
  1865  0654  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1866  0655  21A1               	fcall	_KeyOffHandler
  1867                           
  1868                           ;main.c: 260: }
  1869                           ;main.c: 261: break;
  1870  0656  2EB9               	goto	l1965
  1871  0657                     l1939:	
  1872                           
  1873                           ;main.c: 263: if (chn > 1) {
  1874  0657  3002               	movlw	2
  1875  0658  0263               	subwf	main@chn_244,w
  1876                           
  1877                           ;main.c: 264: if (Keys[chn].State == 0) {
  1878  0659  0863               	movf	main@chn_244,w
  1879  065A  1C03               	skipc
  1880  065B  2E79               	goto	L2
  1881  065C  0709               	addwf	9,w
  1882  065D  0709               	addwf	9,w
  1883  065E  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1884  065F  0086               	movwf	6
  1885  0660  0187               	clrf	7
  1886  0661  0801               	movf	1,w
  1887  0662  1D03               	btfss	3,2
  1888  0663  2EB9               	goto	l1965
  1889                           
  1890                           ;main.c: 265: if (Keys[chn].Tick100ms < 10) {
  1891  0664  0863               	movf	main@chn_244,w
  1892  0665  0709               	addwf	9,w
  1893  0666  0709               	addwf	9,w
  1894  0667  3E2D               	addlw	(low ((_Keys| 0+2)))& (0+255)
  1895  0668  0086               	movwf	6
  1896  0669  300A               	movlw	10
  1897  066A  0201               	subwf	1,w
  1898  066B  1803               	skipnc
  1899  066C  2EB9               	goto	l1965
  1900                           
  1901                           ;main.c: 266: if (chn > 1) {
  1902  066D  3002               	movlw	2
  1903  066E  0263               	subwf	main@chn_244,w
  1904  066F  1C03               	skipc
  1905  0670  2EB9               	goto	l1965
  1906                           
  1907                           ;main.c: 267: noolite_send(chn, CMD_Load_Preset, 0, &noo_send_data[0]);
  1908  0671  3007               	movlw	7
  1909  0672  00F0               	movwf	noolite_send@noo_send_command
  1910  0673  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1911  0674  01F1               	clrf	noolite_send@noo_send_format
  1912  0675  00F2               	movwf	noolite_send@data
  1913  0676  0863               	movf	main@chn_244,w
  1914  0677  2305               	fcall	_noolite_send
  1915  0678  2EB9               	goto	l1965
  1916  0679                     L2:	
  1917                           ;main.c: 272: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1918                           
  1919  0679  00FB               	movwf	KeyOffHandler@chn
  1920  067A  3004               	movlw	4
  1921  067B  00FC               	movwf	KeyOffHandler@cmd
  1922  067C  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1923  067D  00FD               	movwf	KeyOffHandler@nooData
  1924  067E  0863               	movf	main@chn_244,w
  1925  067F  0709               	addwf	9,w
  1926  0680  0709               	addwf	9,w
  1927  0681  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1928  0682  21A1               	fcall	_KeyOffHandler
  1929  0683  2EB9               	goto	l1965
  1930  0684                     l1951:	
  1931                           
  1932                           ;main.c: 276: if (chn > 1) {
  1933  0684  3002               	movlw	2
  1934  0685  0263               	subwf	main@chn_244,w
  1935                           
  1936                           ;main.c: 277: if (Keys[chn].State) {
  1937  0686  0863               	movf	main@chn_244,w
  1938  0687  1C03               	skipc
  1939  0688  2EA0               	goto	L3
  1940  0689  0709               	addwf	9,w
  1941  068A  0709               	addwf	9,w
  1942  068B  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1943  068C  0086               	movwf	6
  1944  068D  0187               	clrf	7
  1945  068E  0801               	movf	1,w
  1946  068F  1903               	btfsc	3,2
  1947  0690  2E99               	goto	l1957
  1948                           
  1949                           ;main.c: 278: noolite_send(chn, CMD_ON, 0, &noo_send_data[0]);
  1950  0691  3002               	movlw	2
  1951  0692  00F0               	movwf	noolite_send@noo_send_command
  1952  0693  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1953  0694  01F1               	clrf	noolite_send@noo_send_format
  1954  0695  00F2               	movwf	noolite_send@data
  1955  0696  0863               	movf	main@chn_244,w
  1956  0697  2305               	fcall	_noolite_send
  1957                           
  1958                           ;main.c: 279: } else {
  1959  0698  2EB9               	goto	l1965
  1960  0699                     l1957:	
  1961  0699  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1962                           
  1963                           ;main.c: 280: noolite_send(chn, CMD_OFF, 0, &noo_send_data[0]);
  1964  069A  01F0               	clrf	noolite_send@noo_send_command
  1965  069B  01F1               	clrf	noolite_send@noo_send_format
  1966  069C  00F2               	movwf	noolite_send@data
  1967  069D  0863               	movf	main@chn_244,w
  1968  069E  2305               	fcall	_noolite_send
  1969  069F  2EB9               	goto	l1965
  1970  06A0                     L3:	
  1971                           ;main.c: 283: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1972                           
  1973  06A0  00FB               	movwf	KeyOffHandler@chn
  1974  06A1  3004               	movlw	4
  1975  06A2  00FC               	movwf	KeyOffHandler@cmd
  1976  06A3  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1977  06A4  00FD               	movwf	KeyOffHandler@nooData
  1978  06A5  0863               	movf	main@chn_244,w
  1979  06A6  0709               	addwf	9,w
  1980  06A7  0709               	addwf	9,w
  1981  06A8  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1982  06A9  21A1               	fcall	_KeyOffHandler
  1983  06AA  2EB9               	goto	l1965
  1984  06AB                     l1963:	
  1985  06AB  0827               	movf	_DevType,w
  1986                           
  1987                           ; Switch size 1, requested type "space"
  1988                           ; Number of cases is 4, Range of values is 0 to 3
  1989                           ; switch strategies available:
  1990                           ; Name         Instructions Cycles
  1991                           ; simple_byte           13     7 (average)
  1992                           ; direct_byte           14     6 (fixed)
  1993                           ; jumptable            260     6 (fixed)
  1994                           ;	Chosen strategy is simple_byte
  1995  06AC  3A00               	xorlw	0	; case 0
  1996  06AD  1903               	skipnz
  1997  06AE  2E2D               	goto	l1929
  1998  06AF  3A01               	xorlw	1	; case 1
  1999  06B0  1903               	skipnz
  2000  06B1  2E39               	goto	l1931
  2001  06B2  3A03               	xorlw	3	; case 2
  2002  06B3  1903               	skipnz
  2003  06B4  2E57               	goto	l1939
  2004  06B5  3A01               	xorlw	1	; case 3
  2005  06B6  1903               	skipnz
  2006  06B7  2E84               	goto	l1951
  2007  06B8  2EB9               	goto	l1965
  2008  06B9                     l1965:	
  2009                           
  2010                           ;main.c: 287: Keys[chn].StateTemp = Keys[chn].State;
  2011  06B9  0020               	movlb	0	; select bank0
  2012  06BA  0863               	movf	main@chn_244,w
  2013  06BB  0709               	addwf	9,w
  2014  06BC  0709               	addwf	9,w
  2015  06BD  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  2016  06BE  0086               	movwf	6
  2017  06BF  0187               	clrf	7
  2018  06C0  0863               	movf	main@chn_244,w
  2019  06C1  0709               	addwf	9,w
  2020  06C2  0709               	addwf	9,w
  2021  06C3  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  2022  06C4  0084               	movwf	4
  2023  06C5  0185               	clrf	5
  2024  06C6  0800               	movf	0,w
  2025  06C7  0081               	movwf	1
  2026  06C8  2F2A               	goto	l1989
  2027  06C9                     l1967:	
  2028                           
  2029                           ;main.c: 292: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2030  06C9  0863               	movf	main@chn_244,w
  2031  06CA  00D5               	movwf	KeyLongHandler@chn
  2032  06CB  3005               	movlw	5
  2033  06CC  00D6               	movwf	KeyLongHandler@cmd
  2034  06CD  3009               	movlw	9
  2035  06CE  00D7               	movwf	KeyLongHandler@ticksToTrigger
  2036  06CF  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2037  06D0  00D8               	movwf	KeyLongHandler@nooData
  2038  06D1  0863               	movf	main@chn_244,w
  2039  06D2  0709               	addwf	9,w
  2040  06D3  0709               	addwf	9,w
  2041  06D4  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  2042  06D5  2175               	fcall	_KeyLongHandler
  2043                           
  2044                           ;main.c: 293: break;
  2045  06D6  2F38               	goto	l1991
  2046  06D7                     l1969:	
  2047                           
  2048                           ;main.c: 295: if (chn == 0 || chn == 2) {
  2049  06D7  0863               	movf	main@chn_244,w
  2050  06D8  1903               	btfsc	3,2
  2051  06D9  2EDE               	goto	l1973
  2052  06DA  3002               	movlw	2
  2053  06DB  0663               	xorwf	main@chn_244,w
  2054  06DC  1D03               	btfss	3,2
  2055  06DD  2EEC               	goto	l1975
  2056  06DE                     l1973:	
  2057                           
  2058                           ;main.c: 296: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Down, 9, &noo_send_data[0]);
  2059  06DE  0863               	movf	main@chn_244,w
  2060  06DF  00D5               	movwf	KeyLongHandler@chn
  2061  06E0  3009               	movlw	9
  2062  06E1  01D6               	clrf	KeyLongHandler@cmd
  2063  06E2  0AD6               	incf	KeyLongHandler@cmd,f
  2064  06E3  00D7               	movwf	KeyLongHandler@ticksToTrigger
  2065  06E4  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2066  06E5  00D8               	movwf	KeyLongHandler@nooData
  2067  06E6  0863               	movf	main@chn_244,w
  2068  06E7  0709               	addwf	9,w
  2069  06E8  0709               	addwf	9,w
  2070  06E9  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  2071  06EA  2175               	fcall	_KeyLongHandler
  2072                           
  2073                           ;main.c: 297: } else {
  2074  06EB  2F38               	goto	l1991
  2075  06EC                     l1975:	
  2076                           
  2077                           ;main.c: 298: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Up, 9, &noo_send_data[0]);
  2078  06EC  0863               	movf	main@chn_244,w
  2079  06ED  00D5               	movwf	KeyLongHandler@chn
  2080  06EE  3003               	movlw	3
  2081  06EF  00D6               	movwf	KeyLongHandler@cmd
  2082  06F0  3009               	movlw	9
  2083  06F1  00D7               	movwf	KeyLongHandler@ticksToTrigger
  2084  06F2  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2085  06F3  00D8               	movwf	KeyLongHandler@nooData
  2086  06F4  0863               	movf	main@chn_244,w
  2087  06F5  0709               	addwf	9,w
  2088  06F6  0709               	addwf	9,w
  2089  06F7  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  2090  06F8  2175               	fcall	_KeyLongHandler
  2091  06F9  2F38               	goto	l1991
  2092  06FA                     l1977:	
  2093                           
  2094                           ;main.c: 302: if (chn < 2) {
  2095  06FA  3002               	movlw	2
  2096  06FB  0263               	subwf	main@chn_244,w
  2097                           
  2098                           ;main.c: 303: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2099  06FC  0863               	movf	main@chn_244,w
  2100  06FD  00D5               	movwf	KeyLongHandler@chn
  2101  06FE  1803               	skipnc
  2102  06FF  2F0C               	goto	L4
  2103  0700  3005               	movlw	5
  2104  0701  00D6               	movwf	KeyLongHandler@cmd
  2105  0702  3009               	movlw	9
  2106  0703  00D7               	movwf	KeyLongHandler@ticksToTrigger
  2107  0704  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2108  0705  00D8               	movwf	KeyLongHandler@nooData
  2109  0706  0863               	movf	main@chn_244,w
  2110  0707  0709               	addwf	9,w
  2111  0708  0709               	addwf	9,w
  2112  0709  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  2113  070A  2175               	fcall	_KeyLongHandler
  2114                           
  2115                           ;main.c: 304: } else {
  2116  070B  2F38               	goto	l1991
  2117  070C                     L4:	
  2118                           ;main.c: 305: KeyLongHandler(&Keys[chn], chn, CMD_Save_Preset, 49, &noo_send_data[0]);
  2119                           
  2120  070C  3008               	movlw	8
  2121  070D  00D6               	movwf	KeyLongHandler@cmd
  2122  070E  3031               	movlw	49
  2123  070F  00D7               	movwf	KeyLongHandler@ticksToTrigger
  2124  0710  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2125  0711  00D8               	movwf	KeyLongHandler@nooData
  2126  0712  0863               	movf	main@chn_244,w
  2127  0713  0709               	addwf	9,w
  2128  0714  0709               	addwf	9,w
  2129  0715  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  2130  0716  2175               	fcall	_KeyLongHandler
  2131  0717  2F38               	goto	l1991
  2132  0718                     l1983:	
  2133                           
  2134                           ;main.c: 309: if (chn < 2) {
  2135  0718  3002               	movlw	2
  2136  0719  0263               	subwf	main@chn_244,w
  2137  071A  1803               	skipnc
  2138  071B  2F38               	goto	l1991
  2139                           
  2140                           ;main.c: 310: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2141  071C  0863               	movf	main@chn_244,w
  2142  071D  00D5               	movwf	KeyLongHandler@chn
  2143  071E  3005               	movlw	5
  2144  071F  00D6               	movwf	KeyLongHandler@cmd
  2145  0720  3009               	movlw	9
  2146  0721  00D7               	movwf	KeyLongHandler@ticksToTrigger
  2147  0722  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2148  0723  00D8               	movwf	KeyLongHandler@nooData
  2149  0724  0863               	movf	main@chn_244,w
  2150  0725  0709               	addwf	9,w
  2151  0726  0709               	addwf	9,w
  2152  0727  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  2153  0728  2175               	fcall	_KeyLongHandler
  2154  0729  2F38               	goto	l1991
  2155  072A                     l1989:	
  2156  072A  0827               	movf	_DevType,w
  2157                           
  2158                           ; Switch size 1, requested type "space"
  2159                           ; Number of cases is 4, Range of values is 0 to 3
  2160                           ; switch strategies available:
  2161                           ; Name         Instructions Cycles
  2162                           ; simple_byte           13     7 (average)
  2163                           ; direct_byte           14     6 (fixed)
  2164                           ; jumptable            260     6 (fixed)
  2165                           ;	Chosen strategy is simple_byte
  2166  072B  3A00               	xorlw	0	; case 0
  2167  072C  1903               	skipnz
  2168  072D  2EC9               	goto	l1967
  2169  072E  3A01               	xorlw	1	; case 1
  2170  072F  1903               	skipnz
  2171  0730  2ED7               	goto	l1969
  2172  0731  3A03               	xorlw	3	; case 2
  2173  0732  1903               	skipnz
  2174  0733  2EFA               	goto	l1977
  2175  0734  3A01               	xorlw	1	; case 3
  2176  0735  1903               	skipnz
  2177  0736  2F18               	goto	l1983
  2178  0737  2F38               	goto	l1991
  2179  0738                     l1991:	
  2180  0738  0020               	movlb	0	; select bank0
  2181  0739  0AE3               	incf	main@chn_244,f
  2182  073A  2E18               	goto	l1921
  2183  073B                     l1995:	
  2184                           
  2185                           ;main.c: 315: }
  2186                           ;main.c: 316: }
  2187                           ;main.c: 317: }
  2188                           ;main.c: 320: if (((DevMode & 0x07) == 0) && ((PORTA & All_Pressed) == 0)) {
  2189  073B  0826               	movf	_DevMode,w
  2190  073C  3907               	andlw	7
  2191  073D  1D03               	btfss	3,2
  2192  073E  2FA8               	goto	l2029
  2193  073F  080C               	movf	12,w	;volatile
  2194  0740  3917               	andlw	23
  2195  0741  1D03               	btfss	3,2
  2196  0742  2FA8               	goto	l2029
  2197                           
  2198                           ;main.c: 321: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  2199  0743  01DF               	clrf	main@cellNum
  2200                           
  2201                           ;main.c: 328: break;
  2202  0744  2F62               	goto	l2001
  2203  0745                     l2019:	
  2204                           
  2205                           ;main.c: 330: if (cellNum == 7) {
  2206  0745  3007               	movlw	7
  2207  0746  065F               	xorwf	main@cellNum,w
  2208  0747  1D03               	btfss	3,2
  2209  0748  2F60               	goto	l2023
  2210                           
  2211                           ;main.c: 331: FlashEraseRow(TX_STATUS_ADR);
  2212  0749  30D0               	movlw	208
  2213  074A  00F0               	movwf	FlashEraseRow@rowAddr
  2214  074B  3007               	movlw	7
  2215  074C  00F1               	movwf	FlashEraseRow@rowAddr+1
  2216  074D  211A               	fcall	_FlashEraseRow
  2217                           
  2218                           ;main.c: 332: FlashWrite(TX_STATUS_ADR, tx_status & 0x02);
  2219  074E  30D0               	movlw	208
  2220  074F  00F0               	movwf	FlashWrite@addr
  2221  0750  3007               	movlw	7
  2222  0751  00F1               	movwf	FlashWrite@addr+1
  2223  0752  0020               	movlb	0	; select bank0
  2224  0753  082A               	movf	_tx_status,w
  2225  0754  3902               	andlw	2
  2226  0755  00F2               	movwf	FlashWrite@flash_data
  2227  0756  01F3               	clrf	FlashWrite@flash_data+1
  2228  0757  2144               	fcall	_FlashWrite
  2229                           
  2230                           ;main.c: 333: FlashWrite(TX_STATUS_ADR + 1, 0x5A);
  2231  0758  30D1               	movlw	209
  2232  0759  00F0               	movwf	FlashWrite@addr
  2233  075A  3007               	movlw	7
  2234  075B  00F1               	movwf	FlashWrite@addr+1
  2235  075C  305A               	movlw	90
  2236  075D  00F2               	movwf	FlashWrite@flash_data
  2237  075E  01F3               	clrf	FlashWrite@flash_data+1
  2238  075F  2144               	fcall	_FlashWrite
  2239  0760                     l2023:	
  2240  0760  0020               	movlb	0	; select bank0
  2241  0761  0ADF               	incf	main@cellNum,f
  2242  0762                     l2001:	
  2243  0762  3008               	movlw	8
  2244  0763  025F               	subwf	main@cellNum,w
  2245  0764  1803               	btfsc	3,0
  2246  0765  2F98               	goto	l141
  2247                           
  2248                           ;main.c: 322: uint16_t adrToWrite = (TX_STATUS_ADR + (cellNum * 2));
  2249  0766  085F               	movf	main@cellNum,w
  2250  0767  00DD               	movwf	main@adrToWrite
  2251  0768  30D0               	movlw	208
  2252  0769  01DE               	clrf	main@adrToWrite+1
  2253  076A  35DD               	lslf	main@adrToWrite,f
  2254  076B  0DDE               	rlf	main@adrToWrite+1,f
  2255  076C  07DD               	addwf	main@adrToWrite,f
  2256  076D  3007               	movlw	7
  2257  076E  3DDE               	addwfc	main@adrToWrite+1,f
  2258                           
  2259                           ;main.c: 323: if (TxStatus[cellNum] == 0xFFFF) {
  2260  076F  085F               	movf	main@cellNum,w
  2261  0770  00D9               	movwf	??_main
  2262  0771  30D0               	movlw	208
  2263  0772  01DA               	clrf	??_main+1
  2264  0773  35D9               	lslf	??_main,f
  2265  0774  0DDA               	rlf	??_main+1,f
  2266  0775  0759               	addwf	??_main,w
  2267  0776  0084               	movwf	4
  2268  0777  3087               	movlw	135
  2269  0778  3D5A               	addwfc	??_main+1,w
  2270  0779  0085               	movwf	5
  2271  077A  0012               	moviw fsr0++
  2272  077B  3AFF               	xorlw	255
  2273  077C  00DB               	movwf	??_main+2
  2274  077D  0012               	moviw fsr0++
  2275  077E  3AFF               	xorlw	255
  2276  077F  04DB               	iorwf	??_main+2,f
  2277  0780  1D03               	btfss	3,2
  2278  0781  2F45               	goto	l2019
  2279                           
  2280                           ;main.c: 324: FlashWrite(adrToWrite, tx_status & 0x02);
  2281  0782  085E               	movf	main@adrToWrite+1,w
  2282  0783  00F1               	movwf	FlashWrite@addr+1
  2283  0784  085D               	movf	main@adrToWrite,w
  2284  0785  00F0               	movwf	FlashWrite@addr
  2285  0786  082A               	movf	_tx_status,w
  2286  0787  3902               	andlw	2
  2287  0788  00F2               	movwf	FlashWrite@flash_data
  2288  0789  01F3               	clrf	FlashWrite@flash_data+1
  2289  078A  2144               	fcall	_FlashWrite
  2290                           
  2291                           ;main.c: 325: FlashWrite((adrToWrite + 1), 0x5A);
  2292  078B  0020               	movlb	0	; select bank0
  2293  078C  085D               	movf	main@adrToWrite,w
  2294  078D  3E01               	addlw	1
  2295  078E  00F0               	movwf	FlashWrite@addr
  2296  078F  3000               	movlw	0
  2297  0790  3D5E               	addwfc	main@adrToWrite+1,w
  2298  0791  00F1               	movwf	FlashWrite@addr+1
  2299  0792  305A               	movlw	90
  2300  0793  00F2               	movwf	FlashWrite@flash_data
  2301  0794  01F3               	clrf	FlashWrite@flash_data+1
  2302  0795  2144               	fcall	_FlashWrite
  2303                           
  2304                           ;main.c: 326: __nop();
  2305  0796  0000               	nop
  2306  0797  0064               	clrwdt	;# 
  2307  0798                     l141:	
  2308                           
  2309                           ;main.c: 334: }
  2310                           ;main.c: 335: }
  2311                           ;main.c: 336: }
  2312                           ;main.c: 337: LATCbits.LATC5 = 0;
  2313  0798  0022               	movlb	2	; select bank2
  2314  0799  128E               	bcf	14,5	;volatile
  2315                           
  2316                           ;main.c: 338: _delay((unsigned long)((100)*(8000000/4000.0)));
  2317  079A  3002               	movlw	2
  2318  079B  0020               	movlb	0	; select bank0
  2319  079C  00DA               	movwf	??_main+1
  2320  079D  3004               	movlw	4
  2321  079E  00D9               	movwf	??_main
  2322  079F  30BA               	movlw	186
  2323  07A0                     u1617:	
  2324  07A0  0B89               	decfsz	9,f
  2325  07A1  2FA0               	goto	u1617
  2326  07A2  0BD9               	decfsz	??_main,f
  2327  07A3  2FA0               	goto	u1617
  2328  07A4  0BDA               	decfsz	??_main+1,f
  2329  07A5  2FA0               	goto	u1617
  2330  07A6  0000               	nop
  2331                           
  2332                           ;main.c: 339: } else {
  2333  07A7  2CB4               	goto	l1755
  2334  07A8                     l2029:	
  2335                           
  2336                           ;main.c: 340: WDTCONbits.WDTPS = 0b00110;
  2337  07A8  0021               	movlb	1	; select bank1
  2338  07A9  0817               	movf	23,w	;volatile
  2339  07AA  39C1               	andlw	-63
  2340  07AB  380C               	iorlw	12
  2341  07AC  0097               	movwf	23	;volatile
  2342                           
  2343                           ;main.c: 341: __nop();
  2344  07AD  0000               	nop
  2345  07AE  0063               	sleep	;# 
  2346                           
  2347                           ;main.c: 343: __nop();
  2348  07AF  0000               	nop
  2349                           
  2350                           ;main.c: 344: WDTCONbits.WDTPS = 0b00101;
  2351  07B0  0021               	movlb	1	; select bank1
  2352  07B1  0817               	movf	23,w	;volatile
  2353  07B2  39C1               	andlw	-63
  2354  07B3  380A               	iorlw	10
  2355  07B4  0097               	movwf	23	;volatile
  2356                           
  2357                           ;main.c: 345: __nop();
  2358  07B5  0000               	nop
  2359  07B6  0063               	sleep	;# 
  2360                           
  2361                           ;main.c: 347: __nop();
  2362  07B7  0000               	nop
  2363                           
  2364                           ;main.c: 348: WDTCONbits.WDTPS = 0b01011;
  2365  07B8  0021               	movlb	1	; select bank1
  2366  07B9  0817               	movf	23,w	;volatile
  2367  07BA  39C1               	andlw	-63
  2368  07BB  3816               	iorlw	22
  2369  07BC  0097               	movwf	23	;volatile
  2370                           
  2371                           ;main.c: 349: __nop();
  2372  07BD  0000               	nop
  2373  07BE  0064               	clrwdt	;# 
  2374  07BF  2CB4               	goto	l1755
  2375  07C0                     __end_of_main:	
  2376                           
  2377                           	psect	text1
  2378  01E1                     __ptext1:	
  2379 ;; *************** function _RF_Init *****************
  2380 ;; Defined at:
  2381 ;;		line 25 in file "noolite.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      void 
  2388 ;; Registers used:
  2389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2390 ;; Tracked objects:
  2391 ;;		On entry : B1F/1
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMMON   BANK0   BANK1
  2395 ;;      Params:         0       0       0
  2396 ;;      Locals:         0       0       0
  2397 ;;      Temps:          7       0       0
  2398 ;;      Totals:         7       0       0
  2399 ;;Total ram usage:        7 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_main
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           
  2409                           ;psect for function _RF_Init
  2410  01E1                     _RF_Init:	
  2411                           
  2412                           ;noolite.c: 27: startaddress = 0;
  2413                           
  2414                           ;incstack = 0
  2415                           ; Regs used in _RF_Init: [wreg-fsr0h+status,2+status,0+pclath]
  2416  01E1  0020               	movlb	0	; select bank0
  2417  01E2  30F3               	movlw	243
  2418  01E3  01A0               	clrf	_startaddress
  2419  01E4  01A1               	clrf	_startaddress+1
  2420  01E5  01A2               	clrf	_startaddress+2
  2421  01E6  01A3               	clrf	_startaddress+3
  2422                           
  2423                           ;noolite.c: 28: startaddress |= ((unsigned int) system_settings[5]) << 8;
  2424  01E7  0084               	movwf	4
  2425  01E8  3087               	movlw	135
  2426  01E9  0085               	movwf	5
  2427  01EA  0800               	movf	0,w	;code access
  2428  01EB  00F0               	movwf	??_RF_Init
  2429  01EC  01F1               	clrf	??_RF_Init+1
  2430  01ED  00F1               	movwf	??_RF_Init+1
  2431  01EE  01F0               	clrf	??_RF_Init
  2432  01EF  0870               	movf	??_RF_Init,w
  2433  01F0  00F3               	movwf	??_RF_Init+3
  2434  01F1  0871               	movf	??_RF_Init+1,w
  2435  01F2  00F4               	movwf	??_RF_Init+4
  2436  01F3  01F5               	clrf	??_RF_Init+5
  2437  01F4  01F6               	clrf	??_RF_Init+6
  2438  01F5  0873               	movf	??_RF_Init+3,w
  2439  01F6  04A0               	iorwf	_startaddress,f
  2440  01F7  0874               	movf	??_RF_Init+4,w
  2441  01F8  04A1               	iorwf	_startaddress+1,f
  2442  01F9  0875               	movf	??_RF_Init+5,w
  2443  01FA  04A2               	iorwf	_startaddress+2,f
  2444  01FB  0876               	movf	??_RF_Init+6,w
  2445  01FC  04A3               	iorwf	_startaddress+3,f
  2446                           
  2447                           ;noolite.c: 29: startaddress |= system_settings[4];
  2448  01FD  30F2               	movlw	242
  2449  01FE  0084               	movwf	4
  2450  01FF  0800               	movf	0,w	;code access
  2451  0200  00F0               	movwf	??_RF_Init
  2452  0201  01F1               	clrf	??_RF_Init+1
  2453  0202  01F2               	clrf	??_RF_Init+2
  2454  0203  01F3               	clrf	??_RF_Init+3
  2455  0204  04A0               	iorwf	_startaddress,f
  2456  0205  0871               	movf	??_RF_Init+1,w
  2457  0206  04A1               	iorwf	_startaddress+1,f
  2458  0207  0872               	movf	??_RF_Init+2,w
  2459  0208  04A2               	iorwf	_startaddress+2,f
  2460  0209  0873               	movf	??_RF_Init+3,w
  2461  020A  04A3               	iorwf	_startaddress+3,f
  2462                           
  2463                           ;noolite.c: 30: if ((startaddress != 0) && (startaddress != 0xFFFF)) {
  2464  020B  0823               	movf	_startaddress+3,w
  2465  020C  0422               	iorwf	_startaddress+2,w
  2466  020D  0421               	iorwf	_startaddress+1,w
  2467  020E  0420               	iorwf	_startaddress,w
  2468  020F  1903               	skipnz
  2469  0210  2A1A               	goto	l177
  2470  0211  0F20               	incfsz	_startaddress,w
  2471  0212  2A18               	goto	l1603
  2472  0213  0A21               	incf	_startaddress+1,w
  2473  0214  0422               	iorwf	_startaddress+2,w
  2474  0215  0423               	iorwf	_startaddress+3,w
  2475  0216  1903               	btfsc	3,2
  2476  0217  2A1A               	goto	l177
  2477  0218                     l1603:	
  2478                           
  2479                           ;noolite.c: 31: noo_address_type = 0;
  2480  0218  01A4               	clrf	_noo_address_type
  2481                           
  2482                           ;noolite.c: 32: } else {
  2483  0219  2A6A               	goto	l178
  2484  021A                     l177:	
  2485  021A  30F9               	movlw	249
  2486                           
  2487                           ;noolite.c: 33: startaddress = 0;
  2488  021B  01A0               	clrf	_startaddress
  2489  021C  01A1               	clrf	_startaddress+1
  2490  021D  01A2               	clrf	_startaddress+2
  2491  021E  01A3               	clrf	_startaddress+3
  2492                           
  2493                           ;noolite.c: 34: startaddress |= ((unsigned long) system_settings[11]) << 24;
  2494  021F  0084               	movwf	4
  2495  0220  3087               	movlw	135
  2496  0221  0085               	movwf	5
  2497  0222  0800               	movf	0,w	;code access
  2498  0223  00F3               	movwf	??_RF_Init+3
  2499  0224  01F2               	clrf	??_RF_Init+2
  2500  0225  01F1               	clrf	??_RF_Init+1
  2501  0226  01F0               	clrf	??_RF_Init
  2502  0227  0870               	movf	??_RF_Init,w
  2503  0228  04A0               	iorwf	_startaddress,f
  2504  0229  0871               	movf	??_RF_Init+1,w
  2505  022A  04A1               	iorwf	_startaddress+1,f
  2506  022B  0872               	movf	??_RF_Init+2,w
  2507  022C  04A2               	iorwf	_startaddress+2,f
  2508  022D  0873               	movf	??_RF_Init+3,w
  2509  022E  04A3               	iorwf	_startaddress+3,f
  2510                           
  2511                           ;noolite.c: 35: startaddress |= ((unsigned long) system_settings[10]) << 16;
  2512  022F  30F8               	movlw	248
  2513  0230  0084               	movwf	4
  2514  0231  0800               	movf	0,w	;code access
  2515  0232  00F0               	movwf	??_RF_Init
  2516  0233  01F1               	clrf	??_RF_Init+1
  2517  0234  01F2               	clrf	??_RF_Init+2
  2518  0235  01F3               	clrf	??_RF_Init+3
  2519  0236  0871               	movf	??_RF_Init+1,w
  2520  0237  00F3               	movwf	??_RF_Init+3
  2521  0238  0870               	movf	??_RF_Init,w
  2522  0239  00F2               	movwf	??_RF_Init+2
  2523  023A  01F1               	clrf	??_RF_Init+1
  2524  023B  01F0               	clrf	??_RF_Init
  2525  023C  0870               	movf	??_RF_Init,w
  2526  023D  04A0               	iorwf	_startaddress,f
  2527  023E  0871               	movf	??_RF_Init+1,w
  2528  023F  04A1               	iorwf	_startaddress+1,f
  2529  0240  0872               	movf	??_RF_Init+2,w
  2530  0241  04A2               	iorwf	_startaddress+2,f
  2531  0242  0873               	movf	??_RF_Init+3,w
  2532  0243  04A3               	iorwf	_startaddress+3,f
  2533                           
  2534                           ;noolite.c: 36: startaddress |= ((unsigned long) system_settings[9]) << 8;
  2535  0244  30F7               	movlw	247
  2536  0245  0084               	movwf	4
  2537  0246  0800               	movf	0,w	;code access
  2538  0247  00F0               	movwf	??_RF_Init
  2539  0248  01F1               	clrf	??_RF_Init+1
  2540  0249  01F2               	clrf	??_RF_Init+2
  2541  024A  01F3               	clrf	??_RF_Init+3
  2542  024B  0872               	movf	??_RF_Init+2,w
  2543  024C  00F3               	movwf	??_RF_Init+3
  2544  024D  0871               	movf	??_RF_Init+1,w
  2545  024E  00F2               	movwf	??_RF_Init+2
  2546  024F  0870               	movf	??_RF_Init,w
  2547  0250  00F1               	movwf	??_RF_Init+1
  2548  0251  01F0               	clrf	??_RF_Init
  2549  0252  0870               	movf	??_RF_Init,w
  2550  0253  04A0               	iorwf	_startaddress,f
  2551  0254  0871               	movf	??_RF_Init+1,w
  2552  0255  04A1               	iorwf	_startaddress+1,f
  2553  0256  0872               	movf	??_RF_Init+2,w
  2554  0257  04A2               	iorwf	_startaddress+2,f
  2555  0258  0873               	movf	??_RF_Init+3,w
  2556  0259  04A3               	iorwf	_startaddress+3,f
  2557                           
  2558                           ;noolite.c: 37: startaddress |= system_settings[8];
  2559  025A  30F6               	movlw	246
  2560  025B  0084               	movwf	4
  2561  025C  0800               	movf	0,w	;code access
  2562  025D  00F0               	movwf	??_RF_Init
  2563  025E  01F1               	clrf	??_RF_Init+1
  2564  025F  01F2               	clrf	??_RF_Init+2
  2565  0260  01F3               	clrf	??_RF_Init+3
  2566  0261  04A0               	iorwf	_startaddress,f
  2567  0262  0871               	movf	??_RF_Init+1,w
  2568  0263  04A1               	iorwf	_startaddress+1,f
  2569  0264  0872               	movf	??_RF_Init+2,w
  2570  0265  04A2               	iorwf	_startaddress+2,f
  2571  0266  0873               	movf	??_RF_Init+3,w
  2572  0267  04A3               	iorwf	_startaddress+3,f
  2573                           
  2574                           ;noolite.c: 38: noo_address_type = 1;
  2575  0268  01A4               	clrf	_noo_address_type
  2576  0269  0AA4               	incf	_noo_address_type,f
  2577  026A                     l178:	
  2578  026A  0064               	clrwdt	;# 
  2579  026B  0008               	return
  2580  026C                     __end_of_RF_Init:	
  2581                           
  2582                           	psect	text2
  2583  01A1                     __ptext2:	
  2584 ;; *************** function _KeyOffHandler *****************
  2585 ;; Defined at:
  2586 ;;		line 55 in file "user_functions.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;  key             1    wreg     PTR struct .
  2589 ;;		 -> Keys(20), 
  2590 ;;  chn             1   11[COMMON] unsigned char 
  2591 ;;  cmd             1   12[COMMON] unsigned char 
  2592 ;;  nooData         1   13[COMMON] PTR unsigned char 
  2593 ;;		 -> noo_send_data(4), 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  key             1   19[BANK0 ] PTR struct .
  2596 ;;		 -> Keys(20), 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      void 
  2599 ;; Registers used:
  2600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 1F/0
  2603 ;;		On exit  : 1D/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMMON   BANK0   BANK1
  2606 ;;      Params:         3       0       0
  2607 ;;      Locals:         0       1       0
  2608 ;;      Temps:          0       1       0
  2609 ;;      Totals:         3       2       0
  2610 ;;Total ram usage:        5 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    1
  2613 ;; This function calls:
  2614 ;;		_noolite_send
  2615 ;; This function is called by:
  2616 ;;		_main
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function _KeyOffHandler
  2622  01A1                     _KeyOffHandler:	
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in _KeyOffHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2626                           ;KeyOffHandler@key stored from wreg
  2627  01A1  00D6               	movwf	KeyOffHandler@key
  2628                           
  2629                           ;user_functions.c: 56: if (key->State == 0) {
  2630  01A2  0086               	movwf	6
  2631  01A3  0187               	clrf	7
  2632  01A4  0801               	movf	1,w
  2633  01A5  1D03               	btfss	3,2
  2634  01A6  0008               	return
  2635                           
  2636                           ;user_functions.c: 57: if (key->Tick100ms < 10) {
  2637  01A7  0856               	movf	KeyOffHandler@key,w
  2638  01A8  3E02               	addlw	2
  2639  01A9  0086               	movwf	6
  2640  01AA  300A               	movlw	10
  2641  01AB  0201               	subwf	1,w
  2642  01AC  1803               	skipnc
  2643  01AD  29B5               	goto	l1717
  2644                           
  2645                           ;user_functions.c: 58: noolite_send(chn, cmd, 0, &nooData[0]);
  2646  01AE  087C               	movf	KeyOffHandler@cmd,w
  2647  01AF  00F0               	movwf	noolite_send@noo_send_command
  2648  01B0  01F1               	clrf	noolite_send@noo_send_format
  2649  01B1  087D               	movf	KeyOffHandler@nooData,w
  2650  01B2  00F2               	movwf	noolite_send@data
  2651  01B3  087B               	movf	KeyOffHandler@chn,w
  2652  01B4  2B05               	ljmp	_noolite_send
  2653  01B5                     l1717:	
  2654                           ;user_functions.c: 59: } else {
  2655                           
  2656                           
  2657                           ;user_functions.c: 60: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2658  01B5  300A               	movlw	10
  2659  01B6  00F0               	movwf	noolite_send@noo_send_command
  2660  01B7  01F1               	clrf	noolite_send@noo_send_format
  2661  01B8  087D               	movf	KeyOffHandler@nooData,w
  2662  01B9  00F2               	movwf	noolite_send@data
  2663  01BA  087B               	movf	KeyOffHandler@chn,w
  2664  01BB  2305               	fcall	_noolite_send
  2665                           
  2666                           ;user_functions.c: 61: _delay((unsigned long)((15)*(8000000/4000.0)));
  2667  01BC  3027               	movlw	39
  2668  01BD  0020               	movlb	0	; select bank0
  2669  01BE  00D5               	movwf	??_KeyOffHandler
  2670  01BF  30F5               	movlw	245
  2671  01C0                     u1627:	
  2672  01C0  0B89               	decfsz	9,f
  2673  01C1  29C0               	goto	u1627
  2674  01C2  0BD5               	decfsz	??_KeyOffHandler,f
  2675  01C3  29C0               	goto	u1627
  2676                           
  2677                           ;user_functions.c: 62: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2678  01C4  300A               	movlw	10
  2679  01C5  00F0               	movwf	noolite_send@noo_send_command
  2680  01C6  01F1               	clrf	noolite_send@noo_send_format
  2681  01C7  087D               	movf	KeyOffHandler@nooData,w
  2682  01C8  00F2               	movwf	noolite_send@data
  2683  01C9  087B               	movf	KeyOffHandler@chn,w
  2684  01CA  2305               	fcall	_noolite_send
  2685                           
  2686                           ;user_functions.c: 63: _delay((unsigned long)((15)*(8000000/4000.0)));
  2687  01CB  3027               	movlw	39
  2688  01CC  0020               	movlb	0	; select bank0
  2689  01CD  00D5               	movwf	??_KeyOffHandler
  2690  01CE  30F5               	movlw	245
  2691  01CF                     u1637:	
  2692  01CF  0B89               	decfsz	9,f
  2693  01D0  29CF               	goto	u1637
  2694  01D1  0BD5               	decfsz	??_KeyOffHandler,f
  2695  01D2  29CF               	goto	u1637
  2696                           
  2697                           ;user_functions.c: 64: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  2698  01D3  300A               	movlw	10
  2699  01D4  00F0               	movwf	noolite_send@noo_send_command
  2700  01D5  01F1               	clrf	noolite_send@noo_send_format
  2701  01D6  087D               	movf	KeyOffHandler@nooData,w
  2702  01D7  00F2               	movwf	noolite_send@data
  2703  01D8  087B               	movf	KeyOffHandler@chn,w
  2704  01D9  2305               	fcall	_noolite_send
  2705                           
  2706                           ;user_functions.c: 65: key->FirstCmdSent = 0;
  2707  01DA  0020               	movlb	0	; select bank0
  2708  01DB  0856               	movf	KeyOffHandler@key,w
  2709  01DC  3E03               	addlw	3
  2710  01DD  0086               	movwf	6
  2711  01DE  0187               	clrf	7
  2712  01DF  0181               	clrf	1
  2713  01E0  0008               	return
  2714  01E1                     __end_of_KeyOffHandler:	
  2715                           
  2716                           	psect	text3
  2717  0175                     __ptext3:	
  2718 ;; *************** function _KeyLongHandler *****************
  2719 ;; Defined at:
  2720 ;;		line 70 in file "user_functions.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  key             1    wreg     PTR struct .
  2723 ;;		 -> Keys(20), 
  2724 ;;  chn             1   18[BANK0 ] unsigned char 
  2725 ;;  cmd             1   19[BANK0 ] unsigned char 
  2726 ;;  ticksToTrigg    1   20[BANK0 ] unsigned char 
  2727 ;;  nooData         1   21[BANK0 ] PTR unsigned char 
  2728 ;;		 -> noo_send_data(4), 
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;  key             1   11[COMMON] PTR struct .
  2731 ;;		 -> Keys(20), 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 1F/0
  2738 ;;		On exit  : 1D/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1
  2741 ;;      Params:         0       4       0
  2742 ;;      Locals:         1       0       0
  2743 ;;      Temps:          0       0       0
  2744 ;;      Totals:         1       4       0
  2745 ;;Total ram usage:        5 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    1
  2748 ;; This function calls:
  2749 ;;		_noolite_send
  2750 ;; This function is called by:
  2751 ;;		_main
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function _KeyLongHandler
  2757  0175                     _KeyLongHandler:	
  2758                           
  2759                           ;incstack = 0
  2760                           ; Regs used in _KeyLongHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2761                           ;KeyLongHandler@key stored from wreg
  2762  0175  00FB               	movwf	KeyLongHandler@key
  2763                           
  2764                           ;user_functions.c: 71: if (key->State != 0) {
  2765  0176  0086               	movwf	6
  2766  0177  0187               	clrf	7
  2767  0178  0801               	movf	1,w
  2768  0179  1903               	btfsc	3,2
  2769  017A  299B               	goto	l1739
  2770                           
  2771                           ;user_functions.c: 72: if (key->Tick100ms > ticksToTrigger) {
  2772  017B  087B               	movf	KeyLongHandler@key,w
  2773  017C  3E02               	addlw	2
  2774  017D  0086               	movwf	6
  2775  017E  0801               	movf	1,w
  2776  017F  0257               	subwf	KeyLongHandler@ticksToTrigger,w
  2777                           
  2778                           ;user_functions.c: 73: if (key->FirstCmdSent == 0) {
  2779  0180  087B               	movf	KeyLongHandler@key,w
  2780  0181  1803               	skipnc
  2781  0182  2996               	goto	L5
  2782  0183  3E03               	addlw	3
  2783  0184  0086               	movwf	6
  2784  0185  0801               	movf	1,w
  2785  0186  1D03               	btfss	3,2
  2786  0187  2995               	goto	l1737
  2787                           
  2788                           ;user_functions.c: 74: noolite_send(chn, cmd, 0, &nooData[0]);
  2789  0188  0856               	movf	KeyLongHandler@cmd,w
  2790  0189  00F0               	movwf	noolite_send@noo_send_command
  2791  018A  01F1               	clrf	noolite_send@noo_send_format
  2792  018B  0858               	movf	KeyLongHandler@nooData,w
  2793  018C  00F2               	movwf	noolite_send@data
  2794  018D  0855               	movf	KeyLongHandler@chn,w
  2795  018E  2305               	fcall	_noolite_send
  2796                           
  2797                           ;user_functions.c: 75: key->FirstCmdSent = 1;
  2798  018F  087B               	movf	KeyLongHandler@key,w
  2799  0190  3E03               	addlw	3
  2800  0191  0086               	movwf	6
  2801  0192  0187               	clrf	7
  2802  0193  0181               	clrf	1
  2803  0194  0A81               	incf	1,f
  2804  0195                     l1737:	
  2805                           
  2806                           ;user_functions.c: 76: }
  2807                           ;user_functions.c: 77: }
  2808                           ;user_functions.c: 78: key->Tick100ms++;
  2809  0195  087B               	movf	KeyLongHandler@key,w
  2810  0196                     L5:	
  2811  0196  3E02               	addlw	2
  2812  0197  0086               	movwf	6
  2813  0198  0187               	clrf	7
  2814  0199  0A81               	incf	1,f
  2815                           
  2816                           ;user_functions.c: 79: } else {
  2817  019A  0008               	return
  2818  019B                     l1739:	
  2819                           
  2820                           ;user_functions.c: 80: key->Tick100ms = 0;
  2821  019B  087B               	movf	KeyLongHandler@key,w
  2822  019C  3E02               	addlw	2
  2823  019D  0086               	movwf	6
  2824  019E  0187               	clrf	7
  2825  019F  0181               	clrf	1
  2826  01A0  0008               	return
  2827  01A1                     __end_of_KeyLongHandler:	
  2828                           
  2829                           	psect	text4
  2830  0305                     __ptext4:	
  2831 ;; *************** function _noolite_send *****************
  2832 ;; Defined at:
  2833 ;;		line 174 in file "noolite.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  chn             1    wreg     unsigned char 
  2836 ;;  noo_send_com    1    0[COMMON] unsigned char 
  2837 ;;  noo_send_for    1    1[COMMON] unsigned char 
  2838 ;;  data            1    2[COMMON] PTR unsigned char 
  2839 ;;		 -> noo_send_data(4), 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  chn             1   14[BANK0 ] unsigned char 
  2842 ;;  noo_send_buf   12    0[BANK0 ] unsigned char [12]
  2843 ;;  endpos          1   17[BANK0 ] unsigned char 
  2844 ;;  temp_send       1   16[BANK0 ] unsigned char 
  2845 ;;  countsend       1   15[BANK0 ] unsigned char 
  2846 ;;  countbit        1   13[BANK0 ] unsigned char 
  2847 ;;  startpos        1   12[BANK0 ] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 1F/2
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMMON   BANK0   BANK1
  2857 ;;      Params:         3       0       0
  2858 ;;      Locals:         0      18       0
  2859 ;;      Temps:          8       0       0
  2860 ;;      Totals:        11      18       0
  2861 ;;Total ram usage:       29 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; This function calls:
  2864 ;;		Nothing
  2865 ;; This function is called by:
  2866 ;;		_main
  2867 ;;		_KeyOffHandler
  2868 ;;		_KeyLongHandler
  2869 ;; This function uses a non-reentrant model
  2870 ;;
  2871                           
  2872                           
  2873                           ;psect for function _noolite_send
  2874  0305                     _noolite_send:	
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in _noolite_send: [wreg+fsr1l+fsr1h+status,2+status,0]
  2878                           ;noolite_send@chn stored from wreg
  2879  0305  0020               	movlb	0	; select bank0
  2880  0306  00D1               	movwf	noolite_send@chn
  2881  0307  0064               	clrwdt	;# 
  2882                           
  2883                           ;noolite.c: 185: tx_status ^= (1<<1);
  2884  0308  3002               	movlw	2
  2885  0309  0020               	movlb	0	; select bank0
  2886  030A  06AA               	xorwf	_tx_status,f
  2887                           
  2888                           ;noolite.c: 188: if (noo_send_command < 16) {
  2889  030B  3010               	movlw	16
  2890  030C  0270               	subwf	noolite_send@noo_send_command,w
  2891  030D  1803               	skipnc
  2892  030E  2B1B               	goto	l1417
  2893                           
  2894                           ;noolite.c: 189: startpos = 10;
  2895  030F  300A               	movlw	10
  2896  0310  00CF               	movwf	noolite_send@startpos
  2897                           
  2898                           ;noolite.c: 190: noo_send_buffer[1] = (noo_send_command << 4) | (1 << 2);
  2899  0311  0E70               	swapf	noolite_send@noo_send_command,w
  2900  0312  39F0               	andlw	240
  2901  0313  3804               	iorlw	4
  2902  0314  00C4               	movwf	noolite_send@noo_send_buffer+1
  2903                           
  2904                           ;noolite.c: 191: if (((tx_status & (1<<1)) != 0)) {
  2905  0315  1CAA               	btfss	_tx_status,1
  2906  0316  2B19               	goto	l183
  2907                           
  2908                           ;noolite.c: 192: noo_send_buffer[1] |= (1<<3);
  2909  0317  15C4               	bsf	noolite_send@noo_send_buffer+1,3
  2910                           
  2911                           ;noolite.c: 193: } else {
  2912  0318  2B27               	goto	l185
  2913  0319                     l183:	
  2914                           
  2915                           ;noolite.c: 194: noo_send_buffer[1] &= (~(1<<3));
  2916  0319  11C4               	bcf	noolite_send@noo_send_buffer+1,3
  2917  031A  2B27               	goto	l185
  2918  031B                     l1417:	
  2919                           
  2920                           ;noolite.c: 197: startpos = 6;
  2921  031B  3006               	movlw	6
  2922  031C  00CF               	movwf	noolite_send@startpos
  2923                           
  2924                           ;noolite.c: 198: noo_send_buffer[0] = (1 << 6);
  2925  031D  3040               	movlw	64
  2926  031E  00C3               	movwf	noolite_send@noo_send_buffer
  2927                           
  2928                           ;noolite.c: 199: if (((tx_status & (1<<1)) != 0)) {
  2929  031F  1CAA               	btfss	_tx_status,1
  2930  0320  2B23               	goto	l186
  2931                           
  2932                           ;noolite.c: 200: noo_send_buffer[0] |= (1<<7);
  2933  0321  17C3               	bsf	noolite_send@noo_send_buffer,7
  2934                           
  2935                           ;noolite.c: 201: } else {
  2936  0322  2B24               	goto	l1423
  2937  0323                     l186:	
  2938                           
  2939                           ;noolite.c: 202: noo_send_buffer[0] &= (~(1<<7));
  2940  0323  13C3               	bcf	noolite_send@noo_send_buffer,7
  2941  0324                     l1423:	
  2942                           
  2943                           ;noolite.c: 203: };
  2944                           ;noolite.c: 204: noo_send_buffer[1] = noo_send_command;
  2945  0324  0870               	movf	noolite_send@noo_send_command,w
  2946  0325  00C4               	movwf	noolite_send@noo_send_buffer+1
  2947                           
  2948                           ;noolite.c: 205: noo_send_format = noo_send_format | 4;
  2949  0326  1571               	bsf	noolite_send@noo_send_format,2
  2950  0327                     l185:	
  2951                           
  2952                           ;noolite.c: 206: }
  2953                           ;noolite.c: 207: endpos = 2;
  2954  0327  3002               	movlw	2
  2955  0328  00D4               	movwf	noolite_send@endpos
  2956                           
  2957                           ;noolite.c: 208: temp_send = noo_send_format & 3;
  2958  0329  0871               	movf	noolite_send@noo_send_format,w
  2959  032A  00D3               	movwf	noolite_send@temp_send
  2960  032B  3003               	movlw	3
  2961  032C  05D3               	andwf	noolite_send@temp_send,f
  2962                           
  2963                           ;noolite.c: 209: if (temp_send == 1) {
  2964  032D  0B53               	decfsz	noolite_send@temp_send,w
  2965  032E  2B36               	goto	l1435
  2966                           
  2967                           ;noolite.c: 211: noo_send_buffer[2] = data[0];
  2968  032F  0872               	movf	noolite_send@data,w
  2969  0330  0086               	movwf	6
  2970  0331  0187               	clrf	7
  2971  0332  0801               	movf	1,w
  2972  0333  00C5               	movwf	noolite_send@noo_send_buffer+2
  2973                           
  2974                           ;noolite.c: 212: endpos++;
  2975  0334  0AD4               	incf	noolite_send@endpos,f
  2976                           
  2977                           ;noolite.c: 213: } else if (temp_send == 3) {
  2978  0335  2B4D               	goto	l1441
  2979  0336                     l1435:	
  2980  0336  3003               	movlw	3
  2981  0337  0653               	xorwf	noolite_send@temp_send,w
  2982  0338  1D03               	btfss	3,2
  2983  0339  2B4D               	goto	l1441
  2984                           
  2985                           ;noolite.c: 218: noo_send_buffer[2] = data[0];
  2986  033A  0872               	movf	noolite_send@data,w
  2987  033B  0086               	movwf	6
  2988  033C  0187               	clrf	7
  2989  033D  0801               	movf	1,w
  2990  033E  00C5               	movwf	noolite_send@noo_send_buffer+2
  2991                           
  2992                           ;noolite.c: 219: noo_send_buffer[3] = data[1];
  2993  033F  0872               	movf	noolite_send@data,w
  2994  0340  0086               	movwf	6
  2995  0341  3F41               	moviw [1]fsr1
  2996  0342  00C6               	movwf	noolite_send@noo_send_buffer+3
  2997                           
  2998                           ;noolite.c: 220: noo_send_buffer[4] = data[2];
  2999  0343  0872               	movf	noolite_send@data,w
  3000  0344  0086               	movwf	6
  3001  0345  3F42               	moviw [2]fsr1
  3002  0346  00C7               	movwf	noolite_send@noo_send_buffer+4
  3003                           
  3004                           ;noolite.c: 221: noo_send_buffer[5] = data[3];
  3005  0347  0872               	movf	noolite_send@data,w
  3006  0348  0086               	movwf	6
  3007  0349  3F43               	moviw [3]fsr1
  3008  034A  00C8               	movwf	noolite_send@noo_send_buffer+5
  3009                           
  3010                           ;noolite.c: 222: endpos += 4;
  3011  034B  3004               	movlw	4
  3012  034C  07D4               	addwf	noolite_send@endpos,f
  3013  034D                     l1441:	
  3014                           
  3015                           ;noolite.c: 223: }
  3016                           ;noolite.c: 224: if (noo_address_type != 0) {
  3017  034D  0824               	movf	_noo_address_type,w
  3018  034E  1903               	btfsc	3,2
  3019  034F  2BB7               	goto	l1457
  3020                           
  3021                           ;noolite.c: 225: noo_send_format = noo_send_format | 0x10;
  3022  0350  1671               	bsf	noolite_send@noo_send_format,4
  3023                           
  3024                           ;noolite.c: 226: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3025  0351  0854               	movf	noolite_send@endpos,w
  3026  0352  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3027  0353  0086               	movwf	6
  3028  0354  0187               	clrf	7
  3029  0355  0851               	movf	noolite_send@chn,w
  3030  0356  0720               	addwf	_startaddress,w
  3031  0357  0081               	movwf	1
  3032                           
  3033                           ;noolite.c: 227: endpos++;
  3034  0358  0AD4               	incf	noolite_send@endpos,f
  3035                           
  3036                           ;noolite.c: 228: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3037  0359  0854               	movf	noolite_send@endpos,w
  3038  035A  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3039  035B  0086               	movwf	6
  3040  035C  0820               	movf	_startaddress,w
  3041  035D  00F3               	movwf	??_noolite_send
  3042  035E  0821               	movf	_startaddress+1,w
  3043  035F  00F4               	movwf	??_noolite_send+1
  3044  0360  0822               	movf	_startaddress+2,w
  3045  0361  00F5               	movwf	??_noolite_send+2
  3046  0362  0823               	movf	_startaddress+3,w
  3047  0363  00F6               	movwf	??_noolite_send+3
  3048  0364  0851               	movf	noolite_send@chn,w
  3049  0365  00F7               	movwf	??_noolite_send+4
  3050  0366  01F8               	clrf	??_noolite_send+5
  3051  0367  01F9               	clrf	??_noolite_send+6
  3052  0368  01FA               	clrf	??_noolite_send+7
  3053  0369  07F3               	addwf	??_noolite_send,f
  3054  036A  0878               	movf	??_noolite_send+5,w
  3055  036B  3DF4               	addwfc	??_noolite_send+1,f
  3056  036C  0879               	movf	??_noolite_send+6,w
  3057  036D  3DF5               	addwfc	??_noolite_send+2,f
  3058  036E  087A               	movf	??_noolite_send+7,w
  3059  036F  3DF6               	addwfc	??_noolite_send+3,f
  3060  0370  0874               	movf	??_noolite_send+1,w
  3061  0371  00F3               	movwf	??_noolite_send
  3062  0372  0875               	movf	??_noolite_send+2,w
  3063  0373  00F4               	movwf	??_noolite_send+1
  3064  0374  0876               	movf	??_noolite_send+3,w
  3065  0375  00F5               	movwf	??_noolite_send+2
  3066  0376  01F6               	clrf	??_noolite_send+3
  3067  0377  0873               	movf	??_noolite_send,w
  3068  0378  0081               	movwf	1
  3069                           
  3070                           ;noolite.c: 229: endpos++;
  3071  0379  0AD4               	incf	noolite_send@endpos,f
  3072                           
  3073                           ;noolite.c: 230: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 16);
  3074  037A  0854               	movf	noolite_send@endpos,w
  3075  037B  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3076  037C  0086               	movwf	6
  3077  037D  0820               	movf	_startaddress,w
  3078  037E  00F3               	movwf	??_noolite_send
  3079  037F  0821               	movf	_startaddress+1,w
  3080  0380  00F4               	movwf	??_noolite_send+1
  3081  0381  0822               	movf	_startaddress+2,w
  3082  0382  00F5               	movwf	??_noolite_send+2
  3083  0383  0823               	movf	_startaddress+3,w
  3084  0384  00F6               	movwf	??_noolite_send+3
  3085  0385  0851               	movf	noolite_send@chn,w
  3086  0386  00F7               	movwf	??_noolite_send+4
  3087  0387  01F8               	clrf	??_noolite_send+5
  3088  0388  01F9               	clrf	??_noolite_send+6
  3089  0389  01FA               	clrf	??_noolite_send+7
  3090  038A  07F3               	addwf	??_noolite_send,f
  3091  038B  0878               	movf	??_noolite_send+5,w
  3092  038C  3DF4               	addwfc	??_noolite_send+1,f
  3093  038D  0879               	movf	??_noolite_send+6,w
  3094  038E  3DF5               	addwfc	??_noolite_send+2,f
  3095  038F  087A               	movf	??_noolite_send+7,w
  3096  0390  3DF6               	addwfc	??_noolite_send+3,f
  3097  0391  0875               	movf	??_noolite_send+2,w
  3098  0392  00F3               	movwf	??_noolite_send
  3099  0393  0876               	movf	??_noolite_send+3,w
  3100  0394  00F4               	movwf	??_noolite_send+1
  3101  0395  01F5               	clrf	??_noolite_send+2
  3102  0396  01F6               	clrf	??_noolite_send+3
  3103  0397  0873               	movf	??_noolite_send,w
  3104  0398  0081               	movwf	1
  3105                           
  3106                           ;noolite.c: 231: endpos++;
  3107  0399  0AD4               	incf	noolite_send@endpos,f
  3108                           
  3109                           ;noolite.c: 232: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 24);
  3110  039A  0854               	movf	noolite_send@endpos,w
  3111  039B  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3112  039C  0086               	movwf	6
  3113  039D  0820               	movf	_startaddress,w
  3114  039E  00F3               	movwf	??_noolite_send
  3115  039F  0821               	movf	_startaddress+1,w
  3116  03A0  00F4               	movwf	??_noolite_send+1
  3117  03A1  0822               	movf	_startaddress+2,w
  3118  03A2  00F5               	movwf	??_noolite_send+2
  3119  03A3  0823               	movf	_startaddress+3,w
  3120  03A4  00F6               	movwf	??_noolite_send+3
  3121  03A5  0851               	movf	noolite_send@chn,w
  3122  03A6  00F7               	movwf	??_noolite_send+4
  3123  03A7  01F8               	clrf	??_noolite_send+5
  3124  03A8  01F9               	clrf	??_noolite_send+6
  3125  03A9  01FA               	clrf	??_noolite_send+7
  3126  03AA  07F3               	addwf	??_noolite_send,f
  3127  03AB  0878               	movf	??_noolite_send+5,w
  3128  03AC  3DF4               	addwfc	??_noolite_send+1,f
  3129  03AD  0879               	movf	??_noolite_send+6,w
  3130  03AE  3DF5               	addwfc	??_noolite_send+2,f
  3131  03AF  087A               	movf	??_noolite_send+7,w
  3132  03B0  3DF6               	addwfc	??_noolite_send+3,f
  3133  03B1  0876               	movf	??_noolite_send+3,w
  3134  03B2  00F3               	movwf	??_noolite_send
  3135  03B3  01F4               	clrf	??_noolite_send+1
  3136  03B4  01F5               	clrf	??_noolite_send+2
  3137  03B5  01F6               	clrf	??_noolite_send+3
  3138  03B6  2BDE               	goto	L6
  3139  03B7                     l1457:	
  3140                           ;noolite.c: 234: } else {
  3141                           
  3142                           ;noolite.c: 233: endpos++;
  3143                           
  3144                           
  3145                           ;noolite.c: 235: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3146  03B7  0854               	movf	noolite_send@endpos,w
  3147  03B8  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3148  03B9  0086               	movwf	6
  3149  03BA  0187               	clrf	7
  3150  03BB  0851               	movf	noolite_send@chn,w
  3151  03BC  0720               	addwf	_startaddress,w
  3152  03BD  0081               	movwf	1
  3153                           
  3154                           ;noolite.c: 236: endpos++;
  3155  03BE  0AD4               	incf	noolite_send@endpos,f
  3156                           
  3157                           ;noolite.c: 237: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3158  03BF  0854               	movf	noolite_send@endpos,w
  3159  03C0  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3160  03C1  0086               	movwf	6
  3161  03C2  0820               	movf	_startaddress,w
  3162  03C3  00F3               	movwf	??_noolite_send
  3163  03C4  0821               	movf	_startaddress+1,w
  3164  03C5  00F4               	movwf	??_noolite_send+1
  3165  03C6  0822               	movf	_startaddress+2,w
  3166  03C7  00F5               	movwf	??_noolite_send+2
  3167  03C8  0823               	movf	_startaddress+3,w
  3168  03C9  00F6               	movwf	??_noolite_send+3
  3169  03CA  0851               	movf	noolite_send@chn,w
  3170  03CB  00F7               	movwf	??_noolite_send+4
  3171  03CC  01F8               	clrf	??_noolite_send+5
  3172  03CD  01F9               	clrf	??_noolite_send+6
  3173  03CE  01FA               	clrf	??_noolite_send+7
  3174  03CF  07F3               	addwf	??_noolite_send,f
  3175  03D0  0878               	movf	??_noolite_send+5,w
  3176  03D1  3DF4               	addwfc	??_noolite_send+1,f
  3177  03D2  0879               	movf	??_noolite_send+6,w
  3178  03D3  3DF5               	addwfc	??_noolite_send+2,f
  3179  03D4  087A               	movf	??_noolite_send+7,w
  3180  03D5  3DF6               	addwfc	??_noolite_send+3,f
  3181  03D6  0874               	movf	??_noolite_send+1,w
  3182  03D7  00F3               	movwf	??_noolite_send
  3183  03D8  0875               	movf	??_noolite_send+2,w
  3184  03D9  00F4               	movwf	??_noolite_send+1
  3185  03DA  0876               	movf	??_noolite_send+3,w
  3186  03DB  00F5               	movwf	??_noolite_send+2
  3187  03DC  01F6               	clrf	??_noolite_send+3
  3188  03DD  0873               	movf	??_noolite_send,w
  3189  03DE                     L6:	
  3190  03DE  0081               	movwf	1
  3191                           
  3192                           ;noolite.c: 238: endpos++;
  3193  03DF  0AD4               	incf	noolite_send@endpos,f
  3194                           
  3195                           ;noolite.c: 239: }
  3196                           ;noolite.c: 240: noo_send_buffer[endpos] = noo_send_format;
  3197  03E0  0854               	movf	noolite_send@endpos,w
  3198  03E1  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3199  03E2  0086               	movwf	6
  3200  03E3  0187               	clrf	7
  3201  03E4  0871               	movf	noolite_send@noo_send_format,w
  3202  03E5  0081               	movwf	1
  3203                           
  3204                           ;noolite.c: 241: endpos++;
  3205  03E6  0AD4               	incf	noolite_send@endpos,f
  3206                           
  3207                           ;noolite.c: 242: temp_send = 0;
  3208  03E7  01D3               	clrf	noolite_send@temp_send
  3209                           
  3210                           ;noolite.c: 243: countbit = (unsigned char) (endpos * 8);
  3211  03E8  0854               	movf	noolite_send@endpos,w
  3212  03E9  0709               	addwf	9,w
  3213  03EA  0709               	addwf	9,w
  3214  03EB  0709               	addwf	9,w
  3215  03EC  00D0               	movwf	noolite_send@countbit
  3216                           
  3217                           ;noolite.c: 244: countsend = startpos + 1;
  3218  03ED  084F               	movf	noolite_send@startpos,w
  3219  03EE  3E01               	addlw	1
  3220  03EF  00D2               	movwf	noolite_send@countsend
  3221  03F0                     l1495:	
  3222                           ;noolite.c: 245: while (countsend < countbit) {
  3223                           
  3224  03F0  0020               	movlb	0	; select bank0
  3225  03F1  0850               	movf	noolite_send@countbit,w
  3226  03F2  0252               	subwf	noolite_send@countsend,w
  3227  03F3  1803               	btfsc	3,0
  3228  03F4  2C1A               	goto	l1497
  3229                           
  3230                           ;noolite.c: 246: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3231  03F5  0852               	movf	noolite_send@countsend,w
  3232  03F6  00F3               	movwf	??_noolite_send
  3233  03F7  36F3               	lsrf	??_noolite_send,f
  3234  03F8  36F3               	lsrf	??_noolite_send,f
  3235  03F9  36F3               	lsrf	??_noolite_send,f
  3236  03FA  0873               	movf	??_noolite_send,w
  3237  03FB  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3238  03FC  0086               	movwf	6
  3239  03FD  3001               	movlw	1
  3240  03FE  0187               	clrf	7
  3241  03FF  00F4               	movwf	??_noolite_send+1
  3242  0400  0852               	movf	noolite_send@countsend,w
  3243  0401  3907               	andlw	7
  3244  0402  0A89               	incf	9,f
  3245  0403  2C05               	goto	u834
  3246  0404                     u835:	
  3247  0404  35F4               	lslf	??_noolite_send+1,f
  3248  0405                     u834:	
  3249  0405  0B89               	decfsz	9,f
  3250  0406  2C04               	goto	u835
  3251  0407  0874               	movf	??_noolite_send+1,w
  3252  0408  0501               	andwf	1,w
  3253  0409  1903               	btfsc	3,2
  3254  040A  2C0D               	goto	l1477
  3255                           
  3256                           ;noolite.c: 247: temp_send = temp_send^0x01;
  3257  040B  3001               	movlw	1
  3258  040C  06D3               	xorwf	noolite_send@temp_send,f
  3259  040D                     l1477:	
  3260                           
  3261                           ;noolite.c: 248: }
  3262                           ;noolite.c: 249: tx_status &= (~(1<<4));
  3263  040D  122A               	bcf	_tx_status,4
  3264                           
  3265                           ;noolite.c: 250: if (((temp_send & (1<<0)) != 0)) {
  3266  040E  1C53               	btfss	noolite_send@temp_send,0
  3267  040F  2C13               	goto	l1485
  3268                           
  3269                           ;noolite.c: 251: temp_send = temp_send^0x18;
  3270  0410  3018               	movlw	24
  3271  0411  06D3               	xorwf	noolite_send@temp_send,f
  3272                           
  3273                           ;noolite.c: 252: tx_status |= (1<<4);
  3274  0412  162A               	bsf	_tx_status,4
  3275  0413                     l1485:	
  3276                           
  3277                           ;noolite.c: 253: }
  3278                           ;noolite.c: 254: temp_send = temp_send >> 1;
  3279  0413  36D3               	lsrf	noolite_send@temp_send,f
  3280                           
  3281                           ;noolite.c: 255: temp_send &= (~(1<<7));
  3282  0414  13D3               	bcf	noolite_send@temp_send,7
  3283                           
  3284                           ;noolite.c: 256: if (((tx_status & (1<<4)) != 0)) {
  3285  0415  1A2A               	btfsc	_tx_status,4
  3286                           
  3287                           ;noolite.c: 257: temp_send |= (1<<7);
  3288  0416  17D3               	bsf	noolite_send@temp_send,7
  3289                           
  3290                           ;noolite.c: 258: }
  3291                           ;noolite.c: 259: countsend++;
  3292  0417  0AD2               	incf	noolite_send@countsend,f
  3293  0418  0064               	clrwdt	;# 
  3294  0419  2BF0               	goto	l1495
  3295  041A                     l1497:	
  3296                           
  3297                           ;noolite.c: 261: }
  3298                           ;noolite.c: 262: noo_send_buffer[endpos] = temp_send;
  3299  041A  0854               	movf	noolite_send@endpos,w
  3300  041B  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3301  041C  0086               	movwf	6
  3302  041D  0187               	clrf	7
  3303  041E  0853               	movf	noolite_send@temp_send,w
  3304  041F  0081               	movwf	1
  3305  0420  30C0               	movlw	192
  3306                           
  3307                           ;noolite.c: 263: endpos++;
  3308  0421  0AD4               	incf	noolite_send@endpos,f
  3309                           
  3310                           ;noolite.c: 264: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3311  0422  0021               	movlb	1	; select bank1
  3312  0423  0595               	andwf	21,f	;volatile
  3313  0424  3003               	movlw	3
  3314  0425  0495               	iorwf	21,f	;volatile
  3315                           
  3316                           ;noolite.c: 265: temp_send = 3;
  3317  0426  0020               	movlb	0	; select bank0
  3318  0427  00D3               	movwf	noolite_send@temp_send
  3319  0428  3026               	movlw	38
  3320                           
  3321                           ;noolite.c: 266: tx_status &= (~(1<<2));
  3322  0429  112A               	bcf	_tx_status,2
  3323                           
  3324                           ;noolite.c: 267: tx_status &= (~(1<<3));
  3325  042A  11AA               	bcf	_tx_status,3
  3326                           
  3327                           ;noolite.c: 268: tx_status |= (1<<0);
  3328  042B  142A               	bsf	_tx_status,0
  3329                           
  3330                           ;noolite.c: 269: tx_status |= (1<<5);
  3331  042C  16AA               	bsf	_tx_status,5
  3332                           
  3333                           ;noolite.c: 270: countsend = 0;
  3334  042D  01D2               	clrf	noolite_send@countsend
  3335                           
  3336                           ;noolite.c: 271: countbit = 38;
  3337  042E  00D0               	movwf	noolite_send@countbit
  3338  042F  0064               	clrwdt	;# 
  3339                           
  3340                           ;noolite.c: 273: LATCbits.LATC3 = 1;
  3341  0430  0022               	movlb	2	; select bank2
  3342  0431  158E               	bsf	14,3	;volatile
  3343                           
  3344                           ;noolite.c: 274: _delay((unsigned long)((15)*(8000000/4000.0)));
  3345  0432  3027               	movlw	39
  3346  0433  00F3               	movwf	??_noolite_send
  3347  0434  30F5               	movlw	245
  3348  0435                     u1647:	
  3349  0435  0B89               	decfsz	9,f
  3350  0436  2C35               	goto	u1647
  3351  0437  0BF3               	decfsz	??_noolite_send,f
  3352  0438  2C35               	goto	u1647
  3353  0439  0000               	nop
  3354                           
  3355                           ;noolite.c: 275: LATCbits.LATC3 = 0;
  3356  043A  0022               	movlb	2	; select bank2
  3357  043B  118E               	bcf	14,3	;volatile
  3358                           
  3359                           ;noolite.c: 276: TMR0 = 196;
  3360  043C  30C4               	movlw	196
  3361  043D  0020               	movlb	0	; select bank0
  3362  043E  0095               	movwf	21	;volatile
  3363                           
  3364                           ;noolite.c: 277: TMR0IF = 0;
  3365  043F  110B               	bcf	11,2	;volatile
  3366                           
  3367                           ;noolite.c: 278: TMR0IE = 0;
  3368  0440  128B               	bcf	11,5	;volatile
  3369  0441                     l199:	
  3370                           ;noolite.c: 279: while (((tx_status & (1<<3)) == 0)) {
  3371                           
  3372  0441  19AA               	btfsc	_tx_status,3
  3373  0442  2C9B               	goto	l210
  3374                           
  3375                           ;noolite.c: 280: if (TMR0IF) {
  3376  0443  1D0B               	btfss	11,2	;volatile
  3377  0444  2C41               	goto	l199
  3378                           
  3379                           ;noolite.c: 281: __nop();
  3380  0445  0000               	nop
  3381                           
  3382                           ;noolite.c: 282: if (countsend < countbit) {
  3383  0446  0020               	movlb	0	; select bank0
  3384  0447  0850               	movf	noolite_send@countbit,w
  3385  0448  0252               	subwf	noolite_send@countsend,w
  3386  0449  1803               	skipnc
  3387  044A  2C62               	goto	l202
  3388                           
  3389                           ;noolite.c: 283: if (((tx_status & (1<<2)) == 0)) {
  3390  044B  192A               	btfsc	_tx_status,2
  3391  044C  2C59               	goto	l1545
  3392                           
  3393                           ;noolite.c: 284: if (((tx_status & (1<<0)) == 0)) {
  3394  044D  182A               	btfsc	_tx_status,0
  3395  044E  2C52               	goto	l204
  3396                           
  3397                           ;noolite.c: 285: LATAbits.LATA5 = 1;
  3398  044F  0022               	movlb	2	; select bank2
  3399  0450  168C               	bsf	12,5	;volatile
  3400                           
  3401                           ;noolite.c: 286: } else {
  3402  0451  2C54               	goto	l1541
  3403  0452                     l204:	
  3404                           
  3405                           ;noolite.c: 287: LATAbits.LATA5 = 0;
  3406  0452  0022               	movlb	2	; select bank2
  3407  0453  128C               	bcf	12,5	;volatile
  3408  0454                     l1541:	
  3409                           
  3410                           ;noolite.c: 288: }
  3411                           ;noolite.c: 289: TMR0 = 196;
  3412  0454  30C4               	movlw	196
  3413  0455  0020               	movlb	0	; select bank0
  3414  0456  0095               	movwf	21	;volatile
  3415                           
  3416                           ;noolite.c: 290: tx_status |= (1<<2);
  3417  0457  152A               	bsf	_tx_status,2
  3418                           
  3419                           ;noolite.c: 291: } else {
  3420  0458  2C7E               	goto	l207
  3421  0459                     l1545:	
  3422                           
  3423                           ;noolite.c: 292: LATA ^= (1<<5);
  3424  0459  3020               	movlw	32
  3425  045A  0022               	movlb	2	; select bank2
  3426  045B  068C               	xorwf	12,f	;volatile
  3427                           
  3428                           ;noolite.c: 293: TMR0 = 196;
  3429  045C  30C4               	movlw	196
  3430  045D  0020               	movlb	0	; select bank0
  3431  045E  0095               	movwf	21	;volatile
  3432                           
  3433                           ;noolite.c: 294: tx_status &= (~(1<<2));
  3434  045F  112A               	bcf	_tx_status,2
  3435                           
  3436                           ;noolite.c: 295: countsend++;
  3437  0460  0AD2               	incf	noolite_send@countsend,f
  3438  0461  2C7E               	goto	l207
  3439  0462                     l202:	
  3440                           
  3441                           ;noolite.c: 298: LATAbits.LATA5 = 0;
  3442  0462  0022               	movlb	2	; select bank2
  3443  0463  128C               	bcf	12,5	;volatile
  3444                           
  3445                           ;noolite.c: 299: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3446  0464  30C0               	movlw	192
  3447  0465  0021               	movlb	1	; select bank1
  3448  0466  0595               	andwf	21,f	;volatile
  3449  0467  3003               	movlw	3
  3450  0468  0495               	iorwf	21,f	;volatile
  3451                           
  3452                           ;noolite.c: 300: TMR0 = 67;
  3453  0469  3043               	movlw	67
  3454  046A  0020               	movlb	0	; select bank0
  3455  046B  0095               	movwf	21	;volatile
  3456  046C  0064               	clrwdt	;# 
  3457                           
  3458                           ;noolite.c: 302: tx_status &= (~(1<<5));
  3459  046D  0020               	movlb	0	; select bank0
  3460  046E  12AA               	bcf	_tx_status,5
  3461                           
  3462                           ;noolite.c: 303: countsend = startpos;
  3463  046F  084F               	movf	noolite_send@startpos,w
  3464  0470  00D2               	movwf	noolite_send@countsend
  3465                           
  3466                           ;noolite.c: 304: countbit = endpos * 8;
  3467  0471  0854               	movf	noolite_send@endpos,w
  3468  0472  0709               	addwf	9,w
  3469  0473  0709               	addwf	9,w
  3470  0474  0709               	addwf	9,w
  3471  0475  00D0               	movwf	noolite_send@countbit
  3472                           
  3473                           ;noolite.c: 305: if (temp_send != 0) {
  3474  0476  0853               	movf	noolite_send@temp_send,w
  3475  0477  1903               	btfsc	3,2
  3476  0478  2C7B               	goto	l1561
  3477                           
  3478                           ;noolite.c: 306: temp_send--;
  3479  0479  03D3               	decf	noolite_send@temp_send,f
  3480                           
  3481                           ;noolite.c: 307: } else {
  3482  047A  2C7E               	goto	l207
  3483  047B                     l1561:	
  3484                           
  3485                           ;noolite.c: 308: TMR0 = 0;
  3486  047B  0195               	clrf	21	;volatile
  3487                           
  3488                           ;noolite.c: 309: tx_status |= (1<<3);
  3489  047C  15AA               	bsf	_tx_status,3
  3490                           
  3491                           ;noolite.c: 310: break;
  3492  047D  2C9B               	goto	l210
  3493  047E                     l207:	
  3494                           
  3495                           ;noolite.c: 311: }
  3496                           ;noolite.c: 312: }
  3497                           ;noolite.c: 313: if (((tx_status & (1<<5)) == 0)) {
  3498  047E  1AAA               	btfsc	_tx_status,5
  3499  047F  2C99               	goto	l211
  3500                           
  3501                           ;noolite.c: 314: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3502  0480  0852               	movf	noolite_send@countsend,w
  3503  0481  00F3               	movwf	??_noolite_send
  3504  0482  36F3               	lsrf	??_noolite_send,f
  3505  0483  36F3               	lsrf	??_noolite_send,f
  3506  0484  36F3               	lsrf	??_noolite_send,f
  3507  0485  0873               	movf	??_noolite_send,w
  3508  0486  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3509  0487  0086               	movwf	6
  3510  0488  3001               	movlw	1
  3511  0489  0187               	clrf	7
  3512  048A  00F4               	movwf	??_noolite_send+1
  3513  048B  0852               	movf	noolite_send@countsend,w
  3514  048C  3907               	andlw	7
  3515  048D  0A89               	incf	9,f
  3516  048E  2C90               	goto	u944
  3517  048F                     u945:	
  3518  048F  35F4               	lslf	??_noolite_send+1,f
  3519  0490                     u944:	
  3520  0490  0B89               	decfsz	9,f
  3521  0491  2C8F               	goto	u945
  3522  0492  0874               	movf	??_noolite_send+1,w
  3523  0493  0501               	andwf	1,w
  3524  0494  1903               	btfsc	3,2
  3525  0495  2C98               	goto	l212
  3526                           
  3527                           ;noolite.c: 315: tx_status |= (1<<0);
  3528  0496  142A               	bsf	_tx_status,0
  3529                           
  3530                           ;noolite.c: 316: } else {
  3531  0497  2C99               	goto	l211
  3532  0498                     l212:	
  3533                           
  3534                           ;noolite.c: 317: tx_status &= (~(1<<0));
  3535  0498  102A               	bcf	_tx_status,0
  3536  0499                     l211:	
  3537                           
  3538                           ;noolite.c: 318: }
  3539                           ;noolite.c: 319: }
  3540                           ;noolite.c: 320: TMR0IF = 0;
  3541  0499  110B               	bcf	11,2	;volatile
  3542  049A  2C41               	goto	l199
  3543  049B                     l210:	
  3544                           
  3545                           ;noolite.c: 321: }
  3546                           ;noolite.c: 322: }
  3547                           ;noolite.c: 323: TMR0IF = 0;
  3548  049B  110B               	bcf	11,2	;volatile
  3549                           
  3550                           ;noolite.c: 324: LATAbits.LATA5 = 0;
  3551  049C  0022               	movlb	2	; select bank2
  3552  049D  128C               	bcf	12,5	;volatile
  3553  049E  0008               	return
  3554  049F                     __end_of_noolite_send:	
  3555                           
  3556                           	psect	text5
  3557  0157                     __ptext5:	
  3558 ;; *************** function _Init_TypeFromFlash *****************
  3559 ;; Defined at:
  3560 ;;		line 22 in file "user_functions.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  type            2    0[COMMON] PTR const unsigned int 
  3563 ;;		 -> Type(16), 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      unsigned char 
  3568 ;; Registers used:
  3569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/2
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1
  3575 ;;      Params:         2       0       0
  3576 ;;      Locals:         0       0       0
  3577 ;;      Temps:          2       0       0
  3578 ;;      Totals:         4       0       0
  3579 ;;Total ram usage:        4 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           
  3589                           ;psect for function _Init_TypeFromFlash
  3590  0157                     _Init_TypeFromFlash:	
  3591                           
  3592                           ;user_functions.c: 23: if (((type[0] >> 8) == 0x5A) && ((type[0] & 0xFF) < 4)) {
  3593                           
  3594                           ;incstack = 0
  3595                           ; Regs used in _Init_TypeFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3596  0157  0870               	movf	Init_TypeFromFlash@type,w
  3597  0158  0084               	movwf	4
  3598  0159  0871               	movf	Init_TypeFromFlash@type+1,w
  3599  015A  0085               	movwf	5
  3600  015B  3F00               	moviw [0]fsr0
  3601  015C  00F2               	movwf	??_Init_TypeFromFlash
  3602  015D  3F01               	moviw [1]fsr0
  3603  015E  00F3               	movwf	??_Init_TypeFromFlash+1
  3604  015F  00F2               	movwf	??_Init_TypeFromFlash
  3605  0160  305A               	movlw	90
  3606  0161  01F3               	clrf	??_Init_TypeFromFlash+1
  3607  0162  0672               	xorwf	??_Init_TypeFromFlash,w
  3608  0163  1D03               	btfss	3,2
  3609  0164  3400               	retlw	0
  3610  0165  0870               	movf	Init_TypeFromFlash@type,w
  3611  0166  0084               	movwf	4
  3612  0167  0871               	movf	Init_TypeFromFlash@type+1,w
  3613  0168  0085               	movwf	5
  3614  0169  0800               	movf	0,w	;code access
  3615  016A  00F2               	movwf	??_Init_TypeFromFlash
  3616  016B  3004               	movlw	4
  3617  016C  0272               	subwf	??_Init_TypeFromFlash,w
  3618  016D  1803               	skipnc
  3619  016E  3400               	retlw	0
  3620                           
  3621                           ;user_functions.c: 24: return (type[0] & 0xFF);
  3622  016F  0870               	movf	Init_TypeFromFlash@type,w
  3623  0170  0084               	movwf	4
  3624  0171  0871               	movf	Init_TypeFromFlash@type+1,w
  3625  0172  0085               	movwf	5
  3626  0173  0800               	movf	0,w	;code access
  3627  0174  0008               	return
  3628  0175                     __end_of_Init_TypeFromFlash:	
  3629                           ;user_functions.c: 26: return 0;
  3630                           
  3631                           
  3632                           	psect	text6
  3633  026C                     __ptext6:	
  3634 ;; *************** function _Init_TxStatusFromFlash *****************
  3635 ;; Defined at:
  3636 ;;		line 30 in file "user_functions.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  txStatus        2    0[COMMON] PTR const unsigned int 
  3639 ;;		 -> TxStatus(16), 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  cellNum         1    8[COMMON] unsigned char 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      unsigned char 
  3644 ;; Registers used:
  3645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3646 ;; Tracked objects:
  3647 ;;		On entry : 1F/0
  3648 ;;		On exit  : 1F/0
  3649 ;;		Unchanged: 1F/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1
  3651 ;;      Params:         2       0       0
  3652 ;;      Locals:         1       0       0
  3653 ;;      Temps:          6       0       0
  3654 ;;      Totals:         9       0       0
  3655 ;;Total ram usage:        9 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _Init_TxStatusFromFlash
  3666  026C                     _Init_TxStatusFromFlash:	
  3667                           
  3668                           ;user_functions.c: 31: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _Init_TxStatusFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3672  026C  01F8               	clrf	Init_TxStatusFromFlash@cellNum
  3673  026D                     l1629:	
  3674                           
  3675                           ;user_functions.c: 32: if (txStatus[cellNum] == 0xFFFF) {
  3676  026D  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3677  026E  00F2               	movwf	??_Init_TxStatusFromFlash
  3678  026F  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3679  0270  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3680  0271  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3681  0272  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3682  0273  0772               	addwf	??_Init_TxStatusFromFlash,w
  3683  0274  0084               	movwf	4
  3684  0275  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3685  0276  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3686  0277  0085               	movwf	5
  3687  0278  0012               	moviw fsr0++
  3688  0279  3AFF               	xorlw	255
  3689  027A  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3690  027B  0012               	moviw fsr0++
  3691  027C  3AFF               	xorlw	255
  3692  027D  04F4               	iorwf	??_Init_TxStatusFromFlash+2,f
  3693  027E  1D03               	btfss	3,2
  3694  027F  2AC8               	goto	l1651
  3695                           
  3696                           ;user_functions.c: 33: if (cellNum > 0) {
  3697  0280  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3698  0281  1903               	btfsc	3,2
  3699  0282  3400               	retlw	0
  3700                           
  3701                           ;user_functions.c: 34: if (((txStatus[cellNum - 1] >> 8) == 0x5A) && ((txStatus[cellNum 
      +                          - 1] & 0xFF) < 3)) {
  3702  0283  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3703  0284  00F2               	movwf	??_Init_TxStatusFromFlash
  3704  0285  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3705  0286  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3706  0287  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3707  0288  0872               	movf	??_Init_TxStatusFromFlash,w
  3708  0289  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  3709  028A  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3710  028B  0873               	movf	??_Init_TxStatusFromFlash+1,w
  3711  028C  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  3712  028D  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3713  028E  30FE               	movlw	254
  3714  028F  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  3715  0290  0084               	movwf	4
  3716  0291  30FF               	movlw	255
  3717  0292  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  3718  0293  0085               	movwf	5
  3719  0294  3F00               	moviw [0]fsr0
  3720  0295  00F6               	movwf	??_Init_TxStatusFromFlash+4
  3721  0296  3F01               	moviw [1]fsr0
  3722  0297  00F7               	movwf	??_Init_TxStatusFromFlash+5
  3723  0298  00F6               	movwf	??_Init_TxStatusFromFlash+4
  3724  0299  305A               	movlw	90
  3725  029A  01F7               	clrf	??_Init_TxStatusFromFlash+5
  3726  029B  0676               	xorwf	??_Init_TxStatusFromFlash+4,w
  3727  029C  1D03               	btfss	3,2
  3728  029D  3400               	retlw	0
  3729  029E  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3730  029F  00F2               	movwf	??_Init_TxStatusFromFlash
  3731  02A0  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3732  02A1  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3733  02A2  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3734  02A3  0872               	movf	??_Init_TxStatusFromFlash,w
  3735  02A4  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  3736  02A5  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3737  02A6  0873               	movf	??_Init_TxStatusFromFlash+1,w
  3738  02A7  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  3739  02A8  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3740  02A9  30FE               	movlw	254
  3741  02AA  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  3742  02AB  0084               	movwf	4
  3743  02AC  30FF               	movlw	255
  3744  02AD  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  3745  02AE  0085               	movwf	5
  3746  02AF  0800               	movf	0,w	;code access
  3747  02B0  00F6               	movwf	??_Init_TxStatusFromFlash+4
  3748  02B1  3003               	movlw	3
  3749  02B2  0276               	subwf	??_Init_TxStatusFromFlash+4,w
  3750  02B3  1803               	skipnc
  3751  02B4  3400               	retlw	0
  3752                           
  3753                           ;user_functions.c: 35: return txStatus[cellNum - 1];
  3754  02B5  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3755  02B6  00F2               	movwf	??_Init_TxStatusFromFlash
  3756  02B7  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3757  02B8  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3758  02B9  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3759  02BA  0872               	movf	??_Init_TxStatusFromFlash,w
  3760  02BB  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  3761  02BC  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3762  02BD  0873               	movf	??_Init_TxStatusFromFlash+1,w
  3763  02BE  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  3764  02BF  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3765  02C0  30FE               	movlw	254
  3766  02C1  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  3767  02C2  0084               	movwf	4
  3768  02C3  30FF               	movlw	255
  3769  02C4  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  3770  02C5  0085               	movwf	5
  3771  02C6  0800               	movf	0,w	;code access
  3772  02C7  0008               	return
  3773  02C8                     l1651:	
  3774                           ;user_functions.c: 37: return 0;
  3775                           
  3776                           
  3777                           ;user_functions.c: 43: if (cellNum == 7) {
  3778  02C8  3007               	movlw	7
  3779  02C9  0678               	xorwf	Init_TxStatusFromFlash@cellNum,w
  3780  02CA  1D03               	btfss	3,2
  3781  02CB  2AFF               	goto	l1667
  3782                           
  3783                           ;user_functions.c: 44: if (((txStatus[cellNum] >> 8) == 0x5A) && ((txStatus[cellNum] & 0
      +                          xFF) < 3)) {
  3784  02CC  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3785  02CD  00F2               	movwf	??_Init_TxStatusFromFlash
  3786  02CE  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3787  02CF  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3788  02D0  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3789  02D1  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3790  02D2  0772               	addwf	??_Init_TxStatusFromFlash,w
  3791  02D3  0084               	movwf	4
  3792  02D4  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3793  02D5  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3794  02D6  0085               	movwf	5
  3795  02D7  3F00               	moviw [0]fsr0
  3796  02D8  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3797  02D9  3F01               	moviw [1]fsr0
  3798  02DA  00F5               	movwf	??_Init_TxStatusFromFlash+3
  3799  02DB  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3800  02DC  305A               	movlw	90
  3801  02DD  01F5               	clrf	??_Init_TxStatusFromFlash+3
  3802  02DE  0674               	xorwf	??_Init_TxStatusFromFlash+2,w
  3803  02DF  1D03               	btfss	3,2
  3804  02E0  3400               	retlw	0
  3805  02E1  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3806  02E2  00F2               	movwf	??_Init_TxStatusFromFlash
  3807  02E3  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3808  02E4  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3809  02E5  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3810  02E6  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3811  02E7  0772               	addwf	??_Init_TxStatusFromFlash,w
  3812  02E8  0084               	movwf	4
  3813  02E9  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3814  02EA  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3815  02EB  0085               	movwf	5
  3816  02EC  0800               	movf	0,w	;code access
  3817  02ED  00F4               	movwf	??_Init_TxStatusFromFlash+2
  3818  02EE  3003               	movlw	3
  3819  02EF  0274               	subwf	??_Init_TxStatusFromFlash+2,w
  3820  02F0  1803               	skipnc
  3821  02F1  3400               	retlw	0
  3822                           
  3823                           ;user_functions.c: 45: return txStatus[cellNum];
  3824  02F2  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  3825  02F3  00F2               	movwf	??_Init_TxStatusFromFlash
  3826  02F4  01F3               	clrf	??_Init_TxStatusFromFlash+1
  3827  02F5  35F2               	lslf	??_Init_TxStatusFromFlash,f
  3828  02F6  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  3829  02F7  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  3830  02F8  0772               	addwf	??_Init_TxStatusFromFlash,w
  3831  02F9  0084               	movwf	4
  3832  02FA  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  3833  02FB  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  3834  02FC  0085               	movwf	5
  3835  02FD  0800               	movf	0,w	;code access
  3836  02FE  0008               	return
  3837  02FF                     l1667:	
  3838  02FF  3008               	movlw	8
  3839  0300  0AF8               	incf	Init_TxStatusFromFlash@cellNum,f
  3840  0301  0278               	subwf	Init_TxStatusFromFlash@cellNum,w
  3841  0302  1803               	btfsc	3,0
  3842  0303  3400               	retlw	0
  3843  0304  2A6D               	goto	l1629
  3844  0305                     __end_of_Init_TxStatusFromFlash:	
  3845                           
  3846                           	psect	text7
  3847  0134                     __ptext7:	
  3848 ;; *************** function _Init_IO *****************
  3849 ;; Defined at:
  3850 ;;		line 46 in file "periph_config.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;		None
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;		None
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      void 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2
  3859 ;; Tracked objects:
  3860 ;;		On entry : B1F/0
  3861 ;;		On exit  : B1F/2
  3862 ;;		Unchanged: B00/0
  3863 ;; Data sizes:     COMMON   BANK0   BANK1
  3864 ;;      Params:         0       0       0
  3865 ;;      Locals:         0       0       0
  3866 ;;      Temps:          0       0       0
  3867 ;;      Totals:         0       0       0
  3868 ;;Total ram usage:        0 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_main
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           
  3878                           ;psect for function _Init_IO
  3879  0134                     _Init_IO:	
  3880                           
  3881                           ;periph_config.c: 47: OPTION_REGbits.nWPUEN = 0;
  3882                           
  3883                           ;incstack = 0
  3884                           ; Regs used in _Init_IO: [wreg+status,2]
  3885  0134  0021               	movlb	1	; select bank1
  3886  0135  1395               	bcf	21,7	;volatile
  3887                           
  3888                           ;periph_config.c: 48: TRISA = 0x1F;
  3889  0136  301F               	movlw	31
  3890  0137  008C               	movwf	12	;volatile
  3891                           
  3892                           ;periph_config.c: 49: ANSELA = 0;
  3893  0138  0023               	movlb	3	; select bank3
  3894  0139  018C               	clrf	12	;volatile
  3895                           
  3896                           ;periph_config.c: 50: WPUA = 0x08;
  3897  013A  3008               	movlw	8
  3898  013B  0024               	movlb	4	; select bank4
  3899  013C  008C               	movwf	12	;volatile
  3900                           
  3901                           ;periph_config.c: 52: TRISC = 0x00;
  3902  013D  0021               	movlb	1	; select bank1
  3903  013E  018E               	clrf	14	;volatile
  3904                           
  3905                           ;periph_config.c: 53: ANSELC = 0;
  3906  013F  0023               	movlb	3	; select bank3
  3907  0140  018E               	clrf	14	;volatile
  3908                           
  3909                           ;periph_config.c: 54: LATC = 0x00;
  3910  0141  0022               	movlb	2	; select bank2
  3911  0142  018E               	clrf	14	;volatile
  3912  0143  0008               	return
  3913  0144                     __end_of_Init_IO:	
  3914                           
  3915                           	psect	text8
  3916  0127                     __ptext8:	
  3917 ;; *************** function _Init_CLK *****************
  3918 ;; Defined at:
  3919 ;;		line 15 in file "periph_config.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;		None
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      void 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0
  3928 ;; Tracked objects:
  3929 ;;		On entry : B1F/2
  3930 ;;		On exit  : B1F/1
  3931 ;;		Unchanged: B00/0
  3932 ;; Data sizes:     COMMON   BANK0   BANK1
  3933 ;;      Params:         0       0       0
  3934 ;;      Locals:         0       0       0
  3935 ;;      Temps:          0       0       0
  3936 ;;      Totals:         0       0       0
  3937 ;;Total ram usage:        0 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _Init_CLK
  3948  0127                     _Init_CLK:	
  3949                           
  3950                           ;periph_config.c: 18: OSCCONbits.IRCF = 0b1110;
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _Init_CLK: [wreg+status,2+status,0]
  3954  0127  0021               	movlb	1	; select bank1
  3955  0128  0819               	movf	25,w	;volatile
  3956  0129  3987               	andlw	-121
  3957  012A  3870               	iorlw	112
  3958  012B  0099               	movwf	25	;volatile
  3959                           
  3960                           ;periph_config.c: 34: WDTCONbits.WDTPS = 0b01011;
  3961  012C  0817               	movf	23,w	;volatile
  3962  012D  39C1               	andlw	-63
  3963  012E  3816               	iorlw	22
  3964  012F  0097               	movwf	23	;volatile
  3965                           
  3966                           ;periph_config.c: 41: WDTCONbits.SWDTEN = 1;
  3967  0130  1417               	bsf	23,0	;volatile
  3968  0131                     l269:	
  3969                           ;periph_config.c: 42: while (!OSCSTATbits.HFIOFR) {
  3970                           
  3971  0131  1A1A               	btfsc	26,4	;volatile
  3972  0132  0008               	return
  3973  0133  2931               	goto	l269
  3974  0134                     __end_of_Init_CLK:	
  3975                           
  3976                           	psect	text9
  3977  010E                     __ptext9:	
  3978 ;; *************** function _Init_ADC *****************
  3979 ;; Defined at:
  3980 ;;		line 57 in file "periph_config.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : B1F/1
  3991 ;;		On exit  : B1F/1
  3992 ;;		Unchanged: B00/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1
  3994 ;;      Params:         0       0       0
  3995 ;;      Locals:         0       0       0
  3996 ;;      Temps:          0       0       0
  3997 ;;      Totals:         0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _Init_ADC
  4009  010E                     _Init_ADC:	
  4010                           
  4011                           ;periph_config.c: 58: FVRCON = 0;
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _Init_ADC: [wreg+status,2+status,0]
  4015  010E  0022               	movlb	2	; select bank2
  4016  010F  0197               	clrf	23	;volatile
  4017                           
  4018                           ;periph_config.c: 60: ADCON1bits.ADFM = 1;
  4019  0110  0021               	movlb	1	; select bank1
  4020  0111  179E               	bsf	30,7	;volatile
  4021                           
  4022                           ;periph_config.c: 61: ADCON1bits.ADCS = 0b001;
  4023  0112  081E               	movf	30,w	;volatile
  4024  0113  398F               	andlw	-113
  4025  0114  3810               	iorlw	16
  4026  0115  009E               	movwf	30	;volatile
  4027                           
  4028                           ;periph_config.c: 64: ADCON1bits.ADPREF = 0b00;
  4029  0116  30FC               	movlw	-4
  4030  0117  059E               	andwf	30,f	;volatile
  4031                           
  4032                           ;periph_config.c: 66: ADCON0bits.ADON = 0;
  4033  0118  101D               	bcf	29,0	;volatile
  4034  0119  0008               	return
  4035  011A                     __end_of_Init_ADC:	
  4036                           
  4037                           	psect	text10
  4038  0144                     __ptext10:	
  4039 ;; *************** function _FlashWrite *****************
  4040 ;; Defined at:
  4041 ;;		line 43 in file "FLASH.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  addr            2    0[COMMON] unsigned int 
  4044 ;;  flash_data      2    2[COMMON] unsigned int 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0, pclath, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 1F/3
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1
  4056 ;;      Params:         4       0       0
  4057 ;;      Locals:         0       0       0
  4058 ;;      Temps:          0       0       0
  4059 ;;      Totals:         4       0       0
  4060 ;;Total ram usage:        4 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    1
  4063 ;; This function calls:
  4064 ;;		_FlashUnlock
  4065 ;; This function is called by:
  4066 ;;		_main
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _FlashWrite
  4072  0144                     _FlashWrite:	
  4073                           
  4074                           ;FLASH.c: 44: PMCON1bits.CFGS = 0;
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _FlashWrite: [wreg+status,2+status,0+pclath+cstack]
  4078  0144  0023               	movlb	3	; select bank3
  4079  0145  1315               	bcf	21,6	;volatile
  4080                           
  4081                           ;FLASH.c: 45: PMADRH = (unsigned char) (addr >> 8);
  4082  0146  0871               	movf	FlashWrite@addr+1,w
  4083  0147  0092               	movwf	18	;volatile
  4084                           
  4085                           ;FLASH.c: 46: PMADRL = (unsigned char) (addr);
  4086  0148  0870               	movf	FlashWrite@addr,w
  4087  0149  0091               	movwf	17	;volatile
  4088                           
  4089                           ;FLASH.c: 47: PMCON1bits.FREE = 0;
  4090  014A  1215               	bcf	21,4	;volatile
  4091                           
  4092                           ;FLASH.c: 48: PMCON1bits.LWLO = 1;
  4093  014B  1695               	bsf	21,5	;volatile
  4094                           
  4095                           ;FLASH.c: 49: PMCON1bits.WREN = 1;
  4096  014C  1515               	bsf	21,2	;volatile
  4097                           
  4098                           ;FLASH.c: 50: PMDATH = (unsigned char) (flash_data >> 8);
  4099  014D  0873               	movf	FlashWrite@flash_data+1,w
  4100  014E  0094               	movwf	20	;volatile
  4101                           
  4102                           ;FLASH.c: 51: PMDATL = (unsigned char) flash_data;
  4103  014F  0872               	movf	FlashWrite@flash_data,w
  4104  0150  0093               	movwf	19	;volatile
  4105                           
  4106                           ;FLASH.c: 52: PMCON1bits.LWLO = 0;
  4107  0151  1295               	bcf	21,5	;volatile
  4108                           
  4109                           ;FLASH.c: 53: INTCONbits.GIE = 0;
  4110  0152  138B               	bcf	11,7	;volatile
  4111                           
  4112                           ;FLASH.c: 54: FlashUnlock();
  4113  0153  2108               	fcall	_FlashUnlock
  4114                           
  4115                           ;FLASH.c: 55: INTCONbits.GIE = 1;
  4116  0154  178B               	bsf	11,7	;volatile
  4117                           
  4118                           ;FLASH.c: 56: PMCON1bits.WREN = 0;
  4119  0155  1115               	bcf	21,2	;volatile
  4120  0156  0008               	return
  4121  0157                     __end_of_FlashWrite:	
  4122                           
  4123                           	psect	text11
  4124  011A                     __ptext11:	
  4125 ;; *************** function _FlashEraseRow *****************
  4126 ;; Defined at:
  4127 ;;		line 31 in file "FLASH.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  rowAddr         2    0[COMMON] unsigned int 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      void 
  4134 ;; Registers used:
  4135 ;;		wreg, status,2, status,0, pclath, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 1D/2
  4138 ;;		On exit  : 1F/3
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1
  4141 ;;      Params:         2       0       0
  4142 ;;      Locals:         0       0       0
  4143 ;;      Temps:          0       0       0
  4144 ;;      Totals:         2       0       0
  4145 ;;Total ram usage:        2 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    1
  4148 ;; This function calls:
  4149 ;;		_FlashUnlock
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _FlashEraseRow
  4157  011A                     _FlashEraseRow:	
  4158                           
  4159                           ;FLASH.c: 32: PMCON1bits.CFGS = 0;
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _FlashEraseRow: [wreg+status,2+status,0+pclath+cstack]
  4163  011A  0023               	movlb	3	; select bank3
  4164  011B  1315               	bcf	21,6	;volatile
  4165                           
  4166                           ;FLASH.c: 33: PMADRH = (uint8_t) (rowAddr >> 8);
  4167  011C  0871               	movf	FlashEraseRow@rowAddr+1,w
  4168  011D  0092               	movwf	18	;volatile
  4169                           
  4170                           ;FLASH.c: 34: PMADRL = (uint8_t) (rowAddr);
  4171  011E  0870               	movf	FlashEraseRow@rowAddr,w
  4172  011F  0091               	movwf	17	;volatile
  4173                           
  4174                           ;FLASH.c: 35: PMCON1bits.FREE = 1;
  4175  0120  1615               	bsf	21,4	;volatile
  4176                           
  4177                           ;FLASH.c: 36: PMCON1bits.WREN = 1;
  4178  0121  1515               	bsf	21,2	;volatile
  4179                           
  4180                           ;FLASH.c: 37: INTCONbits.GIE = 0;
  4181  0122  138B               	bcf	11,7	;volatile
  4182                           
  4183                           ;FLASH.c: 38: FlashUnlock();
  4184  0123  2108               	fcall	_FlashUnlock
  4185                           
  4186                           ;FLASH.c: 39: INTCONbits.GIE = 1;
  4187  0124  178B               	bsf	11,7	;volatile
  4188                           
  4189                           ;FLASH.c: 40: PMCON1bits.WREN = 0;
  4190  0125  1115               	bcf	21,2	;volatile
  4191  0126  0008               	return
  4192  0127                     __end_of_FlashEraseRow:	
  4193                           
  4194                           	psect	text12
  4195  0108                     __ptext12:	
  4196 ;; *************** function _FlashUnlock *****************
  4197 ;; Defined at:
  4198 ;;		line 25 in file "FLASH.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg
  4207 ;; Tracked objects:
  4208 ;;		On entry : 1F/3
  4209 ;;		On exit  : 1F/3
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1
  4212 ;;      Params:         0       0       0
  4213 ;;      Locals:         0       0       0
  4214 ;;      Temps:          0       0       0
  4215 ;;      Totals:         0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_FlashEraseRow
  4222 ;;		_FlashWrite
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _FlashUnlock
  4228  0108                     _FlashUnlock:	
  4229                           
  4230                           ;FLASH.c: 26: PMCON2 = 0x55;
  4231                           
  4232                           ;incstack = 0
  4233                           ; Regs used in _FlashUnlock: [wreg]
  4234  0108  3055               	movlw	85
  4235  0109  0096               	movwf	22	;volsfr
  4236                           
  4237                           ;FLASH.c: 27: PMCON2 = 0xAA;
  4238  010A  30AA               	movlw	170
  4239  010B  0096               	movwf	22	;volsfr
  4240                           
  4241                           ;FLASH.c: 28: PMCON1bits.WR = 1;
  4242  010C  1495               	bsf	21,1	;volatile
  4243  010D  0008               	return
  4244  010E                     __end_of_FlashUnlock:	
  4245  007E                     btemp	set	126	;btemp
  4246  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     33      68
    BANK1            32      0       0

Pointer List with Targets:

    KeyLongHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyLongHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    KeyOffHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyOffHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    Init_TxStatusFromFlash@txStatus	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TypeFromFlash@type	PTR const unsigned int  size(2) Largest target is 16
		 -> Type(CODE[16]), 

    noolite_send@data	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_KeyOffHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK0

    _main->_KeyLongHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   16574
                                             22 BANK0     11    11      0
                      _FlashEraseRow
                         _FlashWrite
                           _Init_ADC
                           _Init_CLK
                            _Init_IO
             _Init_TxStatusFromFlash
                 _Init_TypeFromFlash
                     _KeyLongHandler
                      _KeyOffHandler
                            _RF_Init
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _RF_Init                                              7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _KeyOffHandler                                        5     2      3    4686
                                             11 COMMON     3     0      3
                                             18 BANK0      2     2      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _KeyLongHandler                                       5     1      4    5248
                                             11 COMMON     1     1      0
                                             18 BANK0      4     0      4
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _noolite_send                                        29    26      3    3312
                                              0 COMMON    11     8      3
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _Init_TypeFromFlash                                   4     2      2     194
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_TxStatusFromFlash                               9     7      2     462
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_CLK                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlashWrite                                           4     0      4     858
                                              0 COMMON     4     0      4
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (1) _FlashEraseRow                                        2     0      2     173
                                              0 COMMON     2     0      2
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (2) _FlashUnlock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashEraseRow
     _FlashUnlock
   _FlashWrite
     _FlashUnlock
   _Init_ADC
   _Init_CLK
   _Init_IO
   _Init_TxStatusFromFlash
   _Init_TypeFromFlash
   _KeyLongHandler
     _noolite_send
   _KeyOffHandler
     _noolite_send
   _RF_Init
   _noolite_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      52       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     21      44       6       85.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      52       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Sep 08 11:21:55 2018

                     __CFG_CP$ON 0000                               l64 04FF                               l81 051E  
                             l82 0537                               l83 0540                               l75 0509  
                             l92 05B3                               l86 0578                              l210 049B  
                            l202 0462                              l211 0499                              l212 0498  
                            l204 0452                              l141 0798                              l207 047E  
                            l183 0319                              l185 0327                              l177 021A  
                            l186 0323                              l178 026A                              l269 0131  
                            l199 0441                              u834 0405                              u835 0404  
                            u944 0490                              u945 048F                     __CFG_IDLOC0$ 0000  
                   __CFG_IDLOC1$ 0007                     __CFG_IDLOC2$ 0000                     __CFG_IDLOC3$ 0007  
                   __CFG_BORV$LO 0000                              wreg 0009                      main@chn_242 0061  
                    main@chn_243 0062                      main@chn_244 0063                      main@cellNum 005F  
       ??_Init_TxStatusFromFlash 0072                     __CFG_LVP$OFF 0000                  ?_KeyLongHandler 0055  
                           l2001 0762                             l2023 0760                             l2019 0745  
                           l2029 07A8                             l1423 0324                             l1441 034D  
                           l1417 031B                             l1435 0336                             l1603 0218  
                           l1541 0454                             l1561 047B                             l1545 0459  
                           l1457 03B7                             l2089 0528                             l1801 04EC  
                           l1651 02C8                             l1629 026D                             l1485 0413  
                           l1477 040D                             l1717 01B5                             l1821 0504  
                           l1495 03F0                             l1831 0519                             l1807 04F6  
                           l1497 041A                             l1737 0195                             l1921 0618  
                           l1913 0606                             l1825 050C                             l1841 0533  
                           l1667 02FF                             l1739 019B                             l1931 0639  
                           l1915 0615                             l1843 0535                             l1827 0513  
                           l1819 0503                             l1755 04B4                             l1951 0684  
                           l1935 0640                             l1919 0617                             l1871 057B  
                           l1863 0564                             l1855 0543                             l1839 051F  
                           l1791 04E0                             l1783 04FD                             l1937 064B  
                           l1929 062D                             l1865 0572                             l1785 04D6  
                           l1939 0657                             l1963 06AB                             l1973 06DE  
                           l1957 0699                             l1965 06B9                             l1893 05B6  
                           l1885 05A2                             l1983 0718                             l1975 06EC  
                           l1991 0738                             l1967 06C9                             l1887 05B1  
                           l1977 06FA                             l1969 06D7                             l1995 073B  
                           l1989 072A                             _LATA 010C                             _LATC 010E  
                           u1607 05F4                             u1617 07A0                             u1627 01C0  
                           u1637 01CF                             u1647 0435                             _TMR0 0015  
                           _WPUA 020C                             _Keys 002B                     _startaddress 0020  
                   __CFG_WRT$OFF 0000                             _Type 07C0                             _main 049F  
                __end_of_RF_Init 026C                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E     noolite_send@noo_send_command 0070  
                           start 0001              __end_of_FlashUnlock 010E                    __CFG_MCLRE$ON 0000  
                __end_of_Init_IO 0144                    __CFG_LPBOR$ON 0000                            ?_main 0070  
                     _FlashWrite 0144                            _PORTA 000C                            _TRISA 008C  
                          _TRISC 008E                    __CFG_PWRTE$ON 0000                  ??_KeyOffHandler 0055  
        __p_system_settings_text 07EE                     _Type_absaddr 07C0                            status 0003  
                          wtemp0 007E                  __initialization 07E0                     __end_of_Type 07D0  
                   __end_of_main 07C0                 __end_of_Init_ADC 011A                 __end_of_Init_CLK 0134  
                         ??_main 0059                 _TxStatus_absaddr 07D0   Init_TxStatusFromFlash@txStatus 0070  
               __end_of_TxStatus 07E0  __size_of_Init_TxStatusFromFlash 0099                        ??_RF_Init 0070  
                         _ANSELA 018C                           _ANSELC 018E       __end_of_Init_TypeFromFlash 0175  
                         _FVRCON 0117                      _FlashUnlock 0108                           _PMADRH 0192  
                         _PMADRL 0191                           _PMDATH 0194                           _PMDATL 0193  
                         _PMCON2 0196                           _TMR0IE 005D                           _TMR0IF 005A  
                   __p_Type_text 07C0                        ??_Init_IO 0070                   __CFG_STVREN$ON 0000  
                _system_settings 07EE             noolite_send@countbit 0050            __end_of_FlashEraseRow 0127  
                    ?_FlashWrite 0070                  noolite_send@chn 0051             noolite_send@startpos 004F  
        __end_of__initialization 07E6    Init_TxStatusFromFlash@cellNum 0078                   main@adrToWrite 005D  
                 __pcstackCOMMON 0070           _Init_TxStatusFromFlash 026C                 ??_KeyLongHandler 007B  
                 _OPTION_REGbits 0095            KeyLongHandler@nooData 0058                       __pbssBANK0 0020  
                      ?_Init_ADC 0070                        ?_Init_CLK 0070          __end_of_system_settings 07FF  
            __size_of_FlashWrite 0013                       __pmaintext 049F                          _RF_Init 01E1  
           FlashEraseRow@rowAddr 0070                       ??_Init_ADC 0070                       ??_Init_CLK 0070  
                        _DevMode 0026                          _DevType 0027                          _Init_IO 0134  
                  ?_noolite_send 0070           Init_TypeFromFlash@type 0070                          __ptext1 01E1  
                        __ptext2 01A1                          __ptext3 0175                          __ptext4 0305  
                        __ptext5 0157                          __ptext6 026C                          __ptext7 0134  
                        __ptext8 0127                          __ptext9 010E            noolite_send@countsend 0052  
                        main@chn 0060            __end_of_KeyOffHandler 01E1                          clrloop0 07E9  
           end_of_initialization 07E6                     ?_FlashUnlock 0070                 noolite_send@data 0072  
          noolite_send@temp_send 0053                   FlashWrite@addr 0070               _Init_TypeFromFlash 0157  
                 ??_noolite_send 0073              ?_Init_TypeFromFlash 0070                     ??_FlashWrite 0074  
               __CFG_FOSC$INTOSC 0000             ??_Init_TypeFromFlash 0072          ?_Init_TxStatusFromFlash 0070  
             __end_of_FlashWrite 0157              start_initialization 07E0   __end_of_Init_TxStatusFromFlash 0305  
              __size_of_Init_ADC 000C                __size_of_Init_CLK 000D           __size_of_FlashEraseRow 000D  
               __p_TxStatus_text 07D0                        ___latbits 0000                    __pcstackBANK0 0043  
                       ?_RF_Init 0070             __end_of_noolite_send 049F             __size_of_FlashUnlock 0006  
                       ?_Init_IO 0070             KeyOffHandler@nooData 007D                    _noo_send_data 003F  
                  _FlashEraseRow 011A                 __CFG_WDTE$SWDTEN 0000          __size_of_KeyLongHandler 002C  
                       _LATAbits 010C                         _LATCbits 010E                        clear_ram0 07E8  
               KeyOffHandler@cmd 007C                 KeyOffHandler@chn 007B                 KeyOffHandler@key 0056  
    noolite_send@noo_send_buffer 0043      noolite_send@noo_send_format 0071                       _ADCON0bits 009D  
                     _ADCON1bits 009E                   ?_FlashEraseRow 0070                        _tx_status 002A  
               __size_of_RF_Init 008B                         _Init_ADC 010E                         _Init_CLK 0127  
                   _SkipHandling 0025                 _noo_address_type 0024                 __size_of_Init_IO 0010  
             noolite_send@endpos 0054                         _TxStatus 07D0           __size_of_KeyOffHandler 0040  
          __size_of_noolite_send 019A                         __ptext10 0144                         __ptext11 011A  
                       __ptext12 0108                      _tick3_100ms 0028                    __size_of_main 0321  
    __size_of_Init_TypeFromFlash 001E                  ??_FlashEraseRow 0072                     _noolite_send 0305  
                    _OSCSTATbits 009A                       _INTCONbits 000B                __CFG_BOREN$NSLEEP 0000  
                  _KeyOffHandler 01A1                   _KeyLongHandler 0175     KeyLongHandler@ticksToTrigger 0057  
                     _PMCON1bits 0195             FlashWrite@flash_data 0072                __CFG_CLKOUTEN$OFF 0000  
             _LedPulseTick_100ms 0029                       _OSCCONbits 0099                KeyLongHandler@cmd 0056  
              KeyLongHandler@chn 0055                       _OPTION_REG 0095                KeyLongHandler@key 007B  
                     _WDTCONbits 0097           __end_of_KeyLongHandler 01A1                   ?_KeyOffHandler 007B  
                  ??_FlashUnlock 0070          _system_settings_absaddr 07EE  
