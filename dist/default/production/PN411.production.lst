

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sun Sep 23 21:01:50 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	_system_settings_text,global,class=CODE,delta=2
     5                           	psect	_TxStatus_text,global,class=CODE,delta=2
     6                           	psect	_Type_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16LF1503 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000E                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0095                     	;# 
    94  0096                     	;# 
    95  0097                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009B                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010E                     	;# 
   106  0111                     	;# 
   107  0112                     	;# 
   108  0113                     	;# 
   109  0114                     	;# 
   110  0115                     	;# 
   111  0116                     	;# 
   112  0117                     	;# 
   113  0118                     	;# 
   114  0119                     	;# 
   115  011D                     	;# 
   116  018C                     	;# 
   117  018E                     	;# 
   118  0191                     	;# 
   119  0191                     	;# 
   120  0192                     	;# 
   121  0193                     	;# 
   122  0193                     	;# 
   123  0194                     	;# 
   124  0195                     	;# 
   125  0196                     	;# 
   126  020C                     	;# 
   127  0211                     	;# 
   128  0211                     	;# 
   129  0212                     	;# 
   130  0212                     	;# 
   131  0213                     	;# 
   132  0213                     	;# 
   133  0214                     	;# 
   134  0214                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0216                     	;# 
   139  0216                     	;# 
   140  0217                     	;# 
   141  0217                     	;# 
   142  0391                     	;# 
   143  0392                     	;# 
   144  0393                     	;# 
   145  0498                     	;# 
   146  0498                     	;# 
   147  0499                     	;# 
   148  049A                     	;# 
   149  049B                     	;# 
   150  049B                     	;# 
   151  049C                     	;# 
   152  049D                     	;# 
   153  049E                     	;# 
   154  049F                     	;# 
   155  0611                     	;# 
   156  0612                     	;# 
   157  0613                     	;# 
   158  0613                     	;# 
   159  0614                     	;# 
   160  0615                     	;# 
   161  0616                     	;# 
   162  0616                     	;# 
   163  0617                     	;# 
   164  0618                     	;# 
   165  0619                     	;# 
   166  0619                     	;# 
   167  061A                     	;# 
   168  061B                     	;# 
   169  061C                     	;# 
   170  061C                     	;# 
   171  0691                     	;# 
   172  0692                     	;# 
   173  0693                     	;# 
   174  0694                     	;# 
   175  0695                     	;# 
   176  0F0F                     	;# 
   177  0F10                     	;# 
   178  0F11                     	;# 
   179  0F12                     	;# 
   180  0F13                     	;# 
   181  0F14                     	;# 
   182  0F15                     	;# 
   183  0F16                     	;# 
   184  0F17                     	;# 
   185  0F18                     	;# 
   186  0F19                     	;# 
   187  0F1A                     	;# 
   188  0F1B                     	;# 
   189  0F1C                     	;# 
   190  0F1D                     	;# 
   191  0F1E                     	;# 
   192  0F1F                     	;# 
   193  0FE3                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  0006                     	;# 
   212  0007                     	;# 
   213  0008                     	;# 
   214  0009                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000E                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018E                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0194                     	;# 
   267  0195                     	;# 
   268  0196                     	;# 
   269  020C                     	;# 
   270  0211                     	;# 
   271  0211                     	;# 
   272  0212                     	;# 
   273  0212                     	;# 
   274  0213                     	;# 
   275  0213                     	;# 
   276  0214                     	;# 
   277  0214                     	;# 
   278  0215                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0216                     	;# 
   282  0216                     	;# 
   283  0217                     	;# 
   284  0217                     	;# 
   285  0391                     	;# 
   286  0392                     	;# 
   287  0393                     	;# 
   288  0498                     	;# 
   289  0498                     	;# 
   290  0499                     	;# 
   291  049A                     	;# 
   292  049B                     	;# 
   293  049B                     	;# 
   294  049C                     	;# 
   295  049D                     	;# 
   296  049E                     	;# 
   297  049F                     	;# 
   298  0611                     	;# 
   299  0612                     	;# 
   300  0613                     	;# 
   301  0613                     	;# 
   302  0614                     	;# 
   303  0615                     	;# 
   304  0616                     	;# 
   305  0616                     	;# 
   306  0617                     	;# 
   307  0618                     	;# 
   308  0619                     	;# 
   309  0619                     	;# 
   310  061A                     	;# 
   311  061B                     	;# 
   312  061C                     	;# 
   313  061C                     	;# 
   314  0691                     	;# 
   315  0692                     	;# 
   316  0693                     	;# 
   317  0694                     	;# 
   318  0695                     	;# 
   319  0F0F                     	;# 
   320  0F10                     	;# 
   321  0F11                     	;# 
   322  0F12                     	;# 
   323  0F13                     	;# 
   324  0F14                     	;# 
   325  0F15                     	;# 
   326  0F16                     	;# 
   327  0F17                     	;# 
   328  0F18                     	;# 
   329  0F19                     	;# 
   330  0F1A                     	;# 
   331  0F1B                     	;# 
   332  0F1C                     	;# 
   333  0F1D                     	;# 
   334  0F1E                     	;# 
   335  0F1F                     	;# 
   336  0FE3                     	;# 
   337  0FE4                     	;# 
   338  0FE5                     	;# 
   339  0FE6                     	;# 
   340  0FE7                     	;# 
   341  0FE8                     	;# 
   342  0FE9                     	;# 
   343  0FEA                     	;# 
   344  0FEB                     	;# 
   345  0FED                     	;# 
   346  0FEE                     	;# 
   347  0FEF                     	;# 
   348  0000                     	;# 
   349  0001                     	;# 
   350  0002                     	;# 
   351  0003                     	;# 
   352  0004                     	;# 
   353  0005                     	;# 
   354  0006                     	;# 
   355  0007                     	;# 
   356  0008                     	;# 
   357  0009                     	;# 
   358  000A                     	;# 
   359  000B                     	;# 
   360  000C                     	;# 
   361  000E                     	;# 
   362  0011                     	;# 
   363  0012                     	;# 
   364  0013                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  008C                     	;# 
   375  008E                     	;# 
   376  0091                     	;# 
   377  0092                     	;# 
   378  0093                     	;# 
   379  0095                     	;# 
   380  0096                     	;# 
   381  0097                     	;# 
   382  0099                     	;# 
   383  009A                     	;# 
   384  009B                     	;# 
   385  009B                     	;# 
   386  009C                     	;# 
   387  009D                     	;# 
   388  009E                     	;# 
   389  009F                     	;# 
   390  010C                     	;# 
   391  010E                     	;# 
   392  0111                     	;# 
   393  0112                     	;# 
   394  0113                     	;# 
   395  0114                     	;# 
   396  0115                     	;# 
   397  0116                     	;# 
   398  0117                     	;# 
   399  0118                     	;# 
   400  0119                     	;# 
   401  011D                     	;# 
   402  018C                     	;# 
   403  018E                     	;# 
   404  0191                     	;# 
   405  0191                     	;# 
   406  0192                     	;# 
   407  0193                     	;# 
   408  0193                     	;# 
   409  0194                     	;# 
   410  0195                     	;# 
   411  0196                     	;# 
   412  020C                     	;# 
   413  0211                     	;# 
   414  0211                     	;# 
   415  0212                     	;# 
   416  0212                     	;# 
   417  0213                     	;# 
   418  0213                     	;# 
   419  0214                     	;# 
   420  0214                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0216                     	;# 
   426  0217                     	;# 
   427  0217                     	;# 
   428  0391                     	;# 
   429  0392                     	;# 
   430  0393                     	;# 
   431  0498                     	;# 
   432  0498                     	;# 
   433  0499                     	;# 
   434  049A                     	;# 
   435  049B                     	;# 
   436  049B                     	;# 
   437  049C                     	;# 
   438  049D                     	;# 
   439  049E                     	;# 
   440  049F                     	;# 
   441  0611                     	;# 
   442  0612                     	;# 
   443  0613                     	;# 
   444  0613                     	;# 
   445  0614                     	;# 
   446  0615                     	;# 
   447  0616                     	;# 
   448  0616                     	;# 
   449  0617                     	;# 
   450  0618                     	;# 
   451  0619                     	;# 
   452  0619                     	;# 
   453  061A                     	;# 
   454  061B                     	;# 
   455  061C                     	;# 
   456  061C                     	;# 
   457  0691                     	;# 
   458  0692                     	;# 
   459  0693                     	;# 
   460  0694                     	;# 
   461  0695                     	;# 
   462  0F0F                     	;# 
   463  0F10                     	;# 
   464  0F11                     	;# 
   465  0F12                     	;# 
   466  0F13                     	;# 
   467  0F14                     	;# 
   468  0F15                     	;# 
   469  0F16                     	;# 
   470  0F17                     	;# 
   471  0F18                     	;# 
   472  0F19                     	;# 
   473  0F1A                     	;# 
   474  0F1B                     	;# 
   475  0F1C                     	;# 
   476  0F1D                     	;# 
   477  0F1E                     	;# 
   478  0F1F                     	;# 
   479  0FE3                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0008                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000E                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0013                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  008C                     	;# 
   518  008E                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0093                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  009F                     	;# 
   533  010C                     	;# 
   534  010E                     	;# 
   535  0111                     	;# 
   536  0112                     	;# 
   537  0113                     	;# 
   538  0114                     	;# 
   539  0115                     	;# 
   540  0116                     	;# 
   541  0117                     	;# 
   542  0118                     	;# 
   543  0119                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018E                     	;# 
   547  0191                     	;# 
   548  0191                     	;# 
   549  0192                     	;# 
   550  0193                     	;# 
   551  0193                     	;# 
   552  0194                     	;# 
   553  0195                     	;# 
   554  0196                     	;# 
   555  020C                     	;# 
   556  0211                     	;# 
   557  0211                     	;# 
   558  0212                     	;# 
   559  0212                     	;# 
   560  0213                     	;# 
   561  0213                     	;# 
   562  0214                     	;# 
   563  0214                     	;# 
   564  0215                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0216                     	;# 
   568  0216                     	;# 
   569  0217                     	;# 
   570  0217                     	;# 
   571  0391                     	;# 
   572  0392                     	;# 
   573  0393                     	;# 
   574  0498                     	;# 
   575  0498                     	;# 
   576  0499                     	;# 
   577  049A                     	;# 
   578  049B                     	;# 
   579  049B                     	;# 
   580  049C                     	;# 
   581  049D                     	;# 
   582  049E                     	;# 
   583  049F                     	;# 
   584  0611                     	;# 
   585  0612                     	;# 
   586  0613                     	;# 
   587  0613                     	;# 
   588  0614                     	;# 
   589  0615                     	;# 
   590  0616                     	;# 
   591  0616                     	;# 
   592  0617                     	;# 
   593  0618                     	;# 
   594  0619                     	;# 
   595  0619                     	;# 
   596  061A                     	;# 
   597  061B                     	;# 
   598  061C                     	;# 
   599  061C                     	;# 
   600  0691                     	;# 
   601  0692                     	;# 
   602  0693                     	;# 
   603  0694                     	;# 
   604  0695                     	;# 
   605  0F0F                     	;# 
   606  0F10                     	;# 
   607  0F11                     	;# 
   608  0F12                     	;# 
   609  0F13                     	;# 
   610  0F14                     	;# 
   611  0F15                     	;# 
   612  0F16                     	;# 
   613  0F17                     	;# 
   614  0F18                     	;# 
   615  0F19                     	;# 
   616  0F1A                     	;# 
   617  0F1B                     	;# 
   618  0F1C                     	;# 
   619  0F1D                     	;# 
   620  0F1E                     	;# 
   621  0F1F                     	;# 
   622  0FE3                     	;# 
   623  0FE4                     	;# 
   624  0FE5                     	;# 
   625  0FE6                     	;# 
   626  0FE7                     	;# 
   627  0FE8                     	;# 
   628  0FE9                     	;# 
   629  0FEA                     	;# 
   630  0FEB                     	;# 
   631  0FED                     	;# 
   632  0FEE                     	;# 
   633  0FEF                     	;# 
   634  0000                     	;# 
   635  0001                     	;# 
   636  0002                     	;# 
   637  0003                     	;# 
   638  0004                     	;# 
   639  0005                     	;# 
   640  0006                     	;# 
   641  0007                     	;# 
   642  0008                     	;# 
   643  0009                     	;# 
   644  000A                     	;# 
   645  000B                     	;# 
   646  000C                     	;# 
   647  000E                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0015                     	;# 
   652  0016                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001C                     	;# 
   660  008C                     	;# 
   661  008E                     	;# 
   662  0091                     	;# 
   663  0092                     	;# 
   664  0093                     	;# 
   665  0095                     	;# 
   666  0096                     	;# 
   667  0097                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  009F                     	;# 
   676  010C                     	;# 
   677  010E                     	;# 
   678  0111                     	;# 
   679  0112                     	;# 
   680  0113                     	;# 
   681  0114                     	;# 
   682  0115                     	;# 
   683  0116                     	;# 
   684  0117                     	;# 
   685  0118                     	;# 
   686  0119                     	;# 
   687  011D                     	;# 
   688  018C                     	;# 
   689  018E                     	;# 
   690  0191                     	;# 
   691  0191                     	;# 
   692  0192                     	;# 
   693  0193                     	;# 
   694  0193                     	;# 
   695  0194                     	;# 
   696  0195                     	;# 
   697  0196                     	;# 
   698  020C                     	;# 
   699  0211                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0212                     	;# 
   703  0213                     	;# 
   704  0213                     	;# 
   705  0214                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  0391                     	;# 
   715  0392                     	;# 
   716  0393                     	;# 
   717  0498                     	;# 
   718  0498                     	;# 
   719  0499                     	;# 
   720  049A                     	;# 
   721  049B                     	;# 
   722  049B                     	;# 
   723  049C                     	;# 
   724  049D                     	;# 
   725  049E                     	;# 
   726  049F                     	;# 
   727  0611                     	;# 
   728  0612                     	;# 
   729  0613                     	;# 
   730  0613                     	;# 
   731  0614                     	;# 
   732  0615                     	;# 
   733  0616                     	;# 
   734  0616                     	;# 
   735  0617                     	;# 
   736  0618                     	;# 
   737  0619                     	;# 
   738  0619                     	;# 
   739  061A                     	;# 
   740  061B                     	;# 
   741  061C                     	;# 
   742  061C                     	;# 
   743  0691                     	;# 
   744  0692                     	;# 
   745  0693                     	;# 
   746  0694                     	;# 
   747  0695                     	;# 
   748  0F0F                     	;# 
   749  0F10                     	;# 
   750  0F11                     	;# 
   751  0F12                     	;# 
   752  0F13                     	;# 
   753  0F14                     	;# 
   754  0F15                     	;# 
   755  0F16                     	;# 
   756  0F17                     	;# 
   757  0F18                     	;# 
   758  0F19                     	;# 
   759  0F1A                     	;# 
   760  0F1B                     	;# 
   761  0F1C                     	;# 
   762  0F1D                     	;# 
   763  0F1E                     	;# 
   764  0F1F                     	;# 
   765  0FE3                     	;# 
   766  0FE4                     	;# 
   767  0FE5                     	;# 
   768  0FE6                     	;# 
   769  0FE7                     	;# 
   770  0FE8                     	;# 
   771  0FE9                     	;# 
   772  0FEA                     	;# 
   773  0FEB                     	;# 
   774  0FED                     	;# 
   775  0FEE                     	;# 
   776  0FEF                     	;# 
   777  07EE                     _system_settings_absaddr	set	2030
   778  07D0                     _TxStatus_absaddr	set	2000
   779  07C0                     _Type_absaddr	set	1984
   780  07EE                     _system_settings_absaddr	set	2030
   781                           
   782                           	psect	_system_settings_text
   783  07EE                     __p_system_settings_text:	
   784  07EE                     _system_settings:	
   785  07EE  3443               	retlw	67
   786  07EF  3404               	retlw	4
   787  07F0  345F               	retlw	95
   788  07F1  3441               	retlw	65
   789  07F2  341F               	retlw	31
   790  07F3  34FB               	retlw	251
   791  07F4  345F               	retlw	95
   792  07F5  3441               	retlw	65
   793  07F6  3478               	retlw	120
   794  07F7  3456               	retlw	86
   795  07F8  3434               	retlw	52
   796  07F9  3412               	retlw	18
   797  07FA  345F               	retlw	95
   798  07FB  3442               	retlw	66
   799  07FC  3410               	retlw	16
   800  07FD  3400               	retlw	0
   801  07FE  345F               	retlw	95
   802  07FF                     __end_of_system_settings:	
   803  07D0                     _TxStatus_absaddr	set	2000
   804                           
   805                           	psect	_TxStatus_text
   806  07D0                     __p_TxStatus_text:	
   807  07D0                     _TxStatus:	
   808  07D0  34FF               	retlw	255
   809  07D1  34FF               	retlw	255
   810  07D2  34FF               	retlw	255
   811  07D3  34FF               	retlw	255
   812  07D4  34FF               	retlw	255
   813  07D5  34FF               	retlw	255
   814  07D6  34FF               	retlw	255
   815  07D7  34FF               	retlw	255
   816  07D8  34FF               	retlw	255
   817  07D9  34FF               	retlw	255
   818  07DA  34FF               	retlw	255
   819  07DB  34FF               	retlw	255
   820  07DC  34FF               	retlw	255
   821  07DD  34FF               	retlw	255
   822  07DE  34FF               	retlw	255
   823  07DF  34FF               	retlw	255
   824  07E0                     __end_of_TxStatus:	
   825  07C0                     _Type_absaddr	set	1984
   826                           
   827                           	psect	_Type_text
   828  07C0                     __p_Type_text:	
   829  07C0                     _Type:	
   830  07C0  34FF               	retlw	255
   831  07C1  34FF               	retlw	255
   832  07C2  34FF               	retlw	255
   833  07C3  34FF               	retlw	255
   834  07C4  34FF               	retlw	255
   835  07C5  34FF               	retlw	255
   836  07C6  34FF               	retlw	255
   837  07C7  34FF               	retlw	255
   838  07C8  34FF               	retlw	255
   839  07C9  34FF               	retlw	255
   840  07CA  34FF               	retlw	255
   841  07CB  34FF               	retlw	255
   842  07CC  34FF               	retlw	255
   843  07CD  34FF               	retlw	255
   844  07CE  34FF               	retlw	255
   845  07CF  34FF               	retlw	255
   846  07D0                     __end_of_Type:	
   847  0015                     _TMR0	set	21
   848  000C                     _PORTA	set	12
   849  000B                     _INTCONbits	set	11
   850  005D                     _TMR0IE	set	93
   851  005A                     _TMR0IF	set	90
   852  009D                     _ADCON0bits	set	157
   853  009E                     _ADCON1bits	set	158
   854  008E                     _TRISC	set	142
   855  008C                     _TRISA	set	140
   856  0095                     _OPTION_REGbits	set	149
   857  009A                     _OSCSTATbits	set	154
   858  0099                     _OSCCONbits	set	153
   859  0095                     _OPTION_REG	set	149
   860  0097                     _WDTCONbits	set	151
   861  0117                     _FVRCON	set	279
   862  010E                     _LATC	set	270
   863  010C                     _LATA	set	268
   864  010C                     _LATAbits	set	268
   865  010E                     _LATCbits	set	270
   866  018E                     _ANSELC	set	398
   867  018C                     _ANSELA	set	396
   868  0196                     _PMCON2	set	406
   869  0193                     _PMDATL	set	403
   870  0194                     _PMDATH	set	404
   871  0191                     _PMADRL	set	401
   872  0192                     _PMADRH	set	402
   873  0195                     _PMCON1bits	set	405
   874  020C                     _WPUA	set	524
   875                           
   876                           ; #config settings
   877  0007                     
   878                           	psect	cinit
   879  07E0                     start_initialization:	
   880  07E0                     __initialization:	
   881                           
   882                           ; Clear objects allocated to BANK0
   883  07E0  3020               	movlw	low __pbssBANK0
   884  07E1  0084               	movwf	4
   885  07E2  3000               	movlw	high __pbssBANK0
   886  07E3  0085               	movwf	5
   887  07E4  3024               	movlw	36
   888  07E5  27E8               	fcall	clear_ram0
   889  07E6                     end_of_initialization:	
   890                           ;End of C runtime variable initialization code
   891                           
   892  07E6                     __end_of__initialization:	
   893  07E6  0020               	movlb	0
   894  07E7  2CA7               	ljmp	_main	;jump to C main() function
   895                           
   896                           	psect	bssBANK0
   897  0020                     __pbssBANK0:	
   898  0020                     _startaddress:	
   899  0020                     	ds	4
   900  0024                     _noo_address_type:	
   901  0024                     	ds	1
   902  0025                     _OffDelayTicks_100ms:	
   903  0025                     	ds	1
   904  0026                     _SkipHandling:	
   905  0026                     	ds	1
   906  0027                     _DevMode:	
   907  0027                     	ds	1
   908  0028                     _DevType:	
   909  0028                     	ds	1
   910  0029                     _tick3_100ms:	
   911  0029                     	ds	1
   912  002A                     _LedPulseTick_100ms:	
   913  002A                     	ds	1
   914  002B                     _tx_status:	
   915  002B                     	ds	1
   916  002C                     _Keys:	
   917  002C                     	ds	20
   918  0040                     _noo_send_data:	
   919  0040                     	ds	4
   920                           
   921                           	psect	clrtext
   922  07E8                     clear_ram0:	
   923                           ;	Called with FSR0 containing the base address, and
   924                           ;	WREG with the size to clear
   925                           
   926  07E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   927  07E9                     clrloop0:	
   928  07E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   929  07EA  3101               	addfsr 0,1
   930  07EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   931  07EC  2FE9               	goto	clrloop0	;have we reached the end yet?
   932  07ED  3400               	retlw	0	;all done for this memory range, return
   933                           
   934                           	psect	cstackCOMMON
   935  0070                     __pcstackCOMMON:	
   936  0070                     ?_Init_IO:	
   937  0070                     ??_Init_IO:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_Init_CLK:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ??_Init_CLK:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_Init_ADC:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ??_Init_ADC:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_RF_Init:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ??_RF_Init:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_Init_TypeFromFlash:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_Init_TxStatusFromFlash:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_noolite_send:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_FlashEraseRow:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_FlashWrite:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_main:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_FlashUnlock:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ??_FlashUnlock:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     noolite_send@noo_send_command:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     FlashEraseRow@rowAddr:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     FlashWrite@addr:	
   989                           ; 2 bytes @ 0x0
   990                           
   991  0070                     Init_TypeFromFlash@type:	
   992                           ; 2 bytes @ 0x0
   993                           
   994  0070                     Init_TxStatusFromFlash@txStatus:	
   995                           ; 2 bytes @ 0x0
   996                           
   997                           
   998                           ; 2 bytes @ 0x0
   999  0070                     	ds	1
  1000  0071                     noolite_send@noo_send_format:	
  1001                           
  1002                           ; 1 bytes @ 0x1
  1003  0071                     	ds	1
  1004  0072                     ??_Init_TypeFromFlash:	
  1005  0072                     ??_Init_TxStatusFromFlash:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  0072                     ??_FlashEraseRow:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011  0072                     noolite_send@data:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0072                     FlashWrite@flash_data:	
  1015                           ; 1 bytes @ 0x2
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x2
  1019  0072                     	ds	1
  1020  0073                     ??_noolite_send:	
  1021                           
  1022                           ; 1 bytes @ 0x3
  1023  0073                     	ds	1
  1024  0074                     ??_FlashWrite:	
  1025  0074                     ?_SaveTxStatusToFlash:	
  1026                           ; 1 bytes @ 0x4
  1027                           
  1028  0074                     SaveTxStatusToFlash@txStatusArray:	
  1029                           ; 1 bytes @ 0x4
  1030                           
  1031                           
  1032                           ; 2 bytes @ 0x4
  1033  0074                     	ds	2
  1034  0076                     SaveTxStatusToFlash@txStatusAdr:	
  1035                           
  1036                           ; 2 bytes @ 0x6
  1037  0076                     	ds	2
  1038  0078                     Init_TxStatusFromFlash@cellNum:	
  1039  0078                     SaveTxStatusToFlash@txStatusVal:	
  1040                           ; 1 bytes @ 0x8
  1041                           
  1042                           
  1043                           ; 1 bytes @ 0x8
  1044  0078                     	ds	1
  1045  0079                     ??_SaveTxStatusToFlash:	
  1046                           
  1047                           ; 1 bytes @ 0x9
  1048  0079                     	ds	2
  1049  007B                     ?_KeyOffHandler:	
  1050  007B                     ??_KeyLongHandler:	
  1051                           ; 1 bytes @ 0xB
  1052                           
  1053  007B                     KeyOffHandler@chn:	
  1054                           ; 1 bytes @ 0xB
  1055                           
  1056  007B                     KeyLongHandler@key:	
  1057                           ; 1 bytes @ 0xB
  1058                           
  1059                           
  1060                           ; 1 bytes @ 0xB
  1061  007B                     	ds	1
  1062  007C                     KeyOffHandler@cmd:	
  1063                           
  1064                           ; 1 bytes @ 0xC
  1065  007C                     	ds	1
  1066  007D                     KeyOffHandler@nooData:	
  1067                           
  1068                           ; 1 bytes @ 0xD
  1069  007D                     	ds	1
  1070                           
  1071                           	psect	cstackBANK0
  1072  0044                     __pcstackBANK0:	
  1073  0044                     SaveTxStatusToFlash@adrToWrite:	
  1074  0044                     noolite_send@noo_send_buffer:	
  1075                           ; 2 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 12 bytes @ 0x0
  1079  0044                     	ds	2
  1080  0046                     SaveTxStatusToFlash@cellNum:	
  1081                           
  1082                           ; 1 bytes @ 0x2
  1083  0046                     	ds	10
  1084  0050                     noolite_send@startpos:	
  1085                           
  1086                           ; 1 bytes @ 0xC
  1087  0050                     	ds	1
  1088  0051                     noolite_send@countbit:	
  1089                           
  1090                           ; 1 bytes @ 0xD
  1091  0051                     	ds	1
  1092  0052                     noolite_send@chn:	
  1093                           
  1094                           ; 1 bytes @ 0xE
  1095  0052                     	ds	1
  1096  0053                     noolite_send@countsend:	
  1097                           
  1098                           ; 1 bytes @ 0xF
  1099  0053                     	ds	1
  1100  0054                     noolite_send@temp_send:	
  1101                           
  1102                           ; 1 bytes @ 0x10
  1103  0054                     	ds	1
  1104  0055                     noolite_send@endpos:	
  1105                           
  1106                           ; 1 bytes @ 0x11
  1107  0055                     	ds	1
  1108  0056                     ??_KeyOffHandler:	
  1109  0056                     ?_KeyLongHandler:	
  1110                           ; 1 bytes @ 0x12
  1111                           
  1112  0056                     KeyLongHandler@chn:	
  1113                           ; 1 bytes @ 0x12
  1114                           
  1115                           
  1116                           ; 1 bytes @ 0x12
  1117  0056                     	ds	1
  1118  0057                     KeyOffHandler@key:	
  1119  0057                     KeyLongHandler@cmd:	
  1120                           ; 1 bytes @ 0x13
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0x13
  1124  0057                     	ds	1
  1125  0058                     KeyLongHandler@ticksToTrigger:	
  1126                           
  1127                           ; 1 bytes @ 0x14
  1128  0058                     	ds	1
  1129  0059                     KeyLongHandler@nooData:	
  1130                           
  1131                           ; 1 bytes @ 0x15
  1132  0059                     	ds	1
  1133  005A                     ??_main:	
  1134                           
  1135                           ; 1 bytes @ 0x16
  1136  005A                     	ds	2
  1137  005C                     main@chn:	
  1138                           
  1139                           ; 1 bytes @ 0x18
  1140  005C                     	ds	1
  1141  005D                     main@chn_250:	
  1142                           
  1143                           ; 1 bytes @ 0x19
  1144  005D                     	ds	1
  1145  005E                     main@chn_251:	
  1146                           
  1147                           ; 1 bytes @ 0x1A
  1148  005E                     	ds	1
  1149  005F                     main@chn_252:	
  1150                           
  1151                           ; 1 bytes @ 0x1B
  1152  005F                     	ds	1
  1153                           
  1154                           	psect	maintext
  1155  04A7                     __pmaintext:	
  1156 ;;
  1157 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1158 ;;
  1159 ;; *************** function _main *****************
  1160 ;; Defined at:
  1161 ;;		line 128 in file "main.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  chn             1   27[BANK0 ] unsigned char 
  1166 ;;  chn             1   26[BANK0 ] unsigned char 
  1167 ;;  chn             1   25[BANK0 ] unsigned char 
  1168 ;;  chn             1   24[BANK0 ] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : B1F/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMMON   BANK0   BANK1
  1178 ;;      Params:         0       0       0
  1179 ;;      Locals:         0       4       0
  1180 ;;      Temps:          0       2       0
  1181 ;;      Totals:         0       6       0
  1182 ;;Total ram usage:        6 bytes
  1183 ;; Hardware stack levels required when called:    3
  1184 ;; This function calls:
  1185 ;;		_FlashEraseRow
  1186 ;;		_FlashWrite
  1187 ;;		_Init_ADC
  1188 ;;		_Init_CLK
  1189 ;;		_Init_IO
  1190 ;;		_Init_TxStatusFromFlash
  1191 ;;		_Init_TypeFromFlash
  1192 ;;		_KeyLongHandler
  1193 ;;		_KeyOffHandler
  1194 ;;		_RF_Init
  1195 ;;		_SaveTxStatusToFlash
  1196 ;;		_noolite_send
  1197 ;; This function is called by:
  1198 ;;		Startup code after reset
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           
  1203                           ;psect for function _main
  1204  04A7                     _main:	
  1205                           
  1206                           ;main.c: 129: Init_IO();
  1207                           
  1208                           ;incstack = 0
  1209                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1210  04A7  20E5               	fcall	_Init_IO
  1211                           
  1212                           ;main.c: 130: Init_CLK();
  1213  04A8  20CB               	fcall	_Init_CLK
  1214                           
  1215                           ;main.c: 131: Init_ADC();
  1216  04A9  20BF               	fcall	_Init_ADC
  1217                           
  1218                           ;main.c: 132: RF_Init();
  1219  04AA  21E9               	fcall	_RF_Init
  1220                           
  1221                           ;main.c: 134: LATCbits.LATC5 = 1;
  1222  04AB  0022               	movlb	2	; select bank2
  1223  04AC  168E               	bsf	14,5	;volatile
  1224                           
  1225                           ;main.c: 135: DevType = Init_TypeFromFlash(&Type[0]);
  1226  04AD  30C0               	movlw	192
  1227  04AE  00F0               	movwf	Init_TypeFromFlash@type
  1228  04AF  3087               	movlw	135
  1229  04B0  00F1               	movwf	Init_TypeFromFlash@type+1
  1230  04B1  2108               	fcall	_Init_TypeFromFlash
  1231  04B2  0020               	movlb	0	; select bank0
  1232  04B3  00A8               	movwf	_DevType
  1233                           
  1234                           ;main.c: 136: tx_status = Init_TxStatusFromFlash(&TxStatus[0]);
  1235  04B4  30D0               	movlw	208
  1236  04B5  00F0               	movwf	Init_TxStatusFromFlash@txStatus
  1237  04B6  3087               	movlw	135
  1238  04B7  00F1               	movwf	Init_TxStatusFromFlash@txStatus+1
  1239  04B8  2274               	fcall	_Init_TxStatusFromFlash
  1240  04B9  00AB               	movwf	_tx_status
  1241                           
  1242                           ;main.c: 138: INTCONbits.PEIE = 1;
  1243  04BA  170B               	bsf	11,6	;volatile
  1244                           
  1245                           ;main.c: 139: INTCONbits.GIE = 1;
  1246  04BB  178B               	bsf	11,7	;volatile
  1247  04BC                     l1816:	
  1248                           
  1249                           ;main.c: 142: Keys[A].State = (uint8_t) (PORTA & A_Pressed);
  1250  04BC  0020               	movlb	0	; select bank0
  1251  04BD  080C               	movf	12,w	;volatile
  1252  04BE  00AC               	movwf	_Keys
  1253  04BF  3002               	movlw	2
  1254  04C0  05AC               	andwf	_Keys,f
  1255                           
  1256                           ;main.c: 143: Keys[B].State = (uint8_t) (PORTA & B_Pressed);
  1257  04C1  080C               	movf	12,w	;volatile
  1258  04C2  00B0               	movwf	_Keys+4
  1259  04C3  3001               	movlw	1
  1260  04C4  05B0               	andwf	_Keys+4,f
  1261                           
  1262                           ;main.c: 144: Keys[C].State = (uint8_t) (PORTA & C_Pressed);
  1263  04C5  080C               	movf	12,w	;volatile
  1264  04C6  00B4               	movwf	_Keys+8
  1265  04C7  3004               	movlw	4
  1266  04C8  05B4               	andwf	_Keys+8,f
  1267                           
  1268                           ;main.c: 145: Keys[D].State = (uint8_t) (PORTA & D_Pressed);
  1269  04C9  080C               	movf	12,w	;volatile
  1270  04CA  00B8               	movwf	_Keys+12
  1271  04CB  3010               	movlw	16
  1272  04CC  05B8               	andwf	_Keys+12,f
  1273                           
  1274                           ;main.c: 146: Keys[CD].State = (uint8_t) (PORTA & (C_Pressed | D_Pressed));
  1275  04CD  080C               	movf	12,w	;volatile
  1276  04CE  00BC               	movwf	_Keys+16
  1277  04CF  3014               	movlw	20
  1278  04D0  05BC               	andwf	_Keys+16,f
  1279                           
  1280                           ;main.c: 147: if (Keys[CD].State == (C_Pressed | D_Pressed)) {
  1281  04D1  063C               	xorwf	_Keys+16,w
  1282  04D2  1D03               	btfss	3,2
  1283  04D3  2D0B               	goto	l1880
  1284                           
  1285                           ;main.c: 148: SkipHandling = 5;
  1286  04D4  3005               	movlw	5
  1287  04D5  00A6               	movwf	_SkipHandling
  1288                           
  1289                           ;main.c: 149: if (Keys[CD].Tick100ms < 35) {
  1290  04D6  3023               	movlw	35
  1291  04D7  023E               	subwf	_Keys+18,w
  1292  04D8  1803               	skipnc
  1293  04D9  2CDE               	goto	l1846
  1294                           
  1295                           ;main.c: 150: DevMode &= ~(UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1296  04DA  30F9               	movlw	249
  1297  04DB  05A7               	andwf	_DevMode,f
  1298                           
  1299                           ;main.c: 151: DevMode |= BIND_ACTIVE;
  1300  04DC  1427               	bsf	_DevMode,0
  1301                           
  1302                           ;main.c: 153: } else if ((Keys[CD].Tick100ms >= 35) && (Keys[CD].Tick100ms < 49)) {
  1303  04DD  2D05               	goto	l1844
  1304  04DE                     l1846:	
  1305  04DE  3023               	movlw	35
  1306  04DF  023E               	subwf	_Keys+18,w
  1307  04E0  1C03               	skipc
  1308  04E1  2CE8               	goto	l1852
  1309  04E2  3031               	movlw	49
  1310  04E3  023E               	subwf	_Keys+18,w
  1311  04E4  1803               	skipnc
  1312  04E5  2CE8               	goto	l1852
  1313                           
  1314                           ;main.c: 154: DevMode &= ~BIND_ACTIVE;
  1315  04E6  1027               	bcf	_DevMode,0
  1316                           
  1317                           ;main.c: 155: } else if ((Keys[CD].Tick100ms >= 50) && (Keys[CD].Tick100ms < 85)) {
  1318  04E7  2D07               	goto	l68
  1319  04E8                     l1852:	
  1320  04E8  3032               	movlw	50
  1321  04E9  023E               	subwf	_Keys+18,w
  1322  04EA  3055               	movlw	85
  1323  04EB  1C03               	skipc
  1324  04EC  2CF5               	goto	L1
  1325  04ED  023E               	subwf	_Keys+18,w
  1326  04EE  1803               	skipnc
  1327  04EF  2CF4               	goto	l1862
  1328                           
  1329                           ;main.c: 156: DevMode &= ~(BIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1330  04F0  30FA               	movlw	250
  1331  04F1  05A7               	andwf	_DevMode,f
  1332                           
  1333                           ;main.c: 157: DevMode |= UNBIND_ACTIVE;
  1334  04F2  14A7               	bsf	_DevMode,1
  1335  04F3  2D05               	goto	l1844
  1336  04F4                     l1862:	
  1337  04F4  3055               	movlw	85
  1338  04F5                     L1:	
  1339  04F5  023E               	subwf	_Keys+18,w
  1340  04F6  1C03               	skipc
  1341  04F7  2CFE               	goto	l1868
  1342  04F8  3063               	movlw	99
  1343  04F9  023E               	subwf	_Keys+18,w
  1344  04FA  1803               	skipnc
  1345  04FB  2CFE               	goto	l1868
  1346                           
  1347                           ;main.c: 160: DevMode &= ~UNBIND_ACTIVE;
  1348  04FC  10A7               	bcf	_DevMode,1
  1349                           
  1350                           ;main.c: 161: } else if (Keys[CD].Tick100ms >= 100) {
  1351  04FD  2D07               	goto	l68
  1352  04FE                     l1868:	
  1353  04FE  3064               	movlw	100
  1354  04FF  023E               	subwf	_Keys+18,w
  1355  0500  1C03               	skipc
  1356  0501  2D07               	goto	l68
  1357                           
  1358                           ;main.c: 162: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE);
  1359  0502  30FC               	movlw	252
  1360  0503  05A7               	andwf	_DevMode,f
  1361                           
  1362                           ;main.c: 163: DevMode |= MODE_CHANGE_ACTIVE;
  1363  0504  1527               	bsf	_DevMode,2
  1364  0505                     l1844:	
  1365                           
  1366                           ;main.c: 152: tick3_100ms = 100;
  1367  0505  3064               	movlw	100
  1368  0506  00A9               	movwf	_tick3_100ms
  1369  0507                     l68:	
  1370                           
  1371                           ;main.c: 165: }
  1372                           ;main.c: 166: Keys[CD].Tick100ms++;
  1373  0507  0ABE               	incf	_Keys+18,f
  1374                           
  1375                           ;main.c: 168: Keys[C].StateTemp = 0;
  1376  0508  01B5               	clrf	_Keys+9
  1377                           
  1378                           ;main.c: 169: Keys[D].StateTemp = 0;
  1379  0509  01B9               	clrf	_Keys+13
  1380                           
  1381                           ;main.c: 170: } else {
  1382  050A  2D0C               	goto	l1882
  1383  050B                     l1880:	
  1384                           
  1385                           ;main.c: 171: Keys[CD].Tick100ms = 0;
  1386  050B  01BE               	clrf	_Keys+18
  1387  050C                     l1882:	
  1388                           
  1389                           ;main.c: 172: }
  1390                           ;main.c: 174: if (tick3_100ms != 0) {
  1391  050C  0829               	movf	_tick3_100ms,w
  1392  050D  1903               	btfsc	3,2
  1393  050E  2D3B               	goto	l1902
  1394                           
  1395                           ;main.c: 175: tick3_100ms--;
  1396  050F  03A9               	decf	_tick3_100ms,f
  1397                           
  1398                           ;main.c: 176: switch (DevMode & 0x07) {
  1399  0510  2D27               	goto	l1900
  1400  0511                     l79:	
  1401                           ;main.c: 177: case BIND_ACTIVE:
  1402                           
  1403                           
  1404                           ;main.c: 178: LATCbits.LATC3 = ON;
  1405  0511  0022               	movlb	2	; select bank2
  1406  0512  158E               	bsf	14,3	;volatile
  1407                           
  1408                           ;main.c: 179: break;
  1409  0513  2D3F               	goto	l86
  1410  0514                     l1886:	
  1411                           
  1412                           ;main.c: 181: if (LedPulseTick_100ms++ > 2) {
  1413  0514  082A               	movf	_LedPulseTick_100ms,w
  1414  0515  0AAA               	incf	_LedPulseTick_100ms,f
  1415  0516  00DA               	movwf	??_main
  1416  0517  3003               	movlw	3
  1417  0518  025A               	subwf	??_main,w
  1418  0519  1C03               	skipc
  1419  051A  2D3F               	goto	l86
  1420  051B                     l1888:	
  1421                           
  1422                           ;main.c: 182: LATCbits.LATC3 = ~LATCbits.LATC3;
  1423  051B  3008               	movlw	8
  1424  051C  0022               	movlb	2	; select bank2
  1425  051D  068E               	xorwf	14,f	;volatile
  1426                           
  1427                           ;main.c: 183: LedPulseTick_100ms = 0;
  1428  051E  0020               	movlb	0	; select bank0
  1429  051F  01AA               	clrf	_LedPulseTick_100ms
  1430  0520  2D3F               	goto	l86
  1431  0521                     l1892:	
  1432                           
  1433                           ;main.c: 187: if (LedPulseTick_100ms++ > 0) {
  1434  0521  0AAA               	incf	_LedPulseTick_100ms,f
  1435  0522  032A               	decf	_LedPulseTick_100ms,w
  1436  0523  1903               	btfsc	3,2
  1437  0524  2D3F               	goto	l86
  1438  0525  2D1B               	goto	l1888
  1439  0526                     l85:	
  1440                           ;main.c: 192: default:
  1441                           
  1442                           ;main.c: 188: LATCbits.LATC3 = ~LATCbits.LATC3;
  1443                           
  1444  0526  2D3D               	goto	l1904
  1445  0527                     l1900:	
  1446                           ;main.c: 194: break;
  1447                           
  1448                           ;main.c: 193: LATCbits.LATC3 = OFF;
  1449                           
  1450  0527  0827               	movf	_DevMode,w
  1451  0528  3907               	andlw	7
  1452  0529  00DA               	movwf	??_main
  1453  052A  01DB               	clrf	??_main+1
  1454                           
  1455                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1456                           ; Switch size 1, requested type "space"
  1457                           ; Number of cases is 1, Range of values is 0 to 0
  1458                           ; switch strategies available:
  1459                           ; Name         Instructions Cycles
  1460                           ; simple_byte            4     3 (average)
  1461                           ; direct_byte            8     6 (fixed)
  1462                           ; jumptable            260     6 (fixed)
  1463                           ;	Chosen strategy is simple_byte
  1464  052B  085B               	movf	??_main+1,w
  1465  052C  3A00               	xorlw	0	; case 0
  1466  052D  1903               	skipnz
  1467  052E  2D30               	goto	l2142
  1468  052F  2D26               	goto	l85
  1469  0530                     l2142:	
  1470                           
  1471                           ; Switch size 1, requested type "space"
  1472                           ; Number of cases is 3, Range of values is 1 to 4
  1473                           ; switch strategies available:
  1474                           ; Name         Instructions Cycles
  1475                           ; simple_byte           10     6 (average)
  1476                           ; direct_byte           17     9 (fixed)
  1477                           ; jumptable            263     9 (fixed)
  1478                           ;	Chosen strategy is simple_byte
  1479  0530  085A               	movf	??_main,w
  1480  0531  3A01               	xorlw	1	; case 1
  1481  0532  1903               	skipnz
  1482  0533  2D11               	goto	l79
  1483  0534  3A03               	xorlw	3	; case 2
  1484  0535  1903               	skipnz
  1485  0536  2D14               	goto	l1886
  1486  0537  3A06               	xorlw	6	; case 4
  1487  0538  1903               	skipnz
  1488  0539  2D21               	goto	l1892
  1489  053A  2D26               	goto	l85
  1490  053B                     l1902:	
  1491                           
  1492                           ;main.c: 197: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1493  053B  30F8               	movlw	248
  1494  053C  05A7               	andwf	_DevMode,f
  1495  053D                     l1904:	
  1496                           
  1497                           ;main.c: 198: LATCbits.LATC3 = OFF;
  1498  053D  0022               	movlb	2	; select bank2
  1499  053E  118E               	bcf	14,3	;volatile
  1500  053F                     l86:	
  1501                           
  1502                           ;main.c: 199: }
  1503                           ;main.c: 200: if (SkipHandling != 0) {
  1504  053F  0020               	movlb	0	; select bank0
  1505  0540  0826               	movf	_SkipHandling,w
  1506  0541  1903               	btfsc	3,2
  1507  0542  2D48               	goto	l87
  1508                           
  1509                           ;main.c: 201: if (Keys[CD].State == 0) {
  1510  0543  083C               	movf	_Keys+16,w
  1511  0544  1D03               	btfss	3,2
  1512  0545  2F83               	goto	l2066
  1513                           
  1514                           ;main.c: 202: SkipHandling--;
  1515  0546  03A6               	decf	_SkipHandling,f
  1516  0547  2F83               	goto	l2066
  1517  0548                     l87:	
  1518                           
  1519                           ;main.c: 205: if ((DevMode & BIND_ACTIVE) != 0) {
  1520  0548  1C27               	btfss	_DevMode,0
  1521  0549  2D80               	goto	l90
  1522                           
  1523                           ;main.c: 206: for (uint8_t chn = 0; chn < 4; chn++) {
  1524  054A  01DC               	clrf	main@chn
  1525  054B                     l1916:	
  1526                           
  1527                           ;main.c: 207: if (Keys[chn].State != Keys[chn].StateTemp) {
  1528  054B  085C               	movf	main@chn,w
  1529  054C  0709               	addwf	9,w
  1530  054D  0709               	addwf	9,w
  1531  054E  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1532  054F  0086               	movwf	6
  1533  0550  0187               	clrf	7
  1534  0551  085C               	movf	main@chn,w
  1535  0552  0709               	addwf	9,w
  1536  0553  0709               	addwf	9,w
  1537  0554  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1538  0555  0084               	movwf	4
  1539  0556  0185               	clrf	5
  1540  0557  0800               	movf	0,w
  1541  0558  0601               	xorwf	1,w
  1542  0559  1903               	skipnz
  1543  055A  2D7A               	goto	l1926
  1544                           
  1545                           ;main.c: 208: if (Keys[chn].State == 0) {
  1546  055B  085C               	movf	main@chn,w
  1547  055C  0709               	addwf	9,w
  1548  055D  0709               	addwf	9,w
  1549  055E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1550  055F  0086               	movwf	6
  1551  0560  0801               	movf	1,w
  1552  0561  1D03               	btfss	3,2
  1553  0562  2D6C               	goto	l1924
  1554                           
  1555                           ;main.c: 209: noolite_send(chn, CMD_Bind, 0, &noo_send_data[0]);
  1556  0563  300F               	movlw	15
  1557  0564  00F0               	movwf	noolite_send@noo_send_command
  1558  0565  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1559  0566  01F1               	clrf	noolite_send@noo_send_format
  1560  0567  00F2               	movwf	noolite_send@data
  1561  0568  085C               	movf	main@chn,w
  1562  0569  230D               	fcall	_noolite_send
  1563                           
  1564                           ;main.c: 210: DevMode &= ~BIND_ACTIVE;
  1565  056A  0020               	movlb	0	; select bank0
  1566  056B  1027               	bcf	_DevMode,0
  1567  056C                     l1924:	
  1568                           
  1569                           ;main.c: 211: }
  1570                           ;main.c: 212: Keys[chn].StateTemp = Keys[chn].State;
  1571  056C  085C               	movf	main@chn,w
  1572  056D  0709               	addwf	9,w
  1573  056E  0709               	addwf	9,w
  1574  056F  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1575  0570  0086               	movwf	6
  1576  0571  0187               	clrf	7
  1577  0572  085C               	movf	main@chn,w
  1578  0573  0709               	addwf	9,w
  1579  0574  0709               	addwf	9,w
  1580  0575  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1581  0576  0084               	movwf	4
  1582  0577  0185               	clrf	5
  1583  0578  0800               	movf	0,w
  1584  0579  0081               	movwf	1
  1585  057A                     l1926:	
  1586  057A  3004               	movlw	4
  1587  057B  0ADC               	incf	main@chn,f
  1588  057C  025C               	subwf	main@chn,w
  1589  057D  1803               	btfsc	3,0
  1590  057E  2F83               	goto	l2066
  1591  057F  2D4B               	goto	l1916
  1592  0580                     l90:	
  1593  0580  1CA7               	btfss	_DevMode,1
  1594  0581  2DBB               	goto	l96
  1595                           
  1596                           ;main.c: 216: for (uint8_t chn = 0; chn < 4; chn++) {
  1597  0582  01DD               	clrf	main@chn_250
  1598  0583                     l1932:	
  1599  0583  3004               	movlw	4
  1600  0584  025D               	subwf	main@chn_250,w
  1601  0585  1803               	btfsc	3,0
  1602  0586  2F83               	goto	l2066
  1603                           
  1604                           ;main.c: 217: if (Keys[chn].State != Keys[chn].StateTemp) {
  1605  0587  085D               	movf	main@chn_250,w
  1606  0588  0709               	addwf	9,w
  1607  0589  0709               	addwf	9,w
  1608  058A  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1609  058B  0086               	movwf	6
  1610  058C  0187               	clrf	7
  1611  058D  085D               	movf	main@chn_250,w
  1612  058E  0709               	addwf	9,w
  1613  058F  0709               	addwf	9,w
  1614  0590  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1615  0591  0084               	movwf	4
  1616  0592  0185               	clrf	5
  1617  0593  0800               	movf	0,w
  1618  0594  0601               	xorwf	1,w
  1619  0595  1903               	skipnz
  1620  0596  2DB9               	goto	l1948
  1621                           
  1622                           ;main.c: 218: if (Keys[chn].State == 0) {
  1623  0597  085D               	movf	main@chn_250,w
  1624  0598  0709               	addwf	9,w
  1625  0599  0709               	addwf	9,w
  1626  059A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1627  059B  0086               	movwf	6
  1628  059C  0801               	movf	1,w
  1629  059D  1D03               	btfss	3,2
  1630  059E  2DAA               	goto	l1946
  1631                           
  1632                           ;main.c: 219: noolite_send(chn, CMD_Unbind, 0, &noo_send_data[0]);
  1633  059F  3009               	movlw	9
  1634  05A0  00F0               	movwf	noolite_send@noo_send_command
  1635  05A1  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1636  05A2  01F1               	clrf	noolite_send@noo_send_format
  1637  05A3  00F2               	movwf	noolite_send@data
  1638  05A4  085D               	movf	main@chn_250,w
  1639  05A5  230D               	fcall	_noolite_send
  1640                           
  1641                           ;main.c: 220: DevMode &= ~UNBIND_ACTIVE;
  1642  05A6  0020               	movlb	0	; select bank0
  1643  05A7  10A7               	bcf	_DevMode,1
  1644                           
  1645                           ;main.c: 221: LATCbits.LATC3 = OFF;
  1646  05A8  0022               	movlb	2	; select bank2
  1647  05A9  118E               	bcf	14,3	;volatile
  1648  05AA                     l1946:	
  1649                           
  1650                           ;main.c: 222: }
  1651                           ;main.c: 223: Keys[chn].StateTemp = Keys[chn].State;
  1652  05AA  0020               	movlb	0	; select bank0
  1653  05AB  085D               	movf	main@chn_250,w
  1654  05AC  0709               	addwf	9,w
  1655  05AD  0709               	addwf	9,w
  1656  05AE  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1657  05AF  0086               	movwf	6
  1658  05B0  0187               	clrf	7
  1659  05B1  085D               	movf	main@chn_250,w
  1660  05B2  0709               	addwf	9,w
  1661  05B3  0709               	addwf	9,w
  1662  05B4  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1663  05B5  0084               	movwf	4
  1664  05B6  0185               	clrf	5
  1665  05B7  0800               	movf	0,w
  1666  05B8  0081               	movwf	1
  1667  05B9                     l1948:	
  1668  05B9  0ADD               	incf	main@chn_250,f
  1669  05BA  2D83               	goto	l1932
  1670  05BB                     l96:	
  1671  05BB  1D27               	btfss	_DevMode,2
  1672  05BC  2E1F               	goto	l1980
  1673                           
  1674                           ;main.c: 227: for (uint8_t chn = 0; chn < 4; chn++) {
  1675  05BD  01DE               	clrf	main@chn_251
  1676  05BE                     l1954:	
  1677  05BE  3004               	movlw	4
  1678  05BF  025E               	subwf	main@chn_251,w
  1679  05C0  1803               	btfsc	3,0
  1680  05C1  2F83               	goto	l2066
  1681                           
  1682                           ;main.c: 228: if (Keys[chn].State != Keys[chn].StateTemp) {
  1683  05C2  085E               	movf	main@chn_251,w
  1684  05C3  0709               	addwf	9,w
  1685  05C4  0709               	addwf	9,w
  1686  05C5  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1687  05C6  0086               	movwf	6
  1688  05C7  0187               	clrf	7
  1689  05C8  085E               	movf	main@chn_251,w
  1690  05C9  0709               	addwf	9,w
  1691  05CA  0709               	addwf	9,w
  1692  05CB  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1693  05CC  0084               	movwf	4
  1694  05CD  0185               	clrf	5
  1695  05CE  0800               	movf	0,w
  1696  05CF  0601               	xorwf	1,w
  1697  05D0  1903               	skipnz
  1698  05D1  2E1D               	goto	l1976
  1699                           
  1700                           ;main.c: 229: if (Keys[chn].State == 0) {
  1701  05D2  085E               	movf	main@chn_251,w
  1702  05D3  0709               	addwf	9,w
  1703  05D4  0709               	addwf	9,w
  1704  05D5  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1705  05D6  0086               	movwf	6
  1706  05D7  0801               	movf	1,w
  1707  05D8  1D03               	btfss	3,2
  1708  05D9  2E0E               	goto	l1974
  1709  05DA  0064               	clrwdt	;# 
  1710                           
  1711                           ;main.c: 231: LATCbits.LATC3 = ON;
  1712  05DB  0022               	movlb	2	; select bank2
  1713  05DC  158E               	bsf	14,3	;volatile
  1714                           
  1715                           ;main.c: 232: FlashEraseRow(TYPE_ADR);
  1716  05DD  30C0               	movlw	192
  1717  05DE  00F0               	movwf	FlashEraseRow@rowAddr
  1718  05DF  3007               	movlw	7
  1719  05E0  00F1               	movwf	FlashEraseRow@rowAddr+1
  1720  05E1  20D8               	fcall	_FlashEraseRow
  1721  05E2  0064               	clrwdt	;# 
  1722                           
  1723                           ;main.c: 234: FlashWrite(TYPE_ADR, chn);
  1724  05E3  30C0               	movlw	192
  1725  05E4  00F0               	movwf	FlashWrite@addr
  1726  05E5  3007               	movlw	7
  1727  05E6  00F1               	movwf	FlashWrite@addr+1
  1728  05E7  0020               	movlb	0	; select bank0
  1729  05E8  085E               	movf	main@chn_251,w
  1730  05E9  00F2               	movwf	FlashWrite@flash_data
  1731  05EA  01F3               	clrf	FlashWrite@flash_data+1
  1732  05EB  20F5               	fcall	_FlashWrite
  1733  05EC  0064               	clrwdt	;# 
  1734                           
  1735                           ;main.c: 236: FlashWrite(TYPE_ADR + 1, 0x5A);
  1736  05ED  30C1               	movlw	193
  1737  05EE  00F0               	movwf	FlashWrite@addr
  1738  05EF  3007               	movlw	7
  1739  05F0  00F1               	movwf	FlashWrite@addr+1
  1740  05F1  305A               	movlw	90
  1741  05F2  00F2               	movwf	FlashWrite@flash_data
  1742  05F3  01F3               	clrf	FlashWrite@flash_data+1
  1743  05F4  20F5               	fcall	_FlashWrite
  1744  05F5  0064               	clrwdt	;# 
  1745                           
  1746                           ;main.c: 239: _delay((unsigned long)((500)*(8000000/4000.0)));
  1747  05F6  3006               	movlw	6
  1748  05F7  0020               	movlb	0	; select bank0
  1749  05F8  00DB               	movwf	??_main+1
  1750  05F9  3013               	movlw	19
  1751  05FA  00DA               	movwf	??_main
  1752  05FB  30AD               	movlw	173
  1753  05FC                     u1567:	
  1754  05FC  0B89               	decfsz	9,f
  1755  05FD  2DFC               	goto	u1567
  1756  05FE  0BDA               	decfsz	??_main,f
  1757  05FF  2DFC               	goto	u1567
  1758  0600  0BDB               	decfsz	??_main+1,f
  1759  0601  2DFC               	goto	u1567
  1760  0602  3200               	nop2
  1761  0603  0064               	clrwdt	;# 
  1762                           
  1763                           ;main.c: 241: DevType = Init_TypeFromFlash(&Type[0]);
  1764  0604  30C0               	movlw	192
  1765  0605  00F0               	movwf	Init_TypeFromFlash@type
  1766  0606  3087               	movlw	135
  1767  0607  00F1               	movwf	Init_TypeFromFlash@type+1
  1768  0608  2108               	fcall	_Init_TypeFromFlash
  1769  0609  0020               	movlb	0	; select bank0
  1770  060A  00A8               	movwf	_DevType
  1771                           
  1772                           ;main.c: 242: DevMode &= ~MODE_CHANGE_ACTIVE;
  1773  060B  1127               	bcf	_DevMode,2
  1774                           
  1775                           ;main.c: 243: LATCbits.LATC3 = OFF;
  1776  060C  0022               	movlb	2	; select bank2
  1777  060D  118E               	bcf	14,3	;volatile
  1778  060E                     l1974:	
  1779                           
  1780                           ;main.c: 244: }
  1781                           ;main.c: 245: Keys[chn].StateTemp = Keys[chn].State;
  1782  060E  0020               	movlb	0	; select bank0
  1783  060F  085E               	movf	main@chn_251,w
  1784  0610  0709               	addwf	9,w
  1785  0611  0709               	addwf	9,w
  1786  0612  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1787  0613  0086               	movwf	6
  1788  0614  0187               	clrf	7
  1789  0615  085E               	movf	main@chn_251,w
  1790  0616  0709               	addwf	9,w
  1791  0617  0709               	addwf	9,w
  1792  0618  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1793  0619  0084               	movwf	4
  1794  061A  0185               	clrf	5
  1795  061B  0800               	movf	0,w
  1796  061C  0081               	movwf	1
  1797  061D                     l1976:	
  1798  061D  0ADE               	incf	main@chn_251,f
  1799  061E  2DBE               	goto	l1954
  1800  061F                     l1980:	
  1801                           
  1802                           ;main.c: 249: for (uint8_t chn = 0; chn < 4; chn++) {
  1803  061F  01DF               	clrf	main@chn_252
  1804  0620                     l1982:	
  1805  0620  3004               	movlw	4
  1806  0621  025F               	subwf	main@chn_252,w
  1807  0622  1803               	btfsc	3,0
  1808  0623  2F83               	goto	l2066
  1809                           
  1810                           ;main.c: 250: if (Keys[chn].State != Keys[chn].StateTemp) {
  1811  0624  085F               	movf	main@chn_252,w
  1812  0625  0709               	addwf	9,w
  1813  0626  0709               	addwf	9,w
  1814  0627  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1815  0628  0086               	movwf	6
  1816  0629  0187               	clrf	7
  1817  062A  085F               	movf	main@chn_252,w
  1818  062B  0709               	addwf	9,w
  1819  062C  0709               	addwf	9,w
  1820  062D  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1821  062E  0084               	movwf	4
  1822  062F  0185               	clrf	5
  1823  0630  0800               	movf	0,w
  1824  0631  0601               	xorwf	1,w
  1825  0632  1D03               	btfss	3,2
  1826  0633  2ED0               	goto	l2028
  1827  0634  2F72               	goto	l2060
  1828  0635                     l1990:	
  1829                           
  1830                           ;main.c: 253: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1831  0635  085F               	movf	main@chn_252,w
  1832  0636  00FB               	movwf	KeyOffHandler@chn
  1833  0637  3004               	movlw	4
  1834  0638  00FC               	movwf	KeyOffHandler@cmd
  1835  0639  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1836  063A  00FD               	movwf	KeyOffHandler@nooData
  1837  063B  085F               	movf	main@chn_252,w
  1838  063C  0709               	addwf	9,w
  1839  063D  0709               	addwf	9,w
  1840  063E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1841  063F  2152               	fcall	_KeyOffHandler
  1842                           
  1843                           ;main.c: 254: break;
  1844  0640  2EDE               	goto	l2030
  1845  0641                     l1992:	
  1846  0641  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1847                           
  1848                           ;main.c: 259: KeyOffHandler(&Keys[chn], 0, CMD_OFF, &noo_send_data[0]);
  1849  0642  01FB               	clrf	KeyOffHandler@chn
  1850  0643  01FC               	clrf	KeyOffHandler@cmd
  1851  0644  00FD               	movwf	KeyOffHandler@nooData
  1852  0645  085F               	movf	main@chn_252,w
  1853  0646  0709               	addwf	9,w
  1854  0647  0709               	addwf	9,w
  1855  0648  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1856  0649  2152               	fcall	_KeyOffHandler
  1857                           
  1858                           ;main.c: 260: break;
  1859  064A  2EDE               	goto	l2030
  1860  064B                     l1994:	
  1861  064B  3002               	movlw	2
  1862                           
  1863                           ;main.c: 262: KeyOffHandler(&Keys[chn], 0, CMD_ON, &noo_send_data[0]);
  1864  064C  01FB               	clrf	KeyOffHandler@chn
  1865  064D  00FC               	movwf	KeyOffHandler@cmd
  1866  064E  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1867  064F  00FD               	movwf	KeyOffHandler@nooData
  1868  0650  085F               	movf	main@chn_252,w
  1869  0651  0709               	addwf	9,w
  1870  0652  0709               	addwf	9,w
  1871  0653  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1872  0654  2152               	fcall	_KeyOffHandler
  1873                           
  1874                           ;main.c: 263: break;
  1875  0655  2EDE               	goto	l2030
  1876  0656                     l1996:	
  1877  0656  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1878                           
  1879                           ;main.c: 265: KeyOffHandler(&Keys[chn], 1, CMD_OFF, &noo_send_data[0]);
  1880  0657  01FB               	clrf	KeyOffHandler@chn
  1881  0658  0AFB               	incf	KeyOffHandler@chn,f
  1882  0659  01FC               	clrf	KeyOffHandler@cmd
  1883  065A  00FD               	movwf	KeyOffHandler@nooData
  1884  065B  085F               	movf	main@chn_252,w
  1885  065C  0709               	addwf	9,w
  1886  065D  0709               	addwf	9,w
  1887  065E  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1888  065F  2152               	fcall	_KeyOffHandler
  1889                           
  1890                           ;main.c: 266: break;
  1891  0660  2EDE               	goto	l2030
  1892  0661                     l1998:	
  1893  0661  3002               	movlw	2
  1894                           
  1895                           ;main.c: 268: KeyOffHandler(&Keys[chn], 1, CMD_ON, &noo_send_data[0]);
  1896  0662  01FB               	clrf	KeyOffHandler@chn
  1897  0663  0AFB               	incf	KeyOffHandler@chn,f
  1898  0664  00FC               	movwf	KeyOffHandler@cmd
  1899  0665  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1900  0666  00FD               	movwf	KeyOffHandler@nooData
  1901  0667  085F               	movf	main@chn_252,w
  1902  0668  0709               	addwf	9,w
  1903  0669  0709               	addwf	9,w
  1904  066A  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1905  066B  2152               	fcall	_KeyOffHandler
  1906                           
  1907                           ;main.c: 269: break;
  1908  066C  2EDE               	goto	l2030
  1909  066D                     l2002:	
  1910  066D  085F               	movf	main@chn_252,w
  1911                           
  1912                           ; Switch size 1, requested type "space"
  1913                           ; Number of cases is 4, Range of values is 0 to 3
  1914                           ; switch strategies available:
  1915                           ; Name         Instructions Cycles
  1916                           ; simple_byte           13     7 (average)
  1917                           ; direct_byte           14     6 (fixed)
  1918                           ; jumptable            260     6 (fixed)
  1919                           ;	Chosen strategy is simple_byte
  1920  066E  3A00               	xorlw	0	; case 0
  1921  066F  1903               	skipnz
  1922  0670  2E41               	goto	l1992
  1923  0671  3A01               	xorlw	1	; case 1
  1924  0672  1903               	skipnz
  1925  0673  2E4B               	goto	l1994
  1926  0674  3A03               	xorlw	3	; case 2
  1927  0675  1903               	skipnz
  1928  0676  2E56               	goto	l1996
  1929  0677  3A01               	xorlw	1	; case 3
  1930  0678  1903               	skipnz
  1931  0679  2E61               	goto	l1998
  1932  067A  2EDE               	goto	l2030
  1933                           
  1934                           ;main.c: 271: break;
  1935  067B  2EDE               	goto	l2030
  1936  067C                     l2004:	
  1937                           
  1938                           ;main.c: 274: if (chn > 1) {
  1939  067C  3002               	movlw	2
  1940  067D  025F               	subwf	main@chn_252,w
  1941                           
  1942                           ;main.c: 275: if (Keys[chn].State == 0) {
  1943  067E  085F               	movf	main@chn_252,w
  1944  067F  1C03               	skipc
  1945  0680  2E9E               	goto	L2
  1946  0681  0709               	addwf	9,w
  1947  0682  0709               	addwf	9,w
  1948  0683  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1949  0684  0086               	movwf	6
  1950  0685  0187               	clrf	7
  1951  0686  0801               	movf	1,w
  1952  0687  1D03               	btfss	3,2
  1953  0688  2EDE               	goto	l2030
  1954                           
  1955                           ;main.c: 276: if (Keys[chn].Tick100ms < 10) {
  1956  0689  085F               	movf	main@chn_252,w
  1957  068A  0709               	addwf	9,w
  1958  068B  0709               	addwf	9,w
  1959  068C  3E2E               	addlw	(low ((_Keys| 0+2)))& (0+255)
  1960  068D  0086               	movwf	6
  1961  068E  300A               	movlw	10
  1962  068F  0201               	subwf	1,w
  1963  0690  1803               	skipnc
  1964  0691  2EDE               	goto	l2030
  1965                           
  1966                           ;main.c: 277: if (chn > 1) {
  1967  0692  3002               	movlw	2
  1968  0693  025F               	subwf	main@chn_252,w
  1969  0694  1C03               	skipc
  1970  0695  2EDE               	goto	l2030
  1971                           
  1972                           ;main.c: 278: noolite_send(chn, CMD_Load_Preset, 0, &noo_send_data[0]);
  1973  0696  3007               	movlw	7
  1974  0697  00F0               	movwf	noolite_send@noo_send_command
  1975  0698  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1976  0699  01F1               	clrf	noolite_send@noo_send_format
  1977  069A  00F2               	movwf	noolite_send@data
  1978  069B  085F               	movf	main@chn_252,w
  1979  069C  230D               	fcall	_noolite_send
  1980  069D  2EDE               	goto	l2030
  1981  069E                     L2:	
  1982                           ;main.c: 283: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  1983                           
  1984  069E  00FB               	movwf	KeyOffHandler@chn
  1985  069F  3004               	movlw	4
  1986  06A0  00FC               	movwf	KeyOffHandler@cmd
  1987  06A1  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  1988  06A2  00FD               	movwf	KeyOffHandler@nooData
  1989  06A3  085F               	movf	main@chn_252,w
  1990  06A4  0709               	addwf	9,w
  1991  06A5  0709               	addwf	9,w
  1992  06A6  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  1993  06A7  2152               	fcall	_KeyOffHandler
  1994  06A8  2EDE               	goto	l2030
  1995  06A9                     l2016:	
  1996                           
  1997                           ;main.c: 287: if (chn > 1) {
  1998  06A9  3002               	movlw	2
  1999  06AA  025F               	subwf	main@chn_252,w
  2000                           
  2001                           ;main.c: 288: if (Keys[chn].State) {
  2002  06AB  085F               	movf	main@chn_252,w
  2003  06AC  1C03               	skipc
  2004  06AD  2EC5               	goto	L3
  2005  06AE  0709               	addwf	9,w
  2006  06AF  0709               	addwf	9,w
  2007  06B0  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2008  06B1  0086               	movwf	6
  2009  06B2  0187               	clrf	7
  2010  06B3  0801               	movf	1,w
  2011  06B4  1903               	btfsc	3,2
  2012  06B5  2EBE               	goto	l2022
  2013                           
  2014                           ;main.c: 289: noolite_send(chn, CMD_ON, 0, &noo_send_data[0]);
  2015  06B6  3002               	movlw	2
  2016  06B7  00F0               	movwf	noolite_send@noo_send_command
  2017  06B8  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2018  06B9  01F1               	clrf	noolite_send@noo_send_format
  2019  06BA  00F2               	movwf	noolite_send@data
  2020  06BB  085F               	movf	main@chn_252,w
  2021  06BC  230D               	fcall	_noolite_send
  2022                           
  2023                           ;main.c: 290: } else {
  2024  06BD  2EDE               	goto	l2030
  2025  06BE                     l2022:	
  2026  06BE  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2027                           
  2028                           ;main.c: 291: noolite_send(chn, CMD_OFF, 0, &noo_send_data[0]);
  2029  06BF  01F0               	clrf	noolite_send@noo_send_command
  2030  06C0  01F1               	clrf	noolite_send@noo_send_format
  2031  06C1  00F2               	movwf	noolite_send@data
  2032  06C2  085F               	movf	main@chn_252,w
  2033  06C3  230D               	fcall	_noolite_send
  2034  06C4  2EDE               	goto	l2030
  2035  06C5                     L3:	
  2036                           ;main.c: 294: KeyOffHandler(&Keys[chn], chn, CMD_Switch, &noo_send_data[0]);
  2037                           
  2038  06C5  00FB               	movwf	KeyOffHandler@chn
  2039  06C6  3004               	movlw	4
  2040  06C7  00FC               	movwf	KeyOffHandler@cmd
  2041  06C8  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2042  06C9  00FD               	movwf	KeyOffHandler@nooData
  2043  06CA  085F               	movf	main@chn_252,w
  2044  06CB  0709               	addwf	9,w
  2045  06CC  0709               	addwf	9,w
  2046  06CD  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2047  06CE  2152               	fcall	_KeyOffHandler
  2048  06CF  2EDE               	goto	l2030
  2049  06D0                     l2028:	
  2050  06D0  0828               	movf	_DevType,w
  2051                           
  2052                           ; Switch size 1, requested type "space"
  2053                           ; Number of cases is 4, Range of values is 0 to 3
  2054                           ; switch strategies available:
  2055                           ; Name         Instructions Cycles
  2056                           ; simple_byte           13     7 (average)
  2057                           ; direct_byte           14     6 (fixed)
  2058                           ; jumptable            260     6 (fixed)
  2059                           ;	Chosen strategy is simple_byte
  2060  06D1  3A00               	xorlw	0	; case 0
  2061  06D2  1903               	skipnz
  2062  06D3  2E35               	goto	l1990
  2063  06D4  3A01               	xorlw	1	; case 1
  2064  06D5  1903               	skipnz
  2065  06D6  2E6D               	goto	l2002
  2066  06D7  3A03               	xorlw	3	; case 2
  2067  06D8  1903               	skipnz
  2068  06D9  2E7C               	goto	l2004
  2069  06DA  3A01               	xorlw	1	; case 3
  2070  06DB  1903               	skipnz
  2071  06DC  2EA9               	goto	l2016
  2072  06DD  2EDE               	goto	l2030
  2073  06DE                     l2030:	
  2074                           
  2075                           ;main.c: 298: OffDelayTicks_100ms = 3;
  2076  06DE  3003               	movlw	3
  2077  06DF  0020               	movlb	0	; select bank0
  2078  06E0  00A5               	movwf	_OffDelayTicks_100ms
  2079                           
  2080                           ;main.c: 299: Keys[chn].StateTemp = Keys[chn].State;
  2081  06E1  085F               	movf	main@chn_252,w
  2082  06E2  0709               	addwf	9,w
  2083  06E3  0709               	addwf	9,w
  2084  06E4  3E2D               	addlw	(low ((_Keys| 0+1)))& (0+255)
  2085  06E5  0086               	movwf	6
  2086  06E6  0187               	clrf	7
  2087  06E7  085F               	movf	main@chn_252,w
  2088  06E8  0709               	addwf	9,w
  2089  06E9  0709               	addwf	9,w
  2090  06EA  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2091  06EB  0084               	movwf	4
  2092  06EC  0185               	clrf	5
  2093  06ED  0800               	movf	0,w
  2094  06EE  0081               	movwf	1
  2095  06EF  2F72               	goto	l2060
  2096  06F0                     l2034:	
  2097                           
  2098                           ;main.c: 304: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2099  06F0  085F               	movf	main@chn_252,w
  2100  06F1  00D6               	movwf	KeyLongHandler@chn
  2101  06F2  3005               	movlw	5
  2102  06F3  00D7               	movwf	KeyLongHandler@cmd
  2103  06F4  3009               	movlw	9
  2104  06F5  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2105  06F6  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2106  06F7  00D9               	movwf	KeyLongHandler@nooData
  2107  06F8  085F               	movf	main@chn_252,w
  2108  06F9  0709               	addwf	9,w
  2109  06FA  0709               	addwf	9,w
  2110  06FB  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2111  06FC  2126               	fcall	_KeyLongHandler
  2112                           
  2113                           ;main.c: 305: break;
  2114  06FD  2F80               	goto	l2062
  2115  06FE                     l2036:	
  2116  06FE  3009               	movlw	9
  2117                           
  2118                           ;main.c: 310: KeyLongHandler(&Keys[chn], 0, CMD_Bright_Down, 9, &noo_send_data[0]);
  2119  06FF  01D6               	clrf	KeyLongHandler@chn
  2120  0700  01D7               	clrf	KeyLongHandler@cmd
  2121  0701  0AD7               	incf	KeyLongHandler@cmd,f
  2122  0702  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2123  0703  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2124  0704  00D9               	movwf	KeyLongHandler@nooData
  2125  0705  085F               	movf	main@chn_252,w
  2126  0706  0709               	addwf	9,w
  2127  0707  0709               	addwf	9,w
  2128  0708  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2129  0709  2126               	fcall	_KeyLongHandler
  2130                           
  2131                           ;main.c: 311: break;
  2132  070A  2F80               	goto	l2062
  2133  070B                     l2038:	
  2134  070B  3003               	movlw	3
  2135                           
  2136                           ;main.c: 313: KeyLongHandler(&Keys[chn], 0, CMD_Bright_Up, 9, &noo_send_data[0]);
  2137  070C  01D6               	clrf	KeyLongHandler@chn
  2138  070D  00D7               	movwf	KeyLongHandler@cmd
  2139  070E  3009               	movlw	9
  2140  070F  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2141  0710  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2142  0711  00D9               	movwf	KeyLongHandler@nooData
  2143  0712  085F               	movf	main@chn_252,w
  2144  0713  0709               	addwf	9,w
  2145  0714  0709               	addwf	9,w
  2146  0715  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2147  0716  2126               	fcall	_KeyLongHandler
  2148                           
  2149                           ;main.c: 314: break;
  2150  0717  2F80               	goto	l2062
  2151  0718                     l2040:	
  2152  0718  3009               	movlw	9
  2153                           
  2154                           ;main.c: 316: KeyLongHandler(&Keys[chn], 1, CMD_Bright_Down, 9, &noo_send_data[0]);
  2155  0719  01D6               	clrf	KeyLongHandler@chn
  2156  071A  0AD6               	incf	KeyLongHandler@chn,f
  2157  071B  01D7               	clrf	KeyLongHandler@cmd
  2158  071C  0AD7               	incf	KeyLongHandler@cmd,f
  2159  071D  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2160  071E  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2161  071F  00D9               	movwf	KeyLongHandler@nooData
  2162  0720  085F               	movf	main@chn_252,w
  2163  0721  0709               	addwf	9,w
  2164  0722  0709               	addwf	9,w
  2165  0723  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2166  0724  2126               	fcall	_KeyLongHandler
  2167                           
  2168                           ;main.c: 317: break;
  2169  0725  2F80               	goto	l2062
  2170  0726                     l2042:	
  2171  0726  3003               	movlw	3
  2172                           
  2173                           ;main.c: 319: KeyLongHandler(&Keys[chn], 1, CMD_Bright_Up, 9, &noo_send_data[0]);
  2174  0727  01D6               	clrf	KeyLongHandler@chn
  2175  0728  0AD6               	incf	KeyLongHandler@chn,f
  2176  0729  00D7               	movwf	KeyLongHandler@cmd
  2177  072A  3009               	movlw	9
  2178  072B  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2179  072C  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2180  072D  00D9               	movwf	KeyLongHandler@nooData
  2181  072E  085F               	movf	main@chn_252,w
  2182  072F  0709               	addwf	9,w
  2183  0730  0709               	addwf	9,w
  2184  0731  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2185  0732  2126               	fcall	_KeyLongHandler
  2186                           
  2187                           ;main.c: 320: break;
  2188  0733  2F80               	goto	l2062
  2189  0734                     l2046:	
  2190  0734  085F               	movf	main@chn_252,w
  2191                           
  2192                           ; Switch size 1, requested type "space"
  2193                           ; Number of cases is 4, Range of values is 0 to 3
  2194                           ; switch strategies available:
  2195                           ; Name         Instructions Cycles
  2196                           ; simple_byte           13     7 (average)
  2197                           ; direct_byte           14     6 (fixed)
  2198                           ; jumptable            260     6 (fixed)
  2199                           ;	Chosen strategy is simple_byte
  2200  0735  3A00               	xorlw	0	; case 0
  2201  0736  1903               	skipnz
  2202  0737  2EFE               	goto	l2036
  2203  0738  3A01               	xorlw	1	; case 1
  2204  0739  1903               	skipnz
  2205  073A  2F0B               	goto	l2038
  2206  073B  3A03               	xorlw	3	; case 2
  2207  073C  1903               	skipnz
  2208  073D  2F18               	goto	l2040
  2209  073E  3A01               	xorlw	1	; case 3
  2210  073F  1903               	skipnz
  2211  0740  2F26               	goto	l2042
  2212  0741  2F80               	goto	l2062
  2213  0742                     l2048:	
  2214                           
  2215                           ;main.c: 325: if (chn < 2) {
  2216  0742  3002               	movlw	2
  2217  0743  025F               	subwf	main@chn_252,w
  2218                           
  2219                           ;main.c: 326: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2220  0744  085F               	movf	main@chn_252,w
  2221  0745  00D6               	movwf	KeyLongHandler@chn
  2222  0746  1803               	skipnc
  2223  0747  2F54               	goto	L4
  2224  0748  3005               	movlw	5
  2225  0749  00D7               	movwf	KeyLongHandler@cmd
  2226  074A  3009               	movlw	9
  2227  074B  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2228  074C  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2229  074D  00D9               	movwf	KeyLongHandler@nooData
  2230  074E  085F               	movf	main@chn_252,w
  2231  074F  0709               	addwf	9,w
  2232  0750  0709               	addwf	9,w
  2233  0751  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2234  0752  2126               	fcall	_KeyLongHandler
  2235                           
  2236                           ;main.c: 327: } else {
  2237  0753  2F80               	goto	l2062
  2238  0754                     L4:	
  2239                           ;main.c: 328: KeyLongHandler(&Keys[chn], chn, CMD_Save_Preset, 49, &noo_send_data[0]);
  2240                           
  2241  0754  3008               	movlw	8
  2242  0755  00D7               	movwf	KeyLongHandler@cmd
  2243  0756  3031               	movlw	49
  2244  0757  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2245  0758  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2246  0759  00D9               	movwf	KeyLongHandler@nooData
  2247  075A  085F               	movf	main@chn_252,w
  2248  075B  0709               	addwf	9,w
  2249  075C  0709               	addwf	9,w
  2250  075D  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2251  075E  2126               	fcall	_KeyLongHandler
  2252  075F  2F80               	goto	l2062
  2253  0760                     l2054:	
  2254                           
  2255                           ;main.c: 332: if (chn < 2) {
  2256  0760  3002               	movlw	2
  2257  0761  025F               	subwf	main@chn_252,w
  2258  0762  1803               	skipnc
  2259  0763  2F80               	goto	l2062
  2260                           
  2261                           ;main.c: 333: KeyLongHandler(&Keys[chn], chn, CMD_Bright_Back, 9, &noo_send_data[0]);
  2262  0764  085F               	movf	main@chn_252,w
  2263  0765  00D6               	movwf	KeyLongHandler@chn
  2264  0766  3005               	movlw	5
  2265  0767  00D7               	movwf	KeyLongHandler@cmd
  2266  0768  3009               	movlw	9
  2267  0769  00D8               	movwf	KeyLongHandler@ticksToTrigger
  2268  076A  3040               	movlw	(low (_noo_send_data| 0))& (0+255)
  2269  076B  00D9               	movwf	KeyLongHandler@nooData
  2270  076C  085F               	movf	main@chn_252,w
  2271  076D  0709               	addwf	9,w
  2272  076E  0709               	addwf	9,w
  2273  076F  3E2C               	addlw	(low (_Keys| 0))& (0+255)
  2274  0770  2126               	fcall	_KeyLongHandler
  2275  0771  2F80               	goto	l2062
  2276  0772                     l2060:	
  2277  0772  0828               	movf	_DevType,w
  2278                           
  2279                           ; Switch size 1, requested type "space"
  2280                           ; Number of cases is 4, Range of values is 0 to 3
  2281                           ; switch strategies available:
  2282                           ; Name         Instructions Cycles
  2283                           ; simple_byte           13     7 (average)
  2284                           ; direct_byte           14     6 (fixed)
  2285                           ; jumptable            260     6 (fixed)
  2286                           ;	Chosen strategy is simple_byte
  2287  0773  3A00               	xorlw	0	; case 0
  2288  0774  1903               	skipnz
  2289  0775  2EF0               	goto	l2034
  2290  0776  3A01               	xorlw	1	; case 1
  2291  0777  1903               	skipnz
  2292  0778  2F34               	goto	l2046
  2293  0779  3A03               	xorlw	3	; case 2
  2294  077A  1903               	skipnz
  2295  077B  2F42               	goto	l2048
  2296  077C  3A01               	xorlw	1	; case 3
  2297  077D  1903               	skipnz
  2298  077E  2F60               	goto	l2054
  2299  077F  2F80               	goto	l2062
  2300  0780                     l2062:	
  2301  0780  0020               	movlb	0	; select bank0
  2302  0781  0ADF               	incf	main@chn_252,f
  2303  0782  2E20               	goto	l1982
  2304  0783                     l2066:	
  2305                           
  2306                           ;main.c: 337: }
  2307                           ;main.c: 338: }
  2308                           ;main.c: 339: }
  2309                           ;main.c: 340: if (OffDelayTicks_100ms != 0) {
  2310  0783  0825               	movf	_OffDelayTicks_100ms,w
  2311  0784  1903               	btfsc	3,2
  2312  0785  2F88               	goto	l147
  2313                           
  2314                           ;main.c: 341: OffDelayTicks_100ms--;
  2315  0786  03A5               	decf	_OffDelayTicks_100ms,f
  2316                           
  2317                           ;main.c: 342: } else {
  2318  0787  2F89               	goto	l2070
  2319  0788                     l147:	
  2320                           
  2321                           ;main.c: 343: DevMode |= GO_OFF;
  2322  0788  15A7               	bsf	_DevMode,3
  2323  0789                     l2070:	
  2324                           
  2325                           ;main.c: 344: }
  2326                           ;main.c: 346: if (((DevMode & 0x07) == 0) && ((PORTA & All_Pressed) == 0) && ((DevMode &
      +                           GO_OFF) != 0)) {
  2327  0789  0827               	movf	_DevMode,w
  2328  078A  3907               	andlw	7
  2329  078B  1D03               	btfss	3,2
  2330  078C  2FA8               	goto	l2082
  2331  078D  080C               	movf	12,w	;volatile
  2332  078E  3917               	andlw	23
  2333  078F  1903               	btfsc	3,2
  2334  0790  1DA7               	btfss	_DevMode,3
  2335  0791  2FA8               	goto	l2082
  2336                           
  2337                           ;main.c: 347: SaveTxStatusToFlash(&TxStatus[0], TX_STATUS_ADR, tx_status);
  2338  0792  30D0               	movlw	208
  2339  0793  00F4               	movwf	SaveTxStatusToFlash@txStatusArray
  2340  0794  3087               	movlw	135
  2341  0795  00F5               	movwf	SaveTxStatusToFlash@txStatusArray+1
  2342  0796  30D0               	movlw	208
  2343  0797  00F6               	movwf	SaveTxStatusToFlash@txStatusAdr
  2344  0798  3007               	movlw	7
  2345  0799  00F7               	movwf	SaveTxStatusToFlash@txStatusAdr+1
  2346  079A  082B               	movf	_tx_status,w
  2347  079B  00F8               	movwf	SaveTxStatusToFlash@txStatusVal
  2348  079C  2192               	fcall	_SaveTxStatusToFlash
  2349                           
  2350                           ;main.c: 348: LATCbits.LATC5 = 0;
  2351  079D  0022               	movlb	2	; select bank2
  2352  079E  128E               	bcf	14,5	;volatile
  2353                           
  2354                           ;main.c: 349: _delay((unsigned long)((15)*(8000000/4000.0)));
  2355  079F  3027               	movlw	39
  2356  07A0  0020               	movlb	0	; select bank0
  2357  07A1  00DA               	movwf	??_main
  2358  07A2  30F5               	movlw	245
  2359  07A3                     u1577:	
  2360  07A3  0B89               	decfsz	9,f
  2361  07A4  2FA3               	goto	u1577
  2362  07A5  0BDA               	decfsz	??_main,f
  2363  07A6  2FA3               	goto	u1577
  2364                           
  2365                           ;main.c: 350: } else {
  2366  07A7  2CBC               	goto	l1816
  2367  07A8                     l2082:	
  2368                           
  2369                           ;main.c: 351: WDTCONbits.WDTPS = 0b00110;
  2370  07A8  0021               	movlb	1	; select bank1
  2371  07A9  0817               	movf	23,w	;volatile
  2372  07AA  39C1               	andlw	-63
  2373  07AB  380C               	iorlw	12
  2374  07AC  0097               	movwf	23	;volatile
  2375                           
  2376                           ;main.c: 352: __nop();
  2377  07AD  0000               	nop
  2378  07AE  0063               	sleep	;# 
  2379                           
  2380                           ;main.c: 354: __nop();
  2381  07AF  0000               	nop
  2382                           
  2383                           ;main.c: 355: WDTCONbits.WDTPS = 0b00101;
  2384  07B0  0021               	movlb	1	; select bank1
  2385  07B1  0817               	movf	23,w	;volatile
  2386  07B2  39C1               	andlw	-63
  2387  07B3  380A               	iorlw	10
  2388  07B4  0097               	movwf	23	;volatile
  2389                           
  2390                           ;main.c: 356: __nop();
  2391  07B5  0000               	nop
  2392  07B6  0063               	sleep	;# 
  2393                           
  2394                           ;main.c: 358: __nop();
  2395  07B7  0000               	nop
  2396                           
  2397                           ;main.c: 359: WDTCONbits.WDTPS = 0b01011;
  2398  07B8  0021               	movlb	1	; select bank1
  2399  07B9  0817               	movf	23,w	;volatile
  2400  07BA  39C1               	andlw	-63
  2401  07BB  3816               	iorlw	22
  2402  07BC  0097               	movwf	23	;volatile
  2403                           
  2404                           ;main.c: 360: __nop();
  2405  07BD  0000               	nop
  2406  07BE  0064               	clrwdt	;# 
  2407  07BF  2CBC               	goto	l1816
  2408  07C0                     __end_of_main:	
  2409                           
  2410                           	psect	text1
  2411  0192                     __ptext1:	
  2412 ;; *************** function _SaveTxStatusToFlash *****************
  2413 ;; Defined at:
  2414 ;;		line 56 in file "user_functions.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  txStatusArra    2    4[COMMON] PTR const unsigned int 
  2417 ;;		 -> TxStatus(16), 
  2418 ;;  txStatusAdr     2    6[COMMON] unsigned int 
  2419 ;;  txStatusVal     1    8[COMMON] unsigned char 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  adrToWrite      2    0[BANK0 ] unsigned int 
  2422 ;;  cellNum         1    2[BANK0 ] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 1F/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1
  2432 ;;      Params:         5       0       0
  2433 ;;      Locals:         0       3       0
  2434 ;;      Temps:          4       0       0
  2435 ;;      Totals:         9       3       0
  2436 ;;Total ram usage:       12 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    2
  2439 ;; This function calls:
  2440 ;;		_FlashEraseRow
  2441 ;;		_FlashWrite
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           
  2448                           ;psect for function _SaveTxStatusToFlash
  2449  0192                     _SaveTxStatusToFlash:	
  2450                           
  2451                           ;user_functions.c: 57: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in _SaveTxStatusToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2455  0192  01C6               	clrf	SaveTxStatusToFlash@cellNum
  2456  0193                     l1780:	
  2457                           
  2458                           ;user_functions.c: 58: uint16_t adrToWrite = (txStatusAdr + (cellNum * 2));
  2459  0193  0846               	movf	SaveTxStatusToFlash@cellNum,w
  2460  0194  00C4               	movwf	SaveTxStatusToFlash@adrToWrite
  2461  0195  01C5               	clrf	SaveTxStatusToFlash@adrToWrite+1
  2462  0196  35C4               	lslf	SaveTxStatusToFlash@adrToWrite,f
  2463  0197  0DC5               	rlf	SaveTxStatusToFlash@adrToWrite+1,f
  2464  0198  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2465  0199  07C4               	addwf	SaveTxStatusToFlash@adrToWrite,f
  2466  019A  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2467  019B  3DC5               	addwfc	SaveTxStatusToFlash@adrToWrite+1,f
  2468                           
  2469                           ;user_functions.c: 59: if (txStatusArray[cellNum] == 0xFFFF) {
  2470  019C  0846               	movf	SaveTxStatusToFlash@cellNum,w
  2471  019D  00F9               	movwf	??_SaveTxStatusToFlash
  2472  019E  01FA               	clrf	??_SaveTxStatusToFlash+1
  2473  019F  35F9               	lslf	??_SaveTxStatusToFlash,f
  2474  01A0  0DFA               	rlf	??_SaveTxStatusToFlash+1,f
  2475  01A1  0874               	movf	SaveTxStatusToFlash@txStatusArray,w
  2476  01A2  0779               	addwf	??_SaveTxStatusToFlash,w
  2477  01A3  0084               	movwf	4
  2478  01A4  0875               	movf	SaveTxStatusToFlash@txStatusArray+1,w
  2479  01A5  3D7A               	addwfc	??_SaveTxStatusToFlash+1,w
  2480  01A6  0085               	movwf	5
  2481  01A7  0012               	moviw fsr0++
  2482  01A8  3AFF               	xorlw	255
  2483  01A9  00FB               	movwf	??_SaveTxStatusToFlash+2
  2484  01AA  0012               	moviw fsr0++
  2485  01AB  3AFF               	xorlw	255
  2486  01AC  04FB               	iorwf	??_SaveTxStatusToFlash+2,f
  2487  01AD  1D03               	btfss	3,2
  2488  01AE  29C6               	goto	l1794
  2489                           
  2490                           ;user_functions.c: 60: FlashWrite(adrToWrite, txStatusVal & 0x02);
  2491  01AF  0845               	movf	SaveTxStatusToFlash@adrToWrite+1,w
  2492  01B0  00F1               	movwf	FlashWrite@addr+1
  2493  01B1  0844               	movf	SaveTxStatusToFlash@adrToWrite,w
  2494  01B2  00F0               	movwf	FlashWrite@addr
  2495  01B3  0878               	movf	SaveTxStatusToFlash@txStatusVal,w
  2496  01B4  3902               	andlw	2
  2497  01B5  00F2               	movwf	FlashWrite@flash_data
  2498  01B6  01F3               	clrf	FlashWrite@flash_data+1
  2499  01B7  20F5               	fcall	_FlashWrite
  2500                           
  2501                           ;user_functions.c: 61: FlashWrite((adrToWrite + 1), 0x5A);
  2502  01B8  0020               	movlb	0	; select bank0
  2503  01B9  0844               	movf	SaveTxStatusToFlash@adrToWrite,w
  2504  01BA  3E01               	addlw	1
  2505  01BB  00F0               	movwf	FlashWrite@addr
  2506  01BC  3000               	movlw	0
  2507  01BD  3D45               	addwfc	SaveTxStatusToFlash@adrToWrite+1,w
  2508  01BE  00F1               	movwf	FlashWrite@addr+1
  2509  01BF  305A               	movlw	90
  2510  01C0  00F2               	movwf	FlashWrite@flash_data
  2511  01C1  01F3               	clrf	FlashWrite@flash_data+1
  2512  01C2  20F5               	fcall	_FlashWrite
  2513                           
  2514                           ;user_functions.c: 62: __nop();
  2515  01C3  0000               	nop
  2516  01C4  0064               	clrwdt	;# 
  2517                           
  2518                           ;user_functions.c: 64: break;
  2519  01C5  0008               	return
  2520  01C6                     l1794:	
  2521                           
  2522                           ;user_functions.c: 66: if (cellNum == 7) {
  2523  01C6  3007               	movlw	7
  2524  01C7  0646               	xorwf	SaveTxStatusToFlash@cellNum,w
  2525  01C8  1D03               	btfss	3,2
  2526  01C9  29E2               	goto	l1798
  2527                           
  2528                           ;user_functions.c: 67: FlashEraseRow(txStatusAdr);
  2529  01CA  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2530  01CB  00F1               	movwf	FlashEraseRow@rowAddr+1
  2531  01CC  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2532  01CD  00F0               	movwf	FlashEraseRow@rowAddr
  2533  01CE  20D8               	fcall	_FlashEraseRow
  2534                           
  2535                           ;user_functions.c: 68: FlashWrite(txStatusAdr, txStatusVal & 0x02);
  2536  01CF  0877               	movf	SaveTxStatusToFlash@txStatusAdr+1,w
  2537  01D0  00F1               	movwf	FlashWrite@addr+1
  2538  01D1  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2539  01D2  00F0               	movwf	FlashWrite@addr
  2540  01D3  0878               	movf	SaveTxStatusToFlash@txStatusVal,w
  2541  01D4  3902               	andlw	2
  2542  01D5  00F2               	movwf	FlashWrite@flash_data
  2543  01D6  01F3               	clrf	FlashWrite@flash_data+1
  2544  01D7  20F5               	fcall	_FlashWrite
  2545                           
  2546                           ;user_functions.c: 69: FlashWrite(txStatusAdr + 1, 0x5A);
  2547  01D8  0876               	movf	SaveTxStatusToFlash@txStatusAdr,w
  2548  01D9  3E01               	addlw	1
  2549  01DA  00F0               	movwf	FlashWrite@addr
  2550  01DB  3000               	movlw	0
  2551  01DC  3D77               	addwfc	SaveTxStatusToFlash@txStatusAdr+1,w
  2552  01DD  00F1               	movwf	FlashWrite@addr+1
  2553  01DE  305A               	movlw	90
  2554  01DF  00F2               	movwf	FlashWrite@flash_data
  2555  01E0  01F3               	clrf	FlashWrite@flash_data+1
  2556  01E1  20F5               	fcall	_FlashWrite
  2557  01E2                     l1798:	
  2558  01E2  0020               	movlb	0	; select bank0
  2559  01E3  3008               	movlw	8
  2560  01E4  0AC6               	incf	SaveTxStatusToFlash@cellNum,f
  2561  01E5  0246               	subwf	SaveTxStatusToFlash@cellNum,w
  2562  01E6  1803               	btfsc	3,0
  2563  01E7  0008               	return
  2564  01E8  2993               	goto	l1780
  2565  01E9                     __end_of_SaveTxStatusToFlash:	
  2566                           
  2567                           	psect	text2
  2568  00F5                     __ptext2:	
  2569 ;; *************** function _FlashWrite *****************
  2570 ;; Defined at:
  2571 ;;		line 43 in file "FLASH.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  addr            2    0[COMMON] unsigned int 
  2574 ;;  flash_data      2    2[COMMON] unsigned int 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 1F/3
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1
  2586 ;;      Params:         4       0       0
  2587 ;;      Locals:         0       0       0
  2588 ;;      Temps:          0       0       0
  2589 ;;      Totals:         4       0       0
  2590 ;;Total ram usage:        4 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    1
  2593 ;; This function calls:
  2594 ;;		_FlashUnlock
  2595 ;; This function is called by:
  2596 ;;		_main
  2597 ;;		_SaveTxStatusToFlash
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           
  2602                           ;psect for function _FlashWrite
  2603  00F5                     _FlashWrite:	
  2604                           
  2605                           ;FLASH.c: 44: PMCON1bits.CFGS = 0;
  2606                           
  2607                           ;incstack = 0
  2608                           ; Regs used in _FlashWrite: [wreg+status,2+status,0+pclath+cstack]
  2609  00F5  0023               	movlb	3	; select bank3
  2610  00F6  1315               	bcf	21,6	;volatile
  2611                           
  2612                           ;FLASH.c: 45: PMADRH = (unsigned char) (addr >> 8);
  2613  00F7  0871               	movf	FlashWrite@addr+1,w
  2614  00F8  0092               	movwf	18	;volatile
  2615                           
  2616                           ;FLASH.c: 46: PMADRL = (unsigned char) (addr);
  2617  00F9  0870               	movf	FlashWrite@addr,w
  2618  00FA  0091               	movwf	17	;volatile
  2619                           
  2620                           ;FLASH.c: 47: PMCON1bits.FREE = 0;
  2621  00FB  1215               	bcf	21,4	;volatile
  2622                           
  2623                           ;FLASH.c: 48: PMCON1bits.LWLO = 1;
  2624  00FC  1695               	bsf	21,5	;volatile
  2625                           
  2626                           ;FLASH.c: 49: PMCON1bits.WREN = 1;
  2627  00FD  1515               	bsf	21,2	;volatile
  2628                           
  2629                           ;FLASH.c: 50: PMDATH = (unsigned char) (flash_data >> 8);
  2630  00FE  0873               	movf	FlashWrite@flash_data+1,w
  2631  00FF  0094               	movwf	20	;volatile
  2632                           
  2633                           ;FLASH.c: 51: PMDATL = (unsigned char) flash_data;
  2634  0100  0872               	movf	FlashWrite@flash_data,w
  2635  0101  0093               	movwf	19	;volatile
  2636                           
  2637                           ;FLASH.c: 52: PMCON1bits.LWLO = 0;
  2638  0102  1295               	bcf	21,5	;volatile
  2639                           
  2640                           ;FLASH.c: 53: INTCONbits.GIE = 0;
  2641  0103  138B               	bcf	11,7	;volatile
  2642                           
  2643                           ;FLASH.c: 54: FlashUnlock();
  2644  0104  20B9               	fcall	_FlashUnlock
  2645                           
  2646                           ;FLASH.c: 55: INTCONbits.GIE = 1;
  2647  0105  178B               	bsf	11,7	;volatile
  2648                           
  2649                           ;FLASH.c: 56: PMCON1bits.WREN = 0;
  2650  0106  1115               	bcf	21,2	;volatile
  2651  0107  0008               	return
  2652  0108                     __end_of_FlashWrite:	
  2653                           
  2654                           	psect	text3
  2655  00D8                     __ptext3:	
  2656 ;; *************** function _FlashEraseRow *****************
  2657 ;; Defined at:
  2658 ;;		line 31 in file "FLASH.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  rowAddr         2    0[COMMON] unsigned int 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  1    wreg      void 
  2665 ;; Registers used:
  2666 ;;		wreg, status,2, status,0, pclath, cstack
  2667 ;; Tracked objects:
  2668 ;;		On entry : 1D/2
  2669 ;;		On exit  : 1F/3
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1
  2672 ;;      Params:         2       0       0
  2673 ;;      Locals:         0       0       0
  2674 ;;      Temps:          0       0       0
  2675 ;;      Totals:         2       0       0
  2676 ;;Total ram usage:        2 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    1
  2679 ;; This function calls:
  2680 ;;		_FlashUnlock
  2681 ;; This function is called by:
  2682 ;;		_main
  2683 ;;		_SaveTxStatusToFlash
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           
  2688                           ;psect for function _FlashEraseRow
  2689  00D8                     _FlashEraseRow:	
  2690                           
  2691                           ;FLASH.c: 32: PMCON1bits.CFGS = 0;
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in _FlashEraseRow: [wreg+status,2+status,0+pclath+cstack]
  2695  00D8  0023               	movlb	3	; select bank3
  2696  00D9  1315               	bcf	21,6	;volatile
  2697                           
  2698                           ;FLASH.c: 33: PMADRH = (uint8_t) (rowAddr >> 8);
  2699  00DA  0871               	movf	FlashEraseRow@rowAddr+1,w
  2700  00DB  0092               	movwf	18	;volatile
  2701                           
  2702                           ;FLASH.c: 34: PMADRL = (uint8_t) (rowAddr);
  2703  00DC  0870               	movf	FlashEraseRow@rowAddr,w
  2704  00DD  0091               	movwf	17	;volatile
  2705                           
  2706                           ;FLASH.c: 35: PMCON1bits.FREE = 1;
  2707  00DE  1615               	bsf	21,4	;volatile
  2708                           
  2709                           ;FLASH.c: 36: PMCON1bits.WREN = 1;
  2710  00DF  1515               	bsf	21,2	;volatile
  2711                           
  2712                           ;FLASH.c: 37: INTCONbits.GIE = 0;
  2713  00E0  138B               	bcf	11,7	;volatile
  2714                           
  2715                           ;FLASH.c: 38: FlashUnlock();
  2716  00E1  20B9               	fcall	_FlashUnlock
  2717                           
  2718                           ;FLASH.c: 39: INTCONbits.GIE = 1;
  2719  00E2  178B               	bsf	11,7	;volatile
  2720                           
  2721                           ;FLASH.c: 40: PMCON1bits.WREN = 0;
  2722  00E3  1115               	bcf	21,2	;volatile
  2723  00E4  0008               	return
  2724  00E5                     __end_of_FlashEraseRow:	
  2725                           
  2726                           	psect	text4
  2727  00B9                     __ptext4:	
  2728 ;; *************** function _FlashUnlock *****************
  2729 ;; Defined at:
  2730 ;;		line 25 in file "FLASH.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		wreg
  2739 ;; Tracked objects:
  2740 ;;		On entry : 1F/3
  2741 ;;		On exit  : 1F/3
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1
  2744 ;;      Params:         0       0       0
  2745 ;;      Locals:         0       0       0
  2746 ;;      Temps:          0       0       0
  2747 ;;      Totals:         0       0       0
  2748 ;;Total ram usage:        0 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_FlashEraseRow
  2754 ;;		_FlashWrite
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           
  2759                           ;psect for function _FlashUnlock
  2760  00B9                     _FlashUnlock:	
  2761                           
  2762                           ;FLASH.c: 26: PMCON2 = 0x55;
  2763                           
  2764                           ;incstack = 0
  2765                           ; Regs used in _FlashUnlock: [wreg]
  2766  00B9  3055               	movlw	85
  2767  00BA  0096               	movwf	22	;volsfr
  2768                           
  2769                           ;FLASH.c: 27: PMCON2 = 0xAA;
  2770  00BB  30AA               	movlw	170
  2771  00BC  0096               	movwf	22	;volsfr
  2772                           
  2773                           ;FLASH.c: 28: PMCON1bits.WR = 1;
  2774  00BD  1495               	bsf	21,1	;volatile
  2775  00BE  0008               	return
  2776  00BF                     __end_of_FlashUnlock:	
  2777                           
  2778                           	psect	text5
  2779  01E9                     __ptext5:	
  2780 ;; *************** function _RF_Init *****************
  2781 ;; Defined at:
  2782 ;;		line 25 in file "noolite.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;		None
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;		None
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2791 ;; Tracked objects:
  2792 ;;		On entry : B1F/1
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMMON   BANK0   BANK1
  2796 ;;      Params:         0       0       0
  2797 ;;      Locals:         0       0       0
  2798 ;;      Temps:          7       0       0
  2799 ;;      Totals:         7       0       0
  2800 ;;Total ram usage:        7 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_main
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           
  2810                           ;psect for function _RF_Init
  2811  01E9                     _RF_Init:	
  2812                           
  2813                           ;noolite.c: 27: startaddress = 0;
  2814                           
  2815                           ;incstack = 0
  2816                           ; Regs used in _RF_Init: [wreg-fsr0h+status,2+status,0+pclath]
  2817  01E9  0020               	movlb	0	; select bank0
  2818  01EA  30F3               	movlw	243
  2819  01EB  01A0               	clrf	_startaddress
  2820  01EC  01A1               	clrf	_startaddress+1
  2821  01ED  01A2               	clrf	_startaddress+2
  2822  01EE  01A3               	clrf	_startaddress+3
  2823                           
  2824                           ;noolite.c: 28: startaddress |= ((unsigned int) system_settings[5]) << 8;
  2825  01EF  0084               	movwf	4
  2826  01F0  3087               	movlw	135
  2827  01F1  0085               	movwf	5
  2828  01F2  0800               	movf	0,w	;code access
  2829  01F3  00F0               	movwf	??_RF_Init
  2830  01F4  01F1               	clrf	??_RF_Init+1
  2831  01F5  00F1               	movwf	??_RF_Init+1
  2832  01F6  01F0               	clrf	??_RF_Init
  2833  01F7  0870               	movf	??_RF_Init,w
  2834  01F8  00F3               	movwf	??_RF_Init+3
  2835  01F9  0871               	movf	??_RF_Init+1,w
  2836  01FA  00F4               	movwf	??_RF_Init+4
  2837  01FB  01F5               	clrf	??_RF_Init+5
  2838  01FC  01F6               	clrf	??_RF_Init+6
  2839  01FD  0873               	movf	??_RF_Init+3,w
  2840  01FE  04A0               	iorwf	_startaddress,f
  2841  01FF  0874               	movf	??_RF_Init+4,w
  2842  0200  04A1               	iorwf	_startaddress+1,f
  2843  0201  0875               	movf	??_RF_Init+5,w
  2844  0202  04A2               	iorwf	_startaddress+2,f
  2845  0203  0876               	movf	??_RF_Init+6,w
  2846  0204  04A3               	iorwf	_startaddress+3,f
  2847                           
  2848                           ;noolite.c: 29: startaddress |= system_settings[4];
  2849  0205  30F2               	movlw	242
  2850  0206  0084               	movwf	4
  2851  0207  0800               	movf	0,w	;code access
  2852  0208  00F0               	movwf	??_RF_Init
  2853  0209  01F1               	clrf	??_RF_Init+1
  2854  020A  01F2               	clrf	??_RF_Init+2
  2855  020B  01F3               	clrf	??_RF_Init+3
  2856  020C  04A0               	iorwf	_startaddress,f
  2857  020D  0871               	movf	??_RF_Init+1,w
  2858  020E  04A1               	iorwf	_startaddress+1,f
  2859  020F  0872               	movf	??_RF_Init+2,w
  2860  0210  04A2               	iorwf	_startaddress+2,f
  2861  0211  0873               	movf	??_RF_Init+3,w
  2862  0212  04A3               	iorwf	_startaddress+3,f
  2863                           
  2864                           ;noolite.c: 30: if ((startaddress != 0) && (startaddress != 0xFFFF)) {
  2865  0213  0823               	movf	_startaddress+3,w
  2866  0214  0422               	iorwf	_startaddress+2,w
  2867  0215  0421               	iorwf	_startaddress+1,w
  2868  0216  0420               	iorwf	_startaddress,w
  2869  0217  1903               	skipnz
  2870  0218  2A22               	goto	l182
  2871  0219  0F20               	incfsz	_startaddress,w
  2872  021A  2A20               	goto	l1672
  2873  021B  0A21               	incf	_startaddress+1,w
  2874  021C  0422               	iorwf	_startaddress+2,w
  2875  021D  0423               	iorwf	_startaddress+3,w
  2876  021E  1903               	btfsc	3,2
  2877  021F  2A22               	goto	l182
  2878  0220                     l1672:	
  2879                           
  2880                           ;noolite.c: 31: noo_address_type = 0;
  2881  0220  01A4               	clrf	_noo_address_type
  2882                           
  2883                           ;noolite.c: 32: } else {
  2884  0221  2A72               	goto	l183
  2885  0222                     l182:	
  2886  0222  30F9               	movlw	249
  2887                           
  2888                           ;noolite.c: 33: startaddress = 0;
  2889  0223  01A0               	clrf	_startaddress
  2890  0224  01A1               	clrf	_startaddress+1
  2891  0225  01A2               	clrf	_startaddress+2
  2892  0226  01A3               	clrf	_startaddress+3
  2893                           
  2894                           ;noolite.c: 34: startaddress |= ((unsigned long) system_settings[11]) << 24;
  2895  0227  0084               	movwf	4
  2896  0228  3087               	movlw	135
  2897  0229  0085               	movwf	5
  2898  022A  0800               	movf	0,w	;code access
  2899  022B  00F3               	movwf	??_RF_Init+3
  2900  022C  01F2               	clrf	??_RF_Init+2
  2901  022D  01F1               	clrf	??_RF_Init+1
  2902  022E  01F0               	clrf	??_RF_Init
  2903  022F  0870               	movf	??_RF_Init,w
  2904  0230  04A0               	iorwf	_startaddress,f
  2905  0231  0871               	movf	??_RF_Init+1,w
  2906  0232  04A1               	iorwf	_startaddress+1,f
  2907  0233  0872               	movf	??_RF_Init+2,w
  2908  0234  04A2               	iorwf	_startaddress+2,f
  2909  0235  0873               	movf	??_RF_Init+3,w
  2910  0236  04A3               	iorwf	_startaddress+3,f
  2911                           
  2912                           ;noolite.c: 35: startaddress |= ((unsigned long) system_settings[10]) << 16;
  2913  0237  30F8               	movlw	248
  2914  0238  0084               	movwf	4
  2915  0239  0800               	movf	0,w	;code access
  2916  023A  00F0               	movwf	??_RF_Init
  2917  023B  01F1               	clrf	??_RF_Init+1
  2918  023C  01F2               	clrf	??_RF_Init+2
  2919  023D  01F3               	clrf	??_RF_Init+3
  2920  023E  0871               	movf	??_RF_Init+1,w
  2921  023F  00F3               	movwf	??_RF_Init+3
  2922  0240  0870               	movf	??_RF_Init,w
  2923  0241  00F2               	movwf	??_RF_Init+2
  2924  0242  01F1               	clrf	??_RF_Init+1
  2925  0243  01F0               	clrf	??_RF_Init
  2926  0244  0870               	movf	??_RF_Init,w
  2927  0245  04A0               	iorwf	_startaddress,f
  2928  0246  0871               	movf	??_RF_Init+1,w
  2929  0247  04A1               	iorwf	_startaddress+1,f
  2930  0248  0872               	movf	??_RF_Init+2,w
  2931  0249  04A2               	iorwf	_startaddress+2,f
  2932  024A  0873               	movf	??_RF_Init+3,w
  2933  024B  04A3               	iorwf	_startaddress+3,f
  2934                           
  2935                           ;noolite.c: 36: startaddress |= ((unsigned long) system_settings[9]) << 8;
  2936  024C  30F7               	movlw	247
  2937  024D  0084               	movwf	4
  2938  024E  0800               	movf	0,w	;code access
  2939  024F  00F0               	movwf	??_RF_Init
  2940  0250  01F1               	clrf	??_RF_Init+1
  2941  0251  01F2               	clrf	??_RF_Init+2
  2942  0252  01F3               	clrf	??_RF_Init+3
  2943  0253  0872               	movf	??_RF_Init+2,w
  2944  0254  00F3               	movwf	??_RF_Init+3
  2945  0255  0871               	movf	??_RF_Init+1,w
  2946  0256  00F2               	movwf	??_RF_Init+2
  2947  0257  0870               	movf	??_RF_Init,w
  2948  0258  00F1               	movwf	??_RF_Init+1
  2949  0259  01F0               	clrf	??_RF_Init
  2950  025A  0870               	movf	??_RF_Init,w
  2951  025B  04A0               	iorwf	_startaddress,f
  2952  025C  0871               	movf	??_RF_Init+1,w
  2953  025D  04A1               	iorwf	_startaddress+1,f
  2954  025E  0872               	movf	??_RF_Init+2,w
  2955  025F  04A2               	iorwf	_startaddress+2,f
  2956  0260  0873               	movf	??_RF_Init+3,w
  2957  0261  04A3               	iorwf	_startaddress+3,f
  2958                           
  2959                           ;noolite.c: 37: startaddress |= system_settings[8];
  2960  0262  30F6               	movlw	246
  2961  0263  0084               	movwf	4
  2962  0264  0800               	movf	0,w	;code access
  2963  0265  00F0               	movwf	??_RF_Init
  2964  0266  01F1               	clrf	??_RF_Init+1
  2965  0267  01F2               	clrf	??_RF_Init+2
  2966  0268  01F3               	clrf	??_RF_Init+3
  2967  0269  04A0               	iorwf	_startaddress,f
  2968  026A  0871               	movf	??_RF_Init+1,w
  2969  026B  04A1               	iorwf	_startaddress+1,f
  2970  026C  0872               	movf	??_RF_Init+2,w
  2971  026D  04A2               	iorwf	_startaddress+2,f
  2972  026E  0873               	movf	??_RF_Init+3,w
  2973  026F  04A3               	iorwf	_startaddress+3,f
  2974                           
  2975                           ;noolite.c: 38: noo_address_type = 1;
  2976  0270  01A4               	clrf	_noo_address_type
  2977  0271  0AA4               	incf	_noo_address_type,f
  2978  0272                     l183:	
  2979  0272  0064               	clrwdt	;# 
  2980  0273  0008               	return
  2981  0274                     __end_of_RF_Init:	
  2982                           
  2983                           	psect	text6
  2984  0152                     __ptext6:	
  2985 ;; *************** function _KeyOffHandler *****************
  2986 ;; Defined at:
  2987 ;;		line 75 in file "user_functions.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  key             1    wreg     PTR struct .
  2990 ;;		 -> Keys(20), 
  2991 ;;  chn             1   11[COMMON] unsigned char 
  2992 ;;  cmd             1   12[COMMON] unsigned char 
  2993 ;;  nooData         1   13[COMMON] PTR unsigned char 
  2994 ;;		 -> noo_send_data(4), 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  key             1   19[BANK0 ] PTR struct .
  2997 ;;		 -> Keys(20), 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 1F/0
  3004 ;;		On exit  : 1D/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1
  3007 ;;      Params:         3       0       0
  3008 ;;      Locals:         0       1       0
  3009 ;;      Temps:          0       1       0
  3010 ;;      Totals:         3       2       0
  3011 ;;Total ram usage:        5 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    1
  3014 ;; This function calls:
  3015 ;;		_noolite_send
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function _KeyOffHandler
  3023  0152                     _KeyOffHandler:	
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _KeyOffHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3027                           ;KeyOffHandler@key stored from wreg
  3028  0152  00D7               	movwf	KeyOffHandler@key
  3029                           
  3030                           ;user_functions.c: 76: if (key->State == 0) {
  3031  0153  0086               	movwf	6
  3032  0154  0187               	clrf	7
  3033  0155  0801               	movf	1,w
  3034  0156  1D03               	btfss	3,2
  3035  0157  0008               	return
  3036                           
  3037                           ;user_functions.c: 77: if (key->Tick100ms < 10) {
  3038  0158  0857               	movf	KeyOffHandler@key,w
  3039  0159  3E02               	addlw	2
  3040  015A  0086               	movwf	6
  3041  015B  300A               	movlw	10
  3042  015C  0201               	subwf	1,w
  3043  015D  1803               	skipnc
  3044  015E  2966               	goto	l1750
  3045                           
  3046                           ;user_functions.c: 78: noolite_send(chn, cmd, 0, &nooData[0]);
  3047  015F  087C               	movf	KeyOffHandler@cmd,w
  3048  0160  00F0               	movwf	noolite_send@noo_send_command
  3049  0161  01F1               	clrf	noolite_send@noo_send_format
  3050  0162  087D               	movf	KeyOffHandler@nooData,w
  3051  0163  00F2               	movwf	noolite_send@data
  3052  0164  087B               	movf	KeyOffHandler@chn,w
  3053  0165  2B0D               	ljmp	_noolite_send
  3054  0166                     l1750:	
  3055                           ;user_functions.c: 79: } else {
  3056                           
  3057                           
  3058                           ;user_functions.c: 80: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  3059  0166  300A               	movlw	10
  3060  0167  00F0               	movwf	noolite_send@noo_send_command
  3061  0168  01F1               	clrf	noolite_send@noo_send_format
  3062  0169  087D               	movf	KeyOffHandler@nooData,w
  3063  016A  00F2               	movwf	noolite_send@data
  3064  016B  087B               	movf	KeyOffHandler@chn,w
  3065  016C  230D               	fcall	_noolite_send
  3066                           
  3067                           ;user_functions.c: 81: _delay((unsigned long)((15)*(8000000/4000.0)));
  3068  016D  3027               	movlw	39
  3069  016E  0020               	movlb	0	; select bank0
  3070  016F  00D6               	movwf	??_KeyOffHandler
  3071  0170  30F5               	movlw	245
  3072  0171                     u1587:	
  3073  0171  0B89               	decfsz	9,f
  3074  0172  2971               	goto	u1587
  3075  0173  0BD6               	decfsz	??_KeyOffHandler,f
  3076  0174  2971               	goto	u1587
  3077                           
  3078                           ;user_functions.c: 82: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  3079  0175  300A               	movlw	10
  3080  0176  00F0               	movwf	noolite_send@noo_send_command
  3081  0177  01F1               	clrf	noolite_send@noo_send_format
  3082  0178  087D               	movf	KeyOffHandler@nooData,w
  3083  0179  00F2               	movwf	noolite_send@data
  3084  017A  087B               	movf	KeyOffHandler@chn,w
  3085  017B  230D               	fcall	_noolite_send
  3086                           
  3087                           ;user_functions.c: 83: _delay((unsigned long)((15)*(8000000/4000.0)));
  3088  017C  3027               	movlw	39
  3089  017D  0020               	movlb	0	; select bank0
  3090  017E  00D6               	movwf	??_KeyOffHandler
  3091  017F  30F5               	movlw	245
  3092  0180                     u1597:	
  3093  0180  0B89               	decfsz	9,f
  3094  0181  2980               	goto	u1597
  3095  0182  0BD6               	decfsz	??_KeyOffHandler,f
  3096  0183  2980               	goto	u1597
  3097                           
  3098                           ;user_functions.c: 84: noolite_send(chn, CMD_Stop_Reg, 0, &nooData[0]);
  3099  0184  300A               	movlw	10
  3100  0185  00F0               	movwf	noolite_send@noo_send_command
  3101  0186  01F1               	clrf	noolite_send@noo_send_format
  3102  0187  087D               	movf	KeyOffHandler@nooData,w
  3103  0188  00F2               	movwf	noolite_send@data
  3104  0189  087B               	movf	KeyOffHandler@chn,w
  3105  018A  230D               	fcall	_noolite_send
  3106                           
  3107                           ;user_functions.c: 85: key->FirstCmdSent = 0;
  3108  018B  0020               	movlb	0	; select bank0
  3109  018C  0857               	movf	KeyOffHandler@key,w
  3110  018D  3E03               	addlw	3
  3111  018E  0086               	movwf	6
  3112  018F  0187               	clrf	7
  3113  0190  0181               	clrf	1
  3114  0191  0008               	return
  3115  0192                     __end_of_KeyOffHandler:	
  3116                           
  3117                           	psect	text7
  3118  0126                     __ptext7:	
  3119 ;; *************** function _KeyLongHandler *****************
  3120 ;; Defined at:
  3121 ;;		line 90 in file "user_functions.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  key             1    wreg     PTR struct .
  3124 ;;		 -> Keys(20), 
  3125 ;;  chn             1   18[BANK0 ] unsigned char 
  3126 ;;  cmd             1   19[BANK0 ] unsigned char 
  3127 ;;  ticksToTrigg    1   20[BANK0 ] unsigned char 
  3128 ;;  nooData         1   21[BANK0 ] PTR unsigned char 
  3129 ;;		 -> noo_send_data(4), 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  key             1   11[COMMON] PTR struct .
  3132 ;;		 -> Keys(20), 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 1F/0
  3139 ;;		On exit  : 1D/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMMON   BANK0   BANK1
  3142 ;;      Params:         0       4       0
  3143 ;;      Locals:         1       0       0
  3144 ;;      Temps:          0       0       0
  3145 ;;      Totals:         1       4       0
  3146 ;;Total ram usage:        5 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    1
  3149 ;; This function calls:
  3150 ;;		_noolite_send
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           
  3157                           ;psect for function _KeyLongHandler
  3158  0126                     _KeyLongHandler:	
  3159                           
  3160                           ;incstack = 0
  3161                           ; Regs used in _KeyLongHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3162                           ;KeyLongHandler@key stored from wreg
  3163  0126  00FB               	movwf	KeyLongHandler@key
  3164                           
  3165                           ;user_functions.c: 91: if (key->State != 0) {
  3166  0127  0086               	movwf	6
  3167  0128  0187               	clrf	7
  3168  0129  0801               	movf	1,w
  3169  012A  1903               	btfsc	3,2
  3170  012B  294C               	goto	l1772
  3171                           
  3172                           ;user_functions.c: 92: if (key->Tick100ms > ticksToTrigger) {
  3173  012C  087B               	movf	KeyLongHandler@key,w
  3174  012D  3E02               	addlw	2
  3175  012E  0086               	movwf	6
  3176  012F  0801               	movf	1,w
  3177  0130  0258               	subwf	KeyLongHandler@ticksToTrigger,w
  3178                           
  3179                           ;user_functions.c: 93: if (key->FirstCmdSent == 0) {
  3180  0131  087B               	movf	KeyLongHandler@key,w
  3181  0132  1803               	skipnc
  3182  0133  2947               	goto	L5
  3183  0134  3E03               	addlw	3
  3184  0135  0086               	movwf	6
  3185  0136  0801               	movf	1,w
  3186  0137  1D03               	btfss	3,2
  3187  0138  2946               	goto	l1770
  3188                           
  3189                           ;user_functions.c: 94: noolite_send(chn, cmd, 0, &nooData[0]);
  3190  0139  0857               	movf	KeyLongHandler@cmd,w
  3191  013A  00F0               	movwf	noolite_send@noo_send_command
  3192  013B  01F1               	clrf	noolite_send@noo_send_format
  3193  013C  0859               	movf	KeyLongHandler@nooData,w
  3194  013D  00F2               	movwf	noolite_send@data
  3195  013E  0856               	movf	KeyLongHandler@chn,w
  3196  013F  230D               	fcall	_noolite_send
  3197                           
  3198                           ;user_functions.c: 95: key->FirstCmdSent = 1;
  3199  0140  087B               	movf	KeyLongHandler@key,w
  3200  0141  3E03               	addlw	3
  3201  0142  0086               	movwf	6
  3202  0143  0187               	clrf	7
  3203  0144  0181               	clrf	1
  3204  0145  0A81               	incf	1,f
  3205  0146                     l1770:	
  3206                           
  3207                           ;user_functions.c: 96: }
  3208                           ;user_functions.c: 97: }
  3209                           ;user_functions.c: 98: key->Tick100ms++;
  3210  0146  087B               	movf	KeyLongHandler@key,w
  3211  0147                     L5:	
  3212  0147  3E02               	addlw	2
  3213  0148  0086               	movwf	6
  3214  0149  0187               	clrf	7
  3215  014A  0A81               	incf	1,f
  3216                           
  3217                           ;user_functions.c: 99: } else {
  3218  014B  0008               	return
  3219  014C                     l1772:	
  3220                           
  3221                           ;user_functions.c: 100: key->Tick100ms = 0;
  3222  014C  087B               	movf	KeyLongHandler@key,w
  3223  014D  3E02               	addlw	2
  3224  014E  0086               	movwf	6
  3225  014F  0187               	clrf	7
  3226  0150  0181               	clrf	1
  3227  0151  0008               	return
  3228  0152                     __end_of_KeyLongHandler:	
  3229                           
  3230                           	psect	text8
  3231  030D                     __ptext8:	
  3232 ;; *************** function _noolite_send *****************
  3233 ;; Defined at:
  3234 ;;		line 174 in file "noolite.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  chn             1    wreg     unsigned char 
  3237 ;;  noo_send_com    1    0[COMMON] unsigned char 
  3238 ;;  noo_send_for    1    1[COMMON] unsigned char 
  3239 ;;  data            1    2[COMMON] PTR unsigned char 
  3240 ;;		 -> noo_send_data(4), 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  chn             1   14[BANK0 ] unsigned char 
  3243 ;;  noo_send_buf   12    0[BANK0 ] unsigned char [12]
  3244 ;;  endpos          1   17[BANK0 ] unsigned char 
  3245 ;;  temp_send       1   16[BANK0 ] unsigned char 
  3246 ;;  countsend       1   15[BANK0 ] unsigned char 
  3247 ;;  countbit        1   13[BANK0 ] unsigned char 
  3248 ;;  startpos        1   12[BANK0 ] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 1F/2
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMMON   BANK0   BANK1
  3258 ;;      Params:         3       0       0
  3259 ;;      Locals:         0      18       0
  3260 ;;      Temps:          8       0       0
  3261 ;;      Totals:        11      18       0
  3262 ;;Total ram usage:       29 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;;		_KeyOffHandler
  3269 ;;		_KeyLongHandler
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _noolite_send
  3275  030D                     _noolite_send:	
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in _noolite_send: [wreg+fsr1l+fsr1h+status,2+status,0]
  3279                           ;noolite_send@chn stored from wreg
  3280  030D  0020               	movlb	0	; select bank0
  3281  030E  00D2               	movwf	noolite_send@chn
  3282  030F  0064               	clrwdt	;# 
  3283                           
  3284                           ;noolite.c: 185: tx_status ^= (1<<1);
  3285  0310  3002               	movlw	2
  3286  0311  0020               	movlb	0	; select bank0
  3287  0312  06AB               	xorwf	_tx_status,f
  3288                           
  3289                           ;noolite.c: 188: if (noo_send_command < 16) {
  3290  0313  3010               	movlw	16
  3291  0314  0270               	subwf	noolite_send@noo_send_command,w
  3292  0315  1803               	skipnc
  3293  0316  2B23               	goto	l1454
  3294                           
  3295                           ;noolite.c: 189: startpos = 10;
  3296  0317  300A               	movlw	10
  3297  0318  00D0               	movwf	noolite_send@startpos
  3298                           
  3299                           ;noolite.c: 190: noo_send_buffer[1] = (uint8_t) ((noo_send_command << 4) | (1 << 2));
  3300  0319  0E70               	swapf	noolite_send@noo_send_command,w
  3301  031A  39F0               	andlw	240
  3302  031B  3804               	iorlw	4
  3303  031C  00C5               	movwf	noolite_send@noo_send_buffer+1
  3304                           
  3305                           ;noolite.c: 191: if (((tx_status & (1<<1)) != 0)) {
  3306  031D  1CAB               	btfss	_tx_status,1
  3307  031E  2B21               	goto	l188
  3308                           
  3309                           ;noolite.c: 192: noo_send_buffer[1] |= (1<<3);
  3310  031F  15C5               	bsf	noolite_send@noo_send_buffer+1,3
  3311                           
  3312                           ;noolite.c: 193: } else {
  3313  0320  2B2F               	goto	l190
  3314  0321                     l188:	
  3315                           
  3316                           ;noolite.c: 194: noo_send_buffer[1] &= (~(1<<3));
  3317  0321  11C5               	bcf	noolite_send@noo_send_buffer+1,3
  3318  0322  2B2F               	goto	l190
  3319  0323                     l1454:	
  3320                           
  3321                           ;noolite.c: 197: startpos = 6;
  3322  0323  3006               	movlw	6
  3323  0324  00D0               	movwf	noolite_send@startpos
  3324                           
  3325                           ;noolite.c: 198: noo_send_buffer[0] = (1 << 6);
  3326  0325  3040               	movlw	64
  3327  0326  00C4               	movwf	noolite_send@noo_send_buffer
  3328                           
  3329                           ;noolite.c: 199: if (((tx_status & (1<<1)) != 0)) {
  3330  0327  1CAB               	btfss	_tx_status,1
  3331  0328  2B2B               	goto	l191
  3332                           
  3333                           ;noolite.c: 200: noo_send_buffer[0] |= (1<<7);
  3334  0329  17C4               	bsf	noolite_send@noo_send_buffer,7
  3335                           
  3336                           ;noolite.c: 201: } else {
  3337  032A  2B2C               	goto	l1460
  3338  032B                     l191:	
  3339                           
  3340                           ;noolite.c: 202: noo_send_buffer[0] &= (~(1<<7));
  3341  032B  13C4               	bcf	noolite_send@noo_send_buffer,7
  3342  032C                     l1460:	
  3343                           
  3344                           ;noolite.c: 203: };
  3345                           ;noolite.c: 204: noo_send_buffer[1] = noo_send_command;
  3346  032C  0870               	movf	noolite_send@noo_send_command,w
  3347  032D  00C5               	movwf	noolite_send@noo_send_buffer+1
  3348                           
  3349                           ;noolite.c: 205: noo_send_format = (uint8_t) (noo_send_format | 4);
  3350  032E  1571               	bsf	noolite_send@noo_send_format,2
  3351  032F                     l190:	
  3352                           
  3353                           ;noolite.c: 206: }
  3354                           ;noolite.c: 207: endpos = 2;
  3355  032F  3002               	movlw	2
  3356  0330  00D5               	movwf	noolite_send@endpos
  3357                           
  3358                           ;noolite.c: 208: temp_send = (uint8_t) (noo_send_format & 3);
  3359  0331  0871               	movf	noolite_send@noo_send_format,w
  3360  0332  00D4               	movwf	noolite_send@temp_send
  3361  0333  3003               	movlw	3
  3362  0334  05D4               	andwf	noolite_send@temp_send,f
  3363                           
  3364                           ;noolite.c: 209: if (temp_send == 1) {
  3365  0335  0B54               	decfsz	noolite_send@temp_send,w
  3366  0336  2B3E               	goto	l1472
  3367                           
  3368                           ;noolite.c: 211: noo_send_buffer[2] = data[0];
  3369  0337  0872               	movf	noolite_send@data,w
  3370  0338  0086               	movwf	6
  3371  0339  0187               	clrf	7
  3372  033A  0801               	movf	1,w
  3373  033B  00C6               	movwf	noolite_send@noo_send_buffer+2
  3374                           
  3375                           ;noolite.c: 212: endpos++;
  3376  033C  0AD5               	incf	noolite_send@endpos,f
  3377                           
  3378                           ;noolite.c: 213: } else if (temp_send == 3) {
  3379  033D  2B55               	goto	l1478
  3380  033E                     l1472:	
  3381  033E  3003               	movlw	3
  3382  033F  0654               	xorwf	noolite_send@temp_send,w
  3383  0340  1D03               	btfss	3,2
  3384  0341  2B55               	goto	l1478
  3385                           
  3386                           ;noolite.c: 218: noo_send_buffer[2] = data[0];
  3387  0342  0872               	movf	noolite_send@data,w
  3388  0343  0086               	movwf	6
  3389  0344  0187               	clrf	7
  3390  0345  0801               	movf	1,w
  3391  0346  00C6               	movwf	noolite_send@noo_send_buffer+2
  3392                           
  3393                           ;noolite.c: 219: noo_send_buffer[3] = data[1];
  3394  0347  0872               	movf	noolite_send@data,w
  3395  0348  0086               	movwf	6
  3396  0349  3F41               	moviw [1]fsr1
  3397  034A  00C7               	movwf	noolite_send@noo_send_buffer+3
  3398                           
  3399                           ;noolite.c: 220: noo_send_buffer[4] = data[2];
  3400  034B  0872               	movf	noolite_send@data,w
  3401  034C  0086               	movwf	6
  3402  034D  3F42               	moviw [2]fsr1
  3403  034E  00C8               	movwf	noolite_send@noo_send_buffer+4
  3404                           
  3405                           ;noolite.c: 221: noo_send_buffer[5] = data[3];
  3406  034F  0872               	movf	noolite_send@data,w
  3407  0350  0086               	movwf	6
  3408  0351  3F43               	moviw [3]fsr1
  3409  0352  00C9               	movwf	noolite_send@noo_send_buffer+5
  3410                           
  3411                           ;noolite.c: 222: endpos += 4;
  3412  0353  3004               	movlw	4
  3413  0354  07D5               	addwf	noolite_send@endpos,f
  3414  0355                     l1478:	
  3415                           
  3416                           ;noolite.c: 223: }
  3417                           ;noolite.c: 224: if (noo_address_type != 0) {
  3418  0355  0824               	movf	_noo_address_type,w
  3419  0356  1903               	btfsc	3,2
  3420  0357  2BBF               	goto	l1494
  3421                           
  3422                           ;noolite.c: 225: noo_send_format = (uint8_t) (noo_send_format | 0x10);
  3423  0358  1671               	bsf	noolite_send@noo_send_format,4
  3424                           
  3425                           ;noolite.c: 226: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3426  0359  0855               	movf	noolite_send@endpos,w
  3427  035A  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3428  035B  0086               	movwf	6
  3429  035C  0187               	clrf	7
  3430  035D  0852               	movf	noolite_send@chn,w
  3431  035E  0720               	addwf	_startaddress,w
  3432  035F  0081               	movwf	1
  3433                           
  3434                           ;noolite.c: 227: endpos++;
  3435  0360  0AD5               	incf	noolite_send@endpos,f
  3436                           
  3437                           ;noolite.c: 228: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3438  0361  0855               	movf	noolite_send@endpos,w
  3439  0362  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3440  0363  0086               	movwf	6
  3441  0364  0820               	movf	_startaddress,w
  3442  0365  00F3               	movwf	??_noolite_send
  3443  0366  0821               	movf	_startaddress+1,w
  3444  0367  00F4               	movwf	??_noolite_send+1
  3445  0368  0822               	movf	_startaddress+2,w
  3446  0369  00F5               	movwf	??_noolite_send+2
  3447  036A  0823               	movf	_startaddress+3,w
  3448  036B  00F6               	movwf	??_noolite_send+3
  3449  036C  0852               	movf	noolite_send@chn,w
  3450  036D  00F7               	movwf	??_noolite_send+4
  3451  036E  01F8               	clrf	??_noolite_send+5
  3452  036F  01F9               	clrf	??_noolite_send+6
  3453  0370  01FA               	clrf	??_noolite_send+7
  3454  0371  07F3               	addwf	??_noolite_send,f
  3455  0372  0878               	movf	??_noolite_send+5,w
  3456  0373  3DF4               	addwfc	??_noolite_send+1,f
  3457  0374  0879               	movf	??_noolite_send+6,w
  3458  0375  3DF5               	addwfc	??_noolite_send+2,f
  3459  0376  087A               	movf	??_noolite_send+7,w
  3460  0377  3DF6               	addwfc	??_noolite_send+3,f
  3461  0378  0874               	movf	??_noolite_send+1,w
  3462  0379  00F3               	movwf	??_noolite_send
  3463  037A  0875               	movf	??_noolite_send+2,w
  3464  037B  00F4               	movwf	??_noolite_send+1
  3465  037C  0876               	movf	??_noolite_send+3,w
  3466  037D  00F5               	movwf	??_noolite_send+2
  3467  037E  01F6               	clrf	??_noolite_send+3
  3468  037F  0873               	movf	??_noolite_send,w
  3469  0380  0081               	movwf	1
  3470                           
  3471                           ;noolite.c: 229: endpos++;
  3472  0381  0AD5               	incf	noolite_send@endpos,f
  3473                           
  3474                           ;noolite.c: 230: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 16);
  3475  0382  0855               	movf	noolite_send@endpos,w
  3476  0383  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3477  0384  0086               	movwf	6
  3478  0385  0820               	movf	_startaddress,w
  3479  0386  00F3               	movwf	??_noolite_send
  3480  0387  0821               	movf	_startaddress+1,w
  3481  0388  00F4               	movwf	??_noolite_send+1
  3482  0389  0822               	movf	_startaddress+2,w
  3483  038A  00F5               	movwf	??_noolite_send+2
  3484  038B  0823               	movf	_startaddress+3,w
  3485  038C  00F6               	movwf	??_noolite_send+3
  3486  038D  0852               	movf	noolite_send@chn,w
  3487  038E  00F7               	movwf	??_noolite_send+4
  3488  038F  01F8               	clrf	??_noolite_send+5
  3489  0390  01F9               	clrf	??_noolite_send+6
  3490  0391  01FA               	clrf	??_noolite_send+7
  3491  0392  07F3               	addwf	??_noolite_send,f
  3492  0393  0878               	movf	??_noolite_send+5,w
  3493  0394  3DF4               	addwfc	??_noolite_send+1,f
  3494  0395  0879               	movf	??_noolite_send+6,w
  3495  0396  3DF5               	addwfc	??_noolite_send+2,f
  3496  0397  087A               	movf	??_noolite_send+7,w
  3497  0398  3DF6               	addwfc	??_noolite_send+3,f
  3498  0399  0875               	movf	??_noolite_send+2,w
  3499  039A  00F3               	movwf	??_noolite_send
  3500  039B  0876               	movf	??_noolite_send+3,w
  3501  039C  00F4               	movwf	??_noolite_send+1
  3502  039D  01F5               	clrf	??_noolite_send+2
  3503  039E  01F6               	clrf	??_noolite_send+3
  3504  039F  0873               	movf	??_noolite_send,w
  3505  03A0  0081               	movwf	1
  3506                           
  3507                           ;noolite.c: 231: endpos++;
  3508  03A1  0AD5               	incf	noolite_send@endpos,f
  3509                           
  3510                           ;noolite.c: 232: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 24);
  3511  03A2  0855               	movf	noolite_send@endpos,w
  3512  03A3  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3513  03A4  0086               	movwf	6
  3514  03A5  0820               	movf	_startaddress,w
  3515  03A6  00F3               	movwf	??_noolite_send
  3516  03A7  0821               	movf	_startaddress+1,w
  3517  03A8  00F4               	movwf	??_noolite_send+1
  3518  03A9  0822               	movf	_startaddress+2,w
  3519  03AA  00F5               	movwf	??_noolite_send+2
  3520  03AB  0823               	movf	_startaddress+3,w
  3521  03AC  00F6               	movwf	??_noolite_send+3
  3522  03AD  0852               	movf	noolite_send@chn,w
  3523  03AE  00F7               	movwf	??_noolite_send+4
  3524  03AF  01F8               	clrf	??_noolite_send+5
  3525  03B0  01F9               	clrf	??_noolite_send+6
  3526  03B1  01FA               	clrf	??_noolite_send+7
  3527  03B2  07F3               	addwf	??_noolite_send,f
  3528  03B3  0878               	movf	??_noolite_send+5,w
  3529  03B4  3DF4               	addwfc	??_noolite_send+1,f
  3530  03B5  0879               	movf	??_noolite_send+6,w
  3531  03B6  3DF5               	addwfc	??_noolite_send+2,f
  3532  03B7  087A               	movf	??_noolite_send+7,w
  3533  03B8  3DF6               	addwfc	??_noolite_send+3,f
  3534  03B9  0876               	movf	??_noolite_send+3,w
  3535  03BA  00F3               	movwf	??_noolite_send
  3536  03BB  01F4               	clrf	??_noolite_send+1
  3537  03BC  01F5               	clrf	??_noolite_send+2
  3538  03BD  01F6               	clrf	??_noolite_send+3
  3539  03BE  2BE6               	goto	L6
  3540  03BF                     l1494:	
  3541                           ;noolite.c: 234: } else {
  3542                           
  3543                           ;noolite.c: 233: endpos++;
  3544                           
  3545                           
  3546                           ;noolite.c: 235: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  3547  03BF  0855               	movf	noolite_send@endpos,w
  3548  03C0  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3549  03C1  0086               	movwf	6
  3550  03C2  0187               	clrf	7
  3551  03C3  0852               	movf	noolite_send@chn,w
  3552  03C4  0720               	addwf	_startaddress,w
  3553  03C5  0081               	movwf	1
  3554                           
  3555                           ;noolite.c: 236: endpos++;
  3556  03C6  0AD5               	incf	noolite_send@endpos,f
  3557                           
  3558                           ;noolite.c: 237: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  3559  03C7  0855               	movf	noolite_send@endpos,w
  3560  03C8  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3561  03C9  0086               	movwf	6
  3562  03CA  0820               	movf	_startaddress,w
  3563  03CB  00F3               	movwf	??_noolite_send
  3564  03CC  0821               	movf	_startaddress+1,w
  3565  03CD  00F4               	movwf	??_noolite_send+1
  3566  03CE  0822               	movf	_startaddress+2,w
  3567  03CF  00F5               	movwf	??_noolite_send+2
  3568  03D0  0823               	movf	_startaddress+3,w
  3569  03D1  00F6               	movwf	??_noolite_send+3
  3570  03D2  0852               	movf	noolite_send@chn,w
  3571  03D3  00F7               	movwf	??_noolite_send+4
  3572  03D4  01F8               	clrf	??_noolite_send+5
  3573  03D5  01F9               	clrf	??_noolite_send+6
  3574  03D6  01FA               	clrf	??_noolite_send+7
  3575  03D7  07F3               	addwf	??_noolite_send,f
  3576  03D8  0878               	movf	??_noolite_send+5,w
  3577  03D9  3DF4               	addwfc	??_noolite_send+1,f
  3578  03DA  0879               	movf	??_noolite_send+6,w
  3579  03DB  3DF5               	addwfc	??_noolite_send+2,f
  3580  03DC  087A               	movf	??_noolite_send+7,w
  3581  03DD  3DF6               	addwfc	??_noolite_send+3,f
  3582  03DE  0874               	movf	??_noolite_send+1,w
  3583  03DF  00F3               	movwf	??_noolite_send
  3584  03E0  0875               	movf	??_noolite_send+2,w
  3585  03E1  00F4               	movwf	??_noolite_send+1
  3586  03E2  0876               	movf	??_noolite_send+3,w
  3587  03E3  00F5               	movwf	??_noolite_send+2
  3588  03E4  01F6               	clrf	??_noolite_send+3
  3589  03E5  0873               	movf	??_noolite_send,w
  3590  03E6                     L6:	
  3591  03E6  0081               	movwf	1
  3592                           
  3593                           ;noolite.c: 238: endpos++;
  3594  03E7  0AD5               	incf	noolite_send@endpos,f
  3595                           
  3596                           ;noolite.c: 239: }
  3597                           ;noolite.c: 240: noo_send_buffer[endpos] = noo_send_format;
  3598  03E8  0855               	movf	noolite_send@endpos,w
  3599  03E9  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3600  03EA  0086               	movwf	6
  3601  03EB  0187               	clrf	7
  3602  03EC  0871               	movf	noolite_send@noo_send_format,w
  3603  03ED  0081               	movwf	1
  3604                           
  3605                           ;noolite.c: 241: endpos++;
  3606  03EE  0AD5               	incf	noolite_send@endpos,f
  3607                           
  3608                           ;noolite.c: 242: temp_send = 0;
  3609  03EF  01D4               	clrf	noolite_send@temp_send
  3610                           
  3611                           ;noolite.c: 243: countbit = (unsigned char) (endpos * 8);
  3612  03F0  0855               	movf	noolite_send@endpos,w
  3613  03F1  0709               	addwf	9,w
  3614  03F2  0709               	addwf	9,w
  3615  03F3  0709               	addwf	9,w
  3616  03F4  00D1               	movwf	noolite_send@countbit
  3617                           
  3618                           ;noolite.c: 244: countsend = (uint8_t) (startpos + 1);
  3619  03F5  0850               	movf	noolite_send@startpos,w
  3620  03F6  3E01               	addlw	1
  3621  03F7  00D3               	movwf	noolite_send@countsend
  3622  03F8                     l1532:	
  3623                           ;noolite.c: 245: while (countsend < countbit) {
  3624                           
  3625  03F8  0020               	movlb	0	; select bank0
  3626  03F9  0851               	movf	noolite_send@countbit,w
  3627  03FA  0253               	subwf	noolite_send@countsend,w
  3628  03FB  1803               	btfsc	3,0
  3629  03FC  2C22               	goto	l1534
  3630                           
  3631                           ;noolite.c: 246: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3632  03FD  0853               	movf	noolite_send@countsend,w
  3633  03FE  00F3               	movwf	??_noolite_send
  3634  03FF  36F3               	lsrf	??_noolite_send,f
  3635  0400  36F3               	lsrf	??_noolite_send,f
  3636  0401  36F3               	lsrf	??_noolite_send,f
  3637  0402  0873               	movf	??_noolite_send,w
  3638  0403  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3639  0404  0086               	movwf	6
  3640  0405  3001               	movlw	1
  3641  0406  0187               	clrf	7
  3642  0407  00F4               	movwf	??_noolite_send+1
  3643  0408  0853               	movf	noolite_send@countsend,w
  3644  0409  3907               	andlw	7
  3645  040A  0A89               	incf	9,f
  3646  040B  2C0D               	goto	u814
  3647  040C                     u815:	
  3648  040C  35F4               	lslf	??_noolite_send+1,f
  3649  040D                     u814:	
  3650  040D  0B89               	decfsz	9,f
  3651  040E  2C0C               	goto	u815
  3652  040F  0874               	movf	??_noolite_send+1,w
  3653  0410  0501               	andwf	1,w
  3654  0411  1903               	btfsc	3,2
  3655  0412  2C15               	goto	l1514
  3656                           
  3657                           ;noolite.c: 247: temp_send = (uint8_t) (temp_send^0x01);
  3658  0413  3001               	movlw	1
  3659  0414  06D4               	xorwf	noolite_send@temp_send,f
  3660  0415                     l1514:	
  3661                           
  3662                           ;noolite.c: 248: }
  3663                           ;noolite.c: 249: tx_status &= (~(1<<4));
  3664  0415  122B               	bcf	_tx_status,4
  3665                           
  3666                           ;noolite.c: 250: if (((temp_send & (1<<0)) != 0)) {
  3667  0416  1C54               	btfss	noolite_send@temp_send,0
  3668  0417  2C1B               	goto	l1522
  3669                           
  3670                           ;noolite.c: 251: temp_send = (uint8_t) (temp_send^0x18);
  3671  0418  3018               	movlw	24
  3672  0419  06D4               	xorwf	noolite_send@temp_send,f
  3673                           
  3674                           ;noolite.c: 252: tx_status |= (1<<4);
  3675  041A  162B               	bsf	_tx_status,4
  3676  041B                     l1522:	
  3677                           
  3678                           ;noolite.c: 253: }
  3679                           ;noolite.c: 254: temp_send = (uint8_t) (temp_send >> 1);
  3680  041B  36D4               	lsrf	noolite_send@temp_send,f
  3681                           
  3682                           ;noolite.c: 255: temp_send &= (~(1<<7));
  3683  041C  13D4               	bcf	noolite_send@temp_send,7
  3684                           
  3685                           ;noolite.c: 256: if (((tx_status & (1<<4)) != 0)) {
  3686  041D  1A2B               	btfsc	_tx_status,4
  3687                           
  3688                           ;noolite.c: 257: temp_send |= (1<<7);
  3689  041E  17D4               	bsf	noolite_send@temp_send,7
  3690                           
  3691                           ;noolite.c: 258: }
  3692                           ;noolite.c: 259: countsend++;
  3693  041F  0AD3               	incf	noolite_send@countsend,f
  3694  0420  0064               	clrwdt	;# 
  3695  0421  2BF8               	goto	l1532
  3696  0422                     l1534:	
  3697                           
  3698                           ;noolite.c: 261: }
  3699                           ;noolite.c: 262: noo_send_buffer[endpos] = temp_send;
  3700  0422  0855               	movf	noolite_send@endpos,w
  3701  0423  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3702  0424  0086               	movwf	6
  3703  0425  0187               	clrf	7
  3704  0426  0854               	movf	noolite_send@temp_send,w
  3705  0427  0081               	movwf	1
  3706  0428  30C0               	movlw	192
  3707                           
  3708                           ;noolite.c: 263: endpos++;
  3709  0429  0AD5               	incf	noolite_send@endpos,f
  3710                           
  3711                           ;noolite.c: 264: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3712  042A  0021               	movlb	1	; select bank1
  3713  042B  0595               	andwf	21,f	;volatile
  3714  042C  3003               	movlw	3
  3715  042D  0495               	iorwf	21,f	;volatile
  3716                           
  3717                           ;noolite.c: 265: temp_send = 3;
  3718  042E  0020               	movlb	0	; select bank0
  3719  042F  00D4               	movwf	noolite_send@temp_send
  3720  0430  3026               	movlw	38
  3721                           
  3722                           ;noolite.c: 266: tx_status &= (~(1<<2));
  3723  0431  112B               	bcf	_tx_status,2
  3724                           
  3725                           ;noolite.c: 267: tx_status &= (~(1<<3));
  3726  0432  11AB               	bcf	_tx_status,3
  3727                           
  3728                           ;noolite.c: 268: tx_status |= (1<<0);
  3729  0433  142B               	bsf	_tx_status,0
  3730                           
  3731                           ;noolite.c: 269: tx_status |= (1<<5);
  3732  0434  16AB               	bsf	_tx_status,5
  3733                           
  3734                           ;noolite.c: 270: countsend = 0;
  3735  0435  01D3               	clrf	noolite_send@countsend
  3736                           
  3737                           ;noolite.c: 271: countbit = 38;
  3738  0436  00D1               	movwf	noolite_send@countbit
  3739  0437  0064               	clrwdt	;# 
  3740                           
  3741                           ;noolite.c: 273: LATCbits.LATC3 = 1;
  3742  0438  0022               	movlb	2	; select bank2
  3743  0439  158E               	bsf	14,3	;volatile
  3744                           
  3745                           ;noolite.c: 274: _delay((unsigned long)((15)*(8000000/4000.0)));
  3746  043A  3027               	movlw	39
  3747  043B  00F3               	movwf	??_noolite_send
  3748  043C  30F5               	movlw	245
  3749  043D                     u1607:	
  3750  043D  0B89               	decfsz	9,f
  3751  043E  2C3D               	goto	u1607
  3752  043F  0BF3               	decfsz	??_noolite_send,f
  3753  0440  2C3D               	goto	u1607
  3754  0441  0000               	nop
  3755                           
  3756                           ;noolite.c: 275: LATCbits.LATC3 = 0;
  3757  0442  0022               	movlb	2	; select bank2
  3758  0443  118E               	bcf	14,3	;volatile
  3759                           
  3760                           ;noolite.c: 276: TMR0 = 196;
  3761  0444  30C4               	movlw	196
  3762  0445  0020               	movlb	0	; select bank0
  3763  0446  0095               	movwf	21	;volatile
  3764                           
  3765                           ;noolite.c: 277: TMR0IF = 0;
  3766  0447  110B               	bcf	11,2	;volatile
  3767                           
  3768                           ;noolite.c: 278: TMR0IE = 0;
  3769  0448  128B               	bcf	11,5	;volatile
  3770  0449                     l204:	
  3771                           ;noolite.c: 279: while (((tx_status & (1<<3)) == 0)) {
  3772                           
  3773  0449  19AB               	btfsc	_tx_status,3
  3774  044A  2CA3               	goto	l215
  3775                           
  3776                           ;noolite.c: 280: if (TMR0IF) {
  3777  044B  1D0B               	btfss	11,2	;volatile
  3778  044C  2C49               	goto	l204
  3779                           
  3780                           ;noolite.c: 281: __nop();
  3781  044D  0000               	nop
  3782                           
  3783                           ;noolite.c: 282: if (countsend < countbit) {
  3784  044E  0020               	movlb	0	; select bank0
  3785  044F  0851               	movf	noolite_send@countbit,w
  3786  0450  0253               	subwf	noolite_send@countsend,w
  3787  0451  1803               	skipnc
  3788  0452  2C6A               	goto	l207
  3789                           
  3790                           ;noolite.c: 283: if (((tx_status & (1<<2)) == 0)) {
  3791  0453  192B               	btfsc	_tx_status,2
  3792  0454  2C61               	goto	l1582
  3793                           
  3794                           ;noolite.c: 284: if (((tx_status & (1<<0)) == 0)) {
  3795  0455  182B               	btfsc	_tx_status,0
  3796  0456  2C5A               	goto	l209
  3797                           
  3798                           ;noolite.c: 285: LATAbits.LATA5 = 1;
  3799  0457  0022               	movlb	2	; select bank2
  3800  0458  168C               	bsf	12,5	;volatile
  3801                           
  3802                           ;noolite.c: 286: } else {
  3803  0459  2C5C               	goto	l1578
  3804  045A                     l209:	
  3805                           
  3806                           ;noolite.c: 287: LATAbits.LATA5 = 0;
  3807  045A  0022               	movlb	2	; select bank2
  3808  045B  128C               	bcf	12,5	;volatile
  3809  045C                     l1578:	
  3810                           
  3811                           ;noolite.c: 288: }
  3812                           ;noolite.c: 289: TMR0 = 196;
  3813  045C  30C4               	movlw	196
  3814  045D  0020               	movlb	0	; select bank0
  3815  045E  0095               	movwf	21	;volatile
  3816                           
  3817                           ;noolite.c: 290: tx_status |= (1<<2);
  3818  045F  152B               	bsf	_tx_status,2
  3819                           
  3820                           ;noolite.c: 291: } else {
  3821  0460  2C86               	goto	l212
  3822  0461                     l1582:	
  3823                           
  3824                           ;noolite.c: 292: LATA ^= (1<<5);
  3825  0461  3020               	movlw	32
  3826  0462  0022               	movlb	2	; select bank2
  3827  0463  068C               	xorwf	12,f	;volatile
  3828                           
  3829                           ;noolite.c: 293: TMR0 = 196;
  3830  0464  30C4               	movlw	196
  3831  0465  0020               	movlb	0	; select bank0
  3832  0466  0095               	movwf	21	;volatile
  3833                           
  3834                           ;noolite.c: 294: tx_status &= (~(1<<2));
  3835  0467  112B               	bcf	_tx_status,2
  3836                           
  3837                           ;noolite.c: 295: countsend++;
  3838  0468  0AD3               	incf	noolite_send@countsend,f
  3839  0469  2C86               	goto	l212
  3840  046A                     l207:	
  3841                           
  3842                           ;noolite.c: 298: LATAbits.LATA5 = 0;
  3843  046A  0022               	movlb	2	; select bank2
  3844  046B  128C               	bcf	12,5	;volatile
  3845                           
  3846                           ;noolite.c: 299: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3847  046C  30C0               	movlw	192
  3848  046D  0021               	movlb	1	; select bank1
  3849  046E  0595               	andwf	21,f	;volatile
  3850  046F  3003               	movlw	3
  3851  0470  0495               	iorwf	21,f	;volatile
  3852                           
  3853                           ;noolite.c: 300: TMR0 = 67;
  3854  0471  3043               	movlw	67
  3855  0472  0020               	movlb	0	; select bank0
  3856  0473  0095               	movwf	21	;volatile
  3857  0474  0064               	clrwdt	;# 
  3858                           
  3859                           ;noolite.c: 302: tx_status &= (~(1<<5));
  3860  0475  0020               	movlb	0	; select bank0
  3861  0476  12AB               	bcf	_tx_status,5
  3862                           
  3863                           ;noolite.c: 303: countsend = startpos;
  3864  0477  0850               	movf	noolite_send@startpos,w
  3865  0478  00D3               	movwf	noolite_send@countsend
  3866                           
  3867                           ;noolite.c: 304: countbit = (uint8_t) (endpos * 8);
  3868  0479  0855               	movf	noolite_send@endpos,w
  3869  047A  0709               	addwf	9,w
  3870  047B  0709               	addwf	9,w
  3871  047C  0709               	addwf	9,w
  3872  047D  00D1               	movwf	noolite_send@countbit
  3873                           
  3874                           ;noolite.c: 305: if (temp_send != 0) {
  3875  047E  0854               	movf	noolite_send@temp_send,w
  3876  047F  1903               	btfsc	3,2
  3877  0480  2C83               	goto	l1598
  3878                           
  3879                           ;noolite.c: 306: temp_send--;
  3880  0481  03D4               	decf	noolite_send@temp_send,f
  3881                           
  3882                           ;noolite.c: 307: } else {
  3883  0482  2C86               	goto	l212
  3884  0483                     l1598:	
  3885                           
  3886                           ;noolite.c: 308: TMR0 = 0;
  3887  0483  0195               	clrf	21	;volatile
  3888                           
  3889                           ;noolite.c: 309: tx_status |= (1<<3);
  3890  0484  15AB               	bsf	_tx_status,3
  3891                           
  3892                           ;noolite.c: 310: break;
  3893  0485  2CA3               	goto	l215
  3894  0486                     l212:	
  3895                           
  3896                           ;noolite.c: 311: }
  3897                           ;noolite.c: 312: }
  3898                           ;noolite.c: 313: if (((tx_status & (1<<5)) == 0)) {
  3899  0486  1AAB               	btfsc	_tx_status,5
  3900  0487  2CA1               	goto	l216
  3901                           
  3902                           ;noolite.c: 314: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3903  0488  0853               	movf	noolite_send@countsend,w
  3904  0489  00F3               	movwf	??_noolite_send
  3905  048A  36F3               	lsrf	??_noolite_send,f
  3906  048B  36F3               	lsrf	??_noolite_send,f
  3907  048C  36F3               	lsrf	??_noolite_send,f
  3908  048D  0873               	movf	??_noolite_send,w
  3909  048E  3E44               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3910  048F  0086               	movwf	6
  3911  0490  3001               	movlw	1
  3912  0491  0187               	clrf	7
  3913  0492  00F4               	movwf	??_noolite_send+1
  3914  0493  0853               	movf	noolite_send@countsend,w
  3915  0494  3907               	andlw	7
  3916  0495  0A89               	incf	9,f
  3917  0496  2C98               	goto	u924
  3918  0497                     u925:	
  3919  0497  35F4               	lslf	??_noolite_send+1,f
  3920  0498                     u924:	
  3921  0498  0B89               	decfsz	9,f
  3922  0499  2C97               	goto	u925
  3923  049A  0874               	movf	??_noolite_send+1,w
  3924  049B  0501               	andwf	1,w
  3925  049C  1903               	btfsc	3,2
  3926  049D  2CA0               	goto	l217
  3927                           
  3928                           ;noolite.c: 315: tx_status |= (1<<0);
  3929  049E  142B               	bsf	_tx_status,0
  3930                           
  3931                           ;noolite.c: 316: } else {
  3932  049F  2CA1               	goto	l216
  3933  04A0                     l217:	
  3934                           
  3935                           ;noolite.c: 317: tx_status &= (~(1<<0));
  3936  04A0  102B               	bcf	_tx_status,0
  3937  04A1                     l216:	
  3938                           
  3939                           ;noolite.c: 318: }
  3940                           ;noolite.c: 319: }
  3941                           ;noolite.c: 320: TMR0IF = 0;
  3942  04A1  110B               	bcf	11,2	;volatile
  3943  04A2  2C49               	goto	l204
  3944  04A3                     l215:	
  3945                           
  3946                           ;noolite.c: 321: }
  3947                           ;noolite.c: 322: }
  3948                           ;noolite.c: 323: TMR0IF = 0;
  3949  04A3  110B               	bcf	11,2	;volatile
  3950                           
  3951                           ;noolite.c: 324: LATAbits.LATA5 = 0;
  3952  04A4  0022               	movlb	2	; select bank2
  3953  04A5  128C               	bcf	12,5	;volatile
  3954  04A6  0008               	return
  3955  04A7                     __end_of_noolite_send:	
  3956                           
  3957                           	psect	text9
  3958  0108                     __ptext9:	
  3959 ;; *************** function _Init_TypeFromFlash *****************
  3960 ;; Defined at:
  3961 ;;		line 23 in file "user_functions.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  type            2    0[COMMON] PTR const unsigned int 
  3964 ;;		 -> Type(16), 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      unsigned char 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/2
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1
  3976 ;;      Params:         2       0       0
  3977 ;;      Locals:         0       0       0
  3978 ;;      Temps:          2       0       0
  3979 ;;      Totals:         4       0       0
  3980 ;;Total ram usage:        4 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; This function calls:
  3983 ;;		Nothing
  3984 ;; This function is called by:
  3985 ;;		_main
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           
  3990                           ;psect for function _Init_TypeFromFlash
  3991  0108                     _Init_TypeFromFlash:	
  3992                           
  3993                           ;user_functions.c: 24: if (((type[0] >> 8) == 0x5A) && ((type[0] & 0xFF) < 4)) {
  3994                           
  3995                           ;incstack = 0
  3996                           ; Regs used in _Init_TypeFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3997  0108  0870               	movf	Init_TypeFromFlash@type,w
  3998  0109  0084               	movwf	4
  3999  010A  0871               	movf	Init_TypeFromFlash@type+1,w
  4000  010B  0085               	movwf	5
  4001  010C  3F00               	moviw [0]fsr0
  4002  010D  00F2               	movwf	??_Init_TypeFromFlash
  4003  010E  3F01               	moviw [1]fsr0
  4004  010F  00F3               	movwf	??_Init_TypeFromFlash+1
  4005  0110  00F2               	movwf	??_Init_TypeFromFlash
  4006  0111  305A               	movlw	90
  4007  0112  01F3               	clrf	??_Init_TypeFromFlash+1
  4008  0113  0672               	xorwf	??_Init_TypeFromFlash,w
  4009  0114  1D03               	btfss	3,2
  4010  0115  3400               	retlw	0
  4011  0116  0870               	movf	Init_TypeFromFlash@type,w
  4012  0117  0084               	movwf	4
  4013  0118  0871               	movf	Init_TypeFromFlash@type+1,w
  4014  0119  0085               	movwf	5
  4015  011A  0800               	movf	0,w	;code access
  4016  011B  00F2               	movwf	??_Init_TypeFromFlash
  4017  011C  3004               	movlw	4
  4018  011D  0272               	subwf	??_Init_TypeFromFlash,w
  4019  011E  1803               	skipnc
  4020  011F  3400               	retlw	0
  4021                           
  4022                           ;user_functions.c: 25: return (type[0] & 0xFF);
  4023  0120  0870               	movf	Init_TypeFromFlash@type,w
  4024  0121  0084               	movwf	4
  4025  0122  0871               	movf	Init_TypeFromFlash@type+1,w
  4026  0123  0085               	movwf	5
  4027  0124  0800               	movf	0,w	;code access
  4028  0125  0008               	return
  4029  0126                     __end_of_Init_TypeFromFlash:	
  4030                           ;user_functions.c: 27: return 0;
  4031                           
  4032                           
  4033                           	psect	text10
  4034  0274                     __ptext10:	
  4035 ;; *************** function _Init_TxStatusFromFlash *****************
  4036 ;; Defined at:
  4037 ;;		line 31 in file "user_functions.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  txStatus        2    0[COMMON] PTR const unsigned int 
  4040 ;;		 -> TxStatus(16), 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  cellNum         1    8[COMMON] unsigned char 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      unsigned char 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4047 ;; Tracked objects:
  4048 ;;		On entry : 1F/0
  4049 ;;		On exit  : 1F/0
  4050 ;;		Unchanged: 1F/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1
  4052 ;;      Params:         2       0       0
  4053 ;;      Locals:         1       0       0
  4054 ;;      Temps:          6       0       0
  4055 ;;      Totals:         9       0       0
  4056 ;;Total ram usage:        9 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _Init_TxStatusFromFlash
  4067  0274                     _Init_TxStatusFromFlash:	
  4068                           
  4069                           ;user_functions.c: 32: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _Init_TxStatusFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  4073  0274  01F8               	clrf	Init_TxStatusFromFlash@cellNum
  4074  0275                     l1698:	
  4075                           
  4076                           ;user_functions.c: 33: if (txStatus[cellNum] == 0xFFFF) {
  4077  0275  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4078  0276  00F2               	movwf	??_Init_TxStatusFromFlash
  4079  0277  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4080  0278  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4081  0279  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4082  027A  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4083  027B  0772               	addwf	??_Init_TxStatusFromFlash,w
  4084  027C  0084               	movwf	4
  4085  027D  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4086  027E  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4087  027F  0085               	movwf	5
  4088  0280  0012               	moviw fsr0++
  4089  0281  3AFF               	xorlw	255
  4090  0282  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4091  0283  0012               	moviw fsr0++
  4092  0284  3AFF               	xorlw	255
  4093  0285  04F4               	iorwf	??_Init_TxStatusFromFlash+2,f
  4094  0286  1D03               	btfss	3,2
  4095  0287  2AD0               	goto	l1720
  4096                           
  4097                           ;user_functions.c: 34: if (cellNum > 0) {
  4098  0288  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4099  0289  1903               	btfsc	3,2
  4100  028A  3400               	retlw	0
  4101                           
  4102                           ;user_functions.c: 35: if (((txStatus[cellNum - 1] >> 8) == 0x5A) && ((txStatus[cellNum 
      +                          - 1] & 0xFF) < 3)) {
  4103  028B  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4104  028C  00F2               	movwf	??_Init_TxStatusFromFlash
  4105  028D  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4106  028E  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4107  028F  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4108  0290  0872               	movf	??_Init_TxStatusFromFlash,w
  4109  0291  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4110  0292  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4111  0293  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4112  0294  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4113  0295  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4114  0296  30FE               	movlw	254
  4115  0297  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4116  0298  0084               	movwf	4
  4117  0299  30FF               	movlw	255
  4118  029A  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4119  029B  0085               	movwf	5
  4120  029C  3F00               	moviw [0]fsr0
  4121  029D  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4122  029E  3F01               	moviw [1]fsr0
  4123  029F  00F7               	movwf	??_Init_TxStatusFromFlash+5
  4124  02A0  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4125  02A1  305A               	movlw	90
  4126  02A2  01F7               	clrf	??_Init_TxStatusFromFlash+5
  4127  02A3  0676               	xorwf	??_Init_TxStatusFromFlash+4,w
  4128  02A4  1D03               	btfss	3,2
  4129  02A5  3400               	retlw	0
  4130  02A6  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4131  02A7  00F2               	movwf	??_Init_TxStatusFromFlash
  4132  02A8  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4133  02A9  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4134  02AA  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4135  02AB  0872               	movf	??_Init_TxStatusFromFlash,w
  4136  02AC  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4137  02AD  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4138  02AE  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4139  02AF  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4140  02B0  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4141  02B1  30FE               	movlw	254
  4142  02B2  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4143  02B3  0084               	movwf	4
  4144  02B4  30FF               	movlw	255
  4145  02B5  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4146  02B6  0085               	movwf	5
  4147  02B7  0800               	movf	0,w	;code access
  4148  02B8  00F6               	movwf	??_Init_TxStatusFromFlash+4
  4149  02B9  3003               	movlw	3
  4150  02BA  0276               	subwf	??_Init_TxStatusFromFlash+4,w
  4151  02BB  1803               	skipnc
  4152  02BC  3400               	retlw	0
  4153                           
  4154                           ;user_functions.c: 36: return txStatus[cellNum - 1];
  4155  02BD  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4156  02BE  00F2               	movwf	??_Init_TxStatusFromFlash
  4157  02BF  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4158  02C0  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4159  02C1  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4160  02C2  0872               	movf	??_Init_TxStatusFromFlash,w
  4161  02C3  0770               	addwf	Init_TxStatusFromFlash@txStatus,w
  4162  02C4  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4163  02C5  0873               	movf	??_Init_TxStatusFromFlash+1,w
  4164  02C6  3D71               	addwfc	Init_TxStatusFromFlash@txStatus+1,w
  4165  02C7  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4166  02C8  30FE               	movlw	254
  4167  02C9  0774               	addwf	??_Init_TxStatusFromFlash+2,w
  4168  02CA  0084               	movwf	4
  4169  02CB  30FF               	movlw	255
  4170  02CC  3D75               	addwfc	??_Init_TxStatusFromFlash+3,w
  4171  02CD  0085               	movwf	5
  4172  02CE  0800               	movf	0,w	;code access
  4173  02CF  0008               	return
  4174  02D0                     l1720:	
  4175                           ;user_functions.c: 38: return 0;
  4176                           
  4177                           
  4178                           ;user_functions.c: 44: if (cellNum == 7) {
  4179  02D0  3007               	movlw	7
  4180  02D1  0678               	xorwf	Init_TxStatusFromFlash@cellNum,w
  4181  02D2  1D03               	btfss	3,2
  4182  02D3  2B07               	goto	l1736
  4183                           
  4184                           ;user_functions.c: 45: if (((txStatus[cellNum] >> 8) == 0x5A) && ((txStatus[cellNum] & 0
      +                          xFF) < 3)) {
  4185  02D4  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4186  02D5  00F2               	movwf	??_Init_TxStatusFromFlash
  4187  02D6  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4188  02D7  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4189  02D8  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4190  02D9  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4191  02DA  0772               	addwf	??_Init_TxStatusFromFlash,w
  4192  02DB  0084               	movwf	4
  4193  02DC  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4194  02DD  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4195  02DE  0085               	movwf	5
  4196  02DF  3F00               	moviw [0]fsr0
  4197  02E0  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4198  02E1  3F01               	moviw [1]fsr0
  4199  02E2  00F5               	movwf	??_Init_TxStatusFromFlash+3
  4200  02E3  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4201  02E4  305A               	movlw	90
  4202  02E5  01F5               	clrf	??_Init_TxStatusFromFlash+3
  4203  02E6  0674               	xorwf	??_Init_TxStatusFromFlash+2,w
  4204  02E7  1D03               	btfss	3,2
  4205  02E8  3400               	retlw	0
  4206  02E9  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4207  02EA  00F2               	movwf	??_Init_TxStatusFromFlash
  4208  02EB  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4209  02EC  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4210  02ED  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4211  02EE  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4212  02EF  0772               	addwf	??_Init_TxStatusFromFlash,w
  4213  02F0  0084               	movwf	4
  4214  02F1  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4215  02F2  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4216  02F3  0085               	movwf	5
  4217  02F4  0800               	movf	0,w	;code access
  4218  02F5  00F4               	movwf	??_Init_TxStatusFromFlash+2
  4219  02F6  3003               	movlw	3
  4220  02F7  0274               	subwf	??_Init_TxStatusFromFlash+2,w
  4221  02F8  1803               	skipnc
  4222  02F9  3400               	retlw	0
  4223                           
  4224                           ;user_functions.c: 46: return txStatus[cellNum];
  4225  02FA  0878               	movf	Init_TxStatusFromFlash@cellNum,w
  4226  02FB  00F2               	movwf	??_Init_TxStatusFromFlash
  4227  02FC  01F3               	clrf	??_Init_TxStatusFromFlash+1
  4228  02FD  35F2               	lslf	??_Init_TxStatusFromFlash,f
  4229  02FE  0DF3               	rlf	??_Init_TxStatusFromFlash+1,f
  4230  02FF  0870               	movf	Init_TxStatusFromFlash@txStatus,w
  4231  0300  0772               	addwf	??_Init_TxStatusFromFlash,w
  4232  0301  0084               	movwf	4
  4233  0302  0871               	movf	Init_TxStatusFromFlash@txStatus+1,w
  4234  0303  3D73               	addwfc	??_Init_TxStatusFromFlash+1,w
  4235  0304  0085               	movwf	5
  4236  0305  0800               	movf	0,w	;code access
  4237  0306  0008               	return
  4238  0307                     l1736:	
  4239  0307  3008               	movlw	8
  4240  0308  0AF8               	incf	Init_TxStatusFromFlash@cellNum,f
  4241  0309  0278               	subwf	Init_TxStatusFromFlash@cellNum,w
  4242  030A  1803               	btfsc	3,0
  4243  030B  3400               	retlw	0
  4244  030C  2A75               	goto	l1698
  4245  030D                     __end_of_Init_TxStatusFromFlash:	
  4246                           
  4247                           	psect	text11
  4248  00E5                     __ptext11:	
  4249 ;; *************** function _Init_IO *****************
  4250 ;; Defined at:
  4251 ;;		line 46 in file "periph_config.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;		None
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;		None
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      void 
  4258 ;; Registers used:
  4259 ;;		wreg, status,2
  4260 ;; Tracked objects:
  4261 ;;		On entry : B1F/0
  4262 ;;		On exit  : B1F/2
  4263 ;;		Unchanged: B00/0
  4264 ;; Data sizes:     COMMON   BANK0   BANK1
  4265 ;;      Params:         0       0       0
  4266 ;;      Locals:         0       0       0
  4267 ;;      Temps:          0       0       0
  4268 ;;      Totals:         0       0       0
  4269 ;;Total ram usage:        0 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_main
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function _Init_IO
  4280  00E5                     _Init_IO:	
  4281                           
  4282                           ;periph_config.c: 47: OPTION_REGbits.nWPUEN = 0;
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in _Init_IO: [wreg+status,2]
  4286  00E5  0021               	movlb	1	; select bank1
  4287  00E6  1395               	bcf	21,7	;volatile
  4288                           
  4289                           ;periph_config.c: 48: TRISA = 0x1F;
  4290  00E7  301F               	movlw	31
  4291  00E8  008C               	movwf	12	;volatile
  4292                           
  4293                           ;periph_config.c: 49: ANSELA = 0;
  4294  00E9  0023               	movlb	3	; select bank3
  4295  00EA  018C               	clrf	12	;volatile
  4296                           
  4297                           ;periph_config.c: 50: WPUA = 0x08;
  4298  00EB  3008               	movlw	8
  4299  00EC  0024               	movlb	4	; select bank4
  4300  00ED  008C               	movwf	12	;volatile
  4301                           
  4302                           ;periph_config.c: 52: TRISC = 0x00;
  4303  00EE  0021               	movlb	1	; select bank1
  4304  00EF  018E               	clrf	14	;volatile
  4305                           
  4306                           ;periph_config.c: 53: ANSELC = 0;
  4307  00F0  0023               	movlb	3	; select bank3
  4308  00F1  018E               	clrf	14	;volatile
  4309                           
  4310                           ;periph_config.c: 54: LATC = 0x00;
  4311  00F2  0022               	movlb	2	; select bank2
  4312  00F3  018E               	clrf	14	;volatile
  4313  00F4  0008               	return
  4314  00F5                     __end_of_Init_IO:	
  4315                           
  4316                           	psect	text12
  4317  00CB                     __ptext12:	
  4318 ;; *************** function _Init_CLK *****************
  4319 ;; Defined at:
  4320 ;;		line 15 in file "periph_config.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2, status,0
  4329 ;; Tracked objects:
  4330 ;;		On entry : B1F/2
  4331 ;;		On exit  : B1F/1
  4332 ;;		Unchanged: B00/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1
  4334 ;;      Params:         0       0       0
  4335 ;;      Locals:         0       0       0
  4336 ;;      Temps:          0       0       0
  4337 ;;      Totals:         0       0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function _Init_CLK
  4349  00CB                     _Init_CLK:	
  4350                           
  4351                           ;periph_config.c: 18: OSCCONbits.IRCF = 0b1110;
  4352                           
  4353                           ;incstack = 0
  4354                           ; Regs used in _Init_CLK: [wreg+status,2+status,0]
  4355  00CB  0021               	movlb	1	; select bank1
  4356  00CC  0819               	movf	25,w	;volatile
  4357  00CD  3987               	andlw	-121
  4358  00CE  3870               	iorlw	112
  4359  00CF  0099               	movwf	25	;volatile
  4360                           
  4361                           ;periph_config.c: 34: WDTCONbits.WDTPS = 0b01011;
  4362  00D0  0817               	movf	23,w	;volatile
  4363  00D1  39C1               	andlw	-63
  4364  00D2  3816               	iorlw	22
  4365  00D3  0097               	movwf	23	;volatile
  4366                           
  4367                           ;periph_config.c: 41: WDTCONbits.SWDTEN = 1;
  4368  00D4  1417               	bsf	23,0	;volatile
  4369  00D5                     l274:	
  4370                           ;periph_config.c: 42: while (!OSCSTATbits.HFIOFR) {
  4371                           
  4372  00D5  1A1A               	btfsc	26,4	;volatile
  4373  00D6  0008               	return
  4374  00D7  28D5               	goto	l274
  4375  00D8                     __end_of_Init_CLK:	
  4376                           
  4377                           	psect	text13
  4378  00BF                     __ptext13:	
  4379 ;; *************** function _Init_ADC *****************
  4380 ;; Defined at:
  4381 ;;		line 57 in file "periph_config.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;		None
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0
  4390 ;; Tracked objects:
  4391 ;;		On entry : B1F/1
  4392 ;;		On exit  : B1F/1
  4393 ;;		Unchanged: B00/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1
  4395 ;;      Params:         0       0       0
  4396 ;;      Locals:         0       0       0
  4397 ;;      Temps:          0       0       0
  4398 ;;      Totals:         0       0       0
  4399 ;;Total ram usage:        0 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		_main
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           
  4409                           ;psect for function _Init_ADC
  4410  00BF                     _Init_ADC:	
  4411                           
  4412                           ;periph_config.c: 58: FVRCON = 0;
  4413                           
  4414                           ;incstack = 0
  4415                           ; Regs used in _Init_ADC: [wreg+status,2+status,0]
  4416  00BF  0022               	movlb	2	; select bank2
  4417  00C0  0197               	clrf	23	;volatile
  4418                           
  4419                           ;periph_config.c: 60: ADCON1bits.ADFM = 1;
  4420  00C1  0021               	movlb	1	; select bank1
  4421  00C2  179E               	bsf	30,7	;volatile
  4422                           
  4423                           ;periph_config.c: 61: ADCON1bits.ADCS = 0b001;
  4424  00C3  081E               	movf	30,w	;volatile
  4425  00C4  398F               	andlw	-113
  4426  00C5  3810               	iorlw	16
  4427  00C6  009E               	movwf	30	;volatile
  4428                           
  4429                           ;periph_config.c: 64: ADCON1bits.ADPREF = 0b00;
  4430  00C7  30FC               	movlw	-4
  4431  00C8  059E               	andwf	30,f	;volatile
  4432                           
  4433                           ;periph_config.c: 66: ADCON0bits.ADON = 0;
  4434  00C9  101D               	bcf	29,0	;volatile
  4435  00CA  0008               	return
  4436  00CB                     __end_of_Init_ADC:	
  4437  007E                     btemp	set	126	;btemp
  4438  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      64
    BANK1            32      0       0

Pointer List with Targets:

    KeyLongHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyLongHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    KeyOffHandler@nooData	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyOffHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    SaveTxStatusToFlash@txStatusArray	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TxStatusFromFlash@txStatus	PTR const unsigned int  size(2) Largest target is 16
		 -> TxStatus(CODE[16]), 

    Init_TypeFromFlash@type	PTR const unsigned int  size(2) Largest target is 16
		 -> Type(CODE[16]), 

    noolite_send@data	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_KeyOffHandler
    _SaveTxStatusToFlash->_FlashWrite
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK0

    _main->_KeyLongHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   18923
                                             22 BANK0      6     6      0
                      _FlashEraseRow
                         _FlashWrite
                           _Init_ADC
                           _Init_CLK
                            _Init_IO
             _Init_TxStatusFromFlash
                 _Init_TypeFromFlash
                     _KeyLongHandler
                      _KeyOffHandler
                            _RF_Init
                _SaveTxStatusToFlash
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _SaveTxStatusToFlash                                 12     7      5    1536
                                              4 COMMON     9     4      5
                                              0 BANK0      3     3      0
                      _FlashEraseRow
                         _FlashWrite
 ---------------------------------------------------------------------------------
 (2) _FlashWrite                                           4     0      4     858
                                              0 COMMON     4     0      4
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (2) _FlashEraseRow                                        2     0      2     173
                                              0 COMMON     2     0      2
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (3) _FlashUnlock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Init                                              7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _KeyOffHandler                                        5     2      3    5130
                                             11 COMMON     3     0      3
                                             18 BANK0      2     2      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _KeyLongHandler                                       5     1      4    5820
                                             11 COMMON     1     1      0
                                             18 BANK0      4     0      4
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _noolite_send                                        29    26      3    3312
                                              0 COMMON    11     8      3
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _Init_TypeFromFlash                                   4     2      2     194
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_TxStatusFromFlash                               9     7      2     462
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_CLK                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashEraseRow
     _FlashUnlock
   _FlashWrite
     _FlashUnlock
   _Init_ADC
   _Init_CLK
   _Init_IO
   _Init_TxStatusFromFlash
   _Init_TypeFromFlash
   _KeyLongHandler
     _noolite_send
   _KeyOffHandler
     _noolite_send
   _RF_Init
   _SaveTxStatusToFlash
     _FlashEraseRow
       _FlashUnlock
     _FlashWrite
       _FlashUnlock
   _noolite_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Sep 23 21:01:50 2018

                      __CFG_CP$ON 0000                                l90 0580                                l68 0507  
                              l85 0526                                l86 053F                                l87 0548  
                              l79 0511                                l96 05BB                               l212 0486  
                             l204 0449                               l215 04A3                               l207 046A  
                             l216 04A1                               l217 04A0                               l209 045A  
                             l147 0788                               l190 032F                               l182 0222  
                             l191 032B                               l183 0272                               l274 00D5  
                             l188 0321                               u814 040D                               u815 040C  
                             u924 0498                               u925 0497                      __CFG_IDLOC0$ 0000  
                    __CFG_IDLOC1$ 0007                      __CFG_IDLOC2$ 0000                      __CFG_IDLOC3$ 0007  
                    __CFG_BORV$LO 0000                               wreg 0009                       main@chn_250 005D  
                     main@chn_251 005E                       main@chn_252 005F          ??_Init_TxStatusFromFlash 0072  
                    __CFG_LVP$OFF 0000                   ?_KeyLongHandler 0056                              l2002 066D  
                            l2004 067C                              l2022 06BE                              l2030 06DE  
                            l2040 0718                              l2016 06A9                              l2042 0726  
                            l2034 06F0                              l2036 06FE                              l2028 06D0  
                            l2060 0772                              l2070 0789                              l2054 0760  
                            l2046 0734                              l2038 070B                              l2062 0780  
                            l2142 0530                              l2048 0742                              l1522 041B  
                            l1514 0415                              l2082 07A8                              l2066 0783  
                            l1532 03F8                              l1460 032C                              l1534 0422  
                            l1454 0323                              l1720 02D0                              l1472 033E  
                            l1900 0527                              l1582 0461                              l1494 03BF  
                            l1478 0355                              l1750 0166                              l1902 053B  
                            l1736 0307                              l1672 0220                              l1904 053D  
                            l1816 04BC                              l1578 045C                              l1770 0146  
                            l1772 014C                              l1780 0193                              l1932 0583  
                            l1924 056C                              l1916 054B                              l1852 04E8  
                            l1844 0505                              l1598 0483                              l1926 057A  
                            l1862 04F4                              l1846 04DE                              l1880 050B  
                            l1698 0275                              l1794 01C6                              l1954 05BE  
                            l1946 05AA                              l1882 050C                              l1980 061F  
                            l1948 05B9                              l1892 0521                              l1868 04FE  
                            l1798 01E2                              l1990 0635                              l1982 0620  
                            l1974 060E                              l1886 0514                              l1992 0641  
                            l1976 061D                              l1888 051B                              l1994 064B  
                            l1996 0656                              l1998 0661                              _LATA 010C  
                            _LATC 010E                              u1607 043D                              u1567 05FC  
                            u1577 07A3                              u1587 0171                              u1597 0180  
                            _TMR0 0015                              _WPUA 020C                              _Keys 002C  
                    _startaddress 0020                      __CFG_WRT$OFF 0000                              _Type 07C0  
                            _main 04A7                   __end_of_RF_Init 0274                              fsr0h 0005  
                            fsr1h 0007                              indf0 0000                              fsr0l 0004  
                            indf1 0001                              fsr1l 0006                              btemp 007E  
   SaveTxStatusToFlash@adrToWrite 0044      noolite_send@noo_send_command 0070                              start 0001  
             __end_of_FlashUnlock 00BF                     __CFG_MCLRE$ON 0000                   __end_of_Init_IO 00F5  
                   __CFG_LPBOR$ON 0000                             ?_main 0070                        _FlashWrite 00F5  
                           _PORTA 000C                             _TRISA 008C                             _TRISC 008E  
                   __CFG_PWRTE$ON 0000                   ??_KeyOffHandler 0056           __p_system_settings_text 07EE  
                    _Type_absaddr 07C0                             status 0003                             wtemp0 007E  
                 __initialization 07E0                      __end_of_Type 07D0                      __end_of_main 07C0  
                __end_of_Init_ADC 00CB                  __end_of_Init_CLK 00D8                            ??_main 005A  
                _TxStatus_absaddr 07D0    Init_TxStatusFromFlash@txStatus 0070                  __end_of_TxStatus 07E0  
 __size_of_Init_TxStatusFromFlash 0099                         ??_RF_Init 0070                            _ANSELA 018C  
                          _ANSELC 018E        __end_of_Init_TypeFromFlash 0126                            _FVRCON 0117  
                     _FlashUnlock 00B9                            _PMADRH 0192                            _PMADRL 0191  
                          _PMDATH 0194                            _PMDATL 0193                            _PMCON2 0196  
                          _TMR0IE 005D                            _TMR0IF 005A                      __p_Type_text 07C0  
                       ??_Init_IO 0070                    __CFG_STVREN$ON 0000                   _system_settings 07EE  
            noolite_send@countbit 0051             __end_of_FlashEraseRow 00E5                       ?_FlashWrite 0070  
                 noolite_send@chn 0052              noolite_send@startpos 0050           __end_of__initialization 07E6  
   Init_TxStatusFromFlash@cellNum 0078                    __pcstackCOMMON 0070            _Init_TxStatusFromFlash 0274  
     __end_of_SaveTxStatusToFlash 01E9                  ??_KeyLongHandler 007B                    _OPTION_REGbits 0095  
           KeyLongHandler@nooData 0059                        __pbssBANK0 0020                         ?_Init_ADC 0070  
                       ?_Init_CLK 0070           __end_of_system_settings 07FF               __size_of_FlashWrite 0013  
                      __pmaintext 04A7                           _RF_Init 01E9              FlashEraseRow@rowAddr 0070  
                      ??_Init_ADC 0070                        ??_Init_CLK 0070                           _DevMode 0027  
                         _DevType 0028                           _Init_IO 00E5                     ?_noolite_send 0070  
          Init_TypeFromFlash@type 0070                           __ptext1 0192                           __ptext2 00F5  
                         __ptext3 00D8                           __ptext4 00B9                           __ptext5 01E9  
                         __ptext6 0152                           __ptext7 0126                           __ptext8 030D  
                         __ptext9 0108             noolite_send@countsend 0053                           main@chn 005C  
           __end_of_KeyOffHandler 0192                           clrloop0 07E9              end_of_initialization 07E6  
                    ?_FlashUnlock 0070                  noolite_send@data 0072             noolite_send@temp_send 0054  
                  FlashWrite@addr 0070                _Init_TypeFromFlash 0108                    ??_noolite_send 0073  
             ?_Init_TypeFromFlash 0070                      ??_FlashWrite 0074        SaveTxStatusToFlash@cellNum 0046  
                __CFG_FOSC$INTOSC 0000              ??_Init_TypeFromFlash 0072           ?_Init_TxStatusFromFlash 0070  
              __end_of_FlashWrite 0108    SaveTxStatusToFlash@txStatusAdr 0076    SaveTxStatusToFlash@txStatusVal 0078  
             start_initialization 07E0    __end_of_Init_TxStatusFromFlash 030D                 __size_of_Init_ADC 000C  
               __size_of_Init_CLK 000D            __size_of_FlashEraseRow 000D                  __p_TxStatus_text 07D0  
    __size_of_SaveTxStatusToFlash 0057                         ___latbits 0000                     __pcstackBANK0 0044  
                        ?_RF_Init 0070              __end_of_noolite_send 04A7              __size_of_FlashUnlock 0006  
                        ?_Init_IO 0070              KeyOffHandler@nooData 007D                     _noo_send_data 0040  
                   _FlashEraseRow 00D8                  __CFG_WDTE$SWDTEN 0000           __size_of_KeyLongHandler 002C  
                        _LATAbits 010C                          _LATCbits 010E                         clear_ram0 07E8  
                KeyOffHandler@cmd 007C                  KeyOffHandler@chn 007B                  KeyOffHandler@key 0057  
     noolite_send@noo_send_buffer 0044       noolite_send@noo_send_format 0071  SaveTxStatusToFlash@txStatusArray 0074  
                      _ADCON0bits 009D                        _ADCON1bits 009E                    ?_FlashEraseRow 0070  
                       _tx_status 002B                  __size_of_RF_Init 008B                          _Init_ADC 00BF  
                        _Init_CLK 00CB                      _SkipHandling 0026                  _noo_address_type 0024  
                __size_of_Init_IO 0010                noolite_send@endpos 0055                          _TxStatus 07D0  
          __size_of_KeyOffHandler 0040             __size_of_noolite_send 019A                          __ptext10 0274  
                        __ptext11 00E5                          __ptext12 00CB                          __ptext13 00BF  
             _OffDelayTicks_100ms 0025                       _tick3_100ms 0029                     __size_of_main 0319  
     __size_of_Init_TypeFromFlash 001E               _SaveTxStatusToFlash 0192                   ??_FlashEraseRow 0072  
                    _noolite_send 030D                       _OSCSTATbits 009A              ?_SaveTxStatusToFlash 0074  
                      _INTCONbits 000B                 __CFG_BOREN$NSLEEP 0000                     _KeyOffHandler 0152  
                  _KeyLongHandler 0126      KeyLongHandler@ticksToTrigger 0058                        _PMCON1bits 0195  
            FlashWrite@flash_data 0072                 __CFG_CLKOUTEN$OFF 0000                _LedPulseTick_100ms 002A  
                      _OSCCONbits 0099             ??_SaveTxStatusToFlash 0079                 KeyLongHandler@cmd 0057  
               KeyLongHandler@chn 0056                        _OPTION_REG 0095                 KeyLongHandler@key 007B  
                      _WDTCONbits 0097            __end_of_KeyLongHandler 0152                    ?_KeyOffHandler 007B  
                   ??_FlashUnlock 0070           _system_settings_absaddr 07EE  
