

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Sep 05 22:44:32 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16LF1503
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	_system_settings_text,global,class=CODE,delta=2
     5                           	psect	_TxStatus_text,global,class=CODE,delta=2
     6                           	psect	_Type_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16LF1503 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000E                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  008C                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0095                     	;# 
    92  0096                     	;# 
    93  0097                     	;# 
    94  0099                     	;# 
    95  009A                     	;# 
    96  009B                     	;# 
    97  009B                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010E                     	;# 
   104  0111                     	;# 
   105  0112                     	;# 
   106  0113                     	;# 
   107  0114                     	;# 
   108  0115                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  0118                     	;# 
   112  0119                     	;# 
   113  011D                     	;# 
   114  018C                     	;# 
   115  018E                     	;# 
   116  0191                     	;# 
   117  0191                     	;# 
   118  0192                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0194                     	;# 
   122  0195                     	;# 
   123  0196                     	;# 
   124  020C                     	;# 
   125  0211                     	;# 
   126  0211                     	;# 
   127  0212                     	;# 
   128  0212                     	;# 
   129  0213                     	;# 
   130  0213                     	;# 
   131  0214                     	;# 
   132  0214                     	;# 
   133  0215                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0216                     	;# 
   138  0217                     	;# 
   139  0217                     	;# 
   140  0391                     	;# 
   141  0392                     	;# 
   142  0393                     	;# 
   143  0498                     	;# 
   144  0498                     	;# 
   145  0499                     	;# 
   146  049A                     	;# 
   147  049B                     	;# 
   148  049B                     	;# 
   149  049C                     	;# 
   150  049D                     	;# 
   151  049E                     	;# 
   152  049F                     	;# 
   153  0611                     	;# 
   154  0612                     	;# 
   155  0613                     	;# 
   156  0613                     	;# 
   157  0614                     	;# 
   158  0615                     	;# 
   159  0616                     	;# 
   160  0616                     	;# 
   161  0617                     	;# 
   162  0618                     	;# 
   163  0619                     	;# 
   164  0619                     	;# 
   165  061A                     	;# 
   166  061B                     	;# 
   167  061C                     	;# 
   168  061C                     	;# 
   169  0691                     	;# 
   170  0692                     	;# 
   171  0693                     	;# 
   172  0694                     	;# 
   173  0695                     	;# 
   174  0F0F                     	;# 
   175  0F10                     	;# 
   176  0F11                     	;# 
   177  0F12                     	;# 
   178  0F13                     	;# 
   179  0F14                     	;# 
   180  0F15                     	;# 
   181  0F16                     	;# 
   182  0F17                     	;# 
   183  0F18                     	;# 
   184  0F19                     	;# 
   185  0F1A                     	;# 
   186  0F1B                     	;# 
   187  0F1C                     	;# 
   188  0F1D                     	;# 
   189  0F1E                     	;# 
   190  0F1F                     	;# 
   191  0FE3                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE9                     	;# 
   198  0FEA                     	;# 
   199  0FEB                     	;# 
   200  0FED                     	;# 
   201  0FEE                     	;# 
   202  0FEF                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0008                     	;# 
   212  0009                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000E                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008E                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0095                     	;# 
   235  0096                     	;# 
   236  0097                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  010C                     	;# 
   246  010E                     	;# 
   247  0111                     	;# 
   248  0112                     	;# 
   249  0113                     	;# 
   250  0114                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  0118                     	;# 
   255  0119                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  018E                     	;# 
   259  0191                     	;# 
   260  0191                     	;# 
   261  0192                     	;# 
   262  0193                     	;# 
   263  0193                     	;# 
   264  0194                     	;# 
   265  0195                     	;# 
   266  0196                     	;# 
   267  020C                     	;# 
   268  0211                     	;# 
   269  0211                     	;# 
   270  0212                     	;# 
   271  0212                     	;# 
   272  0213                     	;# 
   273  0213                     	;# 
   274  0214                     	;# 
   275  0214                     	;# 
   276  0215                     	;# 
   277  0215                     	;# 
   278  0215                     	;# 
   279  0216                     	;# 
   280  0216                     	;# 
   281  0217                     	;# 
   282  0217                     	;# 
   283  0391                     	;# 
   284  0392                     	;# 
   285  0393                     	;# 
   286  0498                     	;# 
   287  0498                     	;# 
   288  0499                     	;# 
   289  049A                     	;# 
   290  049B                     	;# 
   291  049B                     	;# 
   292  049C                     	;# 
   293  049D                     	;# 
   294  049E                     	;# 
   295  049F                     	;# 
   296  0611                     	;# 
   297  0612                     	;# 
   298  0613                     	;# 
   299  0613                     	;# 
   300  0614                     	;# 
   301  0615                     	;# 
   302  0616                     	;# 
   303  0616                     	;# 
   304  0617                     	;# 
   305  0618                     	;# 
   306  0619                     	;# 
   307  0619                     	;# 
   308  061A                     	;# 
   309  061B                     	;# 
   310  061C                     	;# 
   311  061C                     	;# 
   312  0691                     	;# 
   313  0692                     	;# 
   314  0693                     	;# 
   315  0694                     	;# 
   316  0695                     	;# 
   317  0F0F                     	;# 
   318  0F10                     	;# 
   319  0F11                     	;# 
   320  0F12                     	;# 
   321  0F13                     	;# 
   322  0F14                     	;# 
   323  0F15                     	;# 
   324  0F16                     	;# 
   325  0F17                     	;# 
   326  0F18                     	;# 
   327  0F19                     	;# 
   328  0F1A                     	;# 
   329  0F1B                     	;# 
   330  0F1C                     	;# 
   331  0F1D                     	;# 
   332  0F1E                     	;# 
   333  0F1F                     	;# 
   334  0FE3                     	;# 
   335  0FE4                     	;# 
   336  0FE5                     	;# 
   337  0FE6                     	;# 
   338  0FE7                     	;# 
   339  0FE8                     	;# 
   340  0FE9                     	;# 
   341  0FEA                     	;# 
   342  0FEB                     	;# 
   343  0FED                     	;# 
   344  0FEE                     	;# 
   345  0FEF                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000E                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  008C                     	;# 
   373  008E                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0095                     	;# 
   378  0096                     	;# 
   379  0097                     	;# 
   380  0099                     	;# 
   381  009A                     	;# 
   382  009B                     	;# 
   383  009B                     	;# 
   384  009C                     	;# 
   385  009D                     	;# 
   386  009E                     	;# 
   387  009F                     	;# 
   388  010C                     	;# 
   389  010E                     	;# 
   390  0111                     	;# 
   391  0112                     	;# 
   392  0113                     	;# 
   393  0114                     	;# 
   394  0115                     	;# 
   395  0116                     	;# 
   396  0117                     	;# 
   397  0118                     	;# 
   398  0119                     	;# 
   399  011D                     	;# 
   400  018C                     	;# 
   401  018E                     	;# 
   402  0191                     	;# 
   403  0191                     	;# 
   404  0192                     	;# 
   405  0193                     	;# 
   406  0193                     	;# 
   407  0194                     	;# 
   408  0195                     	;# 
   409  0196                     	;# 
   410  020C                     	;# 
   411  0211                     	;# 
   412  0211                     	;# 
   413  0212                     	;# 
   414  0212                     	;# 
   415  0213                     	;# 
   416  0213                     	;# 
   417  0214                     	;# 
   418  0214                     	;# 
   419  0215                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0216                     	;# 
   423  0216                     	;# 
   424  0217                     	;# 
   425  0217                     	;# 
   426  0391                     	;# 
   427  0392                     	;# 
   428  0393                     	;# 
   429  0498                     	;# 
   430  0498                     	;# 
   431  0499                     	;# 
   432  049A                     	;# 
   433  049B                     	;# 
   434  049B                     	;# 
   435  049C                     	;# 
   436  049D                     	;# 
   437  049E                     	;# 
   438  049F                     	;# 
   439  0611                     	;# 
   440  0612                     	;# 
   441  0613                     	;# 
   442  0613                     	;# 
   443  0614                     	;# 
   444  0615                     	;# 
   445  0616                     	;# 
   446  0616                     	;# 
   447  0617                     	;# 
   448  0618                     	;# 
   449  0619                     	;# 
   450  0619                     	;# 
   451  061A                     	;# 
   452  061B                     	;# 
   453  061C                     	;# 
   454  061C                     	;# 
   455  0691                     	;# 
   456  0692                     	;# 
   457  0693                     	;# 
   458  0694                     	;# 
   459  0695                     	;# 
   460  0F0F                     	;# 
   461  0F10                     	;# 
   462  0F11                     	;# 
   463  0F12                     	;# 
   464  0F13                     	;# 
   465  0F14                     	;# 
   466  0F15                     	;# 
   467  0F16                     	;# 
   468  0F17                     	;# 
   469  0F18                     	;# 
   470  0F19                     	;# 
   471  0F1A                     	;# 
   472  0F1B                     	;# 
   473  0F1C                     	;# 
   474  0F1D                     	;# 
   475  0F1E                     	;# 
   476  0F1F                     	;# 
   477  0FE3                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  07EE                     _system_settings_absaddr	set	2030
   490  07D0                     _TxStatus_absaddr	set	2000
   491  07C0                     _Type_absaddr	set	1984
   492  07EE                     _system_settings_absaddr	set	2030
   493                           
   494                           	psect	_system_settings_text
   495  07EE                     __p_system_settings_text:	
   496  07EE                     _system_settings:	
   497  07EE  3443               	retlw	67
   498  07EF  3404               	retlw	4
   499  07F0  345F               	retlw	95
   500  07F1  3441               	retlw	65
   501  07F2  341F               	retlw	31
   502  07F3  34FB               	retlw	251
   503  07F4  345F               	retlw	95
   504  07F5  3441               	retlw	65
   505  07F6  3478               	retlw	120
   506  07F7  3456               	retlw	86
   507  07F8  3434               	retlw	52
   508  07F9  3412               	retlw	18
   509  07FA  345F               	retlw	95
   510  07FB  3442               	retlw	66
   511  07FC  3410               	retlw	16
   512  07FD  3400               	retlw	0
   513  07FE  345F               	retlw	95
   514  07FF                     __end_of_system_settings:	
   515  07D0                     _TxStatus_absaddr	set	2000
   516                           
   517                           	psect	_TxStatus_text
   518  07D0                     __p_TxStatus_text:	
   519  07D0                     _TxStatus:	
   520  07D0  34FF               	retlw	255
   521  07D1  34FF               	retlw	255
   522  07D2  34FF               	retlw	255
   523  07D3  34FF               	retlw	255
   524  07D4  34FF               	retlw	255
   525  07D5  34FF               	retlw	255
   526  07D6  34FF               	retlw	255
   527  07D7  34FF               	retlw	255
   528  07D8  34FF               	retlw	255
   529  07D9  34FF               	retlw	255
   530  07DA  34FF               	retlw	255
   531  07DB  34FF               	retlw	255
   532  07DC  34FF               	retlw	255
   533  07DD  34FF               	retlw	255
   534  07DE  34FF               	retlw	255
   535  07DF  34FF               	retlw	255
   536  07E0                     __end_of_TxStatus:	
   537  07C0                     _Type_absaddr	set	1984
   538                           
   539                           	psect	_Type_text
   540  07C0                     __p_Type_text:	
   541  07C0                     _Type:	
   542  07C0  34FF               	retlw	255
   543  07C1  34FF               	retlw	255
   544  07C2  34FF               	retlw	255
   545  07C3  34FF               	retlw	255
   546  07C4  34FF               	retlw	255
   547  07C5  34FF               	retlw	255
   548  07C6  34FF               	retlw	255
   549  07C7  34FF               	retlw	255
   550  07C8  34FF               	retlw	255
   551  07C9  34FF               	retlw	255
   552  07CA  34FF               	retlw	255
   553  07CB  34FF               	retlw	255
   554  07CC  34FF               	retlw	255
   555  07CD  34FF               	retlw	255
   556  07CE  34FF               	retlw	255
   557  07CF  34FF               	retlw	255
   558  07D0                     __end_of_Type:	
   559  0015                     _TMR0	set	21
   560  000C                     _PORTA	set	12
   561  000B                     _INTCONbits	set	11
   562  005D                     _TMR0IE	set	93
   563  005A                     _TMR0IF	set	90
   564  0095                     _OPTION_REG	set	149
   565  008E                     _TRISC	set	142
   566  008C                     _TRISA	set	140
   567  0095                     _OPTION_REGbits	set	149
   568  009A                     _OSCSTATbits	set	154
   569  0097                     _WDTCONbits	set	151
   570  0099                     _OSCCONbits	set	153
   571  010C                     _LATA	set	268
   572  010C                     _LATAbits	set	268
   573  010E                     _LATCbits	set	270
   574  010E                     _LATC	set	270
   575  0196                     _PMCON2	set	406
   576  0193                     _PMDATL	set	403
   577  0194                     _PMDATH	set	404
   578  0191                     _PMADRL	set	401
   579  0192                     _PMADRH	set	402
   580  0195                     _PMCON1bits	set	405
   581  018E                     _ANSELC	set	398
   582  018C                     _ANSELA	set	396
   583  020C                     _WPUA	set	524
   584                           
   585                           ; #config settings
   586  0007                     
   587                           	psect	cinit
   588  07E0                     start_initialization:	
   589  07E0                     __initialization:	
   590                           
   591                           ; Clear objects allocated to BANK0
   592  07E0  3020               	movlw	low __pbssBANK0
   593  07E1  0084               	movwf	4
   594  07E2  3000               	movlw	high __pbssBANK0
   595  07E3  0085               	movwf	5
   596  07E4  3023               	movlw	35
   597  07E5  27E8               	fcall	clear_ram0
   598  07E6                     end_of_initialization:	
   599                           ;End of C runtime variable initialization code
   600                           
   601  07E6                     __end_of__initialization:	
   602  07E6  0020               	movlb	0
   603  07E7  2CC5               	ljmp	_main	;jump to C main() function
   604                           
   605                           	psect	bssBANK0
   606  0020                     __pbssBANK0:	
   607  0020                     _startaddress:	
   608  0020                     	ds	4
   609  0024                     _noo_address_type:	
   610  0024                     	ds	1
   611  0025                     _SkipHandling:	
   612  0025                     	ds	1
   613  0026                     _DevMode:	
   614  0026                     	ds	1
   615  0027                     _DevType:	
   616  0027                     	ds	1
   617  0028                     _tick3_100ms:	
   618  0028                     	ds	1
   619  0029                     _LedPulseTick_100ms:	
   620  0029                     	ds	1
   621  002A                     _tx_status:	
   622  002A                     	ds	1
   623  002B                     _Keys:	
   624  002B                     	ds	20
   625  003F                     _noo_send_data:	
   626  003F                     	ds	4
   627                           
   628                           	psect	clrtext
   629  07E8                     clear_ram0:	
   630                           ;	Called with FSR0 containing the base address, and
   631                           ;	WREG with the size to clear
   632                           
   633  07E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   634  07E9                     clrloop0:	
   635  07E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   636  07EA  3101               	addfsr 0,1
   637  07EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   638  07EC  2FE9               	goto	clrloop0	;have we reached the end yet?
   639  07ED  3400               	retlw	0	;all done for this memory range, return
   640                           
   641                           	psect	cstackCOMMON
   642  0070                     __pcstackCOMMON:	
   643  0070                     ?_noolite_send:	
   644  0070                     ?_RF_Init:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ??_RF_Init:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_FlashEraseRow:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_FlashWrite:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_Init_CLK:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ??_Init_CLK:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_Init_IO:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ??_Init_IO:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_Init_TypeFromFlash:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ??_Init_TypeFromFlash:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_Init_TxStatusFromFlash:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ??_Init_TxStatusFromFlash:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_main:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_FlashUnlock:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ??_FlashUnlock:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     noolite_send@noo_send_command:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     FlashEraseRow@rowAddr:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     FlashWrite@addr:	
   696                           ; 2 bytes @ 0x0
   697                           
   698                           
   699                           ; 2 bytes @ 0x0
   700  0070                     	ds	1
   701  0071                     noolite_send@noo_send_format:	
   702                           
   703                           ; 1 bytes @ 0x1
   704  0071                     	ds	1
   705  0072                     ??_FlashEraseRow:	
   706  0072                     noolite_send@data:	
   707                           ; 1 bytes @ 0x2
   708                           
   709  0072                     FlashWrite@flash_data:	
   710                           ; 1 bytes @ 0x2
   711                           
   712                           
   713                           ; 2 bytes @ 0x2
   714  0072                     	ds	1
   715  0073                     ??_noolite_send:	
   716                           
   717                           ; 1 bytes @ 0x3
   718  0073                     	ds	1
   719  0074                     ??_FlashWrite:	
   720  0074                     Init_TxStatusFromFlash@cellNum:	
   721                           ; 1 bytes @ 0x4
   722                           
   723                           
   724                           ; 1 bytes @ 0x4
   725  0074                     	ds	7
   726  007B                     ?_KeyOffHandler:	
   727  007B                     ?_KeyLongHandler:	
   728                           ; 1 bytes @ 0xB
   729                           
   730  007B                     KeyOffHandler@chn:	
   731                           ; 1 bytes @ 0xB
   732                           
   733  007B                     KeyLongHandler@chn:	
   734                           ; 1 bytes @ 0xB
   735                           
   736                           
   737                           ; 1 bytes @ 0xB
   738  007B                     	ds	1
   739  007C                     KeyOffHandler@cmd:	
   740  007C                     KeyLongHandler@cmd:	
   741                           ; 1 bytes @ 0xC
   742                           
   743                           
   744                           ; 1 bytes @ 0xC
   745  007C                     	ds	1
   746  007D                     ??_KeyOffHandler:	
   747  007D                     KeyLongHandler@ticksToTrigger:	
   748                           ; 1 bytes @ 0xD
   749                           
   750                           
   751                           ; 1 bytes @ 0xD
   752  007D                     	ds	1
   753  007E                     ??_KeyLongHandler:	
   754                           
   755                           	psect	cstackBANK0
   756  0043                     __pcstackBANK0:	
   757                           ; 1 bytes @ 0xE
   758                           
   759  0043                     noolite_send@noo_send_buffer:	
   760                           
   761                           ; 12 bytes @ 0x0
   762  0043                     	ds	12
   763  004F                     noolite_send@startpos:	
   764                           
   765                           ; 1 bytes @ 0xC
   766  004F                     	ds	1
   767  0050                     noolite_send@countbit:	
   768                           
   769                           ; 1 bytes @ 0xD
   770  0050                     	ds	1
   771  0051                     noolite_send@chn:	
   772                           
   773                           ; 1 bytes @ 0xE
   774  0051                     	ds	1
   775  0052                     noolite_send@countsend:	
   776                           
   777                           ; 1 bytes @ 0xF
   778  0052                     	ds	1
   779  0053                     noolite_send@temp_send:	
   780                           
   781                           ; 1 bytes @ 0x10
   782  0053                     	ds	1
   783  0054                     noolite_send@endpos:	
   784                           
   785                           ; 1 bytes @ 0x11
   786  0054                     	ds	1
   787  0055                     KeyOffHandler@key:	
   788  0055                     KeyLongHandler@key:	
   789                           ; 1 bytes @ 0x12
   790                           
   791                           
   792                           ; 1 bytes @ 0x12
   793  0055                     	ds	1
   794  0056                     ??_main:	
   795                           
   796                           ; 1 bytes @ 0x13
   797  0056                     	ds	4
   798  005A                     main@adrToWrite:	
   799                           
   800                           ; 2 bytes @ 0x17
   801  005A                     	ds	2
   802  005C                     main@cellNum:	
   803                           
   804                           ; 1 bytes @ 0x19
   805  005C                     	ds	1
   806  005D                     main@chn:	
   807                           
   808                           ; 1 bytes @ 0x1A
   809  005D                     	ds	1
   810  005E                     main@chn_301:	
   811                           
   812                           ; 1 bytes @ 0x1B
   813  005E                     	ds	1
   814  005F                     main@chn_302:	
   815                           
   816                           ; 1 bytes @ 0x1C
   817  005F                     	ds	1
   818  0060                     main@chn_303:	
   819                           
   820                           ; 1 bytes @ 0x1D
   821  0060                     	ds	1
   822                           
   823                           	psect	maintext
   824  04C5                     __pmaintext:	
   825 ;;
   826 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   827 ;;
   828 ;; *************** function _main *****************
   829 ;; Defined at:
   830 ;;		line 234 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  adrToWrite      2   23[BANK0 ] unsigned int 
   835 ;;  chn             1   29[BANK0 ] unsigned char 
   836 ;;  chn             1   28[BANK0 ] unsigned char 
   837 ;;  chn             1   27[BANK0 ] unsigned char 
   838 ;;  chn             1   26[BANK0 ] unsigned char 
   839 ;;  cellNum         1   25[BANK0 ] unsigned char 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : B1F/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1
   849 ;;      Params:         0       0       0
   850 ;;      Locals:         0       7       0
   851 ;;      Temps:          0       4       0
   852 ;;      Totals:         0      11       0
   853 ;;Total ram usage:       11 bytes
   854 ;; Hardware stack levels required when called:    2
   855 ;; This function calls:
   856 ;;		_FlashEraseRow
   857 ;;		_FlashWrite
   858 ;;		_Init_CLK
   859 ;;		_Init_IO
   860 ;;		_Init_TxStatusFromFlash
   861 ;;		_Init_TypeFromFlash
   862 ;;		_KeyLongHandler
   863 ;;		_KeyOffHandler
   864 ;;		_RF_Init
   865 ;;		_noolite_send
   866 ;; This function is called by:
   867 ;;		Startup code after reset
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           
   872                           ;psect for function _main
   873  04C5                     _main:	
   874                           
   875                           ;main.c: 235: Init_IO();
   876                           
   877                           ;incstack = 0
   878                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   879  04C5  2175               	fcall	_Init_IO
   880                           
   881                           ;main.c: 236: Init_CLK();
   882  04C6  2168               	fcall	_Init_CLK
   883                           
   884                           ;main.c: 237: RF_Init();
   885  04C7  22A0               	fcall	_RF_Init
   886                           
   887                           ;main.c: 239: LATCbits.LATC5 = 1;
   888  04C8  0022               	movlb	2	; select bank2
   889  04C9  168E               	bsf	14,5	;volatile
   890                           
   891                           ;main.c: 240: DevType = Init_TypeFromFlash();
   892  04CA  2198               	fcall	_Init_TypeFromFlash
   893  04CB  0020               	movlb	0	; select bank0
   894  04CC  00A7               	movwf	_DevType
   895                           
   896                           ;main.c: 241: tx_status = Init_TxStatusFromFlash();
   897  04CD  2219               	fcall	_Init_TxStatusFromFlash
   898  04CE  00AA               	movwf	_tx_status
   899                           
   900                           ;main.c: 243: INTCONbits.PEIE = 1;
   901  04CF  170B               	bsf	11,6	;volatile
   902                           
   903                           ;main.c: 244: INTCONbits.GIE = 1;
   904  04D0  178B               	bsf	11,7	;volatile
   905  04D1                     l1703:	
   906                           
   907                           ;main.c: 247: Keys[0].State = (uint8_t) (PORTA & A_Pressed);
   908  04D1  0020               	movlb	0	; select bank0
   909  04D2  080C               	movf	12,w	;volatile
   910  04D3  00AB               	movwf	_Keys
   911  04D4  3002               	movlw	2
   912  04D5  05AB               	andwf	_Keys,f
   913                           
   914                           ;main.c: 248: Keys[1].State = (uint8_t) (PORTA & B_Pressed);
   915  04D6  080C               	movf	12,w	;volatile
   916  04D7  00AF               	movwf	_Keys+4
   917  04D8  3001               	movlw	1
   918  04D9  05AF               	andwf	_Keys+4,f
   919                           
   920                           ;main.c: 249: Keys[2].State = (uint8_t) (PORTA & C_Pressed);
   921  04DA  080C               	movf	12,w	;volatile
   922  04DB  00B3               	movwf	_Keys+8
   923  04DC  3004               	movlw	4
   924  04DD  05B3               	andwf	_Keys+8,f
   925                           
   926                           ;main.c: 250: Keys[3].State = (uint8_t) (PORTA & D_Pressed);
   927  04DE  080C               	movf	12,w	;volatile
   928  04DF  00B7               	movwf	_Keys+12
   929  04E0  3010               	movlw	16
   930  04E1  05B7               	andwf	_Keys+12,f
   931                           
   932                           ;main.c: 251: Keys[4].State = (uint8_t) (PORTA & (C_Pressed | D_Pressed));
   933  04E2  080C               	movf	12,w	;volatile
   934  04E3  00BB               	movwf	_Keys+16
   935  04E4  3014               	movlw	20
   936  04E5  05BB               	andwf	_Keys+16,f
   937                           
   938                           ;main.c: 252: if (Keys[4].State == (C_Pressed | D_Pressed)) {
   939  04E6  063B               	xorwf	_Keys+16,w
   940  04E7  1D03               	btfss	3,2
   941  04E8  2D20               	goto	l1767
   942                           
   943                           ;main.c: 253: SkipHandling = 10;
   944  04E9  300A               	movlw	10
   945  04EA  00A5               	movwf	_SkipHandling
   946                           
   947                           ;main.c: 254: if (Keys[4].Tick100ms < 15) {
   948  04EB  300F               	movlw	15
   949  04EC  023D               	subwf	_Keys+18,w
   950  04ED  1803               	skipnc
   951  04EE  2CF3               	goto	l1733
   952                           
   953                           ;main.c: 255: DevMode &= ~(UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
   954  04EF  30F9               	movlw	249
   955  04F0  05A6               	andwf	_DevMode,f
   956                           
   957                           ;main.c: 256: DevMode |= BIND_ACTIVE;
   958  04F1  1426               	bsf	_DevMode,0
   959                           
   960                           ;main.c: 258: } else if ((Keys[4].Tick100ms >= 35) && (Keys[4].Tick100ms < 49)) {
   961  04F2  2D1A               	goto	l1731
   962  04F3                     l1733:	
   963  04F3  3023               	movlw	35
   964  04F4  023D               	subwf	_Keys+18,w
   965  04F5  1C03               	skipc
   966  04F6  2CFD               	goto	l1739
   967  04F7  3031               	movlw	49
   968  04F8  023D               	subwf	_Keys+18,w
   969  04F9  1803               	skipnc
   970  04FA  2CFD               	goto	l1739
   971                           
   972                           ;main.c: 259: DevMode &= ~BIND_ACTIVE;
   973  04FB  1026               	bcf	_DevMode,0
   974                           
   975                           ;main.c: 260: } else if ((Keys[4].Tick100ms >= 50) && (Keys[4].Tick100ms < 85)) {
   976  04FC  2D1C               	goto	l109
   977  04FD                     l1739:	
   978  04FD  3032               	movlw	50
   979  04FE  023D               	subwf	_Keys+18,w
   980  04FF  3055               	movlw	85
   981  0500  1C03               	skipc
   982  0501  2D0A               	goto	L1
   983  0502  023D               	subwf	_Keys+18,w
   984  0503  1803               	skipnc
   985  0504  2D09               	goto	l1749
   986                           
   987                           ;main.c: 261: DevMode &= ~(BIND_ACTIVE | MODE_CHANGE_ACTIVE);
   988  0505  30FA               	movlw	250
   989  0506  05A6               	andwf	_DevMode,f
   990                           
   991                           ;main.c: 262: DevMode |= UNBIND_ACTIVE;
   992  0507  14A6               	bsf	_DevMode,1
   993  0508  2D1A               	goto	l1731
   994  0509                     l1749:	
   995  0509  3055               	movlw	85
   996  050A                     L1:	
   997  050A  023D               	subwf	_Keys+18,w
   998  050B  1C03               	skipc
   999  050C  2D13               	goto	l1755
  1000  050D  3063               	movlw	99
  1001  050E  023D               	subwf	_Keys+18,w
  1002  050F  1803               	skipnc
  1003  0510  2D13               	goto	l1755
  1004                           
  1005                           ;main.c: 265: DevMode &= ~UNBIND_ACTIVE;
  1006  0511  10A6               	bcf	_DevMode,1
  1007                           
  1008                           ;main.c: 266: } else if (Keys[4].Tick100ms >= 100) {
  1009  0512  2D1C               	goto	l109
  1010  0513                     l1755:	
  1011  0513  3064               	movlw	100
  1012  0514  023D               	subwf	_Keys+18,w
  1013  0515  1C03               	skipc
  1014  0516  2D1C               	goto	l109
  1015                           
  1016                           ;main.c: 267: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE);
  1017  0517  30FC               	movlw	252
  1018  0518  05A6               	andwf	_DevMode,f
  1019                           
  1020                           ;main.c: 268: DevMode |= MODE_CHANGE_ACTIVE;
  1021  0519  1526               	bsf	_DevMode,2
  1022  051A                     l1731:	
  1023                           
  1024                           ;main.c: 257: tick3_100ms = 100;
  1025  051A  3064               	movlw	100
  1026  051B  00A8               	movwf	_tick3_100ms
  1027  051C                     l109:	
  1028                           
  1029                           ;main.c: 270: }
  1030                           ;main.c: 271: Keys[4].Tick100ms++;
  1031  051C  0ABD               	incf	_Keys+18,f
  1032                           
  1033                           ;main.c: 273: Keys[2].StateTemp = 0;
  1034  051D  01B4               	clrf	_Keys+9
  1035                           
  1036                           ;main.c: 274: Keys[3].StateTemp = 0;
  1037  051E  01B8               	clrf	_Keys+13
  1038                           
  1039                           ;main.c: 275: } else {
  1040  051F  2D21               	goto	l1769
  1041  0520                     l1767:	
  1042                           
  1043                           ;main.c: 276: Keys[4].Tick100ms = 0;
  1044  0520  01BD               	clrf	_Keys+18
  1045  0521                     l1769:	
  1046                           
  1047                           ;main.c: 277: }
  1048                           ;main.c: 279: if (tick3_100ms != 0) {
  1049  0521  0828               	movf	_tick3_100ms,w
  1050  0522  1903               	btfsc	3,2
  1051  0523  2D50               	goto	l1789
  1052                           
  1053                           ;main.c: 280: tick3_100ms--;
  1054  0524  03A8               	decf	_tick3_100ms,f
  1055                           
  1056                           ;main.c: 281: switch (DevMode & 0x07) {
  1057  0525  2D3C               	goto	l1787
  1058  0526                     l120:	
  1059                           ;main.c: 282: case BIND_ACTIVE:
  1060                           
  1061                           
  1062                           ;main.c: 283: LATCbits.LATC3 = ON;
  1063  0526  0022               	movlb	2	; select bank2
  1064  0527  158E               	bsf	14,3	;volatile
  1065                           
  1066                           ;main.c: 284: break;
  1067  0528  2D54               	goto	l127
  1068  0529                     l1773:	
  1069                           
  1070                           ;main.c: 286: if (LedPulseTick_100ms++ > 2) {
  1071  0529  0829               	movf	_LedPulseTick_100ms,w
  1072  052A  0AA9               	incf	_LedPulseTick_100ms,f
  1073  052B  00D6               	movwf	??_main
  1074  052C  3003               	movlw	3
  1075  052D  0256               	subwf	??_main,w
  1076  052E  1C03               	skipc
  1077  052F  2D54               	goto	l127
  1078  0530                     l1775:	
  1079                           
  1080                           ;main.c: 287: LATCbits.LATC3 = ~LATCbits.LATC3;
  1081  0530  3008               	movlw	8
  1082  0531  0022               	movlb	2	; select bank2
  1083  0532  068E               	xorwf	14,f	;volatile
  1084                           
  1085                           ;main.c: 288: LedPulseTick_100ms = 0;
  1086  0533  0020               	movlb	0	; select bank0
  1087  0534  01A9               	clrf	_LedPulseTick_100ms
  1088  0535  2D54               	goto	l127
  1089  0536                     l1779:	
  1090                           
  1091                           ;main.c: 292: if (LedPulseTick_100ms++ > 0) {
  1092  0536  0AA9               	incf	_LedPulseTick_100ms,f
  1093  0537  0329               	decf	_LedPulseTick_100ms,w
  1094  0538  1903               	btfsc	3,2
  1095  0539  2D54               	goto	l127
  1096  053A  2D30               	goto	l1775
  1097  053B                     l126:	
  1098                           ;main.c: 297: default:
  1099                           
  1100                           ;main.c: 293: LATCbits.LATC3 = ~LATCbits.LATC3;
  1101                           
  1102  053B  2D52               	goto	l1791
  1103  053C                     l1787:	
  1104                           ;main.c: 299: break;
  1105                           
  1106                           ;main.c: 298: LATCbits.LATC3 = OFF;
  1107                           
  1108  053C  0826               	movf	_DevMode,w
  1109  053D  3907               	andlw	7
  1110  053E  00D6               	movwf	??_main
  1111  053F  01D7               	clrf	??_main+1
  1112                           
  1113                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1114                           ; Switch size 1, requested type "space"
  1115                           ; Number of cases is 1, Range of values is 0 to 0
  1116                           ; switch strategies available:
  1117                           ; Name         Instructions Cycles
  1118                           ; simple_byte            4     3 (average)
  1119                           ; direct_byte            8     6 (fixed)
  1120                           ; jumptable            260     6 (fixed)
  1121                           ;	Chosen strategy is simple_byte
  1122  0540  0857               	movf	??_main+1,w
  1123  0541  3A00               	xorlw	0	; case 0
  1124  0542  1903               	skipnz
  1125  0543  2D45               	goto	l2041
  1126  0544  2D3B               	goto	l126
  1127  0545                     l2041:	
  1128                           
  1129                           ; Switch size 1, requested type "space"
  1130                           ; Number of cases is 3, Range of values is 1 to 4
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte           10     6 (average)
  1134                           ; direct_byte           17     9 (fixed)
  1135                           ; jumptable            263     9 (fixed)
  1136                           ;	Chosen strategy is simple_byte
  1137  0545  0856               	movf	??_main,w
  1138  0546  3A01               	xorlw	1	; case 1
  1139  0547  1903               	skipnz
  1140  0548  2D26               	goto	l120
  1141  0549  3A03               	xorlw	3	; case 2
  1142  054A  1903               	skipnz
  1143  054B  2D29               	goto	l1773
  1144  054C  3A06               	xorlw	6	; case 4
  1145  054D  1903               	skipnz
  1146  054E  2D36               	goto	l1779
  1147  054F  2D3B               	goto	l126
  1148  0550                     l1789:	
  1149                           
  1150                           ;main.c: 302: DevMode &= ~(BIND_ACTIVE | UNBIND_ACTIVE | MODE_CHANGE_ACTIVE);
  1151  0550  30F8               	movlw	248
  1152  0551  05A6               	andwf	_DevMode,f
  1153  0552                     l1791:	
  1154                           
  1155                           ;main.c: 303: LATCbits.LATC3 = OFF;
  1156  0552  0022               	movlb	2	; select bank2
  1157  0553  118E               	bcf	14,3	;volatile
  1158  0554                     l127:	
  1159                           
  1160                           ;main.c: 304: }
  1161                           ;main.c: 306: if (SkipHandling != 0) {
  1162  0554  0020               	movlb	0	; select bank0
  1163  0555  0825               	movf	_SkipHandling,w
  1164  0556  1903               	btfsc	3,2
  1165  0557  2D5D               	goto	l128
  1166                           
  1167                           ;main.c: 307: if (Keys[4].State == 0) {
  1168  0558  083B               	movf	_Keys+16,w
  1169  0559  1D03               	btfss	3,2
  1170  055A  2F3B               	goto	l1947
  1171                           
  1172                           ;main.c: 308: SkipHandling--;
  1173  055B  03A5               	decf	_SkipHandling,f
  1174  055C  2F3B               	goto	l1947
  1175  055D                     l128:	
  1176                           
  1177                           ;main.c: 311: if ((DevMode & BIND_ACTIVE) != 0) {
  1178  055D  1C26               	btfss	_DevMode,0
  1179  055E  2D95               	goto	l131
  1180                           
  1181                           ;main.c: 312: for (uint8_t chn = 0; chn < 4; chn++) {
  1182  055F  01DD               	clrf	main@chn
  1183  0560                     l1803:	
  1184                           
  1185                           ;main.c: 313: if (Keys[chn].State != Keys[chn].StateTemp) {
  1186  0560  085D               	movf	main@chn,w
  1187  0561  0709               	addwf	9,w
  1188  0562  0709               	addwf	9,w
  1189  0563  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1190  0564  0086               	movwf	6
  1191  0565  0187               	clrf	7
  1192  0566  085D               	movf	main@chn,w
  1193  0567  0709               	addwf	9,w
  1194  0568  0709               	addwf	9,w
  1195  0569  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1196  056A  0084               	movwf	4
  1197  056B  0185               	clrf	5
  1198  056C  0800               	movf	0,w
  1199  056D  0601               	xorwf	1,w
  1200  056E  1903               	skipnz
  1201  056F  2D8F               	goto	l1813
  1202                           
  1203                           ;main.c: 314: if (Keys[chn].State == 0) {
  1204  0570  085D               	movf	main@chn,w
  1205  0571  0709               	addwf	9,w
  1206  0572  0709               	addwf	9,w
  1207  0573  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1208  0574  0086               	movwf	6
  1209  0575  0801               	movf	1,w
  1210  0576  1D03               	btfss	3,2
  1211  0577  2D81               	goto	l1811
  1212                           
  1213                           ;main.c: 315: noolite_send(chn, 15, 0, &noo_send_data[0]);
  1214  0578  300F               	movlw	15
  1215  0579  00F0               	movwf	noolite_send@noo_send_command
  1216  057A  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1217  057B  01F1               	clrf	noolite_send@noo_send_format
  1218  057C  00F2               	movwf	noolite_send@data
  1219  057D  085D               	movf	main@chn,w
  1220  057E  232B               	fcall	_noolite_send
  1221                           
  1222                           ;main.c: 316: DevMode &= ~BIND_ACTIVE;
  1223  057F  0020               	movlb	0	; select bank0
  1224  0580  1026               	bcf	_DevMode,0
  1225  0581                     l1811:	
  1226                           
  1227                           ;main.c: 317: }
  1228                           ;main.c: 318: Keys[chn].StateTemp = Keys[chn].State;
  1229  0581  085D               	movf	main@chn,w
  1230  0582  0709               	addwf	9,w
  1231  0583  0709               	addwf	9,w
  1232  0584  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1233  0585  0086               	movwf	6
  1234  0586  0187               	clrf	7
  1235  0587  085D               	movf	main@chn,w
  1236  0588  0709               	addwf	9,w
  1237  0589  0709               	addwf	9,w
  1238  058A  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1239  058B  0084               	movwf	4
  1240  058C  0185               	clrf	5
  1241  058D  0800               	movf	0,w
  1242  058E  0081               	movwf	1
  1243  058F                     l1813:	
  1244  058F  3004               	movlw	4
  1245  0590  0ADD               	incf	main@chn,f
  1246  0591  025D               	subwf	main@chn,w
  1247  0592  1803               	btfsc	3,0
  1248  0593  2F3B               	goto	l1947
  1249  0594  2D60               	goto	l1803
  1250  0595                     l131:	
  1251  0595  1CA6               	btfss	_DevMode,1
  1252  0596  2DD0               	goto	l137
  1253                           
  1254                           ;main.c: 322: for (uint8_t chn = 0; chn < 4; chn++) {
  1255  0597  01DE               	clrf	main@chn_301
  1256  0598                     l1819:	
  1257  0598  3004               	movlw	4
  1258  0599  025E               	subwf	main@chn_301,w
  1259  059A  1803               	btfsc	3,0
  1260  059B  2F3B               	goto	l1947
  1261                           
  1262                           ;main.c: 323: if (Keys[chn].State != Keys[chn].StateTemp) {
  1263  059C  085E               	movf	main@chn_301,w
  1264  059D  0709               	addwf	9,w
  1265  059E  0709               	addwf	9,w
  1266  059F  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1267  05A0  0086               	movwf	6
  1268  05A1  0187               	clrf	7
  1269  05A2  085E               	movf	main@chn_301,w
  1270  05A3  0709               	addwf	9,w
  1271  05A4  0709               	addwf	9,w
  1272  05A5  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1273  05A6  0084               	movwf	4
  1274  05A7  0185               	clrf	5
  1275  05A8  0800               	movf	0,w
  1276  05A9  0601               	xorwf	1,w
  1277  05AA  1903               	skipnz
  1278  05AB  2DCE               	goto	l1835
  1279                           
  1280                           ;main.c: 324: if (Keys[chn].State == 0) {
  1281  05AC  085E               	movf	main@chn_301,w
  1282  05AD  0709               	addwf	9,w
  1283  05AE  0709               	addwf	9,w
  1284  05AF  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1285  05B0  0086               	movwf	6
  1286  05B1  0801               	movf	1,w
  1287  05B2  1D03               	btfss	3,2
  1288  05B3  2DBF               	goto	l1833
  1289                           
  1290                           ;main.c: 325: noolite_send(chn, 9, 0, &noo_send_data[0]);
  1291  05B4  3009               	movlw	9
  1292  05B5  00F0               	movwf	noolite_send@noo_send_command
  1293  05B6  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1294  05B7  01F1               	clrf	noolite_send@noo_send_format
  1295  05B8  00F2               	movwf	noolite_send@data
  1296  05B9  085E               	movf	main@chn_301,w
  1297  05BA  232B               	fcall	_noolite_send
  1298                           
  1299                           ;main.c: 326: DevMode &= ~UNBIND_ACTIVE;
  1300  05BB  0020               	movlb	0	; select bank0
  1301  05BC  10A6               	bcf	_DevMode,1
  1302                           
  1303                           ;main.c: 327: LATCbits.LATC3 = OFF;
  1304  05BD  0022               	movlb	2	; select bank2
  1305  05BE  118E               	bcf	14,3	;volatile
  1306  05BF                     l1833:	
  1307                           
  1308                           ;main.c: 328: }
  1309                           ;main.c: 329: Keys[chn].StateTemp = Keys[chn].State;
  1310  05BF  0020               	movlb	0	; select bank0
  1311  05C0  085E               	movf	main@chn_301,w
  1312  05C1  0709               	addwf	9,w
  1313  05C2  0709               	addwf	9,w
  1314  05C3  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1315  05C4  0086               	movwf	6
  1316  05C5  0187               	clrf	7
  1317  05C6  085E               	movf	main@chn_301,w
  1318  05C7  0709               	addwf	9,w
  1319  05C8  0709               	addwf	9,w
  1320  05C9  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1321  05CA  0084               	movwf	4
  1322  05CB  0185               	clrf	5
  1323  05CC  0800               	movf	0,w
  1324  05CD  0081               	movwf	1
  1325  05CE                     l1835:	
  1326  05CE  0ADE               	incf	main@chn_301,f
  1327  05CF  2D98               	goto	l1819
  1328  05D0                     l137:	
  1329  05D0  1D26               	btfss	_DevMode,2
  1330  05D1  2E2E               	goto	l1871
  1331                           
  1332                           ;main.c: 333: for (uint8_t chn = 0; chn < 4; chn++) {
  1333  05D2  01DF               	clrf	main@chn_302
  1334  05D3                     l1841:	
  1335  05D3  3004               	movlw	4
  1336  05D4  025F               	subwf	main@chn_302,w
  1337  05D5  1803               	btfsc	3,0
  1338  05D6  2F3B               	goto	l1947
  1339                           
  1340                           ;main.c: 334: if (Keys[chn].State != Keys[chn].StateTemp) {
  1341  05D7  085F               	movf	main@chn_302,w
  1342  05D8  0709               	addwf	9,w
  1343  05D9  0709               	addwf	9,w
  1344  05DA  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1345  05DB  0086               	movwf	6
  1346  05DC  0187               	clrf	7
  1347  05DD  085F               	movf	main@chn_302,w
  1348  05DE  0709               	addwf	9,w
  1349  05DF  0709               	addwf	9,w
  1350  05E0  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1351  05E1  0084               	movwf	4
  1352  05E2  0185               	clrf	5
  1353  05E3  0800               	movf	0,w
  1354  05E4  0601               	xorwf	1,w
  1355  05E5  1903               	skipnz
  1356  05E6  2E2C               	goto	l1867
  1357                           
  1358                           ;main.c: 335: if (Keys[chn].State == 0) {
  1359  05E7  085F               	movf	main@chn_302,w
  1360  05E8  0709               	addwf	9,w
  1361  05E9  0709               	addwf	9,w
  1362  05EA  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1363  05EB  0086               	movwf	6
  1364  05EC  0801               	movf	1,w
  1365  05ED  1D03               	btfss	3,2
  1366  05EE  2E1D               	goto	l1865
  1367                           
  1368                           ;main.c: 336: LATCbits.LATC3 = ON;
  1369  05EF  0022               	movlb	2	; select bank2
  1370  05F0  158E               	bsf	14,3	;volatile
  1371                           
  1372                           ;main.c: 337: _delay((unsigned long)((500)*(8000000/4000.0)));
  1373  05F1  3006               	movlw	6
  1374  05F2  0020               	movlb	0	; select bank0
  1375  05F3  00D7               	movwf	??_main+1
  1376  05F4  3013               	movlw	19
  1377  05F5  00D6               	movwf	??_main
  1378  05F6  30AD               	movlw	173
  1379  05F7                     u1607:	
  1380  05F7  0B89               	decfsz	9,f
  1381  05F8  2DF7               	goto	u1607
  1382  05F9  0BD6               	decfsz	??_main,f
  1383  05FA  2DF7               	goto	u1607
  1384  05FB  0BD7               	decfsz	??_main+1,f
  1385  05FC  2DF7               	goto	u1607
  1386  05FD  3200               	nop2
  1387  05FE  0064               	clrwdt	;# 
  1388                           
  1389                           ;main.c: 339: FlashEraseRow(0x7C0);
  1390  05FF  30C0               	movlw	192
  1391  0600  00F0               	movwf	FlashEraseRow@rowAddr
  1392  0601  3007               	movlw	7
  1393  0602  00F1               	movwf	FlashEraseRow@rowAddr+1
  1394  0603  215B               	fcall	_FlashEraseRow
  1395  0604  0064               	clrwdt	;# 
  1396                           
  1397                           ;main.c: 341: FlashWrite(0x7C0, chn);
  1398  0605  30C0               	movlw	192
  1399  0606  00F0               	movwf	FlashWrite@addr
  1400  0607  3007               	movlw	7
  1401  0608  00F1               	movwf	FlashWrite@addr+1
  1402  0609  0020               	movlb	0	; select bank0
  1403  060A  085F               	movf	main@chn_302,w
  1404  060B  00F2               	movwf	FlashWrite@flash_data
  1405  060C  01F3               	clrf	FlashWrite@flash_data+1
  1406  060D  2185               	fcall	_FlashWrite
  1407                           
  1408                           ;main.c: 342: FlashWrite(0x7C1, 0x5A);
  1409  060E  30C1               	movlw	193
  1410  060F  00F0               	movwf	FlashWrite@addr
  1411  0610  3007               	movlw	7
  1412  0611  00F1               	movwf	FlashWrite@addr+1
  1413  0612  305A               	movlw	90
  1414  0613  00F2               	movwf	FlashWrite@flash_data
  1415  0614  01F3               	clrf	FlashWrite@flash_data+1
  1416  0615  2185               	fcall	_FlashWrite
  1417  0616  0064               	clrwdt	;# 
  1418                           
  1419                           ;main.c: 344: DevType = Init_TypeFromFlash();
  1420  0617  2198               	fcall	_Init_TypeFromFlash
  1421  0618  0020               	movlb	0	; select bank0
  1422  0619  00A7               	movwf	_DevType
  1423                           
  1424                           ;main.c: 345: DevMode &= ~MODE_CHANGE_ACTIVE;
  1425  061A  1126               	bcf	_DevMode,2
  1426                           
  1427                           ;main.c: 346: LATCbits.LATC3 = OFF;
  1428  061B  0022               	movlb	2	; select bank2
  1429  061C  118E               	bcf	14,3	;volatile
  1430  061D                     l1865:	
  1431                           
  1432                           ;main.c: 347: }
  1433                           ;main.c: 348: Keys[chn].StateTemp = Keys[chn].State;
  1434  061D  0020               	movlb	0	; select bank0
  1435  061E  085F               	movf	main@chn_302,w
  1436  061F  0709               	addwf	9,w
  1437  0620  0709               	addwf	9,w
  1438  0621  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1439  0622  0086               	movwf	6
  1440  0623  0187               	clrf	7
  1441  0624  085F               	movf	main@chn_302,w
  1442  0625  0709               	addwf	9,w
  1443  0626  0709               	addwf	9,w
  1444  0627  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1445  0628  0084               	movwf	4
  1446  0629  0185               	clrf	5
  1447  062A  0800               	movf	0,w
  1448  062B  0081               	movwf	1
  1449  062C                     l1867:	
  1450  062C  0ADF               	incf	main@chn_302,f
  1451  062D  2DD3               	goto	l1841
  1452  062E                     l1871:	
  1453                           
  1454                           ;main.c: 352: for (uint8_t chn = 0; chn < 4; chn++) {
  1455  062E  01E0               	clrf	main@chn_303
  1456  062F                     l1873:	
  1457  062F  3004               	movlw	4
  1458  0630  0260               	subwf	main@chn_303,w
  1459  0631  1803               	btfsc	3,0
  1460  0632  2F3B               	goto	l1947
  1461                           
  1462                           ;main.c: 353: if (Keys[chn].State != Keys[chn].StateTemp) {
  1463  0633  0860               	movf	main@chn_303,w
  1464  0634  0709               	addwf	9,w
  1465  0635  0709               	addwf	9,w
  1466  0636  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1467  0637  0086               	movwf	6
  1468  0638  0187               	clrf	7
  1469  0639  0860               	movf	main@chn_303,w
  1470  063A  0709               	addwf	9,w
  1471  063B  0709               	addwf	9,w
  1472  063C  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1473  063D  0084               	movwf	4
  1474  063E  0185               	clrf	5
  1475  063F  0800               	movf	0,w
  1476  0640  0601               	xorwf	1,w
  1477  0641  1D03               	btfss	3,2
  1478  0642  2EB8               	goto	l1915
  1479  0643  2F2B               	goto	l1941
  1480  0644                     l1881:	
  1481                           
  1482                           ;main.c: 356: KeyOffHandler(&Keys[chn], chn, 4);
  1483  0644  0860               	movf	main@chn_303,w
  1484  0645  00FB               	movwf	KeyOffHandler@chn
  1485  0646  3004               	movlw	4
  1486  0647  00FC               	movwf	KeyOffHandler@cmd
  1487  0648  0860               	movf	main@chn_303,w
  1488  0649  0709               	addwf	9,w
  1489  064A  0709               	addwf	9,w
  1490  064B  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1491  064C  21D9               	fcall	_KeyOffHandler
  1492                           
  1493                           ;main.c: 357: break;
  1494  064D  2EC6               	goto	l1917
  1495  064E                     l1883:	
  1496                           
  1497                           ;main.c: 359: if ((chn == 0) || (chn == 2)) {
  1498  064E  0860               	movf	main@chn_303,w
  1499  064F  1903               	btfsc	3,2
  1500  0650  2E55               	goto	l1887
  1501  0651  3002               	movlw	2
  1502  0652  0660               	xorwf	main@chn_303,w
  1503  0653  1D03               	btfss	3,2
  1504  0654  2E5E               	goto	l1889
  1505  0655                     l1887:	
  1506                           
  1507                           ;main.c: 360: KeyOffHandler(&Keys[chn], chn, 0);
  1508  0655  0860               	movf	main@chn_303,w
  1509  0656  00FB               	movwf	KeyOffHandler@chn
  1510  0657  01FC               	clrf	KeyOffHandler@cmd
  1511  0658  0860               	movf	main@chn_303,w
  1512  0659  0709               	addwf	9,w
  1513  065A  0709               	addwf	9,w
  1514  065B  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1515  065C  21D9               	fcall	_KeyOffHandler
  1516                           
  1517                           ;main.c: 361: } else {
  1518  065D  2EC6               	goto	l1917
  1519  065E                     l1889:	
  1520                           
  1521                           ;main.c: 362: KeyOffHandler(&Keys[chn], chn, 2);
  1522  065E  0860               	movf	main@chn_303,w
  1523  065F  00FB               	movwf	KeyOffHandler@chn
  1524  0660  3002               	movlw	2
  1525  0661  00FC               	movwf	KeyOffHandler@cmd
  1526  0662  0860               	movf	main@chn_303,w
  1527  0663  0709               	addwf	9,w
  1528  0664  0709               	addwf	9,w
  1529  0665  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1530  0666  21D9               	fcall	_KeyOffHandler
  1531                           
  1532                           ;main.c: 363: }
  1533                           ;main.c: 364: break;
  1534  0667  2EC6               	goto	l1917
  1535  0668                     l1891:	
  1536                           
  1537                           ;main.c: 366: if (chn > 1) {
  1538  0668  3002               	movlw	2
  1539  0669  0260               	subwf	main@chn_303,w
  1540                           
  1541                           ;main.c: 367: if (Keys[chn].State == 0) {
  1542  066A  0860               	movf	main@chn_303,w
  1543  066B  1C03               	skipc
  1544  066C  2E8A               	goto	L2
  1545  066D  0709               	addwf	9,w
  1546  066E  0709               	addwf	9,w
  1547  066F  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1548  0670  0086               	movwf	6
  1549  0671  0187               	clrf	7
  1550  0672  0801               	movf	1,w
  1551  0673  1D03               	btfss	3,2
  1552  0674  2EC6               	goto	l1917
  1553                           
  1554                           ;main.c: 368: if (Keys[chn].Tick100ms < 10) {
  1555  0675  0860               	movf	main@chn_303,w
  1556  0676  0709               	addwf	9,w
  1557  0677  0709               	addwf	9,w
  1558  0678  3E2D               	addlw	(low ((_Keys| 0+2)))& (0+255)
  1559  0679  0086               	movwf	6
  1560  067A  300A               	movlw	10
  1561  067B  0201               	subwf	1,w
  1562  067C  1803               	skipnc
  1563  067D  2EC6               	goto	l1917
  1564                           
  1565                           ;main.c: 369: if (chn > 1) {
  1566  067E  3002               	movlw	2
  1567  067F  0260               	subwf	main@chn_303,w
  1568  0680  1C03               	skipc
  1569  0681  2EC6               	goto	l1917
  1570                           
  1571                           ;main.c: 370: noolite_send(chn, 7, 0, &noo_send_data[0]);
  1572  0682  3007               	movlw	7
  1573  0683  00F0               	movwf	noolite_send@noo_send_command
  1574  0684  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1575  0685  01F1               	clrf	noolite_send@noo_send_format
  1576  0686  00F2               	movwf	noolite_send@data
  1577  0687  0860               	movf	main@chn_303,w
  1578  0688  232B               	fcall	_noolite_send
  1579  0689  2EC6               	goto	l1917
  1580  068A                     L2:	
  1581                           ;main.c: 375: KeyOffHandler(&Keys[chn], chn, 4);
  1582                           
  1583  068A  00FB               	movwf	KeyOffHandler@chn
  1584  068B  3004               	movlw	4
  1585  068C  00FC               	movwf	KeyOffHandler@cmd
  1586  068D  0860               	movf	main@chn_303,w
  1587  068E  0709               	addwf	9,w
  1588  068F  0709               	addwf	9,w
  1589  0690  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1590  0691  21D9               	fcall	_KeyOffHandler
  1591  0692  2EC6               	goto	l1917
  1592  0693                     l1903:	
  1593                           
  1594                           ;main.c: 379: if (chn > 1) {
  1595  0693  3002               	movlw	2
  1596  0694  0260               	subwf	main@chn_303,w
  1597                           
  1598                           ;main.c: 380: if (Keys[chn].State) {
  1599  0695  0860               	movf	main@chn_303,w
  1600  0696  1C03               	skipc
  1601  0697  2EAF               	goto	L3
  1602  0698  0709               	addwf	9,w
  1603  0699  0709               	addwf	9,w
  1604  069A  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1605  069B  0086               	movwf	6
  1606  069C  0187               	clrf	7
  1607  069D  0801               	movf	1,w
  1608  069E  1903               	btfsc	3,2
  1609  069F  2EA8               	goto	l1909
  1610                           
  1611                           ;main.c: 381: noolite_send(chn, 2, 0, &noo_send_data[0]);
  1612  06A0  3002               	movlw	2
  1613  06A1  00F0               	movwf	noolite_send@noo_send_command
  1614  06A2  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1615  06A3  01F1               	clrf	noolite_send@noo_send_format
  1616  06A4  00F2               	movwf	noolite_send@data
  1617  06A5  0860               	movf	main@chn_303,w
  1618  06A6  232B               	fcall	_noolite_send
  1619                           
  1620                           ;main.c: 382: } else {
  1621  06A7  2EC6               	goto	l1917
  1622  06A8                     l1909:	
  1623  06A8  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  1624                           
  1625                           ;main.c: 383: noolite_send(chn, 0, 0, &noo_send_data[0]);
  1626  06A9  01F0               	clrf	noolite_send@noo_send_command
  1627  06AA  01F1               	clrf	noolite_send@noo_send_format
  1628  06AB  00F2               	movwf	noolite_send@data
  1629  06AC  0860               	movf	main@chn_303,w
  1630  06AD  232B               	fcall	_noolite_send
  1631  06AE  2EC6               	goto	l1917
  1632  06AF                     L3:	
  1633                           ;main.c: 386: KeyOffHandler(&Keys[chn], chn, 4);
  1634                           
  1635  06AF  00FB               	movwf	KeyOffHandler@chn
  1636  06B0  3004               	movlw	4
  1637  06B1  00FC               	movwf	KeyOffHandler@cmd
  1638  06B2  0860               	movf	main@chn_303,w
  1639  06B3  0709               	addwf	9,w
  1640  06B4  0709               	addwf	9,w
  1641  06B5  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1642  06B6  21D9               	fcall	_KeyOffHandler
  1643  06B7  2EC6               	goto	l1917
  1644  06B8                     l1915:	
  1645  06B8  0827               	movf	_DevType,w
  1646                           
  1647                           ; Switch size 1, requested type "space"
  1648                           ; Number of cases is 4, Range of values is 0 to 3
  1649                           ; switch strategies available:
  1650                           ; Name         Instructions Cycles
  1651                           ; simple_byte           13     7 (average)
  1652                           ; direct_byte           14     6 (fixed)
  1653                           ; jumptable            260     6 (fixed)
  1654                           ;	Chosen strategy is simple_byte
  1655  06B9  3A00               	xorlw	0	; case 0
  1656  06BA  1903               	skipnz
  1657  06BB  2E44               	goto	l1881
  1658  06BC  3A01               	xorlw	1	; case 1
  1659  06BD  1903               	skipnz
  1660  06BE  2E4E               	goto	l1883
  1661  06BF  3A03               	xorlw	3	; case 2
  1662  06C0  1903               	skipnz
  1663  06C1  2E68               	goto	l1891
  1664  06C2  3A01               	xorlw	1	; case 3
  1665  06C3  1903               	skipnz
  1666  06C4  2E93               	goto	l1903
  1667  06C5  2EC6               	goto	l1917
  1668  06C6                     l1917:	
  1669                           
  1670                           ;main.c: 390: Keys[chn].StateTemp = Keys[chn].State;
  1671  06C6  0020               	movlb	0	; select bank0
  1672  06C7  0860               	movf	main@chn_303,w
  1673  06C8  0709               	addwf	9,w
  1674  06C9  0709               	addwf	9,w
  1675  06CA  3E2C               	addlw	(low ((_Keys| 0+1)))& (0+255)
  1676  06CB  0086               	movwf	6
  1677  06CC  0187               	clrf	7
  1678  06CD  0860               	movf	main@chn_303,w
  1679  06CE  0709               	addwf	9,w
  1680  06CF  0709               	addwf	9,w
  1681  06D0  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1682  06D1  0084               	movwf	4
  1683  06D2  0185               	clrf	5
  1684  06D3  0800               	movf	0,w
  1685  06D4  0081               	movwf	1
  1686  06D5  2F2B               	goto	l1941
  1687  06D6                     l1919:	
  1688                           
  1689                           ;main.c: 395: KeyLongHandler(&Keys[chn], chn, 5, 9);
  1690  06D6  0860               	movf	main@chn_303,w
  1691  06D7  00FB               	movwf	KeyLongHandler@chn
  1692  06D8  3005               	movlw	5
  1693  06D9  00FC               	movwf	KeyLongHandler@cmd
  1694  06DA  3009               	movlw	9
  1695  06DB  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1696  06DC  0860               	movf	main@chn_303,w
  1697  06DD  0709               	addwf	9,w
  1698  06DE  0709               	addwf	9,w
  1699  06DF  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1700  06E0  21AC               	fcall	_KeyLongHandler
  1701                           
  1702                           ;main.c: 396: break;
  1703  06E1  2F39               	goto	l1943
  1704  06E2                     l1921:	
  1705                           
  1706                           ;main.c: 398: if (chn == 0 || chn == 2) {
  1707  06E2  0860               	movf	main@chn_303,w
  1708  06E3  1903               	btfsc	3,2
  1709  06E4  2EE9               	goto	l1925
  1710  06E5  3002               	movlw	2
  1711  06E6  0660               	xorwf	main@chn_303,w
  1712  06E7  1D03               	btfss	3,2
  1713  06E8  2EF5               	goto	l1927
  1714  06E9                     l1925:	
  1715                           
  1716                           ;main.c: 399: KeyLongHandler(&Keys[chn], chn, 1, 9);
  1717  06E9  0860               	movf	main@chn_303,w
  1718  06EA  00FB               	movwf	KeyLongHandler@chn
  1719  06EB  3009               	movlw	9
  1720  06EC  01FC               	clrf	KeyLongHandler@cmd
  1721  06ED  0AFC               	incf	KeyLongHandler@cmd,f
  1722  06EE  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1723  06EF  0860               	movf	main@chn_303,w
  1724  06F0  0709               	addwf	9,w
  1725  06F1  0709               	addwf	9,w
  1726  06F2  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1727  06F3  21AC               	fcall	_KeyLongHandler
  1728                           
  1729                           ;main.c: 400: } else {
  1730  06F4  2F39               	goto	l1943
  1731  06F5                     l1927:	
  1732                           
  1733                           ;main.c: 401: KeyLongHandler(&Keys[chn], chn, 3, 9);
  1734  06F5  0860               	movf	main@chn_303,w
  1735  06F6  00FB               	movwf	KeyLongHandler@chn
  1736  06F7  3003               	movlw	3
  1737  06F8  00FC               	movwf	KeyLongHandler@cmd
  1738  06F9  3009               	movlw	9
  1739  06FA  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1740  06FB  0860               	movf	main@chn_303,w
  1741  06FC  0709               	addwf	9,w
  1742  06FD  0709               	addwf	9,w
  1743  06FE  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1744  06FF  21AC               	fcall	_KeyLongHandler
  1745  0700  2F39               	goto	l1943
  1746  0701                     l1929:	
  1747                           
  1748                           ;main.c: 405: if (chn < 2) {
  1749  0701  3002               	movlw	2
  1750  0702  0260               	subwf	main@chn_303,w
  1751                           
  1752                           ;main.c: 406: KeyLongHandler(&Keys[chn], chn, 5, 9);
  1753  0703  0860               	movf	main@chn_303,w
  1754  0704  00FB               	movwf	KeyLongHandler@chn
  1755  0705  1803               	skipnc
  1756  0706  2F11               	goto	L4
  1757  0707  3005               	movlw	5
  1758  0708  00FC               	movwf	KeyLongHandler@cmd
  1759  0709  3009               	movlw	9
  1760  070A  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1761  070B  0860               	movf	main@chn_303,w
  1762  070C  0709               	addwf	9,w
  1763  070D  0709               	addwf	9,w
  1764  070E  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1765  070F  21AC               	fcall	_KeyLongHandler
  1766                           
  1767                           ;main.c: 407: } else {
  1768  0710  2F39               	goto	l1943
  1769  0711                     L4:	
  1770                           ;main.c: 408: KeyLongHandler(&Keys[chn], chn, 8, 49);
  1771                           
  1772  0711  3008               	movlw	8
  1773  0712  00FC               	movwf	KeyLongHandler@cmd
  1774  0713  3031               	movlw	49
  1775  0714  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1776  0715  0860               	movf	main@chn_303,w
  1777  0716  0709               	addwf	9,w
  1778  0717  0709               	addwf	9,w
  1779  0718  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1780  0719  21AC               	fcall	_KeyLongHandler
  1781  071A  2F39               	goto	l1943
  1782  071B                     l1935:	
  1783                           
  1784                           ;main.c: 412: if (chn < 2) {
  1785  071B  3002               	movlw	2
  1786  071C  0260               	subwf	main@chn_303,w
  1787  071D  1803               	skipnc
  1788  071E  2F39               	goto	l1943
  1789                           
  1790                           ;main.c: 413: KeyLongHandler(&Keys[chn], chn, 5, 9);
  1791  071F  0860               	movf	main@chn_303,w
  1792  0720  00FB               	movwf	KeyLongHandler@chn
  1793  0721  3005               	movlw	5
  1794  0722  00FC               	movwf	KeyLongHandler@cmd
  1795  0723  3009               	movlw	9
  1796  0724  00FD               	movwf	KeyLongHandler@ticksToTrigger
  1797  0725  0860               	movf	main@chn_303,w
  1798  0726  0709               	addwf	9,w
  1799  0727  0709               	addwf	9,w
  1800  0728  3E2B               	addlw	(low (_Keys| 0))& (0+255)
  1801  0729  21AC               	fcall	_KeyLongHandler
  1802  072A  2F39               	goto	l1943
  1803  072B                     l1941:	
  1804  072B  0827               	movf	_DevType,w
  1805                           
  1806                           ; Switch size 1, requested type "space"
  1807                           ; Number of cases is 4, Range of values is 0 to 3
  1808                           ; switch strategies available:
  1809                           ; Name         Instructions Cycles
  1810                           ; simple_byte           13     7 (average)
  1811                           ; direct_byte           14     6 (fixed)
  1812                           ; jumptable            260     6 (fixed)
  1813                           ;	Chosen strategy is simple_byte
  1814  072C  3A00               	xorlw	0	; case 0
  1815  072D  1903               	skipnz
  1816  072E  2ED6               	goto	l1919
  1817  072F  3A01               	xorlw	1	; case 1
  1818  0730  1903               	skipnz
  1819  0731  2EE2               	goto	l1921
  1820  0732  3A03               	xorlw	3	; case 2
  1821  0733  1903               	skipnz
  1822  0734  2F01               	goto	l1929
  1823  0735  3A01               	xorlw	1	; case 3
  1824  0736  1903               	skipnz
  1825  0737  2F1B               	goto	l1935
  1826  0738  2F39               	goto	l1943
  1827  0739                     l1943:	
  1828  0739  0AE0               	incf	main@chn_303,f
  1829  073A  2E2F               	goto	l1873
  1830  073B                     l1947:	
  1831                           
  1832                           ;main.c: 418: }
  1833                           ;main.c: 419: }
  1834                           ;main.c: 420: }
  1835                           ;main.c: 423: if (((DevMode & 0x07) == 0) && ((PORTA & All_Pressed) == 0)) {
  1836  073B  0826               	movf	_DevMode,w
  1837  073C  3907               	andlw	7
  1838  073D  1D03               	btfss	3,2
  1839  073E  2FA8               	goto	l1981
  1840  073F  080C               	movf	12,w	;volatile
  1841  0740  3917               	andlw	23
  1842  0741  1D03               	btfss	3,2
  1843  0742  2FA8               	goto	l1981
  1844                           
  1845                           ;main.c: 424: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  1846  0743  01DC               	clrf	main@cellNum
  1847                           
  1848                           ;main.c: 431: break;
  1849  0744  2F62               	goto	l1953
  1850  0745                     l1971:	
  1851                           
  1852                           ;main.c: 433: if (cellNum == 7) {
  1853  0745  3007               	movlw	7
  1854  0746  065C               	xorwf	main@cellNum,w
  1855  0747  1D03               	btfss	3,2
  1856  0748  2F60               	goto	l1975
  1857                           
  1858                           ;main.c: 434: FlashEraseRow(0x7D0);
  1859  0749  30D0               	movlw	208
  1860  074A  00F0               	movwf	FlashEraseRow@rowAddr
  1861  074B  3007               	movlw	7
  1862  074C  00F1               	movwf	FlashEraseRow@rowAddr+1
  1863  074D  215B               	fcall	_FlashEraseRow
  1864                           
  1865                           ;main.c: 435: FlashWrite(0x7D0, tx_status & 0x02);
  1866  074E  30D0               	movlw	208
  1867  074F  00F0               	movwf	FlashWrite@addr
  1868  0750  3007               	movlw	7
  1869  0751  00F1               	movwf	FlashWrite@addr+1
  1870  0752  0020               	movlb	0	; select bank0
  1871  0753  082A               	movf	_tx_status,w
  1872  0754  3902               	andlw	2
  1873  0755  00F2               	movwf	FlashWrite@flash_data
  1874  0756  01F3               	clrf	FlashWrite@flash_data+1
  1875  0757  2185               	fcall	_FlashWrite
  1876                           
  1877                           ;main.c: 436: FlashWrite(0x7D1, 0x5A);
  1878  0758  30D1               	movlw	209
  1879  0759  00F0               	movwf	FlashWrite@addr
  1880  075A  3007               	movlw	7
  1881  075B  00F1               	movwf	FlashWrite@addr+1
  1882  075C  305A               	movlw	90
  1883  075D  00F2               	movwf	FlashWrite@flash_data
  1884  075E  01F3               	clrf	FlashWrite@flash_data+1
  1885  075F  2185               	fcall	_FlashWrite
  1886  0760                     l1975:	
  1887  0760  0020               	movlb	0	; select bank0
  1888  0761  0ADC               	incf	main@cellNum,f
  1889  0762                     l1953:	
  1890  0762  3008               	movlw	8
  1891  0763  025C               	subwf	main@cellNum,w
  1892  0764  1803               	btfsc	3,0
  1893  0765  2F98               	goto	l186
  1894                           
  1895                           ;main.c: 425: uint16_t adrToWrite = (0x7D0 + (cellNum * 2));
  1896  0766  085C               	movf	main@cellNum,w
  1897  0767  00DA               	movwf	main@adrToWrite
  1898  0768  30D0               	movlw	208
  1899  0769  01DB               	clrf	main@adrToWrite+1
  1900  076A  35DA               	lslf	main@adrToWrite,f
  1901  076B  0DDB               	rlf	main@adrToWrite+1,f
  1902  076C  07DA               	addwf	main@adrToWrite,f
  1903  076D  3007               	movlw	7
  1904  076E  3DDB               	addwfc	main@adrToWrite+1,f
  1905                           
  1906                           ;main.c: 426: if (TxStatus[cellNum] == 0xFFFF) {
  1907  076F  085C               	movf	main@cellNum,w
  1908  0770  00D6               	movwf	??_main
  1909  0771  30D0               	movlw	208
  1910  0772  01D7               	clrf	??_main+1
  1911  0773  35D6               	lslf	??_main,f
  1912  0774  0DD7               	rlf	??_main+1,f
  1913  0775  0756               	addwf	??_main,w
  1914  0776  0084               	movwf	4
  1915  0777  3087               	movlw	135
  1916  0778  3D57               	addwfc	??_main+1,w
  1917  0779  0085               	movwf	5
  1918  077A  0012               	moviw fsr0++
  1919  077B  3AFF               	xorlw	255
  1920  077C  00D8               	movwf	??_main+2
  1921  077D  0012               	moviw fsr0++
  1922  077E  3AFF               	xorlw	255
  1923  077F  04D8               	iorwf	??_main+2,f
  1924  0780  1D03               	btfss	3,2
  1925  0781  2F45               	goto	l1971
  1926                           
  1927                           ;main.c: 427: FlashWrite(adrToWrite, tx_status & 0x02);
  1928  0782  085B               	movf	main@adrToWrite+1,w
  1929  0783  00F1               	movwf	FlashWrite@addr+1
  1930  0784  085A               	movf	main@adrToWrite,w
  1931  0785  00F0               	movwf	FlashWrite@addr
  1932  0786  082A               	movf	_tx_status,w
  1933  0787  3902               	andlw	2
  1934  0788  00F2               	movwf	FlashWrite@flash_data
  1935  0789  01F3               	clrf	FlashWrite@flash_data+1
  1936  078A  2185               	fcall	_FlashWrite
  1937                           
  1938                           ;main.c: 428: FlashWrite((adrToWrite + 1), 0x5A);
  1939  078B  0020               	movlb	0	; select bank0
  1940  078C  085A               	movf	main@adrToWrite,w
  1941  078D  3E01               	addlw	1
  1942  078E  00F0               	movwf	FlashWrite@addr
  1943  078F  3000               	movlw	0
  1944  0790  3D5B               	addwfc	main@adrToWrite+1,w
  1945  0791  00F1               	movwf	FlashWrite@addr+1
  1946  0792  305A               	movlw	90
  1947  0793  00F2               	movwf	FlashWrite@flash_data
  1948  0794  01F3               	clrf	FlashWrite@flash_data+1
  1949  0795  2185               	fcall	_FlashWrite
  1950                           
  1951                           ;main.c: 429: __nop();
  1952  0796  0000               	nop
  1953  0797  0064               	clrwdt	;# 
  1954  0798                     l186:	
  1955                           
  1956                           ;main.c: 437: }
  1957                           ;main.c: 438: }
  1958                           ;main.c: 439: }
  1959                           ;main.c: 440: LATCbits.LATC5 = 0;
  1960  0798  0022               	movlb	2	; select bank2
  1961  0799  128E               	bcf	14,5	;volatile
  1962                           
  1963                           ;main.c: 441: _delay((unsigned long)((100)*(8000000/4000.0)));
  1964  079A  3002               	movlw	2
  1965  079B  0020               	movlb	0	; select bank0
  1966  079C  00D7               	movwf	??_main+1
  1967  079D  3004               	movlw	4
  1968  079E  00D6               	movwf	??_main
  1969  079F  30BA               	movlw	186
  1970  07A0                     u1617:	
  1971  07A0  0B89               	decfsz	9,f
  1972  07A1  2FA0               	goto	u1617
  1973  07A2  0BD6               	decfsz	??_main,f
  1974  07A3  2FA0               	goto	u1617
  1975  07A4  0BD7               	decfsz	??_main+1,f
  1976  07A5  2FA0               	goto	u1617
  1977  07A6  0000               	nop
  1978                           
  1979                           ;main.c: 442: } else {
  1980  07A7  2CD1               	goto	l1703
  1981  07A8                     l1981:	
  1982                           
  1983                           ;main.c: 443: WDTCONbits.WDTPS = 0b00110;
  1984  07A8  0021               	movlb	1	; select bank1
  1985  07A9  0817               	movf	23,w	;volatile
  1986  07AA  39C1               	andlw	-63
  1987  07AB  380C               	iorlw	12
  1988  07AC  0097               	movwf	23	;volatile
  1989                           
  1990                           ;main.c: 444: __nop();
  1991  07AD  0000               	nop
  1992  07AE  0063               	sleep	;# 
  1993                           
  1994                           ;main.c: 446: __nop();
  1995  07AF  0000               	nop
  1996                           
  1997                           ;main.c: 447: WDTCONbits.WDTPS = 0b00101;
  1998  07B0  0021               	movlb	1	; select bank1
  1999  07B1  0817               	movf	23,w	;volatile
  2000  07B2  39C1               	andlw	-63
  2001  07B3  380A               	iorlw	10
  2002  07B4  0097               	movwf	23	;volatile
  2003                           
  2004                           ;main.c: 448: __nop();
  2005  07B5  0000               	nop
  2006  07B6  0063               	sleep	;# 
  2007                           
  2008                           ;main.c: 450: __nop();
  2009  07B7  0000               	nop
  2010                           
  2011                           ;main.c: 451: WDTCONbits.WDTPS = 0b01011;
  2012  07B8  0021               	movlb	1	; select bank1
  2013  07B9  0817               	movf	23,w	;volatile
  2014  07BA  39C1               	andlw	-63
  2015  07BB  3816               	iorlw	22
  2016  07BC  0097               	movwf	23	;volatile
  2017                           
  2018                           ;main.c: 452: __nop();
  2019  07BD  0000               	nop
  2020  07BE  0064               	clrwdt	;# 
  2021  07BF  2CD1               	goto	l1703
  2022  07C0                     __end_of_main:	
  2023                           
  2024                           	psect	text1
  2025  02A0                     __ptext1:	
  2026 ;; *************** function _RF_Init *****************
  2027 ;; Defined at:
  2028 ;;		line 25 in file "noolite.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2037 ;; Tracked objects:
  2038 ;;		On entry : B1F/1
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1
  2042 ;;      Params:         0       0       0
  2043 ;;      Locals:         0       0       0
  2044 ;;      Temps:          7       0       0
  2045 ;;      Totals:         7       0       0
  2046 ;;Total ram usage:        7 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _RF_Init
  2057  02A0                     _RF_Init:	
  2058                           
  2059                           ;noolite.c: 27: startaddress = 0;
  2060                           
  2061                           ;incstack = 0
  2062                           ; Regs used in _RF_Init: [wreg-fsr0h+status,2+status,0+pclath]
  2063  02A0  0020               	movlb	0	; select bank0
  2064  02A1  30F3               	movlw	243
  2065  02A2  01A0               	clrf	_startaddress
  2066  02A3  01A1               	clrf	_startaddress+1
  2067  02A4  01A2               	clrf	_startaddress+2
  2068  02A5  01A3               	clrf	_startaddress+3
  2069                           
  2070                           ;noolite.c: 28: startaddress |= ((unsigned int) system_settings[5]) << 8;
  2071  02A6  0084               	movwf	4
  2072  02A7  3087               	movlw	135
  2073  02A8  0085               	movwf	5
  2074  02A9  0800               	movf	0,w	;code access
  2075  02AA  00F0               	movwf	??_RF_Init
  2076  02AB  01F1               	clrf	??_RF_Init+1
  2077  02AC  00F1               	movwf	??_RF_Init+1
  2078  02AD  01F0               	clrf	??_RF_Init
  2079  02AE  0870               	movf	??_RF_Init,w
  2080  02AF  00F3               	movwf	??_RF_Init+3
  2081  02B0  0871               	movf	??_RF_Init+1,w
  2082  02B1  00F4               	movwf	??_RF_Init+4
  2083  02B2  01F5               	clrf	??_RF_Init+5
  2084  02B3  01F6               	clrf	??_RF_Init+6
  2085  02B4  0873               	movf	??_RF_Init+3,w
  2086  02B5  04A0               	iorwf	_startaddress,f
  2087  02B6  0874               	movf	??_RF_Init+4,w
  2088  02B7  04A1               	iorwf	_startaddress+1,f
  2089  02B8  0875               	movf	??_RF_Init+5,w
  2090  02B9  04A2               	iorwf	_startaddress+2,f
  2091  02BA  0876               	movf	??_RF_Init+6,w
  2092  02BB  04A3               	iorwf	_startaddress+3,f
  2093                           
  2094                           ;noolite.c: 29: startaddress |= system_settings[4];
  2095  02BC  30F2               	movlw	242
  2096  02BD  0084               	movwf	4
  2097  02BE  0800               	movf	0,w	;code access
  2098  02BF  00F0               	movwf	??_RF_Init
  2099  02C0  01F1               	clrf	??_RF_Init+1
  2100  02C1  01F2               	clrf	??_RF_Init+2
  2101  02C2  01F3               	clrf	??_RF_Init+3
  2102  02C3  04A0               	iorwf	_startaddress,f
  2103  02C4  0871               	movf	??_RF_Init+1,w
  2104  02C5  04A1               	iorwf	_startaddress+1,f
  2105  02C6  0872               	movf	??_RF_Init+2,w
  2106  02C7  04A2               	iorwf	_startaddress+2,f
  2107  02C8  0873               	movf	??_RF_Init+3,w
  2108  02C9  04A3               	iorwf	_startaddress+3,f
  2109                           
  2110                           ;noolite.c: 30: if ((startaddress != 0) && (startaddress != 0xFFFF)) {
  2111  02CA  0823               	movf	_startaddress+3,w
  2112  02CB  0422               	iorwf	_startaddress+2,w
  2113  02CC  0421               	iorwf	_startaddress+1,w
  2114  02CD  0420               	iorwf	_startaddress,w
  2115  02CE  1903               	skipnz
  2116  02CF  2AD9               	goto	l222
  2117  02D0  0F20               	incfsz	_startaddress,w
  2118  02D1  2AD7               	goto	l1647
  2119  02D2  0A21               	incf	_startaddress+1,w
  2120  02D3  0422               	iorwf	_startaddress+2,w
  2121  02D4  0423               	iorwf	_startaddress+3,w
  2122  02D5  1903               	btfsc	3,2
  2123  02D6  2AD9               	goto	l222
  2124  02D7                     l1647:	
  2125                           
  2126                           ;noolite.c: 31: noo_address_type = 0;
  2127  02D7  01A4               	clrf	_noo_address_type
  2128                           
  2129                           ;noolite.c: 32: } else {
  2130  02D8  2B29               	goto	l223
  2131  02D9                     l222:	
  2132  02D9  30F9               	movlw	249
  2133                           
  2134                           ;noolite.c: 33: startaddress = 0;
  2135  02DA  01A0               	clrf	_startaddress
  2136  02DB  01A1               	clrf	_startaddress+1
  2137  02DC  01A2               	clrf	_startaddress+2
  2138  02DD  01A3               	clrf	_startaddress+3
  2139                           
  2140                           ;noolite.c: 34: startaddress |= ((unsigned long) system_settings[11]) << 24;
  2141  02DE  0084               	movwf	4
  2142  02DF  3087               	movlw	135
  2143  02E0  0085               	movwf	5
  2144  02E1  0800               	movf	0,w	;code access
  2145  02E2  00F3               	movwf	??_RF_Init+3
  2146  02E3  01F2               	clrf	??_RF_Init+2
  2147  02E4  01F1               	clrf	??_RF_Init+1
  2148  02E5  01F0               	clrf	??_RF_Init
  2149  02E6  0870               	movf	??_RF_Init,w
  2150  02E7  04A0               	iorwf	_startaddress,f
  2151  02E8  0871               	movf	??_RF_Init+1,w
  2152  02E9  04A1               	iorwf	_startaddress+1,f
  2153  02EA  0872               	movf	??_RF_Init+2,w
  2154  02EB  04A2               	iorwf	_startaddress+2,f
  2155  02EC  0873               	movf	??_RF_Init+3,w
  2156  02ED  04A3               	iorwf	_startaddress+3,f
  2157                           
  2158                           ;noolite.c: 35: startaddress |= ((unsigned long) system_settings[10]) << 16;
  2159  02EE  30F8               	movlw	248
  2160  02EF  0084               	movwf	4
  2161  02F0  0800               	movf	0,w	;code access
  2162  02F1  00F0               	movwf	??_RF_Init
  2163  02F2  01F1               	clrf	??_RF_Init+1
  2164  02F3  01F2               	clrf	??_RF_Init+2
  2165  02F4  01F3               	clrf	??_RF_Init+3
  2166  02F5  0871               	movf	??_RF_Init+1,w
  2167  02F6  00F3               	movwf	??_RF_Init+3
  2168  02F7  0870               	movf	??_RF_Init,w
  2169  02F8  00F2               	movwf	??_RF_Init+2
  2170  02F9  01F1               	clrf	??_RF_Init+1
  2171  02FA  01F0               	clrf	??_RF_Init
  2172  02FB  0870               	movf	??_RF_Init,w
  2173  02FC  04A0               	iorwf	_startaddress,f
  2174  02FD  0871               	movf	??_RF_Init+1,w
  2175  02FE  04A1               	iorwf	_startaddress+1,f
  2176  02FF  0872               	movf	??_RF_Init+2,w
  2177  0300  04A2               	iorwf	_startaddress+2,f
  2178  0301  0873               	movf	??_RF_Init+3,w
  2179  0302  04A3               	iorwf	_startaddress+3,f
  2180                           
  2181                           ;noolite.c: 36: startaddress |= ((unsigned long) system_settings[9]) << 8;
  2182  0303  30F7               	movlw	247
  2183  0304  0084               	movwf	4
  2184  0305  0800               	movf	0,w	;code access
  2185  0306  00F0               	movwf	??_RF_Init
  2186  0307  01F1               	clrf	??_RF_Init+1
  2187  0308  01F2               	clrf	??_RF_Init+2
  2188  0309  01F3               	clrf	??_RF_Init+3
  2189  030A  0872               	movf	??_RF_Init+2,w
  2190  030B  00F3               	movwf	??_RF_Init+3
  2191  030C  0871               	movf	??_RF_Init+1,w
  2192  030D  00F2               	movwf	??_RF_Init+2
  2193  030E  0870               	movf	??_RF_Init,w
  2194  030F  00F1               	movwf	??_RF_Init+1
  2195  0310  01F0               	clrf	??_RF_Init
  2196  0311  0870               	movf	??_RF_Init,w
  2197  0312  04A0               	iorwf	_startaddress,f
  2198  0313  0871               	movf	??_RF_Init+1,w
  2199  0314  04A1               	iorwf	_startaddress+1,f
  2200  0315  0872               	movf	??_RF_Init+2,w
  2201  0316  04A2               	iorwf	_startaddress+2,f
  2202  0317  0873               	movf	??_RF_Init+3,w
  2203  0318  04A3               	iorwf	_startaddress+3,f
  2204                           
  2205                           ;noolite.c: 37: startaddress |= system_settings[8];
  2206  0319  30F6               	movlw	246
  2207  031A  0084               	movwf	4
  2208  031B  0800               	movf	0,w	;code access
  2209  031C  00F0               	movwf	??_RF_Init
  2210  031D  01F1               	clrf	??_RF_Init+1
  2211  031E  01F2               	clrf	??_RF_Init+2
  2212  031F  01F3               	clrf	??_RF_Init+3
  2213  0320  04A0               	iorwf	_startaddress,f
  2214  0321  0871               	movf	??_RF_Init+1,w
  2215  0322  04A1               	iorwf	_startaddress+1,f
  2216  0323  0872               	movf	??_RF_Init+2,w
  2217  0324  04A2               	iorwf	_startaddress+2,f
  2218  0325  0873               	movf	??_RF_Init+3,w
  2219  0326  04A3               	iorwf	_startaddress+3,f
  2220                           
  2221                           ;noolite.c: 38: noo_address_type = 1;
  2222  0327  01A4               	clrf	_noo_address_type
  2223  0328  0AA4               	incf	_noo_address_type,f
  2224  0329                     l223:	
  2225  0329  0064               	clrwdt	;# 
  2226  032A  0008               	return
  2227  032B                     __end_of_RF_Init:	
  2228                           
  2229                           	psect	text2
  2230  01D9                     __ptext2:	
  2231 ;; *************** function _KeyOffHandler *****************
  2232 ;; Defined at:
  2233 ;;		line 205 in file "main.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  key             1    wreg     PTR struct .
  2236 ;;		 -> Keys(20), 
  2237 ;;  chn             1   11[COMMON] unsigned char 
  2238 ;;  cmd             1   12[COMMON] unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  key             1   18[BANK0 ] PTR struct .
  2241 ;;		 -> Keys(20), 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2246 ;; Tracked objects:
  2247 ;;		On entry : 1F/0
  2248 ;;		On exit  : 1D/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1
  2251 ;;      Params:         2       0       0
  2252 ;;      Locals:         0       1       0
  2253 ;;      Temps:          1       0       0
  2254 ;;      Totals:         3       1       0
  2255 ;;Total ram usage:        4 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    1
  2258 ;; This function calls:
  2259 ;;		_noolite_send
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function _KeyOffHandler
  2267  01D9                     _KeyOffHandler:	
  2268                           
  2269                           ;incstack = 0
  2270                           ; Regs used in _KeyOffHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2271                           ;KeyOffHandler@key stored from wreg
  2272  01D9  00D5               	movwf	KeyOffHandler@key
  2273                           
  2274                           ;main.c: 206: if (key->State == 0) {
  2275  01DA  0086               	movwf	6
  2276  01DB  0187               	clrf	7
  2277  01DC  0801               	movf	1,w
  2278  01DD  1D03               	btfss	3,2
  2279  01DE  0008               	return
  2280                           
  2281                           ;main.c: 207: if (key->Tick100ms < 10) {
  2282  01DF  0855               	movf	KeyOffHandler@key,w
  2283  01E0  3E02               	addlw	2
  2284  01E1  0086               	movwf	6
  2285  01E2  300A               	movlw	10
  2286  01E3  0201               	subwf	1,w
  2287  01E4  1803               	skipnc
  2288  01E5  29ED               	goto	l1615
  2289                           
  2290                           ;main.c: 208: noolite_send(chn, cmd, 0, &noo_send_data[0]);
  2291  01E6  087C               	movf	KeyOffHandler@cmd,w
  2292  01E7  00F0               	movwf	noolite_send@noo_send_command
  2293  01E8  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2294  01E9  01F1               	clrf	noolite_send@noo_send_format
  2295  01EA  00F2               	movwf	noolite_send@data
  2296  01EB  087B               	movf	KeyOffHandler@chn,w
  2297  01EC  2B2B               	ljmp	_noolite_send
  2298  01ED                     l1615:	
  2299                           ;main.c: 209: } else {
  2300                           
  2301                           
  2302                           ;main.c: 210: noolite_send(chn, 10, 0, &noo_send_data[0]);
  2303  01ED  300A               	movlw	10
  2304  01EE  00F0               	movwf	noolite_send@noo_send_command
  2305  01EF  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2306  01F0  01F1               	clrf	noolite_send@noo_send_format
  2307  01F1  00F2               	movwf	noolite_send@data
  2308  01F2  087B               	movf	KeyOffHandler@chn,w
  2309  01F3  232B               	fcall	_noolite_send
  2310                           
  2311                           ;main.c: 211: _delay((unsigned long)((15)*(8000000/4000.0)));
  2312  01F4  3027               	movlw	39
  2313  01F5  00FD               	movwf	??_KeyOffHandler
  2314  01F6  30F5               	movlw	245
  2315  01F7                     u1627:	
  2316  01F7  0B89               	decfsz	9,f
  2317  01F8  29F7               	goto	u1627
  2318  01F9  0BFD               	decfsz	??_KeyOffHandler,f
  2319  01FA  29F7               	goto	u1627
  2320  01FB  0000               	nop
  2321                           
  2322                           ;main.c: 212: noolite_send(chn, 10, 0, &noo_send_data[0]);
  2323  01FC  300A               	movlw	10
  2324  01FD  00F0               	movwf	noolite_send@noo_send_command
  2325  01FE  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2326  01FF  01F1               	clrf	noolite_send@noo_send_format
  2327  0200  00F2               	movwf	noolite_send@data
  2328  0201  087B               	movf	KeyOffHandler@chn,w
  2329  0202  232B               	fcall	_noolite_send
  2330                           
  2331                           ;main.c: 213: _delay((unsigned long)((15)*(8000000/4000.0)));
  2332  0203  3027               	movlw	39
  2333  0204  00FD               	movwf	??_KeyOffHandler
  2334  0205  30F5               	movlw	245
  2335  0206                     u1637:	
  2336  0206  0B89               	decfsz	9,f
  2337  0207  2A06               	goto	u1637
  2338  0208  0BFD               	decfsz	??_KeyOffHandler,f
  2339  0209  2A06               	goto	u1637
  2340  020A  0000               	nop
  2341                           
  2342                           ;main.c: 214: noolite_send(chn, 10, 0, &noo_send_data[0]);
  2343  020B  300A               	movlw	10
  2344  020C  00F0               	movwf	noolite_send@noo_send_command
  2345  020D  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2346  020E  01F1               	clrf	noolite_send@noo_send_format
  2347  020F  00F2               	movwf	noolite_send@data
  2348  0210  087B               	movf	KeyOffHandler@chn,w
  2349  0211  232B               	fcall	_noolite_send
  2350                           
  2351                           ;main.c: 215: key->FirstCmdSent = 0;
  2352  0212  0020               	movlb	0	; select bank0
  2353  0213  0855               	movf	KeyOffHandler@key,w
  2354  0214  3E03               	addlw	3
  2355  0215  0086               	movwf	6
  2356  0216  0187               	clrf	7
  2357  0217  0181               	clrf	1
  2358  0218  0008               	return
  2359  0219                     __end_of_KeyOffHandler:	
  2360                           
  2361                           	psect	text3
  2362  01AC                     __ptext3:	
  2363 ;; *************** function _KeyLongHandler *****************
  2364 ;; Defined at:
  2365 ;;		line 220 in file "main.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  key             1    wreg     PTR struct .
  2368 ;;		 -> Keys(20), 
  2369 ;;  chn             1   11[COMMON] unsigned char 
  2370 ;;  cmd             1   12[COMMON] unsigned char 
  2371 ;;  ticksToTrigg    1   13[COMMON] unsigned char 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  key             1   18[BANK0 ] PTR struct .
  2374 ;;		 -> Keys(20), 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2379 ;; Tracked objects:
  2380 ;;		On entry : 1F/0
  2381 ;;		On exit  : 1F/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1
  2384 ;;      Params:         3       0       0
  2385 ;;      Locals:         0       1       0
  2386 ;;      Temps:          0       0       0
  2387 ;;      Totals:         3       1       0
  2388 ;;Total ram usage:        4 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    1
  2391 ;; This function calls:
  2392 ;;		_noolite_send
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           
  2399                           ;psect for function _KeyLongHandler
  2400  01AC                     _KeyLongHandler:	
  2401                           
  2402                           ;incstack = 0
  2403                           ; Regs used in _KeyLongHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2404                           ;KeyLongHandler@key stored from wreg
  2405  01AC  00D5               	movwf	KeyLongHandler@key
  2406                           
  2407                           ;main.c: 221: if (key->State != 0) {
  2408  01AD  0086               	movwf	6
  2409  01AE  0187               	clrf	7
  2410  01AF  0801               	movf	1,w
  2411  01B0  1903               	btfsc	3,2
  2412  01B1  29D3               	goto	l1637
  2413                           
  2414                           ;main.c: 222: if (key->Tick100ms > ticksToTrigger) {
  2415  01B2  0855               	movf	KeyLongHandler@key,w
  2416  01B3  3E02               	addlw	2
  2417  01B4  0086               	movwf	6
  2418  01B5  0801               	movf	1,w
  2419  01B6  027D               	subwf	KeyLongHandler@ticksToTrigger,w
  2420                           
  2421                           ;main.c: 223: if (key->FirstCmdSent == 0) {
  2422  01B7  0855               	movf	KeyLongHandler@key,w
  2423  01B8  1803               	skipnc
  2424  01B9  29CE               	goto	L5
  2425  01BA  3E03               	addlw	3
  2426  01BB  0086               	movwf	6
  2427  01BC  0801               	movf	1,w
  2428  01BD  1D03               	btfss	3,2
  2429  01BE  29CD               	goto	l1635
  2430                           
  2431                           ;main.c: 224: noolite_send(chn, cmd, 0, &noo_send_data[0]);
  2432  01BF  087C               	movf	KeyLongHandler@cmd,w
  2433  01C0  00F0               	movwf	noolite_send@noo_send_command
  2434  01C1  303F               	movlw	(low (_noo_send_data| 0))& (0+255)
  2435  01C2  01F1               	clrf	noolite_send@noo_send_format
  2436  01C3  00F2               	movwf	noolite_send@data
  2437  01C4  087B               	movf	KeyLongHandler@chn,w
  2438  01C5  232B               	fcall	_noolite_send
  2439                           
  2440                           ;main.c: 225: key->FirstCmdSent = 1;
  2441  01C6  0020               	movlb	0	; select bank0
  2442  01C7  0855               	movf	KeyLongHandler@key,w
  2443  01C8  3E03               	addlw	3
  2444  01C9  0086               	movwf	6
  2445  01CA  0187               	clrf	7
  2446  01CB  0181               	clrf	1
  2447  01CC  0A81               	incf	1,f
  2448  01CD                     l1635:	
  2449                           
  2450                           ;main.c: 226: }
  2451                           ;main.c: 227: }
  2452                           ;main.c: 228: key->Tick100ms++;
  2453  01CD  0855               	movf	KeyLongHandler@key,w
  2454  01CE                     L5:	
  2455  01CE  3E02               	addlw	2
  2456  01CF  0086               	movwf	6
  2457  01D0  0187               	clrf	7
  2458  01D1  0A81               	incf	1,f
  2459                           
  2460                           ;main.c: 229: } else {
  2461  01D2  0008               	return
  2462  01D3                     l1637:	
  2463                           
  2464                           ;main.c: 230: key->Tick100ms = 0;
  2465  01D3  0855               	movf	KeyLongHandler@key,w
  2466  01D4  3E02               	addlw	2
  2467  01D5  0086               	movwf	6
  2468  01D6  0187               	clrf	7
  2469  01D7  0181               	clrf	1
  2470  01D8  0008               	return
  2471  01D9                     __end_of_KeyLongHandler:	
  2472                           
  2473                           	psect	text4
  2474  032B                     __ptext4:	
  2475 ;; *************** function _noolite_send *****************
  2476 ;; Defined at:
  2477 ;;		line 174 in file "noolite.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  chn             1    wreg     unsigned char 
  2480 ;;  noo_send_com    1    0[COMMON] unsigned char 
  2481 ;;  noo_send_for    1    1[COMMON] unsigned char 
  2482 ;;  data            1    2[COMMON] PTR unsigned char 
  2483 ;;		 -> noo_send_data(4), 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  chn             1   14[BANK0 ] unsigned char 
  2486 ;;  noo_send_buf   12    0[BANK0 ] unsigned char [12]
  2487 ;;  endpos          1   17[BANK0 ] unsigned char 
  2488 ;;  temp_send       1   16[BANK0 ] unsigned char 
  2489 ;;  countsend       1   15[BANK0 ] unsigned char 
  2490 ;;  countbit        1   13[BANK0 ] unsigned char 
  2491 ;;  startpos        1   12[BANK0 ] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 1F/2
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1
  2501 ;;      Params:         3       0       0
  2502 ;;      Locals:         0      18       0
  2503 ;;      Temps:          8       0       0
  2504 ;;      Totals:        11      18       0
  2505 ;;Total ram usage:       29 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_KeyOffHandler
  2511 ;;		_KeyLongHandler
  2512 ;;		_main
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           
  2517                           ;psect for function _noolite_send
  2518  032B                     _noolite_send:	
  2519                           
  2520                           ;incstack = 0
  2521                           ; Regs used in _noolite_send: [wreg+fsr1l+fsr1h+status,2+status,0]
  2522                           ;noolite_send@chn stored from wreg
  2523  032B  0020               	movlb	0	; select bank0
  2524  032C  00D1               	movwf	noolite_send@chn
  2525  032D  0064               	clrwdt	;# 
  2526                           
  2527                           ;noolite.c: 185: tx_status ^= (1<<1);
  2528  032E  3002               	movlw	2
  2529  032F  0020               	movlb	0	; select bank0
  2530  0330  06AA               	xorwf	_tx_status,f
  2531                           
  2532                           ;noolite.c: 188: if (noo_send_command < 16) {
  2533  0331  3010               	movlw	16
  2534  0332  0270               	subwf	noolite_send@noo_send_command,w
  2535  0333  1803               	skipnc
  2536  0334  2B41               	goto	l1375
  2537                           
  2538                           ;noolite.c: 189: startpos = 10;
  2539  0335  300A               	movlw	10
  2540  0336  00CF               	movwf	noolite_send@startpos
  2541                           
  2542                           ;noolite.c: 190: noo_send_buffer[1] = (uint8_t) ((noo_send_command << 4) | (1 << 2));
  2543  0337  0E70               	swapf	noolite_send@noo_send_command,w
  2544  0338  39F0               	andlw	240
  2545  0339  3804               	iorlw	4
  2546  033A  00C4               	movwf	noolite_send@noo_send_buffer+1
  2547                           
  2548                           ;noolite.c: 191: if (((tx_status & (1<<1)) != 0)) {
  2549  033B  1CAA               	btfss	_tx_status,1
  2550  033C  2B3F               	goto	l228
  2551                           
  2552                           ;noolite.c: 192: noo_send_buffer[1] |= (1<<3);
  2553  033D  15C4               	bsf	noolite_send@noo_send_buffer+1,3
  2554                           
  2555                           ;noolite.c: 193: } else {
  2556  033E  2B4D               	goto	l230
  2557  033F                     l228:	
  2558                           
  2559                           ;noolite.c: 194: noo_send_buffer[1] &= (~(1<<3));
  2560  033F  11C4               	bcf	noolite_send@noo_send_buffer+1,3
  2561  0340  2B4D               	goto	l230
  2562  0341                     l1375:	
  2563                           
  2564                           ;noolite.c: 197: startpos = 6;
  2565  0341  3006               	movlw	6
  2566  0342  00CF               	movwf	noolite_send@startpos
  2567                           
  2568                           ;noolite.c: 198: noo_send_buffer[0] = (1 << 6);
  2569  0343  3040               	movlw	64
  2570  0344  00C3               	movwf	noolite_send@noo_send_buffer
  2571                           
  2572                           ;noolite.c: 199: if (((tx_status & (1<<1)) != 0)) {
  2573  0345  1CAA               	btfss	_tx_status,1
  2574  0346  2B49               	goto	l231
  2575                           
  2576                           ;noolite.c: 200: noo_send_buffer[0] |= (1<<7);
  2577  0347  17C3               	bsf	noolite_send@noo_send_buffer,7
  2578                           
  2579                           ;noolite.c: 201: } else {
  2580  0348  2B4A               	goto	l1381
  2581  0349                     l231:	
  2582                           
  2583                           ;noolite.c: 202: noo_send_buffer[0] &= (~(1<<7));
  2584  0349  13C3               	bcf	noolite_send@noo_send_buffer,7
  2585  034A                     l1381:	
  2586                           
  2587                           ;noolite.c: 203: };
  2588                           ;noolite.c: 204: noo_send_buffer[1] = noo_send_command;
  2589  034A  0870               	movf	noolite_send@noo_send_command,w
  2590  034B  00C4               	movwf	noolite_send@noo_send_buffer+1
  2591                           
  2592                           ;noolite.c: 205: noo_send_format = (uint8_t) (noo_send_format | 4);
  2593  034C  1571               	bsf	noolite_send@noo_send_format,2
  2594  034D                     l230:	
  2595                           
  2596                           ;noolite.c: 206: }
  2597                           ;noolite.c: 207: endpos = 2;
  2598  034D  3002               	movlw	2
  2599  034E  00D4               	movwf	noolite_send@endpos
  2600                           
  2601                           ;noolite.c: 208: temp_send = (uint8_t) (noo_send_format & 3);
  2602  034F  0871               	movf	noolite_send@noo_send_format,w
  2603  0350  00D3               	movwf	noolite_send@temp_send
  2604  0351  3003               	movlw	3
  2605  0352  05D3               	andwf	noolite_send@temp_send,f
  2606                           
  2607                           ;noolite.c: 209: if (temp_send == 1) {
  2608  0353  0B53               	decfsz	noolite_send@temp_send,w
  2609  0354  2B5C               	goto	l1393
  2610                           
  2611                           ;noolite.c: 211: noo_send_buffer[2] = data[0];
  2612  0355  0872               	movf	noolite_send@data,w
  2613  0356  0086               	movwf	6
  2614  0357  0187               	clrf	7
  2615  0358  0801               	movf	1,w
  2616  0359  00C5               	movwf	noolite_send@noo_send_buffer+2
  2617                           
  2618                           ;noolite.c: 212: endpos++;
  2619  035A  0AD4               	incf	noolite_send@endpos,f
  2620                           
  2621                           ;noolite.c: 213: } else if (temp_send == 3) {
  2622  035B  2B73               	goto	l1399
  2623  035C                     l1393:	
  2624  035C  3003               	movlw	3
  2625  035D  0653               	xorwf	noolite_send@temp_send,w
  2626  035E  1D03               	btfss	3,2
  2627  035F  2B73               	goto	l1399
  2628                           
  2629                           ;noolite.c: 218: noo_send_buffer[2] = data[0];
  2630  0360  0872               	movf	noolite_send@data,w
  2631  0361  0086               	movwf	6
  2632  0362  0187               	clrf	7
  2633  0363  0801               	movf	1,w
  2634  0364  00C5               	movwf	noolite_send@noo_send_buffer+2
  2635                           
  2636                           ;noolite.c: 219: noo_send_buffer[3] = data[1];
  2637  0365  0872               	movf	noolite_send@data,w
  2638  0366  0086               	movwf	6
  2639  0367  3F41               	moviw [1]fsr1
  2640  0368  00C6               	movwf	noolite_send@noo_send_buffer+3
  2641                           
  2642                           ;noolite.c: 220: noo_send_buffer[4] = data[2];
  2643  0369  0872               	movf	noolite_send@data,w
  2644  036A  0086               	movwf	6
  2645  036B  3F42               	moviw [2]fsr1
  2646  036C  00C7               	movwf	noolite_send@noo_send_buffer+4
  2647                           
  2648                           ;noolite.c: 221: noo_send_buffer[5] = data[3];
  2649  036D  0872               	movf	noolite_send@data,w
  2650  036E  0086               	movwf	6
  2651  036F  3F43               	moviw [3]fsr1
  2652  0370  00C8               	movwf	noolite_send@noo_send_buffer+5
  2653                           
  2654                           ;noolite.c: 222: endpos += 4;
  2655  0371  3004               	movlw	4
  2656  0372  07D4               	addwf	noolite_send@endpos,f
  2657  0373                     l1399:	
  2658                           
  2659                           ;noolite.c: 223: }
  2660                           ;noolite.c: 224: if (noo_address_type != 0) {
  2661  0373  0824               	movf	_noo_address_type,w
  2662  0374  1903               	btfsc	3,2
  2663  0375  2BDD               	goto	l1415
  2664                           
  2665                           ;noolite.c: 225: noo_send_format = (uint8_t) (noo_send_format | 0x10);
  2666  0376  1671               	bsf	noolite_send@noo_send_format,4
  2667                           
  2668                           ;noolite.c: 226: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  2669  0377  0854               	movf	noolite_send@endpos,w
  2670  0378  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2671  0379  0086               	movwf	6
  2672  037A  0187               	clrf	7
  2673  037B  0851               	movf	noolite_send@chn,w
  2674  037C  0720               	addwf	_startaddress,w
  2675  037D  0081               	movwf	1
  2676                           
  2677                           ;noolite.c: 227: endpos++;
  2678  037E  0AD4               	incf	noolite_send@endpos,f
  2679                           
  2680                           ;noolite.c: 228: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  2681  037F  0854               	movf	noolite_send@endpos,w
  2682  0380  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2683  0381  0086               	movwf	6
  2684  0382  0820               	movf	_startaddress,w
  2685  0383  00F3               	movwf	??_noolite_send
  2686  0384  0821               	movf	_startaddress+1,w
  2687  0385  00F4               	movwf	??_noolite_send+1
  2688  0386  0822               	movf	_startaddress+2,w
  2689  0387  00F5               	movwf	??_noolite_send+2
  2690  0388  0823               	movf	_startaddress+3,w
  2691  0389  00F6               	movwf	??_noolite_send+3
  2692  038A  0851               	movf	noolite_send@chn,w
  2693  038B  00F7               	movwf	??_noolite_send+4
  2694  038C  01F8               	clrf	??_noolite_send+5
  2695  038D  01F9               	clrf	??_noolite_send+6
  2696  038E  01FA               	clrf	??_noolite_send+7
  2697  038F  07F3               	addwf	??_noolite_send,f
  2698  0390  0878               	movf	??_noolite_send+5,w
  2699  0391  3DF4               	addwfc	??_noolite_send+1,f
  2700  0392  0879               	movf	??_noolite_send+6,w
  2701  0393  3DF5               	addwfc	??_noolite_send+2,f
  2702  0394  087A               	movf	??_noolite_send+7,w
  2703  0395  3DF6               	addwfc	??_noolite_send+3,f
  2704  0396  0874               	movf	??_noolite_send+1,w
  2705  0397  00F3               	movwf	??_noolite_send
  2706  0398  0875               	movf	??_noolite_send+2,w
  2707  0399  00F4               	movwf	??_noolite_send+1
  2708  039A  0876               	movf	??_noolite_send+3,w
  2709  039B  00F5               	movwf	??_noolite_send+2
  2710  039C  01F6               	clrf	??_noolite_send+3
  2711  039D  0873               	movf	??_noolite_send,w
  2712  039E  0081               	movwf	1
  2713                           
  2714                           ;noolite.c: 229: endpos++;
  2715  039F  0AD4               	incf	noolite_send@endpos,f
  2716                           
  2717                           ;noolite.c: 230: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 16);
  2718  03A0  0854               	movf	noolite_send@endpos,w
  2719  03A1  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2720  03A2  0086               	movwf	6
  2721  03A3  0820               	movf	_startaddress,w
  2722  03A4  00F3               	movwf	??_noolite_send
  2723  03A5  0821               	movf	_startaddress+1,w
  2724  03A6  00F4               	movwf	??_noolite_send+1
  2725  03A7  0822               	movf	_startaddress+2,w
  2726  03A8  00F5               	movwf	??_noolite_send+2
  2727  03A9  0823               	movf	_startaddress+3,w
  2728  03AA  00F6               	movwf	??_noolite_send+3
  2729  03AB  0851               	movf	noolite_send@chn,w
  2730  03AC  00F7               	movwf	??_noolite_send+4
  2731  03AD  01F8               	clrf	??_noolite_send+5
  2732  03AE  01F9               	clrf	??_noolite_send+6
  2733  03AF  01FA               	clrf	??_noolite_send+7
  2734  03B0  07F3               	addwf	??_noolite_send,f
  2735  03B1  0878               	movf	??_noolite_send+5,w
  2736  03B2  3DF4               	addwfc	??_noolite_send+1,f
  2737  03B3  0879               	movf	??_noolite_send+6,w
  2738  03B4  3DF5               	addwfc	??_noolite_send+2,f
  2739  03B5  087A               	movf	??_noolite_send+7,w
  2740  03B6  3DF6               	addwfc	??_noolite_send+3,f
  2741  03B7  0875               	movf	??_noolite_send+2,w
  2742  03B8  00F3               	movwf	??_noolite_send
  2743  03B9  0876               	movf	??_noolite_send+3,w
  2744  03BA  00F4               	movwf	??_noolite_send+1
  2745  03BB  01F5               	clrf	??_noolite_send+2
  2746  03BC  01F6               	clrf	??_noolite_send+3
  2747  03BD  0873               	movf	??_noolite_send,w
  2748  03BE  0081               	movwf	1
  2749                           
  2750                           ;noolite.c: 231: endpos++;
  2751  03BF  0AD4               	incf	noolite_send@endpos,f
  2752                           
  2753                           ;noolite.c: 232: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 24);
  2754  03C0  0854               	movf	noolite_send@endpos,w
  2755  03C1  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2756  03C2  0086               	movwf	6
  2757  03C3  0820               	movf	_startaddress,w
  2758  03C4  00F3               	movwf	??_noolite_send
  2759  03C5  0821               	movf	_startaddress+1,w
  2760  03C6  00F4               	movwf	??_noolite_send+1
  2761  03C7  0822               	movf	_startaddress+2,w
  2762  03C8  00F5               	movwf	??_noolite_send+2
  2763  03C9  0823               	movf	_startaddress+3,w
  2764  03CA  00F6               	movwf	??_noolite_send+3
  2765  03CB  0851               	movf	noolite_send@chn,w
  2766  03CC  00F7               	movwf	??_noolite_send+4
  2767  03CD  01F8               	clrf	??_noolite_send+5
  2768  03CE  01F9               	clrf	??_noolite_send+6
  2769  03CF  01FA               	clrf	??_noolite_send+7
  2770  03D0  07F3               	addwf	??_noolite_send,f
  2771  03D1  0878               	movf	??_noolite_send+5,w
  2772  03D2  3DF4               	addwfc	??_noolite_send+1,f
  2773  03D3  0879               	movf	??_noolite_send+6,w
  2774  03D4  3DF5               	addwfc	??_noolite_send+2,f
  2775  03D5  087A               	movf	??_noolite_send+7,w
  2776  03D6  3DF6               	addwfc	??_noolite_send+3,f
  2777  03D7  0876               	movf	??_noolite_send+3,w
  2778  03D8  00F3               	movwf	??_noolite_send
  2779  03D9  01F4               	clrf	??_noolite_send+1
  2780  03DA  01F5               	clrf	??_noolite_send+2
  2781  03DB  01F6               	clrf	??_noolite_send+3
  2782  03DC  2C04               	goto	L6
  2783  03DD                     l1415:	
  2784                           ;noolite.c: 234: } else {
  2785                           
  2786                           ;noolite.c: 233: endpos++;
  2787                           
  2788                           
  2789                           ;noolite.c: 235: noo_send_buffer[endpos] = (unsigned char) (startaddress + chn);
  2790  03DD  0854               	movf	noolite_send@endpos,w
  2791  03DE  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2792  03DF  0086               	movwf	6
  2793  03E0  0187               	clrf	7
  2794  03E1  0851               	movf	noolite_send@chn,w
  2795  03E2  0720               	addwf	_startaddress,w
  2796  03E3  0081               	movwf	1
  2797                           
  2798                           ;noolite.c: 236: endpos++;
  2799  03E4  0AD4               	incf	noolite_send@endpos,f
  2800                           
  2801                           ;noolite.c: 237: noo_send_buffer[endpos] = (unsigned char) ((startaddress + chn) >> 8);
  2802  03E5  0854               	movf	noolite_send@endpos,w
  2803  03E6  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2804  03E7  0086               	movwf	6
  2805  03E8  0820               	movf	_startaddress,w
  2806  03E9  00F3               	movwf	??_noolite_send
  2807  03EA  0821               	movf	_startaddress+1,w
  2808  03EB  00F4               	movwf	??_noolite_send+1
  2809  03EC  0822               	movf	_startaddress+2,w
  2810  03ED  00F5               	movwf	??_noolite_send+2
  2811  03EE  0823               	movf	_startaddress+3,w
  2812  03EF  00F6               	movwf	??_noolite_send+3
  2813  03F0  0851               	movf	noolite_send@chn,w
  2814  03F1  00F7               	movwf	??_noolite_send+4
  2815  03F2  01F8               	clrf	??_noolite_send+5
  2816  03F3  01F9               	clrf	??_noolite_send+6
  2817  03F4  01FA               	clrf	??_noolite_send+7
  2818  03F5  07F3               	addwf	??_noolite_send,f
  2819  03F6  0878               	movf	??_noolite_send+5,w
  2820  03F7  3DF4               	addwfc	??_noolite_send+1,f
  2821  03F8  0879               	movf	??_noolite_send+6,w
  2822  03F9  3DF5               	addwfc	??_noolite_send+2,f
  2823  03FA  087A               	movf	??_noolite_send+7,w
  2824  03FB  3DF6               	addwfc	??_noolite_send+3,f
  2825  03FC  0874               	movf	??_noolite_send+1,w
  2826  03FD  00F3               	movwf	??_noolite_send
  2827  03FE  0875               	movf	??_noolite_send+2,w
  2828  03FF  00F4               	movwf	??_noolite_send+1
  2829  0400  0876               	movf	??_noolite_send+3,w
  2830  0401  00F5               	movwf	??_noolite_send+2
  2831  0402  01F6               	clrf	??_noolite_send+3
  2832  0403  0873               	movf	??_noolite_send,w
  2833  0404                     L6:	
  2834  0404  0081               	movwf	1
  2835                           
  2836                           ;noolite.c: 238: endpos++;
  2837  0405  0AD4               	incf	noolite_send@endpos,f
  2838                           
  2839                           ;noolite.c: 239: }
  2840                           ;noolite.c: 240: noo_send_buffer[endpos] = noo_send_format;
  2841  0406  0854               	movf	noolite_send@endpos,w
  2842  0407  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2843  0408  0086               	movwf	6
  2844  0409  0187               	clrf	7
  2845  040A  0871               	movf	noolite_send@noo_send_format,w
  2846  040B  0081               	movwf	1
  2847                           
  2848                           ;noolite.c: 241: endpos++;
  2849  040C  0AD4               	incf	noolite_send@endpos,f
  2850                           
  2851                           ;noolite.c: 242: temp_send = 0;
  2852  040D  01D3               	clrf	noolite_send@temp_send
  2853                           
  2854                           ;noolite.c: 243: countbit = (unsigned char) (endpos * 8);
  2855  040E  0854               	movf	noolite_send@endpos,w
  2856  040F  0709               	addwf	9,w
  2857  0410  0709               	addwf	9,w
  2858  0411  0709               	addwf	9,w
  2859  0412  00D0               	movwf	noolite_send@countbit
  2860                           
  2861                           ;noolite.c: 244: countsend = (uint8_t) (startpos + 1);
  2862  0413  084F               	movf	noolite_send@startpos,w
  2863  0414  3E01               	addlw	1
  2864  0415  00D2               	movwf	noolite_send@countsend
  2865  0416                     l1453:	
  2866                           ;noolite.c: 245: while (countsend < countbit) {
  2867                           
  2868  0416  0020               	movlb	0	; select bank0
  2869  0417  0850               	movf	noolite_send@countbit,w
  2870  0418  0252               	subwf	noolite_send@countsend,w
  2871  0419  1803               	btfsc	3,0
  2872  041A  2C40               	goto	l1455
  2873                           
  2874                           ;noolite.c: 246: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  2875  041B  0852               	movf	noolite_send@countsend,w
  2876  041C  00F3               	movwf	??_noolite_send
  2877  041D  36F3               	lsrf	??_noolite_send,f
  2878  041E  36F3               	lsrf	??_noolite_send,f
  2879  041F  36F3               	lsrf	??_noolite_send,f
  2880  0420  0873               	movf	??_noolite_send,w
  2881  0421  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2882  0422  0086               	movwf	6
  2883  0423  3001               	movlw	1
  2884  0424  0187               	clrf	7
  2885  0425  00F4               	movwf	??_noolite_send+1
  2886  0426  0852               	movf	noolite_send@countsend,w
  2887  0427  3907               	andlw	7
  2888  0428  0A89               	incf	9,f
  2889  0429  2C2B               	goto	u834
  2890  042A                     u835:	
  2891  042A  35F4               	lslf	??_noolite_send+1,f
  2892  042B                     u834:	
  2893  042B  0B89               	decfsz	9,f
  2894  042C  2C2A               	goto	u835
  2895  042D  0874               	movf	??_noolite_send+1,w
  2896  042E  0501               	andwf	1,w
  2897  042F  1903               	btfsc	3,2
  2898  0430  2C33               	goto	l1435
  2899                           
  2900                           ;noolite.c: 247: temp_send = (uint8_t) (temp_send^0x01);
  2901  0431  3001               	movlw	1
  2902  0432  06D3               	xorwf	noolite_send@temp_send,f
  2903  0433                     l1435:	
  2904                           
  2905                           ;noolite.c: 248: }
  2906                           ;noolite.c: 249: tx_status &= (~(1<<4));
  2907  0433  122A               	bcf	_tx_status,4
  2908                           
  2909                           ;noolite.c: 250: if (((temp_send & (1<<0)) != 0)) {
  2910  0434  1C53               	btfss	noolite_send@temp_send,0
  2911  0435  2C39               	goto	l1443
  2912                           
  2913                           ;noolite.c: 251: temp_send = (uint8_t) (temp_send^0x18);
  2914  0436  3018               	movlw	24
  2915  0437  06D3               	xorwf	noolite_send@temp_send,f
  2916                           
  2917                           ;noolite.c: 252: tx_status |= (1<<4);
  2918  0438  162A               	bsf	_tx_status,4
  2919  0439                     l1443:	
  2920                           
  2921                           ;noolite.c: 253: }
  2922                           ;noolite.c: 254: temp_send = (uint8_t) (temp_send >> 1);
  2923  0439  36D3               	lsrf	noolite_send@temp_send,f
  2924                           
  2925                           ;noolite.c: 255: temp_send &= (~(1<<7));
  2926  043A  13D3               	bcf	noolite_send@temp_send,7
  2927                           
  2928                           ;noolite.c: 256: if (((tx_status & (1<<4)) != 0)) {
  2929  043B  1A2A               	btfsc	_tx_status,4
  2930                           
  2931                           ;noolite.c: 257: temp_send |= (1<<7);
  2932  043C  17D3               	bsf	noolite_send@temp_send,7
  2933                           
  2934                           ;noolite.c: 258: }
  2935                           ;noolite.c: 259: countsend++;
  2936  043D  0AD2               	incf	noolite_send@countsend,f
  2937  043E  0064               	clrwdt	;# 
  2938  043F  2C16               	goto	l1453
  2939  0440                     l1455:	
  2940                           
  2941                           ;noolite.c: 261: }
  2942                           ;noolite.c: 262: noo_send_buffer[endpos] = temp_send;
  2943  0440  0854               	movf	noolite_send@endpos,w
  2944  0441  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  2945  0442  0086               	movwf	6
  2946  0443  0187               	clrf	7
  2947  0444  0853               	movf	noolite_send@temp_send,w
  2948  0445  0081               	movwf	1
  2949  0446  30C0               	movlw	192
  2950                           
  2951                           ;noolite.c: 263: endpos++;
  2952  0447  0AD4               	incf	noolite_send@endpos,f
  2953                           
  2954                           ;noolite.c: 264: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  2955  0448  0021               	movlb	1	; select bank1
  2956  0449  0595               	andwf	21,f	;volatile
  2957  044A  3003               	movlw	3
  2958  044B  0495               	iorwf	21,f	;volatile
  2959                           
  2960                           ;noolite.c: 265: temp_send = 3;
  2961  044C  0020               	movlb	0	; select bank0
  2962  044D  00D3               	movwf	noolite_send@temp_send
  2963  044E  3026               	movlw	38
  2964                           
  2965                           ;noolite.c: 266: tx_status &= (~(1<<2));
  2966  044F  112A               	bcf	_tx_status,2
  2967                           
  2968                           ;noolite.c: 267: tx_status &= (~(1<<3));
  2969  0450  11AA               	bcf	_tx_status,3
  2970                           
  2971                           ;noolite.c: 268: tx_status |= (1<<0);
  2972  0451  142A               	bsf	_tx_status,0
  2973                           
  2974                           ;noolite.c: 269: tx_status |= (1<<5);
  2975  0452  16AA               	bsf	_tx_status,5
  2976                           
  2977                           ;noolite.c: 270: countsend = 0;
  2978  0453  01D2               	clrf	noolite_send@countsend
  2979                           
  2980                           ;noolite.c: 271: countbit = 38;
  2981  0454  00D0               	movwf	noolite_send@countbit
  2982  0455  0064               	clrwdt	;# 
  2983                           
  2984                           ;noolite.c: 273: LATCbits.LATC3 = 1;
  2985  0456  0022               	movlb	2	; select bank2
  2986  0457  158E               	bsf	14,3	;volatile
  2987                           
  2988                           ;noolite.c: 274: _delay((unsigned long)((15)*(8000000/4000.0)));
  2989  0458  3027               	movlw	39
  2990  0459  00F3               	movwf	??_noolite_send
  2991  045A  30F5               	movlw	245
  2992  045B                     u1647:	
  2993  045B  0B89               	decfsz	9,f
  2994  045C  2C5B               	goto	u1647
  2995  045D  0BF3               	decfsz	??_noolite_send,f
  2996  045E  2C5B               	goto	u1647
  2997  045F  0000               	nop
  2998                           
  2999                           ;noolite.c: 275: LATCbits.LATC3 = 0;
  3000  0460  0022               	movlb	2	; select bank2
  3001  0461  118E               	bcf	14,3	;volatile
  3002                           
  3003                           ;noolite.c: 276: TMR0 = 196;
  3004  0462  30C4               	movlw	196
  3005  0463  0020               	movlb	0	; select bank0
  3006  0464  0095               	movwf	21	;volatile
  3007                           
  3008                           ;noolite.c: 277: TMR0IF = 0;
  3009  0465  110B               	bcf	11,2	;volatile
  3010                           
  3011                           ;noolite.c: 278: TMR0IE = 0;
  3012  0466  128B               	bcf	11,5	;volatile
  3013  0467                     l244:	
  3014                           ;noolite.c: 279: while (((tx_status & (1<<3)) == 0)) {
  3015                           
  3016  0467  19AA               	btfsc	_tx_status,3
  3017  0468  2CC1               	goto	l255
  3018                           
  3019                           ;noolite.c: 280: if (TMR0IF) {
  3020  0469  1D0B               	btfss	11,2	;volatile
  3021  046A  2C67               	goto	l244
  3022                           
  3023                           ;noolite.c: 281: __nop();
  3024  046B  0000               	nop
  3025                           
  3026                           ;noolite.c: 282: if (countsend < countbit) {
  3027  046C  0020               	movlb	0	; select bank0
  3028  046D  0850               	movf	noolite_send@countbit,w
  3029  046E  0252               	subwf	noolite_send@countsend,w
  3030  046F  1803               	skipnc
  3031  0470  2C88               	goto	l247
  3032                           
  3033                           ;noolite.c: 283: if (((tx_status & (1<<2)) == 0)) {
  3034  0471  192A               	btfsc	_tx_status,2
  3035  0472  2C7F               	goto	l1503
  3036                           
  3037                           ;noolite.c: 284: if (((tx_status & (1<<0)) == 0)) {
  3038  0473  182A               	btfsc	_tx_status,0
  3039  0474  2C78               	goto	l249
  3040                           
  3041                           ;noolite.c: 285: LATAbits.LATA5 = 1;
  3042  0475  0022               	movlb	2	; select bank2
  3043  0476  168C               	bsf	12,5	;volatile
  3044                           
  3045                           ;noolite.c: 286: } else {
  3046  0477  2C7A               	goto	l1499
  3047  0478                     l249:	
  3048                           
  3049                           ;noolite.c: 287: LATAbits.LATA5 = 0;
  3050  0478  0022               	movlb	2	; select bank2
  3051  0479  128C               	bcf	12,5	;volatile
  3052  047A                     l1499:	
  3053                           
  3054                           ;noolite.c: 288: }
  3055                           ;noolite.c: 289: TMR0 = 196;
  3056  047A  30C4               	movlw	196
  3057  047B  0020               	movlb	0	; select bank0
  3058  047C  0095               	movwf	21	;volatile
  3059                           
  3060                           ;noolite.c: 290: tx_status |= (1<<2);
  3061  047D  152A               	bsf	_tx_status,2
  3062                           
  3063                           ;noolite.c: 291: } else {
  3064  047E  2CA4               	goto	l252
  3065  047F                     l1503:	
  3066                           
  3067                           ;noolite.c: 292: LATA ^= (1<<5);
  3068  047F  3020               	movlw	32
  3069  0480  0022               	movlb	2	; select bank2
  3070  0481  068C               	xorwf	12,f	;volatile
  3071                           
  3072                           ;noolite.c: 293: TMR0 = 196;
  3073  0482  30C4               	movlw	196
  3074  0483  0020               	movlb	0	; select bank0
  3075  0484  0095               	movwf	21	;volatile
  3076                           
  3077                           ;noolite.c: 294: tx_status &= (~(1<<2));
  3078  0485  112A               	bcf	_tx_status,2
  3079                           
  3080                           ;noolite.c: 295: countsend++;
  3081  0486  0AD2               	incf	noolite_send@countsend,f
  3082  0487  2CA4               	goto	l252
  3083  0488                     l247:	
  3084                           
  3085                           ;noolite.c: 298: LATAbits.LATA5 = 0;
  3086  0488  0022               	movlb	2	; select bank2
  3087  0489  128C               	bcf	12,5	;volatile
  3088                           
  3089                           ;noolite.c: 299: OPTION_REG &= 0b11000000; OPTION_REG |= 0b00000011;
  3090  048A  30C0               	movlw	192
  3091  048B  0021               	movlb	1	; select bank1
  3092  048C  0595               	andwf	21,f	;volatile
  3093  048D  3003               	movlw	3
  3094  048E  0495               	iorwf	21,f	;volatile
  3095                           
  3096                           ;noolite.c: 300: TMR0 = 67;
  3097  048F  3043               	movlw	67
  3098  0490  0020               	movlb	0	; select bank0
  3099  0491  0095               	movwf	21	;volatile
  3100  0492  0064               	clrwdt	;# 
  3101                           
  3102                           ;noolite.c: 302: tx_status &= (~(1<<5));
  3103  0493  0020               	movlb	0	; select bank0
  3104  0494  12AA               	bcf	_tx_status,5
  3105                           
  3106                           ;noolite.c: 303: countsend = startpos;
  3107  0495  084F               	movf	noolite_send@startpos,w
  3108  0496  00D2               	movwf	noolite_send@countsend
  3109                           
  3110                           ;noolite.c: 304: countbit = (uint8_t) (endpos * 8);
  3111  0497  0854               	movf	noolite_send@endpos,w
  3112  0498  0709               	addwf	9,w
  3113  0499  0709               	addwf	9,w
  3114  049A  0709               	addwf	9,w
  3115  049B  00D0               	movwf	noolite_send@countbit
  3116                           
  3117                           ;noolite.c: 305: if (temp_send != 0) {
  3118  049C  0853               	movf	noolite_send@temp_send,w
  3119  049D  1903               	btfsc	3,2
  3120  049E  2CA1               	goto	l1519
  3121                           
  3122                           ;noolite.c: 306: temp_send--;
  3123  049F  03D3               	decf	noolite_send@temp_send,f
  3124                           
  3125                           ;noolite.c: 307: } else {
  3126  04A0  2CA4               	goto	l252
  3127  04A1                     l1519:	
  3128                           
  3129                           ;noolite.c: 308: TMR0 = 0;
  3130  04A1  0195               	clrf	21	;volatile
  3131                           
  3132                           ;noolite.c: 309: tx_status |= (1<<3);
  3133  04A2  15AA               	bsf	_tx_status,3
  3134                           
  3135                           ;noolite.c: 310: break;
  3136  04A3  2CC1               	goto	l255
  3137  04A4                     l252:	
  3138                           
  3139                           ;noolite.c: 311: }
  3140                           ;noolite.c: 312: }
  3141                           ;noolite.c: 313: if (((tx_status & (1<<5)) == 0)) {
  3142  04A4  1AAA               	btfsc	_tx_status,5
  3143  04A5  2CBF               	goto	l256
  3144                           
  3145                           ;noolite.c: 314: if (((noo_send_buffer[(countsend / 8)] & (1<<(countsend % 8))) != 0)) {
  3146  04A6  0852               	movf	noolite_send@countsend,w
  3147  04A7  00F3               	movwf	??_noolite_send
  3148  04A8  36F3               	lsrf	??_noolite_send,f
  3149  04A9  36F3               	lsrf	??_noolite_send,f
  3150  04AA  36F3               	lsrf	??_noolite_send,f
  3151  04AB  0873               	movf	??_noolite_send,w
  3152  04AC  3E43               	addlw	(low (noolite_send@noo_send_buffer| 0))& (0+255)
  3153  04AD  0086               	movwf	6
  3154  04AE  3001               	movlw	1
  3155  04AF  0187               	clrf	7
  3156  04B0  00F4               	movwf	??_noolite_send+1
  3157  04B1  0852               	movf	noolite_send@countsend,w
  3158  04B2  3907               	andlw	7
  3159  04B3  0A89               	incf	9,f
  3160  04B4  2CB6               	goto	u944
  3161  04B5                     u945:	
  3162  04B5  35F4               	lslf	??_noolite_send+1,f
  3163  04B6                     u944:	
  3164  04B6  0B89               	decfsz	9,f
  3165  04B7  2CB5               	goto	u945
  3166  04B8  0874               	movf	??_noolite_send+1,w
  3167  04B9  0501               	andwf	1,w
  3168  04BA  1903               	btfsc	3,2
  3169  04BB  2CBE               	goto	l257
  3170                           
  3171                           ;noolite.c: 315: tx_status |= (1<<0);
  3172  04BC  142A               	bsf	_tx_status,0
  3173                           
  3174                           ;noolite.c: 316: } else {
  3175  04BD  2CBF               	goto	l256
  3176  04BE                     l257:	
  3177                           
  3178                           ;noolite.c: 317: tx_status &= (~(1<<0));
  3179  04BE  102A               	bcf	_tx_status,0
  3180  04BF                     l256:	
  3181                           
  3182                           ;noolite.c: 318: }
  3183                           ;noolite.c: 319: }
  3184                           ;noolite.c: 320: TMR0IF = 0;
  3185  04BF  110B               	bcf	11,2	;volatile
  3186  04C0  2C67               	goto	l244
  3187  04C1                     l255:	
  3188                           
  3189                           ;noolite.c: 321: }
  3190                           ;noolite.c: 322: }
  3191                           ;noolite.c: 323: TMR0IF = 0;
  3192  04C1  110B               	bcf	11,2	;volatile
  3193                           
  3194                           ;noolite.c: 324: LATAbits.LATA5 = 0;
  3195  04C2  0022               	movlb	2	; select bank2
  3196  04C3  128C               	bcf	12,5	;volatile
  3197  04C4  0008               	return
  3198  04C5                     __end_of_noolite_send:	
  3199                           
  3200                           	psect	text5
  3201  0198                     __ptext5:	
  3202 ;; *************** function _Init_TypeFromFlash *****************
  3203 ;; Defined at:
  3204 ;;		line 172 in file "main.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      unsigned char 
  3211 ;; Registers used:
  3212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/2
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMMON   BANK0   BANK1
  3218 ;;      Params:         0       0       0
  3219 ;;      Locals:         0       0       0
  3220 ;;      Temps:          1       0       0
  3221 ;;      Totals:         1       0       0
  3222 ;;Total ram usage:        1 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; This function calls:
  3225 ;;		Nothing
  3226 ;; This function is called by:
  3227 ;;		_main
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           
  3232                           ;psect for function _Init_TypeFromFlash
  3233  0198                     _Init_TypeFromFlash:	
  3234                           
  3235                           ;main.c: 173: if (((Type[0] >> 8) == 0x5A) && ((Type[0] & 0xFF) < 4)) {
  3236                           
  3237                           ;incstack = 0
  3238                           ; Regs used in _Init_TypeFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3239  0198  30C1               	movlw	193
  3240  0199  0084               	movwf	4
  3241  019A  3087               	movlw	135
  3242  019B  0085               	movwf	5
  3243  019C  0012               	moviw fsr0++
  3244  019D  3A5A               	xorlw	90
  3245  019E  1D03               	btfss	3,2
  3246  019F  3400               	retlw	0
  3247  01A0  30C0               	movlw	192
  3248  01A1  0084               	movwf	4
  3249  01A2  3087               	movlw	135
  3250  01A3  0085               	movwf	5
  3251  01A4  0800               	movf	0,w	;code access
  3252  01A5  00F0               	movwf	??_Init_TypeFromFlash
  3253  01A6  3004               	movlw	4
  3254  01A7  0270               	subwf	??_Init_TypeFromFlash,w
  3255  01A8  1803               	skipnc
  3256  01A9  3400               	retlw	0
  3257                           
  3258                           ;main.c: 174: return (Type[0] & 0xFF);
  3259  01AA  0800               	movf	0,w	;code access
  3260  01AB  0008               	return
  3261  01AC                     __end_of_Init_TypeFromFlash:	
  3262                           ;main.c: 176: return 0;
  3263                           
  3264                           
  3265                           	psect	text6
  3266  0219                     __ptext6:	
  3267 ;; *************** function _Init_TxStatusFromFlash *****************
  3268 ;; Defined at:
  3269 ;;		line 180 in file "main.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;		None
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  cellNum         1    4[COMMON] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      unsigned char 
  3276 ;; Registers used:
  3277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3278 ;; Tracked objects:
  3279 ;;		On entry : 1F/0
  3280 ;;		On exit  : 1F/0
  3281 ;;		Unchanged: 1F/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1
  3283 ;;      Params:         0       0       0
  3284 ;;      Locals:         1       0       0
  3285 ;;      Temps:          4       0       0
  3286 ;;      Totals:         5       0       0
  3287 ;;Total ram usage:        5 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; This function calls:
  3290 ;;		Nothing
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function _Init_TxStatusFromFlash
  3298  0219                     _Init_TxStatusFromFlash:	
  3299                           
  3300                           ;main.c: 181: for (uint8_t cellNum = 0; cellNum < 8; cellNum++) {
  3301                           
  3302                           ;incstack = 0
  3303                           ; Regs used in _Init_TxStatusFromFlash: [wreg-fsr0h+status,2+status,0+pclath]
  3304  0219  01F4               	clrf	Init_TxStatusFromFlash@cellNum
  3305  021A                     l1563:	
  3306                           
  3307                           ;main.c: 182: if (TxStatus[cellNum] == 0xFFFF) {
  3308  021A  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3309  021B  00F0               	movwf	??_Init_TxStatusFromFlash
  3310  021C  30D0               	movlw	208
  3311  021D  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3312  021E  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3313  021F  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3314  0220  0770               	addwf	??_Init_TxStatusFromFlash,w
  3315  0221  0084               	movwf	4
  3316  0222  3087               	movlw	135
  3317  0223  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3318  0224  0085               	movwf	5
  3319  0225  0012               	moviw fsr0++
  3320  0226  3AFF               	xorlw	255
  3321  0227  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3322  0228  0012               	moviw fsr0++
  3323  0229  3AFF               	xorlw	255
  3324  022A  04F2               	iorwf	??_Init_TxStatusFromFlash+2,f
  3325  022B  1D03               	btfss	3,2
  3326  022C  2A63               	goto	l1585
  3327                           
  3328                           ;main.c: 183: if (cellNum > 0) {
  3329  022D  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3330  022E  1903               	btfsc	3,2
  3331  022F  3400               	retlw	0
  3332                           
  3333                           ;main.c: 184: if (((TxStatus[cellNum - 1] >> 8) == 0x5A) && ((TxStatus[cellNum - 1] & 0x
      +                          FF) < 3)) {
  3334  0230  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3335  0231  00F0               	movwf	??_Init_TxStatusFromFlash
  3336  0232  30CE               	movlw	206
  3337  0233  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3338  0234  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3339  0235  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3340  0236  0770               	addwf	??_Init_TxStatusFromFlash,w
  3341  0237  0084               	movwf	4
  3342  0238  3087               	movlw	135
  3343  0239  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3344  023A  0085               	movwf	5
  3345  023B  3F00               	moviw [0]fsr0
  3346  023C  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3347  023D  3F01               	moviw [1]fsr0
  3348  023E  00F3               	movwf	??_Init_TxStatusFromFlash+3
  3349  023F  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3350  0240  305A               	movlw	90
  3351  0241  01F3               	clrf	??_Init_TxStatusFromFlash+3
  3352  0242  0672               	xorwf	??_Init_TxStatusFromFlash+2,w
  3353  0243  1D03               	btfss	3,2
  3354  0244  3400               	retlw	0
  3355  0245  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3356  0246  00F0               	movwf	??_Init_TxStatusFromFlash
  3357  0247  30CE               	movlw	206
  3358  0248  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3359  0249  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3360  024A  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3361  024B  0770               	addwf	??_Init_TxStatusFromFlash,w
  3362  024C  0084               	movwf	4
  3363  024D  3087               	movlw	135
  3364  024E  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3365  024F  0085               	movwf	5
  3366  0250  0800               	movf	0,w	;code access
  3367  0251  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3368  0252  3003               	movlw	3
  3369  0253  0272               	subwf	??_Init_TxStatusFromFlash+2,w
  3370  0254  1803               	skipnc
  3371  0255  3400               	retlw	0
  3372                           
  3373                           ;main.c: 185: return TxStatus[cellNum - 1];
  3374  0256  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3375  0257  00F0               	movwf	??_Init_TxStatusFromFlash
  3376  0258  30CE               	movlw	206
  3377  0259  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3378  025A  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3379  025B  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3380  025C  0770               	addwf	??_Init_TxStatusFromFlash,w
  3381  025D  0084               	movwf	4
  3382  025E  3087               	movlw	135
  3383  025F  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3384  0260  0085               	movwf	5
  3385  0261  0800               	movf	0,w	;code access
  3386  0262  0008               	return
  3387  0263                     l1585:	
  3388                           ;main.c: 187: return 0;
  3389                           
  3390                           
  3391                           ;main.c: 193: if (cellNum == 7) {
  3392  0263  3007               	movlw	7
  3393  0264  0674               	xorwf	Init_TxStatusFromFlash@cellNum,w
  3394  0265  1D03               	btfss	3,2
  3395  0266  2A9A               	goto	l1601
  3396                           
  3397                           ;main.c: 194: if (((TxStatus[cellNum] >> 8) == 0x5A) && ((TxStatus[cellNum] & 0xFF) < 3)
      +                          ) {
  3398  0267  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3399  0268  00F0               	movwf	??_Init_TxStatusFromFlash
  3400  0269  30D0               	movlw	208
  3401  026A  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3402  026B  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3403  026C  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3404  026D  0770               	addwf	??_Init_TxStatusFromFlash,w
  3405  026E  0084               	movwf	4
  3406  026F  3087               	movlw	135
  3407  0270  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3408  0271  0085               	movwf	5
  3409  0272  3F00               	moviw [0]fsr0
  3410  0273  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3411  0274  3F01               	moviw [1]fsr0
  3412  0275  00F3               	movwf	??_Init_TxStatusFromFlash+3
  3413  0276  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3414  0277  305A               	movlw	90
  3415  0278  01F3               	clrf	??_Init_TxStatusFromFlash+3
  3416  0279  0672               	xorwf	??_Init_TxStatusFromFlash+2,w
  3417  027A  1D03               	btfss	3,2
  3418  027B  3400               	retlw	0
  3419  027C  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3420  027D  00F0               	movwf	??_Init_TxStatusFromFlash
  3421  027E  30D0               	movlw	208
  3422  027F  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3423  0280  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3424  0281  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3425  0282  0770               	addwf	??_Init_TxStatusFromFlash,w
  3426  0283  0084               	movwf	4
  3427  0284  3087               	movlw	135
  3428  0285  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3429  0286  0085               	movwf	5
  3430  0287  0800               	movf	0,w	;code access
  3431  0288  00F2               	movwf	??_Init_TxStatusFromFlash+2
  3432  0289  3003               	movlw	3
  3433  028A  0272               	subwf	??_Init_TxStatusFromFlash+2,w
  3434  028B  1803               	skipnc
  3435  028C  3400               	retlw	0
  3436                           
  3437                           ;main.c: 195: return TxStatus[cellNum];
  3438  028D  0874               	movf	Init_TxStatusFromFlash@cellNum,w
  3439  028E  00F0               	movwf	??_Init_TxStatusFromFlash
  3440  028F  30D0               	movlw	208
  3441  0290  01F1               	clrf	??_Init_TxStatusFromFlash+1
  3442  0291  35F0               	lslf	??_Init_TxStatusFromFlash,f
  3443  0292  0DF1               	rlf	??_Init_TxStatusFromFlash+1,f
  3444  0293  0770               	addwf	??_Init_TxStatusFromFlash,w
  3445  0294  0084               	movwf	4
  3446  0295  3087               	movlw	135
  3447  0296  3D71               	addwfc	??_Init_TxStatusFromFlash+1,w
  3448  0297  0085               	movwf	5
  3449  0298  0800               	movf	0,w	;code access
  3450  0299  0008               	return
  3451  029A                     l1601:	
  3452  029A  3008               	movlw	8
  3453  029B  0AF4               	incf	Init_TxStatusFromFlash@cellNum,f
  3454  029C  0274               	subwf	Init_TxStatusFromFlash@cellNum,w
  3455  029D  1803               	btfsc	3,0
  3456  029E  3400               	retlw	0
  3457  029F  2A1A               	goto	l1563
  3458  02A0                     __end_of_Init_TxStatusFromFlash:	
  3459                           
  3460                           	psect	text7
  3461  0175                     __ptext7:	
  3462 ;; *************** function _Init_IO *****************
  3463 ;; Defined at:
  3464 ;;		line 108 in file "main.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;		None
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2
  3473 ;; Tracked objects:
  3474 ;;		On entry : B1F/0
  3475 ;;		On exit  : B1F/2
  3476 ;;		Unchanged: B00/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1
  3478 ;;      Params:         0       0       0
  3479 ;;      Locals:         0       0       0
  3480 ;;      Temps:          0       0       0
  3481 ;;      Totals:         0       0       0
  3482 ;;Total ram usage:        0 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; This function calls:
  3485 ;;		Nothing
  3486 ;; This function is called by:
  3487 ;;		_main
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           
  3492                           ;psect for function _Init_IO
  3493  0175                     _Init_IO:	
  3494                           
  3495                           ;main.c: 109: OPTION_REGbits.nWPUEN = 0;
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _Init_IO: [wreg+status,2]
  3499  0175  0021               	movlb	1	; select bank1
  3500  0176  1395               	bcf	21,7	;volatile
  3501                           
  3502                           ;main.c: 110: TRISA = 0x1F;
  3503  0177  301F               	movlw	31
  3504  0178  008C               	movwf	12	;volatile
  3505                           
  3506                           ;main.c: 111: ANSELA = 0;
  3507  0179  0023               	movlb	3	; select bank3
  3508  017A  018C               	clrf	12	;volatile
  3509                           
  3510                           ;main.c: 112: WPUA = 0x08;
  3511  017B  3008               	movlw	8
  3512  017C  0024               	movlb	4	; select bank4
  3513  017D  008C               	movwf	12	;volatile
  3514                           
  3515                           ;main.c: 114: TRISC = 0x00;
  3516  017E  0021               	movlb	1	; select bank1
  3517  017F  018E               	clrf	14	;volatile
  3518                           
  3519                           ;main.c: 115: ANSELC = 0;
  3520  0180  0023               	movlb	3	; select bank3
  3521  0181  018E               	clrf	14	;volatile
  3522                           
  3523                           ;main.c: 116: LATC = 0x00;
  3524  0182  0022               	movlb	2	; select bank2
  3525  0183  018E               	clrf	14	;volatile
  3526  0184  0008               	return
  3527  0185                     __end_of_Init_IO:	
  3528                           
  3529                           	psect	text8
  3530  0168                     __ptext8:	
  3531 ;; *************** function _Init_CLK *****************
  3532 ;; Defined at:
  3533 ;;		line 77 in file "main.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;		None
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;		None
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  1    wreg      void 
  3540 ;; Registers used:
  3541 ;;		wreg, status,2, status,0
  3542 ;; Tracked objects:
  3543 ;;		On entry : B1F/2
  3544 ;;		On exit  : B1F/1
  3545 ;;		Unchanged: B00/0
  3546 ;; Data sizes:     COMMON   BANK0   BANK1
  3547 ;;      Params:         0       0       0
  3548 ;;      Locals:         0       0       0
  3549 ;;      Temps:          0       0       0
  3550 ;;      Totals:         0       0       0
  3551 ;;Total ram usage:        0 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_main
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           
  3561                           ;psect for function _Init_CLK
  3562  0168                     _Init_CLK:	
  3563                           
  3564                           ;main.c: 80: OSCCONbits.IRCF = 0b1110;
  3565                           
  3566                           ;incstack = 0
  3567                           ; Regs used in _Init_CLK: [wreg+status,2+status,0]
  3568  0168  0021               	movlb	1	; select bank1
  3569  0169  0819               	movf	25,w	;volatile
  3570  016A  3987               	andlw	-121
  3571  016B  3870               	iorlw	112
  3572  016C  0099               	movwf	25	;volatile
  3573                           
  3574                           ;main.c: 96: WDTCONbits.WDTPS = 0b01011;
  3575  016D  0817               	movf	23,w	;volatile
  3576  016E  39C1               	andlw	-63
  3577  016F  3816               	iorlw	22
  3578  0170  0097               	movwf	23	;volatile
  3579                           
  3580                           ;main.c: 103: WDTCONbits.SWDTEN = 1;
  3581  0171  1417               	bsf	23,0	;volatile
  3582  0172                     l49:	
  3583                           ;main.c: 104: while (!OSCSTATbits.HFIOFR) {
  3584                           
  3585  0172  1A1A               	btfsc	26,4	;volatile
  3586  0173  0008               	return
  3587  0174  2972               	goto	l49
  3588  0175                     __end_of_Init_CLK:	
  3589                           
  3590                           	psect	text9
  3591  0185                     __ptext9:	
  3592 ;; *************** function _FlashWrite *****************
  3593 ;; Defined at:
  3594 ;;		line 41 in file "FLASH.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;  addr            2    0[COMMON] unsigned int 
  3597 ;;  flash_data      2    2[COMMON] unsigned int 
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  1    wreg      void 
  3602 ;; Registers used:
  3603 ;;		wreg, status,2, status,0, pclath, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 1C/0
  3606 ;;		On exit  : 1F/3
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMMON   BANK0   BANK1
  3609 ;;      Params:         4       0       0
  3610 ;;      Locals:         0       0       0
  3611 ;;      Temps:          0       0       0
  3612 ;;      Totals:         4       0       0
  3613 ;;Total ram usage:        4 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    1
  3616 ;; This function calls:
  3617 ;;		_FlashUnlock
  3618 ;; This function is called by:
  3619 ;;		_main
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           
  3624                           ;psect for function _FlashWrite
  3625  0185                     _FlashWrite:	
  3626                           
  3627                           ;FLASH.c: 42: PMCON1bits.CFGS = 0;
  3628                           
  3629                           ;incstack = 0
  3630                           ; Regs used in _FlashWrite: [wreg+status,2+status,0+pclath+cstack]
  3631  0185  0023               	movlb	3	; select bank3
  3632  0186  1315               	bcf	21,6	;volatile
  3633                           
  3634                           ;FLASH.c: 43: PMADRH = (unsigned char) (addr >> 8);
  3635  0187  0871               	movf	FlashWrite@addr+1,w
  3636  0188  0092               	movwf	18	;volatile
  3637                           
  3638                           ;FLASH.c: 44: PMADRL = (unsigned char) (addr);
  3639  0189  0870               	movf	FlashWrite@addr,w
  3640  018A  0091               	movwf	17	;volatile
  3641                           
  3642                           ;FLASH.c: 45: PMCON1bits.FREE = 0;
  3643  018B  1215               	bcf	21,4	;volatile
  3644                           
  3645                           ;FLASH.c: 46: PMCON1bits.LWLO = 1;
  3646  018C  1695               	bsf	21,5	;volatile
  3647                           
  3648                           ;FLASH.c: 47: PMCON1bits.WREN = 1;
  3649  018D  1515               	bsf	21,2	;volatile
  3650                           
  3651                           ;FLASH.c: 48: PMDATH = (unsigned char) (flash_data >> 8);
  3652  018E  0873               	movf	FlashWrite@flash_data+1,w
  3653  018F  0094               	movwf	20	;volatile
  3654                           
  3655                           ;FLASH.c: 49: PMDATL = (unsigned char) flash_data;
  3656  0190  0872               	movf	FlashWrite@flash_data,w
  3657  0191  0093               	movwf	19	;volatile
  3658                           
  3659                           ;FLASH.c: 50: PMCON1bits.LWLO = 0;
  3660  0192  1295               	bcf	21,5	;volatile
  3661                           
  3662                           ;FLASH.c: 51: INTCONbits.GIE = 0;
  3663  0193  138B               	bcf	11,7	;volatile
  3664                           
  3665                           ;FLASH.c: 52: FlashUnlock();
  3666  0194  2155               	fcall	_FlashUnlock
  3667                           
  3668                           ;FLASH.c: 53: INTCONbits.GIE = 1;
  3669  0195  178B               	bsf	11,7	;volatile
  3670                           
  3671                           ;FLASH.c: 54: PMCON1bits.WREN = 0;
  3672  0196  1115               	bcf	21,2	;volatile
  3673  0197  0008               	return
  3674  0198                     __end_of_FlashWrite:	
  3675                           
  3676                           	psect	text10
  3677  015B                     __ptext10:	
  3678 ;; *************** function _FlashEraseRow *****************
  3679 ;; Defined at:
  3680 ;;		line 29 in file "FLASH.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  rowAddr         2    0[COMMON] unsigned int 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0, pclath, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/2
  3691 ;;		On exit  : 1F/3
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1
  3694 ;;      Params:         2       0       0
  3695 ;;      Locals:         0       0       0
  3696 ;;      Temps:          0       0       0
  3697 ;;      Totals:         2       0       0
  3698 ;;Total ram usage:        2 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    1
  3701 ;; This function calls:
  3702 ;;		_FlashUnlock
  3703 ;; This function is called by:
  3704 ;;		_main
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _FlashEraseRow
  3710  015B                     _FlashEraseRow:	
  3711                           
  3712                           ;FLASH.c: 30: PMCON1bits.CFGS = 0;
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _FlashEraseRow: [wreg+status,2+status,0+pclath+cstack]
  3716  015B  0023               	movlb	3	; select bank3
  3717  015C  1315               	bcf	21,6	;volatile
  3718                           
  3719                           ;FLASH.c: 31: PMADRH = (unsigned char) (rowAddr >> 8);
  3720  015D  0871               	movf	FlashEraseRow@rowAddr+1,w
  3721  015E  0092               	movwf	18	;volatile
  3722                           
  3723                           ;FLASH.c: 32: PMADRL = (unsigned char) (rowAddr);
  3724  015F  0870               	movf	FlashEraseRow@rowAddr,w
  3725  0160  0091               	movwf	17	;volatile
  3726                           
  3727                           ;FLASH.c: 33: PMCON1bits.FREE = 1;
  3728  0161  1615               	bsf	21,4	;volatile
  3729                           
  3730                           ;FLASH.c: 34: PMCON1bits.WREN = 1;
  3731  0162  1515               	bsf	21,2	;volatile
  3732                           
  3733                           ;FLASH.c: 35: INTCONbits.GIE = 0;
  3734  0163  138B               	bcf	11,7	;volatile
  3735                           
  3736                           ;FLASH.c: 36: FlashUnlock();
  3737  0164  2155               	fcall	_FlashUnlock
  3738                           
  3739                           ;FLASH.c: 37: INTCONbits.GIE = 1;
  3740  0165  178B               	bsf	11,7	;volatile
  3741                           
  3742                           ;FLASH.c: 38: PMCON1bits.WREN = 0;
  3743  0166  1115               	bcf	21,2	;volatile
  3744  0167  0008               	return
  3745  0168                     __end_of_FlashEraseRow:	
  3746                           
  3747                           	psect	text11
  3748  0155                     __ptext11:	
  3749 ;; *************** function _FlashUnlock *****************
  3750 ;; Defined at:
  3751 ;;		line 23 in file "FLASH.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg
  3760 ;; Tracked objects:
  3761 ;;		On entry : 1F/3
  3762 ;;		On exit  : 1F/3
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1
  3765 ;;      Params:         0       0       0
  3766 ;;      Locals:         0       0       0
  3767 ;;      Temps:          0       0       0
  3768 ;;      Totals:         0       0       0
  3769 ;;Total ram usage:        0 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; This function calls:
  3772 ;;		Nothing
  3773 ;; This function is called by:
  3774 ;;		_FlashEraseRow
  3775 ;;		_FlashWrite
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           
  3780                           ;psect for function _FlashUnlock
  3781  0155                     _FlashUnlock:	
  3782                           
  3783                           ;FLASH.c: 24: PMCON2 = 0x55;
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in _FlashUnlock: [wreg]
  3787  0155  3055               	movlw	85
  3788  0156  0096               	movwf	22	;volsfr
  3789                           
  3790                           ;FLASH.c: 25: PMCON2 = 0xAA;
  3791  0157  30AA               	movlw	170
  3792  0158  0096               	movwf	22	;volsfr
  3793                           
  3794                           ;FLASH.c: 26: PMCON1bits.WR = 1;
  3795  0159  1495               	bsf	21,1	;volatile
  3796  015A  0008               	return
  3797  015B                     __end_of_FlashUnlock:	
  3798  007E                     btemp	set	126	;btemp
  3799  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      65
    BANK1            32      0       0

Pointer List with Targets:

    noolite_send@data	PTR unsigned char  size(1) Largest target is 4
		 -> noo_send_data(BANK0[4]), 

    KeyLongHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 

    KeyOffHandler@key	PTR struct . size(1) Largest target is 20
		 -> Keys(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_KeyLongHandler
    _main->_KeyOffHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK0

    _main->_KeyLongHandler
    _main->_KeyOffHandler
    _KeyOffHandler->_noolite_send
    _KeyLongHandler->_noolite_send

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   15348
                                             19 BANK0     11    11      0
                      _FlashEraseRow
                         _FlashWrite
                           _Init_CLK
                            _Init_IO
             _Init_TxStatusFromFlash
                 _Init_TypeFromFlash
                     _KeyLongHandler
                      _KeyOffHandler
                            _RF_Init
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _RF_Init                                              7     7      0       0
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _KeyOffHandler                                        4     2      2    4278
                                             11 COMMON     3     1      2
                                             18 BANK0      1     1      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _KeyLongHandler                                       4     1      3    4842
                                             11 COMMON     3     0      3
                                             18 BANK0      1     1      0
                       _noolite_send
 ---------------------------------------------------------------------------------
 (1) _noolite_send                                        29    26      3    3312
                                              0 COMMON    11     8      3
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _Init_TypeFromFlash                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_TxStatusFromFlash                               5     5      0     244
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_CLK                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlashWrite                                           4     0      4     858
                                              0 COMMON     4     0      4
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (1) _FlashEraseRow                                        2     0      2     173
                                              0 COMMON     2     0      2
                        _FlashUnlock
 ---------------------------------------------------------------------------------
 (2) _FlashUnlock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FlashEraseRow
     _FlashUnlock
   _FlashWrite
     _FlashUnlock
   _Init_CLK
   _Init_IO
   _Init_TxStatusFromFlash
   _Init_TypeFromFlash
   _KeyLongHandler
     _noolite_send
   _KeyOffHandler
     _noolite_send
   _RF_Init
   _noolite_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1E      41       6       81.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Sep 05 22:44:32 2018

                     __CFG_CP$ON 0000                               l49 0172                              l120 0526  
                            l131 0595                              l109 051C                              l230 034D  
                            l222 02D9                              l126 053B                              l231 0349  
                            l223 0329                              l127 0554                              l128 055D  
                            l137 05D0                              l252 04A4                              l244 0467  
                            l228 033F                              l255 04C1                              l247 0488  
                            l256 04BF                              l257 04BE                              l249 0478  
                            l186 0798                              u834 042B                              u835 042A  
                            u944 04B6                              u945 04B5                     __CFG_IDLOC0$ 0000  
                   __CFG_IDLOC1$ 0007                     __CFG_IDLOC2$ 0000                     __CFG_IDLOC3$ 0007  
                   __CFG_BORV$LO 0000                              wreg 0009                      main@chn_301 005E  
                    main@chn_302 005F                      main@chn_303 0060                      main@cellNum 005C  
       ??_Init_TxStatusFromFlash 0070                     __CFG_LVP$OFF 0000                  ?_KeyLongHandler 007B  
                           l2041 0545                             l1503 047F                             l1415 03DD  
                           l1601 029A                             l1443 0439                             l1435 0433  
                           l1453 0416                             l1381 034A                             l1519 04A1  
                           l1455 0440                             l1375 0341                             l1615 01ED  
                           l1703 04D1                             l1393 035C                             l1563 021A  
                           l1635 01CD                             l1811 0581                             l1803 0560  
                           l1731 051A                             l1637 01D3                             l1813 058F  
                           l1733 04F3                             l1399 0373                             l1647 02D7  
                           l1903 0693                             l1585 0263                             l1921 06E2  
                           l1841 05D3                             l1833 05BF                             l1499 047A  
                           l1915 06B8                             l1835 05CE                             l1819 0598  
                           l1755 0513                             l1739 04FD                             l1925 06E9  
                           l1909 06A8                             l1917 06C6                             l1941 072B  
                           l1773 0529                             l1749 0509                             l1935 071B  
                           l1927 06F5                             l1943 0739                             l1919 06D6  
                           l1871 062E                             l1791 0552                             l1775 0530  
                           l1767 0520                             l1953 0762                             l1929 0701  
                           l1881 0644                             l1873 062F                             l1865 061D  
                           l1769 0521                             l1971 0745                             l1891 0668  
                           l1883 064E                             l1867 062C                             l1947 073B  
                           l1779 0536                             l1787 053C                             l1981 07A8  
                           l1789 0550                             l1975 0760                             l1887 0655  
                           l1889 065E                             _LATA 010C                             _LATC 010E  
                           u1607 05F7                             u1617 07A0                             u1627 01F7  
                           u1637 0206                             u1647 045B                             _TMR0 0015  
                           _WPUA 020C                             _Keys 002B                     _startaddress 0020  
                   __CFG_WRT$OFF 0000                             _Type 07C0                             _main 04C5  
                __end_of_RF_Init 032B                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E     noolite_send@noo_send_command 0070  
                           start 0001              __end_of_FlashUnlock 015B                    __CFG_MCLRE$ON 0000  
                __end_of_Init_IO 0185                    __CFG_LPBOR$ON 0000                            ?_main 0070  
                     _FlashWrite 0185                            _PORTA 000C                            _TRISA 008C  
                          _TRISC 008E                    __CFG_PWRTE$ON 0000                  ??_KeyOffHandler 007D  
        __p_system_settings_text 07EE                     _Type_absaddr 07C0                            status 0003  
                          wtemp0 007E                  __initialization 07E0                     __end_of_Type 07D0  
                   __end_of_main 07C0                 __end_of_Init_CLK 0175                           ??_main 0056  
               _TxStatus_absaddr 07D0                 __end_of_TxStatus 07E0  __size_of_Init_TxStatusFromFlash 0087  
                      ??_RF_Init 0070                           _ANSELA 018C                           _ANSELC 018E  
     __end_of_Init_TypeFromFlash 01AC                      _FlashUnlock 0155                           _PMADRH 0192  
                         _PMADRL 0191                           _PMDATH 0194                           _PMDATL 0193  
                         _PMCON2 0196                           _TMR0IE 005D                           _TMR0IF 005A  
                   __p_Type_text 07C0                        ??_Init_IO 0070                   __CFG_STVREN$ON 0000  
                _system_settings 07EE             noolite_send@countbit 0050            __end_of_FlashEraseRow 0168  
                    ?_FlashWrite 0070                  noolite_send@chn 0051             noolite_send@startpos 004F  
        __end_of__initialization 07E6    Init_TxStatusFromFlash@cellNum 0074                   main@adrToWrite 005A  
                 __pcstackCOMMON 0070           _Init_TxStatusFromFlash 0219                 ??_KeyLongHandler 007E  
                 _OPTION_REGbits 0095                       __pbssBANK0 0020                        ?_Init_CLK 0070  
        __end_of_system_settings 07FF              __size_of_FlashWrite 0013                       __pmaintext 04C5  
                        _RF_Init 02A0             FlashEraseRow@rowAddr 0070                       ??_Init_CLK 0070  
                        _DevMode 0026                          _DevType 0027                          _Init_IO 0175  
                  ?_noolite_send 0070                          __ptext1 02A0                          __ptext2 01D9  
                        __ptext3 01AC                          __ptext4 032B                          __ptext5 0198  
                        __ptext6 0219                          __ptext7 0175                          __ptext8 0168  
                        __ptext9 0185            noolite_send@countsend 0052                          main@chn 005D  
          __end_of_KeyOffHandler 0219                          clrloop0 07E9             end_of_initialization 07E6  
                   ?_FlashUnlock 0070                 noolite_send@data 0072            noolite_send@temp_send 0053  
                 FlashWrite@addr 0070               _Init_TypeFromFlash 0198                   ??_noolite_send 0073  
            ?_Init_TypeFromFlash 0070                     ??_FlashWrite 0074                 __CFG_FOSC$INTOSC 0000  
           ??_Init_TypeFromFlash 0070          ?_Init_TxStatusFromFlash 0070               __end_of_FlashWrite 0198  
            start_initialization 07E0   __end_of_Init_TxStatusFromFlash 02A0                __size_of_Init_CLK 000D  
         __size_of_FlashEraseRow 000D                 __p_TxStatus_text 07D0                        ___latbits 0000  
                  __pcstackBANK0 0043                         ?_RF_Init 0070             __end_of_noolite_send 04C5  
           __size_of_FlashUnlock 0006                         ?_Init_IO 0070                    _noo_send_data 003F  
                  _FlashEraseRow 015B                 __CFG_WDTE$SWDTEN 0000          __size_of_KeyLongHandler 002D  
                       _LATAbits 010C                         _LATCbits 010E                        clear_ram0 07E8  
               KeyOffHandler@cmd 007C                 KeyOffHandler@chn 007B                 KeyOffHandler@key 0055  
    noolite_send@noo_send_buffer 0043      noolite_send@noo_send_format 0071                   ?_FlashEraseRow 0070  
                      _tx_status 002A                 __size_of_RF_Init 008B                         _Init_CLK 0168  
                   _SkipHandling 0025                 _noo_address_type 0024                 __size_of_Init_IO 0010  
             noolite_send@endpos 0054                         _TxStatus 07D0           __size_of_KeyOffHandler 0040  
          __size_of_noolite_send 019A                         __ptext10 015B                         __ptext11 0155  
                    _tick3_100ms 0028                    __size_of_main 02FB      __size_of_Init_TypeFromFlash 0014  
                ??_FlashEraseRow 0072                     _noolite_send 032B                      _OSCSTATbits 009A  
                     _INTCONbits 000B                __CFG_BOREN$NSLEEP 0000                    _KeyOffHandler 01D9  
                 _KeyLongHandler 01AC     KeyLongHandler@ticksToTrigger 007D                       _PMCON1bits 0195  
           FlashWrite@flash_data 0072                __CFG_CLKOUTEN$OFF 0000               _LedPulseTick_100ms 0029  
                     _OSCCONbits 0099                KeyLongHandler@cmd 007C                KeyLongHandler@chn 007B  
                     _OPTION_REG 0095                KeyLongHandler@key 0055                       _WDTCONbits 0097  
         __end_of_KeyLongHandler 01D9                   ?_KeyOffHandler 007B                    ??_FlashUnlock 0070  
        _system_settings_absaddr 07EE  
